

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Jul 17 13:32:41 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	cinit,global,class=CODE,merge=1,delta=2
    23                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    29                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    30                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    31                           	psect	inittext,global,class=CODE,delta=2
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    35                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    36                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    37                           	psect	text1,local,class=CODE,merge=1,delta=2
    38                           	psect	text2,local,class=CODE,merge=1,delta=2
    39                           	psect	text3,local,class=CODE,merge=1,delta=2
    40                           	psect	text4,local,class=CODE,merge=1,delta=2
    41                           	psect	text5,local,class=CODE,merge=1,delta=2
    42                           	psect	text6,local,class=CODE,merge=1,delta=2
    43                           	psect	text7,local,class=CODE,merge=1,delta=2
    44                           	psect	text8,local,class=CODE,merge=1,delta=2
    45                           	psect	text9,local,class=CODE,merge=1,delta=2
    46                           	psect	text10,local,class=CODE,merge=1,delta=2
    47                           	psect	text11,local,class=CODE,merge=1,delta=2
    48                           	psect	text12,local,class=CODE,merge=1,delta=2
    49                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text14,local,class=CODE,merge=1,delta=2
    51                           	psect	text15,local,class=CODE,merge=1,delta=2
    52                           	psect	text16,local,class=CODE,merge=1,delta=2
    53                           	psect	text17,local,class=CODE,merge=1,delta=2
    54                           	psect	text18,local,class=CODE,merge=1,delta=2
    55                           	psect	text19,local,class=CODE,merge=1,delta=2
    56                           	psect	text20,local,class=CODE,merge=1,delta=2
    57                           	psect	text21,local,class=CODE,merge=1,delta=2
    58                           	psect	text22,local,class=CODE,merge=1,delta=2
    59                           	psect	text23,local,class=CODE,merge=1,delta=2
    60                           	psect	text24,local,class=CODE,merge=1,delta=2
    61                           	psect	text25,local,class=CODE,merge=1,delta=2
    62                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text27,local,class=CODE,merge=1,delta=2
    64                           	psect	text28,local,class=CODE,merge=1,delta=2
    65                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text30,local,class=CODE,merge=1,delta=2
    67                           	psect	text31,local,class=CODE,merge=1,delta=2
    68                           	psect	text32,local,class=CODE,merge=1,delta=2
    69                           	psect	text33,local,class=CODE,merge=1,delta=2
    70                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text36,local,class=CODE,merge=1,delta=2
    73                           	psect	text37,local,class=CODE,merge=1,delta=2
    74                           	psect	text38,local,class=CODE,merge=1,delta=2
    75                           	psect	text39,local,class=CODE,merge=1,delta=2
    76                           	psect	text40,local,class=CODE,merge=1,delta=2
    77                           	psect	text41,local,class=CODE,merge=1,delta=2
    78                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text43,local,class=CODE,merge=1,delta=2
    80                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text45,local,class=CODE,merge=1,delta=2
    82                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text50,local,class=CODE,merge=1,delta=2
    87                           	psect	text51,local,class=CODE,merge=1,delta=2
    88                           	psect	text52,local,class=CODE,merge=1,delta=2
    89                           	psect	text53,local,class=CODE,merge=1,delta=2
    90                           	psect	text54,local,class=CODE,merge=1,delta=2
    91                           	psect	text55,local,class=CODE,merge=1,delta=2
    92                           	psect	text56,local,class=CODE,merge=1,delta=2
    93                           	psect	text57,local,class=CODE,merge=1,delta=2
    94                           	psect	text58,local,class=CODE,merge=1,delta=2
    95                           	psect	text59,local,class=CODE,merge=1,delta=2
    96                           	psect	text60,local,class=CODE,merge=1,delta=2
    97                           	psect	text61,local,class=CODE,merge=1,delta=2
    98                           	psect	text62,local,class=CODE,merge=1,delta=2
    99                           	psect	text63,local,class=CODE,merge=1,delta=2
   100                           	psect	text64,local,class=CODE,merge=1,delta=2
   101                           	psect	text65,local,class=CODE,merge=1,delta=2
   102                           	psect	text66,local,class=CODE,merge=1,delta=2
   103                           	psect	text67,local,class=CODE,merge=1,delta=2
   104                           	psect	text68,local,class=CODE,merge=1,delta=2
   105                           	psect	text69,local,class=CODE,merge=1,delta=2
   106                           	psect	text70,local,class=CODE,merge=1,delta=2,group=1
   107                           	psect	text71,local,class=CODE,merge=1,delta=2
   108                           	psect	text72,local,class=CODE,merge=1,delta=2
   109                           	psect	text73,local,class=CODE,merge=1,delta=2
   110                           	psect	text74,local,class=CODE,merge=1,delta=2
   111                           	psect	text75,local,class=CODE,merge=1,delta=2
   112                           	psect	text76,local,class=CODE,merge=1,delta=2
   113                           	psect	text77,local,class=CODE,merge=1,delta=2
   114                           	psect	text78,local,class=CODE,merge=1,delta=2,group=2
   115                           	psect	text79,local,class=CODE,merge=1,delta=2
   116                           	psect	text80,local,class=CODE,merge=1,delta=2
   117                           	psect	text81,local,class=CODE,merge=1,delta=2
   118                           	psect	text82,local,class=CODE,merge=1,delta=2
   119                           	psect	text83,local,class=CODE,merge=1,delta=2,group=2
   120                           	psect	text84,local,class=CODE,merge=1,delta=2,group=2
   121                           	psect	text85,local,class=CODE,merge=1,delta=2,group=2
   122                           	psect	text86,local,class=CODE,merge=1,delta=2
   123                           	psect	text87,local,class=CODE,merge=1,delta=2
   124                           	psect	text88,local,class=CODE,merge=1,delta=2
   125                           	psect	text89,local,class=CODE,merge=1,delta=2
   126                           	psect	text90,local,class=CODE,merge=1,delta=2
   127                           	psect	text91,local,class=CODE,merge=1,delta=2
   128                           	psect	text92,local,class=CODE,merge=1,delta=2
   129                           	psect	text93,local,class=CODE,merge=1,delta=2
   130                           	psect	text94,local,class=CODE,merge=1,delta=2
   131                           	psect	text95,local,class=CODE,merge=1,delta=2
   132                           	psect	intentry,global,class=CODE,delta=2
   133                           	psect	text97,local,class=CODE,merge=1,delta=2
   134                           	psect	text98,local,class=CODE,merge=1,delta=2
   135                           	psect	text99,local,class=CODE,merge=1,delta=2
   136                           	psect	text100,local,class=CODE,merge=1,delta=2
   137                           	psect	text101,local,class=CODE,merge=1,delta=2
   138                           	psect	text102,local,class=CODE,merge=1,delta=2
   139                           	dabs	1,0x7E,2
   140  0000                     
   141                           ; Version 2.05
   142                           ; Generated 20/12/2018 GMT
   143                           ; 
   144                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   145                           ; All rights reserved.
   146                           ; 
   147                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   148                           ; 
   149                           ; Redistribution and use in source and binary forms, with or without modification, are
   150                           ; permitted provided that the following conditions are met:
   151                           ; 
   152                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   153                           ;        conditions and the following disclaimer.
   154                           ; 
   155                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   156                           ;        of conditions and the following disclaimer in the documentation and/or other
   157                           ;        materials provided with the distribution.
   158                           ; 
   159                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   160                           ;        software without specific prior written permission.
   161                           ; 
   162                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   163                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   164                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   165                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   166                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   167                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   168                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   169                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   170                           ; 
   171                           ; 
   172                           ; Code-generator required, PIC16LF1559 Definitions
   173                           ; 
   174                           ; SFR Addresses
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0015                     	;# 
   193  0016                     	;# 
   194  0016                     	;# 
   195  0017                     	;# 
   196  0018                     	;# 
   197  0019                     	;# 
   198  001A                     	;# 
   199  001B                     	;# 
   200  001C                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  009F                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  011D                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  018E                     	;# 
   226  0191                     	;# 
   227  0191                     	;# 
   228  0192                     	;# 
   229  0193                     	;# 
   230  0193                     	;# 
   231  0194                     	;# 
   232  0195                     	;# 
   233  0196                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019C                     	;# 
   239  019D                     	;# 
   240  019E                     	;# 
   241  019F                     	;# 
   242  020C                     	;# 
   243  020D                     	;# 
   244  0211                     	;# 
   245  0211                     	;# 
   246  0212                     	;# 
   247  0212                     	;# 
   248  0213                     	;# 
   249  0213                     	;# 
   250  0214                     	;# 
   251  0214                     	;# 
   252  0215                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0216                     	;# 
   256  0216                     	;# 
   257  0217                     	;# 
   258  0217                     	;# 
   259  0391                     	;# 
   260  0392                     	;# 
   261  0393                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  0611                     	;# 
   266  0612                     	;# 
   267  0613                     	;# 
   268  0613                     	;# 
   269  0614                     	;# 
   270  0615                     	;# 
   271  0616                     	;# 
   272  0616                     	;# 
   273  0711                     	;# 
   274  0711                     	;# 
   275  0711                     	;# 
   276  0712                     	;# 
   277  0712                     	;# 
   278  0713                     	;# 
   279  0713                     	;# 
   280  0713                     	;# 
   281  0714                     	;# 
   282  0714                     	;# 
   283  0714                     	;# 
   284  0715                     	;# 
   285  0715                     	;# 
   286  0716                     	;# 
   287  0716                     	;# 
   288  0716                     	;# 
   289  0716                     	;# 
   290  0717                     	;# 
   291  0717                     	;# 
   292  0717                     	;# 
   293  0717                     	;# 
   294  0718                     	;# 
   295  0718                     	;# 
   296  0718                     	;# 
   297  0719                     	;# 
   298  0719                     	;# 
   299  0719                     	;# 
   300  0719                     	;# 
   301  071A                     	;# 
   302  071A                     	;# 
   303  071A                     	;# 
   304  071A                     	;# 
   305  071A                     	;# 
   306  071B                     	;# 
   307  071B                     	;# 
   308  071C                     	;# 
   309  071C                     	;# 
   310  071C                     	;# 
   311  071C                     	;# 
   312  071C                     	;# 
   313  071D                     	;# 
   314  071D                     	;# 
   315  071E                     	;# 
   316  071E                     	;# 
   317  0791                     	;# 
   318  0791                     	;# 
   319  0793                     	;# 
   320  0793                     	;# 
   321  0794                     	;# 
   322  0794                     	;# 
   323  0796                     	;# 
   324  0796                     	;# 
   325  0796                     	;# 
   326  0797                     	;# 
   327  0797                     	;# 
   328  0797                     	;# 
   329  0798                     	;# 
   330  0798                     	;# 
   331  0799                     	;# 
   332  0799                     	;# 
   333  0799                     	;# 
   334  079A                     	;# 
   335  079A                     	;# 
   336  079A                     	;# 
   337  079B                     	;# 
   338  079C                     	;# 
   339  079C                     	;# 
   340  079C                     	;# 
   341  079D                     	;# 
   342  079E                     	;# 
   343  079E                     	;# 
   344  0F8C                     	;# 
   345  0F8D                     	;# 
   346  0F91                     	;# 
   347  0F96                     	;# 
   348  0F97                     	;# 
   349  0F9C                     	;# 
   350  0F9D                     	;# 
   351  0F9E                     	;# 
   352  0FE3                     	;# 
   353  0FE4                     	;# 
   354  0FE5                     	;# 
   355  0FE6                     	;# 
   356  0FE7                     	;# 
   357  0FE8                     	;# 
   358  0FE9                     	;# 
   359  0FEA                     	;# 
   360  0FEB                     	;# 
   361  0FED                     	;# 
   362  0FEE                     	;# 
   363  0FEF                     	;# 
   364  0000                     	;# 
   365  0001                     	;# 
   366  0002                     	;# 
   367  0003                     	;# 
   368  0004                     	;# 
   369  0005                     	;# 
   370  0006                     	;# 
   371  0007                     	;# 
   372  0008                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  0011                     	;# 
   380  0012                     	;# 
   381  0015                     	;# 
   382  0016                     	;# 
   383  0016                     	;# 
   384  0017                     	;# 
   385  0018                     	;# 
   386  0019                     	;# 
   387  001A                     	;# 
   388  001B                     	;# 
   389  001C                     	;# 
   390  008C                     	;# 
   391  008D                     	;# 
   392  008E                     	;# 
   393  0091                     	;# 
   394  0092                     	;# 
   395  0095                     	;# 
   396  0096                     	;# 
   397  0097                     	;# 
   398  0099                     	;# 
   399  009A                     	;# 
   400  009B                     	;# 
   401  009B                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  009F                     	;# 
   406  010C                     	;# 
   407  010D                     	;# 
   408  010E                     	;# 
   409  0116                     	;# 
   410  0117                     	;# 
   411  011D                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  018E                     	;# 
   415  0191                     	;# 
   416  0191                     	;# 
   417  0192                     	;# 
   418  0193                     	;# 
   419  0193                     	;# 
   420  0194                     	;# 
   421  0195                     	;# 
   422  0196                     	;# 
   423  0199                     	;# 
   424  019A                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019C                     	;# 
   428  019D                     	;# 
   429  019E                     	;# 
   430  019F                     	;# 
   431  020C                     	;# 
   432  020D                     	;# 
   433  0211                     	;# 
   434  0211                     	;# 
   435  0212                     	;# 
   436  0212                     	;# 
   437  0213                     	;# 
   438  0213                     	;# 
   439  0214                     	;# 
   440  0214                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0216                     	;# 
   445  0216                     	;# 
   446  0217                     	;# 
   447  0217                     	;# 
   448  0391                     	;# 
   449  0392                     	;# 
   450  0393                     	;# 
   451  0394                     	;# 
   452  0395                     	;# 
   453  0396                     	;# 
   454  0611                     	;# 
   455  0612                     	;# 
   456  0613                     	;# 
   457  0613                     	;# 
   458  0614                     	;# 
   459  0615                     	;# 
   460  0616                     	;# 
   461  0616                     	;# 
   462  0711                     	;# 
   463  0711                     	;# 
   464  0711                     	;# 
   465  0712                     	;# 
   466  0712                     	;# 
   467  0713                     	;# 
   468  0713                     	;# 
   469  0713                     	;# 
   470  0714                     	;# 
   471  0714                     	;# 
   472  0714                     	;# 
   473  0715                     	;# 
   474  0715                     	;# 
   475  0716                     	;# 
   476  0716                     	;# 
   477  0716                     	;# 
   478  0716                     	;# 
   479  0717                     	;# 
   480  0717                     	;# 
   481  0717                     	;# 
   482  0717                     	;# 
   483  0718                     	;# 
   484  0718                     	;# 
   485  0718                     	;# 
   486  0719                     	;# 
   487  0719                     	;# 
   488  0719                     	;# 
   489  0719                     	;# 
   490  071A                     	;# 
   491  071A                     	;# 
   492  071A                     	;# 
   493  071A                     	;# 
   494  071A                     	;# 
   495  071B                     	;# 
   496  071B                     	;# 
   497  071C                     	;# 
   498  071C                     	;# 
   499  071C                     	;# 
   500  071C                     	;# 
   501  071C                     	;# 
   502  071D                     	;# 
   503  071D                     	;# 
   504  071E                     	;# 
   505  071E                     	;# 
   506  0791                     	;# 
   507  0791                     	;# 
   508  0793                     	;# 
   509  0793                     	;# 
   510  0794                     	;# 
   511  0794                     	;# 
   512  0796                     	;# 
   513  0796                     	;# 
   514  0796                     	;# 
   515  0797                     	;# 
   516  0797                     	;# 
   517  0797                     	;# 
   518  0798                     	;# 
   519  0798                     	;# 
   520  0799                     	;# 
   521  0799                     	;# 
   522  0799                     	;# 
   523  079A                     	;# 
   524  079A                     	;# 
   525  079A                     	;# 
   526  079B                     	;# 
   527  079C                     	;# 
   528  079C                     	;# 
   529  079C                     	;# 
   530  079D                     	;# 
   531  079E                     	;# 
   532  079E                     	;# 
   533  0F8C                     	;# 
   534  0F8D                     	;# 
   535  0F91                     	;# 
   536  0F96                     	;# 
   537  0F97                     	;# 
   538  0F9C                     	;# 
   539  0F9D                     	;# 
   540  0F9E                     	;# 
   541  0FE3                     	;# 
   542  0FE4                     	;# 
   543  0FE5                     	;# 
   544  0FE6                     	;# 
   545  0FE7                     	;# 
   546  0FE8                     	;# 
   547  0FE9                     	;# 
   548  0FEA                     	;# 
   549  0FEB                     	;# 
   550  0FED                     	;# 
   551  0FEE                     	;# 
   552  0FEF                     	;# 
   553  0000                     	;# 
   554  0001                     	;# 
   555  0002                     	;# 
   556  0003                     	;# 
   557  0004                     	;# 
   558  0005                     	;# 
   559  0006                     	;# 
   560  0007                     	;# 
   561  0008                     	;# 
   562  0009                     	;# 
   563  000A                     	;# 
   564  000B                     	;# 
   565  000C                     	;# 
   566  000D                     	;# 
   567  000E                     	;# 
   568  0011                     	;# 
   569  0012                     	;# 
   570  0015                     	;# 
   571  0016                     	;# 
   572  0016                     	;# 
   573  0017                     	;# 
   574  0018                     	;# 
   575  0019                     	;# 
   576  001A                     	;# 
   577  001B                     	;# 
   578  001C                     	;# 
   579  008C                     	;# 
   580  008D                     	;# 
   581  008E                     	;# 
   582  0091                     	;# 
   583  0092                     	;# 
   584  0095                     	;# 
   585  0096                     	;# 
   586  0097                     	;# 
   587  0099                     	;# 
   588  009A                     	;# 
   589  009B                     	;# 
   590  009B                     	;# 
   591  009C                     	;# 
   592  009D                     	;# 
   593  009E                     	;# 
   594  009F                     	;# 
   595  010C                     	;# 
   596  010D                     	;# 
   597  010E                     	;# 
   598  0116                     	;# 
   599  0117                     	;# 
   600  011D                     	;# 
   601  018C                     	;# 
   602  018D                     	;# 
   603  018E                     	;# 
   604  0191                     	;# 
   605  0191                     	;# 
   606  0192                     	;# 
   607  0193                     	;# 
   608  0193                     	;# 
   609  0194                     	;# 
   610  0195                     	;# 
   611  0196                     	;# 
   612  0199                     	;# 
   613  019A                     	;# 
   614  019B                     	;# 
   615  019B                     	;# 
   616  019C                     	;# 
   617  019D                     	;# 
   618  019E                     	;# 
   619  019F                     	;# 
   620  020C                     	;# 
   621  020D                     	;# 
   622  0211                     	;# 
   623  0211                     	;# 
   624  0212                     	;# 
   625  0212                     	;# 
   626  0213                     	;# 
   627  0213                     	;# 
   628  0214                     	;# 
   629  0214                     	;# 
   630  0215                     	;# 
   631  0215                     	;# 
   632  0215                     	;# 
   633  0216                     	;# 
   634  0216                     	;# 
   635  0217                     	;# 
   636  0217                     	;# 
   637  0391                     	;# 
   638  0392                     	;# 
   639  0393                     	;# 
   640  0394                     	;# 
   641  0395                     	;# 
   642  0396                     	;# 
   643  0611                     	;# 
   644  0612                     	;# 
   645  0613                     	;# 
   646  0613                     	;# 
   647  0614                     	;# 
   648  0615                     	;# 
   649  0616                     	;# 
   650  0616                     	;# 
   651  0711                     	;# 
   652  0711                     	;# 
   653  0711                     	;# 
   654  0712                     	;# 
   655  0712                     	;# 
   656  0713                     	;# 
   657  0713                     	;# 
   658  0713                     	;# 
   659  0714                     	;# 
   660  0714                     	;# 
   661  0714                     	;# 
   662  0715                     	;# 
   663  0715                     	;# 
   664  0716                     	;# 
   665  0716                     	;# 
   666  0716                     	;# 
   667  0716                     	;# 
   668  0717                     	;# 
   669  0717                     	;# 
   670  0717                     	;# 
   671  0717                     	;# 
   672  0718                     	;# 
   673  0718                     	;# 
   674  0718                     	;# 
   675  0719                     	;# 
   676  0719                     	;# 
   677  0719                     	;# 
   678  0719                     	;# 
   679  071A                     	;# 
   680  071A                     	;# 
   681  071A                     	;# 
   682  071A                     	;# 
   683  071A                     	;# 
   684  071B                     	;# 
   685  071B                     	;# 
   686  071C                     	;# 
   687  071C                     	;# 
   688  071C                     	;# 
   689  071C                     	;# 
   690  071C                     	;# 
   691  071D                     	;# 
   692  071D                     	;# 
   693  071E                     	;# 
   694  071E                     	;# 
   695  0791                     	;# 
   696  0791                     	;# 
   697  0793                     	;# 
   698  0793                     	;# 
   699  0794                     	;# 
   700  0794                     	;# 
   701  0796                     	;# 
   702  0796                     	;# 
   703  0796                     	;# 
   704  0797                     	;# 
   705  0797                     	;# 
   706  0797                     	;# 
   707  0798                     	;# 
   708  0798                     	;# 
   709  0799                     	;# 
   710  0799                     	;# 
   711  0799                     	;# 
   712  079A                     	;# 
   713  079A                     	;# 
   714  079A                     	;# 
   715  079B                     	;# 
   716  079C                     	;# 
   717  079C                     	;# 
   718  079C                     	;# 
   719  079D                     	;# 
   720  079E                     	;# 
   721  079E                     	;# 
   722  0F8C                     	;# 
   723  0F8D                     	;# 
   724  0F91                     	;# 
   725  0F96                     	;# 
   726  0F97                     	;# 
   727  0F9C                     	;# 
   728  0F9D                     	;# 
   729  0F9E                     	;# 
   730  0FE3                     	;# 
   731  0FE4                     	;# 
   732  0FE5                     	;# 
   733  0FE6                     	;# 
   734  0FE7                     	;# 
   735  0FE8                     	;# 
   736  0FE9                     	;# 
   737  0FEA                     	;# 
   738  0FEB                     	;# 
   739  0FED                     	;# 
   740  0FEE                     	;# 
   741  0FEF                     	;# 
   742  0000                     	;# 
   743  0001                     	;# 
   744  0002                     	;# 
   745  0003                     	;# 
   746  0004                     	;# 
   747  0005                     	;# 
   748  0006                     	;# 
   749  0007                     	;# 
   750  0008                     	;# 
   751  0009                     	;# 
   752  000A                     	;# 
   753  000B                     	;# 
   754  000C                     	;# 
   755  000D                     	;# 
   756  000E                     	;# 
   757  0011                     	;# 
   758  0012                     	;# 
   759  0015                     	;# 
   760  0016                     	;# 
   761  0016                     	;# 
   762  0017                     	;# 
   763  0018                     	;# 
   764  0019                     	;# 
   765  001A                     	;# 
   766  001B                     	;# 
   767  001C                     	;# 
   768  008C                     	;# 
   769  008D                     	;# 
   770  008E                     	;# 
   771  0091                     	;# 
   772  0092                     	;# 
   773  0095                     	;# 
   774  0096                     	;# 
   775  0097                     	;# 
   776  0099                     	;# 
   777  009A                     	;# 
   778  009B                     	;# 
   779  009B                     	;# 
   780  009C                     	;# 
   781  009D                     	;# 
   782  009E                     	;# 
   783  009F                     	;# 
   784  010C                     	;# 
   785  010D                     	;# 
   786  010E                     	;# 
   787  0116                     	;# 
   788  0117                     	;# 
   789  011D                     	;# 
   790  018C                     	;# 
   791  018D                     	;# 
   792  018E                     	;# 
   793  0191                     	;# 
   794  0191                     	;# 
   795  0192                     	;# 
   796  0193                     	;# 
   797  0193                     	;# 
   798  0194                     	;# 
   799  0195                     	;# 
   800  0196                     	;# 
   801  0199                     	;# 
   802  019A                     	;# 
   803  019B                     	;# 
   804  019B                     	;# 
   805  019C                     	;# 
   806  019D                     	;# 
   807  019E                     	;# 
   808  019F                     	;# 
   809  020C                     	;# 
   810  020D                     	;# 
   811  0211                     	;# 
   812  0211                     	;# 
   813  0212                     	;# 
   814  0212                     	;# 
   815  0213                     	;# 
   816  0213                     	;# 
   817  0214                     	;# 
   818  0214                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0216                     	;# 
   823  0216                     	;# 
   824  0217                     	;# 
   825  0217                     	;# 
   826  0391                     	;# 
   827  0392                     	;# 
   828  0393                     	;# 
   829  0394                     	;# 
   830  0395                     	;# 
   831  0396                     	;# 
   832  0611                     	;# 
   833  0612                     	;# 
   834  0613                     	;# 
   835  0613                     	;# 
   836  0614                     	;# 
   837  0615                     	;# 
   838  0616                     	;# 
   839  0616                     	;# 
   840  0711                     	;# 
   841  0711                     	;# 
   842  0711                     	;# 
   843  0712                     	;# 
   844  0712                     	;# 
   845  0713                     	;# 
   846  0713                     	;# 
   847  0713                     	;# 
   848  0714                     	;# 
   849  0714                     	;# 
   850  0714                     	;# 
   851  0715                     	;# 
   852  0715                     	;# 
   853  0716                     	;# 
   854  0716                     	;# 
   855  0716                     	;# 
   856  0716                     	;# 
   857  0717                     	;# 
   858  0717                     	;# 
   859  0717                     	;# 
   860  0717                     	;# 
   861  0718                     	;# 
   862  0718                     	;# 
   863  0718                     	;# 
   864  0719                     	;# 
   865  0719                     	;# 
   866  0719                     	;# 
   867  0719                     	;# 
   868  071A                     	;# 
   869  071A                     	;# 
   870  071A                     	;# 
   871  071A                     	;# 
   872  071A                     	;# 
   873  071B                     	;# 
   874  071B                     	;# 
   875  071C                     	;# 
   876  071C                     	;# 
   877  071C                     	;# 
   878  071C                     	;# 
   879  071C                     	;# 
   880  071D                     	;# 
   881  071D                     	;# 
   882  071E                     	;# 
   883  071E                     	;# 
   884  0791                     	;# 
   885  0791                     	;# 
   886  0793                     	;# 
   887  0793                     	;# 
   888  0794                     	;# 
   889  0794                     	;# 
   890  0796                     	;# 
   891  0796                     	;# 
   892  0796                     	;# 
   893  0797                     	;# 
   894  0797                     	;# 
   895  0797                     	;# 
   896  0798                     	;# 
   897  0798                     	;# 
   898  0799                     	;# 
   899  0799                     	;# 
   900  0799                     	;# 
   901  079A                     	;# 
   902  079A                     	;# 
   903  079A                     	;# 
   904  079B                     	;# 
   905  079C                     	;# 
   906  079C                     	;# 
   907  079C                     	;# 
   908  079D                     	;# 
   909  079E                     	;# 
   910  079E                     	;# 
   911  0F8C                     	;# 
   912  0F8D                     	;# 
   913  0F91                     	;# 
   914  0F96                     	;# 
   915  0F97                     	;# 
   916  0F9C                     	;# 
   917  0F9D                     	;# 
   918  0F9E                     	;# 
   919  0FE3                     	;# 
   920  0FE4                     	;# 
   921  0FE5                     	;# 
   922  0FE6                     	;# 
   923  0FE7                     	;# 
   924  0FE8                     	;# 
   925  0FE9                     	;# 
   926  0FEA                     	;# 
   927  0FEB                     	;# 
   928  0FED                     	;# 
   929  0FEE                     	;# 
   930  0FEF                     	;# 
   931  0000                     	;# 
   932  0001                     	;# 
   933  0002                     	;# 
   934  0003                     	;# 
   935  0004                     	;# 
   936  0005                     	;# 
   937  0006                     	;# 
   938  0007                     	;# 
   939  0008                     	;# 
   940  0009                     	;# 
   941  000A                     	;# 
   942  000B                     	;# 
   943  000C                     	;# 
   944  000D                     	;# 
   945  000E                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  008C                     	;# 
   958  008D                     	;# 
   959  008E                     	;# 
   960  0091                     	;# 
   961  0092                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0099                     	;# 
   966  009A                     	;# 
   967  009B                     	;# 
   968  009B                     	;# 
   969  009C                     	;# 
   970  009D                     	;# 
   971  009E                     	;# 
   972  009F                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0116                     	;# 
   977  0117                     	;# 
   978  011D                     	;# 
   979  018C                     	;# 
   980  018D                     	;# 
   981  018E                     	;# 
   982  0191                     	;# 
   983  0191                     	;# 
   984  0192                     	;# 
   985  0193                     	;# 
   986  0193                     	;# 
   987  0194                     	;# 
   988  0195                     	;# 
   989  0196                     	;# 
   990  0199                     	;# 
   991  019A                     	;# 
   992  019B                     	;# 
   993  019B                     	;# 
   994  019C                     	;# 
   995  019D                     	;# 
   996  019E                     	;# 
   997  019F                     	;# 
   998  020C                     	;# 
   999  020D                     	;# 
  1000  0211                     	;# 
  1001  0211                     	;# 
  1002  0212                     	;# 
  1003  0212                     	;# 
  1004  0213                     	;# 
  1005  0213                     	;# 
  1006  0214                     	;# 
  1007  0214                     	;# 
  1008  0215                     	;# 
  1009  0215                     	;# 
  1010  0215                     	;# 
  1011  0216                     	;# 
  1012  0216                     	;# 
  1013  0217                     	;# 
  1014  0217                     	;# 
  1015  0391                     	;# 
  1016  0392                     	;# 
  1017  0393                     	;# 
  1018  0394                     	;# 
  1019  0395                     	;# 
  1020  0396                     	;# 
  1021  0611                     	;# 
  1022  0612                     	;# 
  1023  0613                     	;# 
  1024  0613                     	;# 
  1025  0614                     	;# 
  1026  0615                     	;# 
  1027  0616                     	;# 
  1028  0616                     	;# 
  1029  0711                     	;# 
  1030  0711                     	;# 
  1031  0711                     	;# 
  1032  0712                     	;# 
  1033  0712                     	;# 
  1034  0713                     	;# 
  1035  0713                     	;# 
  1036  0713                     	;# 
  1037  0714                     	;# 
  1038  0714                     	;# 
  1039  0714                     	;# 
  1040  0715                     	;# 
  1041  0715                     	;# 
  1042  0716                     	;# 
  1043  0716                     	;# 
  1044  0716                     	;# 
  1045  0716                     	;# 
  1046  0717                     	;# 
  1047  0717                     	;# 
  1048  0717                     	;# 
  1049  0717                     	;# 
  1050  0718                     	;# 
  1051  0718                     	;# 
  1052  0718                     	;# 
  1053  0719                     	;# 
  1054  0719                     	;# 
  1055  0719                     	;# 
  1056  0719                     	;# 
  1057  071A                     	;# 
  1058  071A                     	;# 
  1059  071A                     	;# 
  1060  071A                     	;# 
  1061  071A                     	;# 
  1062  071B                     	;# 
  1063  071B                     	;# 
  1064  071C                     	;# 
  1065  071C                     	;# 
  1066  071C                     	;# 
  1067  071C                     	;# 
  1068  071C                     	;# 
  1069  071D                     	;# 
  1070  071D                     	;# 
  1071  071E                     	;# 
  1072  071E                     	;# 
  1073  0791                     	;# 
  1074  0791                     	;# 
  1075  0793                     	;# 
  1076  0793                     	;# 
  1077  0794                     	;# 
  1078  0794                     	;# 
  1079  0796                     	;# 
  1080  0796                     	;# 
  1081  0796                     	;# 
  1082  0797                     	;# 
  1083  0797                     	;# 
  1084  0797                     	;# 
  1085  0798                     	;# 
  1086  0798                     	;# 
  1087  0799                     	;# 
  1088  0799                     	;# 
  1089  0799                     	;# 
  1090  079A                     	;# 
  1091  079A                     	;# 
  1092  079A                     	;# 
  1093  079B                     	;# 
  1094  079C                     	;# 
  1095  079C                     	;# 
  1096  079C                     	;# 
  1097  079D                     	;# 
  1098  079E                     	;# 
  1099  079E                     	;# 
  1100  0F8C                     	;# 
  1101  0F8D                     	;# 
  1102  0F91                     	;# 
  1103  0F96                     	;# 
  1104  0F97                     	;# 
  1105  0F9C                     	;# 
  1106  0F9D                     	;# 
  1107  0F9E                     	;# 
  1108  0FE3                     	;# 
  1109  0FE4                     	;# 
  1110  0FE5                     	;# 
  1111  0FE6                     	;# 
  1112  0FE7                     	;# 
  1113  0FE8                     	;# 
  1114  0FE9                     	;# 
  1115  0FEA                     	;# 
  1116  0FEB                     	;# 
  1117  0FED                     	;# 
  1118  0FEE                     	;# 
  1119  0FEF                     	;# 
  1120  0000                     	;# 
  1121  0001                     	;# 
  1122  0002                     	;# 
  1123  0003                     	;# 
  1124  0004                     	;# 
  1125  0005                     	;# 
  1126  0006                     	;# 
  1127  0007                     	;# 
  1128  0008                     	;# 
  1129  0009                     	;# 
  1130  000A                     	;# 
  1131  000B                     	;# 
  1132  000C                     	;# 
  1133  000D                     	;# 
  1134  000E                     	;# 
  1135  0011                     	;# 
  1136  0012                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001C                     	;# 
  1146  008C                     	;# 
  1147  008D                     	;# 
  1148  008E                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0095                     	;# 
  1152  0096                     	;# 
  1153  0097                     	;# 
  1154  0099                     	;# 
  1155  009A                     	;# 
  1156  009B                     	;# 
  1157  009B                     	;# 
  1158  009C                     	;# 
  1159  009D                     	;# 
  1160  009E                     	;# 
  1161  009F                     	;# 
  1162  010C                     	;# 
  1163  010D                     	;# 
  1164  010E                     	;# 
  1165  0116                     	;# 
  1166  0117                     	;# 
  1167  011D                     	;# 
  1168  018C                     	;# 
  1169  018D                     	;# 
  1170  018E                     	;# 
  1171  0191                     	;# 
  1172  0191                     	;# 
  1173  0192                     	;# 
  1174  0193                     	;# 
  1175  0193                     	;# 
  1176  0194                     	;# 
  1177  0195                     	;# 
  1178  0196                     	;# 
  1179  0199                     	;# 
  1180  019A                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019C                     	;# 
  1184  019D                     	;# 
  1185  019E                     	;# 
  1186  019F                     	;# 
  1187  020C                     	;# 
  1188  020D                     	;# 
  1189  0211                     	;# 
  1190  0211                     	;# 
  1191  0212                     	;# 
  1192  0212                     	;# 
  1193  0213                     	;# 
  1194  0213                     	;# 
  1195  0214                     	;# 
  1196  0214                     	;# 
  1197  0215                     	;# 
  1198  0215                     	;# 
  1199  0215                     	;# 
  1200  0216                     	;# 
  1201  0216                     	;# 
  1202  0217                     	;# 
  1203  0217                     	;# 
  1204  0391                     	;# 
  1205  0392                     	;# 
  1206  0393                     	;# 
  1207  0394                     	;# 
  1208  0395                     	;# 
  1209  0396                     	;# 
  1210  0611                     	;# 
  1211  0612                     	;# 
  1212  0613                     	;# 
  1213  0613                     	;# 
  1214  0614                     	;# 
  1215  0615                     	;# 
  1216  0616                     	;# 
  1217  0616                     	;# 
  1218  0711                     	;# 
  1219  0711                     	;# 
  1220  0711                     	;# 
  1221  0712                     	;# 
  1222  0712                     	;# 
  1223  0713                     	;# 
  1224  0713                     	;# 
  1225  0713                     	;# 
  1226  0714                     	;# 
  1227  0714                     	;# 
  1228  0714                     	;# 
  1229  0715                     	;# 
  1230  0715                     	;# 
  1231  0716                     	;# 
  1232  0716                     	;# 
  1233  0716                     	;# 
  1234  0716                     	;# 
  1235  0717                     	;# 
  1236  0717                     	;# 
  1237  0717                     	;# 
  1238  0717                     	;# 
  1239  0718                     	;# 
  1240  0718                     	;# 
  1241  0718                     	;# 
  1242  0719                     	;# 
  1243  0719                     	;# 
  1244  0719                     	;# 
  1245  0719                     	;# 
  1246  071A                     	;# 
  1247  071A                     	;# 
  1248  071A                     	;# 
  1249  071A                     	;# 
  1250  071A                     	;# 
  1251  071B                     	;# 
  1252  071B                     	;# 
  1253  071C                     	;# 
  1254  071C                     	;# 
  1255  071C                     	;# 
  1256  071C                     	;# 
  1257  071C                     	;# 
  1258  071D                     	;# 
  1259  071D                     	;# 
  1260  071E                     	;# 
  1261  071E                     	;# 
  1262  0791                     	;# 
  1263  0791                     	;# 
  1264  0793                     	;# 
  1265  0793                     	;# 
  1266  0794                     	;# 
  1267  0794                     	;# 
  1268  0796                     	;# 
  1269  0796                     	;# 
  1270  0796                     	;# 
  1271  0797                     	;# 
  1272  0797                     	;# 
  1273  0797                     	;# 
  1274  0798                     	;# 
  1275  0798                     	;# 
  1276  0799                     	;# 
  1277  0799                     	;# 
  1278  0799                     	;# 
  1279  079A                     	;# 
  1280  079A                     	;# 
  1281  079A                     	;# 
  1282  079B                     	;# 
  1283  079C                     	;# 
  1284  079C                     	;# 
  1285  079C                     	;# 
  1286  079D                     	;# 
  1287  079E                     	;# 
  1288  079E                     	;# 
  1289  0F8C                     	;# 
  1290  0F8D                     	;# 
  1291  0F91                     	;# 
  1292  0F96                     	;# 
  1293  0F97                     	;# 
  1294  0F9C                     	;# 
  1295  0F9D                     	;# 
  1296  0F9E                     	;# 
  1297  0FE3                     	;# 
  1298  0FE4                     	;# 
  1299  0FE5                     	;# 
  1300  0FE6                     	;# 
  1301  0FE7                     	;# 
  1302  0FE8                     	;# 
  1303  0FE9                     	;# 
  1304  0FEA                     	;# 
  1305  0FEB                     	;# 
  1306  0FED                     	;# 
  1307  0FEE                     	;# 
  1308  0FEF                     	;# 
  1309  0000                     	;# 
  1310  0001                     	;# 
  1311  0002                     	;# 
  1312  0003                     	;# 
  1313  0004                     	;# 
  1314  0005                     	;# 
  1315  0006                     	;# 
  1316  0007                     	;# 
  1317  0008                     	;# 
  1318  0009                     	;# 
  1319  000A                     	;# 
  1320  000B                     	;# 
  1321  000C                     	;# 
  1322  000D                     	;# 
  1323  000E                     	;# 
  1324  0011                     	;# 
  1325  0012                     	;# 
  1326  0015                     	;# 
  1327  0016                     	;# 
  1328  0016                     	;# 
  1329  0017                     	;# 
  1330  0018                     	;# 
  1331  0019                     	;# 
  1332  001A                     	;# 
  1333  001B                     	;# 
  1334  001C                     	;# 
  1335  008C                     	;# 
  1336  008D                     	;# 
  1337  008E                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0095                     	;# 
  1341  0096                     	;# 
  1342  0097                     	;# 
  1343  0099                     	;# 
  1344  009A                     	;# 
  1345  009B                     	;# 
  1346  009B                     	;# 
  1347  009C                     	;# 
  1348  009D                     	;# 
  1349  009E                     	;# 
  1350  009F                     	;# 
  1351  010C                     	;# 
  1352  010D                     	;# 
  1353  010E                     	;# 
  1354  0116                     	;# 
  1355  0117                     	;# 
  1356  011D                     	;# 
  1357  018C                     	;# 
  1358  018D                     	;# 
  1359  018E                     	;# 
  1360  0191                     	;# 
  1361  0191                     	;# 
  1362  0192                     	;# 
  1363  0193                     	;# 
  1364  0193                     	;# 
  1365  0194                     	;# 
  1366  0195                     	;# 
  1367  0196                     	;# 
  1368  0199                     	;# 
  1369  019A                     	;# 
  1370  019B                     	;# 
  1371  019B                     	;# 
  1372  019C                     	;# 
  1373  019D                     	;# 
  1374  019E                     	;# 
  1375  019F                     	;# 
  1376  020C                     	;# 
  1377  020D                     	;# 
  1378  0211                     	;# 
  1379  0211                     	;# 
  1380  0212                     	;# 
  1381  0212                     	;# 
  1382  0213                     	;# 
  1383  0213                     	;# 
  1384  0214                     	;# 
  1385  0214                     	;# 
  1386  0215                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0216                     	;# 
  1390  0216                     	;# 
  1391  0217                     	;# 
  1392  0217                     	;# 
  1393  0391                     	;# 
  1394  0392                     	;# 
  1395  0393                     	;# 
  1396  0394                     	;# 
  1397  0395                     	;# 
  1398  0396                     	;# 
  1399  0611                     	;# 
  1400  0612                     	;# 
  1401  0613                     	;# 
  1402  0613                     	;# 
  1403  0614                     	;# 
  1404  0615                     	;# 
  1405  0616                     	;# 
  1406  0616                     	;# 
  1407  0711                     	;# 
  1408  0711                     	;# 
  1409  0711                     	;# 
  1410  0712                     	;# 
  1411  0712                     	;# 
  1412  0713                     	;# 
  1413  0713                     	;# 
  1414  0713                     	;# 
  1415  0714                     	;# 
  1416  0714                     	;# 
  1417  0714                     	;# 
  1418  0715                     	;# 
  1419  0715                     	;# 
  1420  0716                     	;# 
  1421  0716                     	;# 
  1422  0716                     	;# 
  1423  0716                     	;# 
  1424  0717                     	;# 
  1425  0717                     	;# 
  1426  0717                     	;# 
  1427  0717                     	;# 
  1428  0718                     	;# 
  1429  0718                     	;# 
  1430  0718                     	;# 
  1431  0719                     	;# 
  1432  0719                     	;# 
  1433  0719                     	;# 
  1434  0719                     	;# 
  1435  071A                     	;# 
  1436  071A                     	;# 
  1437  071A                     	;# 
  1438  071A                     	;# 
  1439  071A                     	;# 
  1440  071B                     	;# 
  1441  071B                     	;# 
  1442  071C                     	;# 
  1443  071C                     	;# 
  1444  071C                     	;# 
  1445  071C                     	;# 
  1446  071C                     	;# 
  1447  071D                     	;# 
  1448  071D                     	;# 
  1449  071E                     	;# 
  1450  071E                     	;# 
  1451  0791                     	;# 
  1452  0791                     	;# 
  1453  0793                     	;# 
  1454  0793                     	;# 
  1455  0794                     	;# 
  1456  0794                     	;# 
  1457  0796                     	;# 
  1458  0796                     	;# 
  1459  0796                     	;# 
  1460  0797                     	;# 
  1461  0797                     	;# 
  1462  0797                     	;# 
  1463  0798                     	;# 
  1464  0798                     	;# 
  1465  0799                     	;# 
  1466  0799                     	;# 
  1467  0799                     	;# 
  1468  079A                     	;# 
  1469  079A                     	;# 
  1470  079A                     	;# 
  1471  079B                     	;# 
  1472  079C                     	;# 
  1473  079C                     	;# 
  1474  079C                     	;# 
  1475  079D                     	;# 
  1476  079E                     	;# 
  1477  079E                     	;# 
  1478  0F8C                     	;# 
  1479  0F8D                     	;# 
  1480  0F91                     	;# 
  1481  0F96                     	;# 
  1482  0F97                     	;# 
  1483  0F9C                     	;# 
  1484  0F9D                     	;# 
  1485  0F9E                     	;# 
  1486  0FE3                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0011                     	;# 
  1514  0012                     	;# 
  1515  0015                     	;# 
  1516  0016                     	;# 
  1517  0016                     	;# 
  1518  0017                     	;# 
  1519  0018                     	;# 
  1520  0019                     	;# 
  1521  001A                     	;# 
  1522  001B                     	;# 
  1523  001C                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0095                     	;# 
  1530  0096                     	;# 
  1531  0097                     	;# 
  1532  0099                     	;# 
  1533  009A                     	;# 
  1534  009B                     	;# 
  1535  009B                     	;# 
  1536  009C                     	;# 
  1537  009D                     	;# 
  1538  009E                     	;# 
  1539  009F                     	;# 
  1540  010C                     	;# 
  1541  010D                     	;# 
  1542  010E                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  011D                     	;# 
  1546  018C                     	;# 
  1547  018D                     	;# 
  1548  018E                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019C                     	;# 
  1562  019D                     	;# 
  1563  019E                     	;# 
  1564  019F                     	;# 
  1565  020C                     	;# 
  1566  020D                     	;# 
  1567  0211                     	;# 
  1568  0211                     	;# 
  1569  0212                     	;# 
  1570  0212                     	;# 
  1571  0213                     	;# 
  1572  0213                     	;# 
  1573  0214                     	;# 
  1574  0214                     	;# 
  1575  0215                     	;# 
  1576  0215                     	;# 
  1577  0215                     	;# 
  1578  0216                     	;# 
  1579  0216                     	;# 
  1580  0217                     	;# 
  1581  0217                     	;# 
  1582  0391                     	;# 
  1583  0392                     	;# 
  1584  0393                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  0611                     	;# 
  1589  0612                     	;# 
  1590  0613                     	;# 
  1591  0613                     	;# 
  1592  0614                     	;# 
  1593  0615                     	;# 
  1594  0616                     	;# 
  1595  0616                     	;# 
  1596  0711                     	;# 
  1597  0711                     	;# 
  1598  0711                     	;# 
  1599  0712                     	;# 
  1600  0712                     	;# 
  1601  0713                     	;# 
  1602  0713                     	;# 
  1603  0713                     	;# 
  1604  0714                     	;# 
  1605  0714                     	;# 
  1606  0714                     	;# 
  1607  0715                     	;# 
  1608  0715                     	;# 
  1609  0716                     	;# 
  1610  0716                     	;# 
  1611  0716                     	;# 
  1612  0716                     	;# 
  1613  0717                     	;# 
  1614  0717                     	;# 
  1615  0717                     	;# 
  1616  0717                     	;# 
  1617  0718                     	;# 
  1618  0718                     	;# 
  1619  0718                     	;# 
  1620  0719                     	;# 
  1621  0719                     	;# 
  1622  0719                     	;# 
  1623  0719                     	;# 
  1624  071A                     	;# 
  1625  071A                     	;# 
  1626  071A                     	;# 
  1627  071A                     	;# 
  1628  071A                     	;# 
  1629  071B                     	;# 
  1630  071B                     	;# 
  1631  071C                     	;# 
  1632  071C                     	;# 
  1633  071C                     	;# 
  1634  071C                     	;# 
  1635  071C                     	;# 
  1636  071D                     	;# 
  1637  071D                     	;# 
  1638  071E                     	;# 
  1639  071E                     	;# 
  1640  0791                     	;# 
  1641  0791                     	;# 
  1642  0793                     	;# 
  1643  0793                     	;# 
  1644  0794                     	;# 
  1645  0794                     	;# 
  1646  0796                     	;# 
  1647  0796                     	;# 
  1648  0796                     	;# 
  1649  0797                     	;# 
  1650  0797                     	;# 
  1651  0797                     	;# 
  1652  0798                     	;# 
  1653  0798                     	;# 
  1654  0799                     	;# 
  1655  0799                     	;# 
  1656  0799                     	;# 
  1657  079A                     	;# 
  1658  079A                     	;# 
  1659  079A                     	;# 
  1660  079B                     	;# 
  1661  079C                     	;# 
  1662  079C                     	;# 
  1663  079C                     	;# 
  1664  079D                     	;# 
  1665  079E                     	;# 
  1666  079E                     	;# 
  1667  0F8C                     	;# 
  1668  0F8D                     	;# 
  1669  0F91                     	;# 
  1670  0F96                     	;# 
  1671  0F97                     	;# 
  1672  0F9C                     	;# 
  1673  0F9D                     	;# 
  1674  0F9E                     	;# 
  1675  0FE3                     	;# 
  1676  0FE4                     	;# 
  1677  0FE5                     	;# 
  1678  0FE6                     	;# 
  1679  0FE7                     	;# 
  1680  0FE8                     	;# 
  1681  0FE9                     	;# 
  1682  0FEA                     	;# 
  1683  0FEB                     	;# 
  1684  0FED                     	;# 
  1685  0FEE                     	;# 
  1686  0FEF                     	;# 
  1687  0000                     	;# 
  1688  0001                     	;# 
  1689  0002                     	;# 
  1690  0003                     	;# 
  1691  0004                     	;# 
  1692  0005                     	;# 
  1693  0006                     	;# 
  1694  0007                     	;# 
  1695  0008                     	;# 
  1696  0009                     	;# 
  1697  000A                     	;# 
  1698  000B                     	;# 
  1699  000C                     	;# 
  1700  000D                     	;# 
  1701  000E                     	;# 
  1702  0011                     	;# 
  1703  0012                     	;# 
  1704  0015                     	;# 
  1705  0016                     	;# 
  1706  0016                     	;# 
  1707  0017                     	;# 
  1708  0018                     	;# 
  1709  0019                     	;# 
  1710  001A                     	;# 
  1711  001B                     	;# 
  1712  001C                     	;# 
  1713  008C                     	;# 
  1714  008D                     	;# 
  1715  008E                     	;# 
  1716  0091                     	;# 
  1717  0092                     	;# 
  1718  0095                     	;# 
  1719  0096                     	;# 
  1720  0097                     	;# 
  1721  0099                     	;# 
  1722  009A                     	;# 
  1723  009B                     	;# 
  1724  009B                     	;# 
  1725  009C                     	;# 
  1726  009D                     	;# 
  1727  009E                     	;# 
  1728  009F                     	;# 
  1729  010C                     	;# 
  1730  010D                     	;# 
  1731  010E                     	;# 
  1732  0116                     	;# 
  1733  0117                     	;# 
  1734  011D                     	;# 
  1735  018C                     	;# 
  1736  018D                     	;# 
  1737  018E                     	;# 
  1738  0191                     	;# 
  1739  0191                     	;# 
  1740  0192                     	;# 
  1741  0193                     	;# 
  1742  0193                     	;# 
  1743  0194                     	;# 
  1744  0195                     	;# 
  1745  0196                     	;# 
  1746  0199                     	;# 
  1747  019A                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019C                     	;# 
  1751  019D                     	;# 
  1752  019E                     	;# 
  1753  019F                     	;# 
  1754  020C                     	;# 
  1755  020D                     	;# 
  1756  0211                     	;# 
  1757  0211                     	;# 
  1758  0212                     	;# 
  1759  0212                     	;# 
  1760  0213                     	;# 
  1761  0213                     	;# 
  1762  0214                     	;# 
  1763  0214                     	;# 
  1764  0215                     	;# 
  1765  0215                     	;# 
  1766  0215                     	;# 
  1767  0216                     	;# 
  1768  0216                     	;# 
  1769  0217                     	;# 
  1770  0217                     	;# 
  1771  0391                     	;# 
  1772  0392                     	;# 
  1773  0393                     	;# 
  1774  0394                     	;# 
  1775  0395                     	;# 
  1776  0396                     	;# 
  1777  0611                     	;# 
  1778  0612                     	;# 
  1779  0613                     	;# 
  1780  0613                     	;# 
  1781  0614                     	;# 
  1782  0615                     	;# 
  1783  0616                     	;# 
  1784  0616                     	;# 
  1785  0711                     	;# 
  1786  0711                     	;# 
  1787  0711                     	;# 
  1788  0712                     	;# 
  1789  0712                     	;# 
  1790  0713                     	;# 
  1791  0713                     	;# 
  1792  0713                     	;# 
  1793  0714                     	;# 
  1794  0714                     	;# 
  1795  0714                     	;# 
  1796  0715                     	;# 
  1797  0715                     	;# 
  1798  0716                     	;# 
  1799  0716                     	;# 
  1800  0716                     	;# 
  1801  0716                     	;# 
  1802  0717                     	;# 
  1803  0717                     	;# 
  1804  0717                     	;# 
  1805  0717                     	;# 
  1806  0718                     	;# 
  1807  0718                     	;# 
  1808  0718                     	;# 
  1809  0719                     	;# 
  1810  0719                     	;# 
  1811  0719                     	;# 
  1812  0719                     	;# 
  1813  071A                     	;# 
  1814  071A                     	;# 
  1815  071A                     	;# 
  1816  071A                     	;# 
  1817  071A                     	;# 
  1818  071B                     	;# 
  1819  071B                     	;# 
  1820  071C                     	;# 
  1821  071C                     	;# 
  1822  071C                     	;# 
  1823  071C                     	;# 
  1824  071C                     	;# 
  1825  071D                     	;# 
  1826  071D                     	;# 
  1827  071E                     	;# 
  1828  071E                     	;# 
  1829  0791                     	;# 
  1830  0791                     	;# 
  1831  0793                     	;# 
  1832  0793                     	;# 
  1833  0794                     	;# 
  1834  0794                     	;# 
  1835  0796                     	;# 
  1836  0796                     	;# 
  1837  0796                     	;# 
  1838  0797                     	;# 
  1839  0797                     	;# 
  1840  0797                     	;# 
  1841  0798                     	;# 
  1842  0798                     	;# 
  1843  0799                     	;# 
  1844  0799                     	;# 
  1845  0799                     	;# 
  1846  079A                     	;# 
  1847  079A                     	;# 
  1848  079A                     	;# 
  1849  079B                     	;# 
  1850  079C                     	;# 
  1851  079C                     	;# 
  1852  079C                     	;# 
  1853  079D                     	;# 
  1854  079E                     	;# 
  1855  079E                     	;# 
  1856  0F8C                     	;# 
  1857  0F8D                     	;# 
  1858  0F91                     	;# 
  1859  0F96                     	;# 
  1860  0F97                     	;# 
  1861  0F9C                     	;# 
  1862  0F9D                     	;# 
  1863  0F9E                     	;# 
  1864  0FE3                     	;# 
  1865  0FE4                     	;# 
  1866  0FE5                     	;# 
  1867  0FE6                     	;# 
  1868  0FE7                     	;# 
  1869  0FE8                     	;# 
  1870  0FE9                     	;# 
  1871  0FEA                     	;# 
  1872  0FEB                     	;# 
  1873  0FED                     	;# 
  1874  0FEE                     	;# 
  1875  0FEF                     	;# 
  1876  0000                     	;# 
  1877  0001                     	;# 
  1878  0002                     	;# 
  1879  0003                     	;# 
  1880  0004                     	;# 
  1881  0005                     	;# 
  1882  0006                     	;# 
  1883  0007                     	;# 
  1884  0008                     	;# 
  1885  0009                     	;# 
  1886  000A                     	;# 
  1887  000B                     	;# 
  1888  000C                     	;# 
  1889  000D                     	;# 
  1890  000E                     	;# 
  1891  0011                     	;# 
  1892  0012                     	;# 
  1893  0015                     	;# 
  1894  0016                     	;# 
  1895  0016                     	;# 
  1896  0017                     	;# 
  1897  0018                     	;# 
  1898  0019                     	;# 
  1899  001A                     	;# 
  1900  001B                     	;# 
  1901  001C                     	;# 
  1902  008C                     	;# 
  1903  008D                     	;# 
  1904  008E                     	;# 
  1905  0091                     	;# 
  1906  0092                     	;# 
  1907  0095                     	;# 
  1908  0096                     	;# 
  1909  0097                     	;# 
  1910  0099                     	;# 
  1911  009A                     	;# 
  1912  009B                     	;# 
  1913  009B                     	;# 
  1914  009C                     	;# 
  1915  009D                     	;# 
  1916  009E                     	;# 
  1917  009F                     	;# 
  1918  010C                     	;# 
  1919  010D                     	;# 
  1920  010E                     	;# 
  1921  0116                     	;# 
  1922  0117                     	;# 
  1923  011D                     	;# 
  1924  018C                     	;# 
  1925  018D                     	;# 
  1926  018E                     	;# 
  1927  0191                     	;# 
  1928  0191                     	;# 
  1929  0192                     	;# 
  1930  0193                     	;# 
  1931  0193                     	;# 
  1932  0194                     	;# 
  1933  0195                     	;# 
  1934  0196                     	;# 
  1935  0199                     	;# 
  1936  019A                     	;# 
  1937  019B                     	;# 
  1938  019B                     	;# 
  1939  019C                     	;# 
  1940  019D                     	;# 
  1941  019E                     	;# 
  1942  019F                     	;# 
  1943  020C                     	;# 
  1944  020D                     	;# 
  1945  0211                     	;# 
  1946  0211                     	;# 
  1947  0212                     	;# 
  1948  0212                     	;# 
  1949  0213                     	;# 
  1950  0213                     	;# 
  1951  0214                     	;# 
  1952  0214                     	;# 
  1953  0215                     	;# 
  1954  0215                     	;# 
  1955  0215                     	;# 
  1956  0216                     	;# 
  1957  0216                     	;# 
  1958  0217                     	;# 
  1959  0217                     	;# 
  1960  0391                     	;# 
  1961  0392                     	;# 
  1962  0393                     	;# 
  1963  0394                     	;# 
  1964  0395                     	;# 
  1965  0396                     	;# 
  1966  0611                     	;# 
  1967  0612                     	;# 
  1968  0613                     	;# 
  1969  0613                     	;# 
  1970  0614                     	;# 
  1971  0615                     	;# 
  1972  0616                     	;# 
  1973  0616                     	;# 
  1974  0711                     	;# 
  1975  0711                     	;# 
  1976  0711                     	;# 
  1977  0712                     	;# 
  1978  0712                     	;# 
  1979  0713                     	;# 
  1980  0713                     	;# 
  1981  0713                     	;# 
  1982  0714                     	;# 
  1983  0714                     	;# 
  1984  0714                     	;# 
  1985  0715                     	;# 
  1986  0715                     	;# 
  1987  0716                     	;# 
  1988  0716                     	;# 
  1989  0716                     	;# 
  1990  0716                     	;# 
  1991  0717                     	;# 
  1992  0717                     	;# 
  1993  0717                     	;# 
  1994  0717                     	;# 
  1995  0718                     	;# 
  1996  0718                     	;# 
  1997  0718                     	;# 
  1998  0719                     	;# 
  1999  0719                     	;# 
  2000  0719                     	;# 
  2001  0719                     	;# 
  2002  071A                     	;# 
  2003  071A                     	;# 
  2004  071A                     	;# 
  2005  071A                     	;# 
  2006  071A                     	;# 
  2007  071B                     	;# 
  2008  071B                     	;# 
  2009  071C                     	;# 
  2010  071C                     	;# 
  2011  071C                     	;# 
  2012  071C                     	;# 
  2013  071C                     	;# 
  2014  071D                     	;# 
  2015  071D                     	;# 
  2016  071E                     	;# 
  2017  071E                     	;# 
  2018  0791                     	;# 
  2019  0791                     	;# 
  2020  0793                     	;# 
  2021  0793                     	;# 
  2022  0794                     	;# 
  2023  0794                     	;# 
  2024  0796                     	;# 
  2025  0796                     	;# 
  2026  0796                     	;# 
  2027  0797                     	;# 
  2028  0797                     	;# 
  2029  0797                     	;# 
  2030  0798                     	;# 
  2031  0798                     	;# 
  2032  0799                     	;# 
  2033  0799                     	;# 
  2034  0799                     	;# 
  2035  079A                     	;# 
  2036  079A                     	;# 
  2037  079A                     	;# 
  2038  079B                     	;# 
  2039  079C                     	;# 
  2040  079C                     	;# 
  2041  079C                     	;# 
  2042  079D                     	;# 
  2043  079E                     	;# 
  2044  079E                     	;# 
  2045  0F8C                     	;# 
  2046  0F8D                     	;# 
  2047  0F91                     	;# 
  2048  0F96                     	;# 
  2049  0F97                     	;# 
  2050  0F9C                     	;# 
  2051  0F9D                     	;# 
  2052  0F9E                     	;# 
  2053  0FE3                     	;# 
  2054  0FE4                     	;# 
  2055  0FE5                     	;# 
  2056  0FE6                     	;# 
  2057  0FE7                     	;# 
  2058  0FE8                     	;# 
  2059  0FE9                     	;# 
  2060  0FEA                     	;# 
  2061  0FEB                     	;# 
  2062  0FED                     	;# 
  2063  0FEE                     	;# 
  2064  0FEF                     	;# 
  2065  0000                     	;# 
  2066  0001                     	;# 
  2067  0002                     	;# 
  2068  0003                     	;# 
  2069  0004                     	;# 
  2070  0005                     	;# 
  2071  0006                     	;# 
  2072  0007                     	;# 
  2073  0008                     	;# 
  2074  0009                     	;# 
  2075  000A                     	;# 
  2076  000B                     	;# 
  2077  000C                     	;# 
  2078  000D                     	;# 
  2079  000E                     	;# 
  2080  0011                     	;# 
  2081  0012                     	;# 
  2082  0015                     	;# 
  2083  0016                     	;# 
  2084  0016                     	;# 
  2085  0017                     	;# 
  2086  0018                     	;# 
  2087  0019                     	;# 
  2088  001A                     	;# 
  2089  001B                     	;# 
  2090  001C                     	;# 
  2091  008C                     	;# 
  2092  008D                     	;# 
  2093  008E                     	;# 
  2094  0091                     	;# 
  2095  0092                     	;# 
  2096  0095                     	;# 
  2097  0096                     	;# 
  2098  0097                     	;# 
  2099  0099                     	;# 
  2100  009A                     	;# 
  2101  009B                     	;# 
  2102  009B                     	;# 
  2103  009C                     	;# 
  2104  009D                     	;# 
  2105  009E                     	;# 
  2106  009F                     	;# 
  2107  010C                     	;# 
  2108  010D                     	;# 
  2109  010E                     	;# 
  2110  0116                     	;# 
  2111  0117                     	;# 
  2112  011D                     	;# 
  2113  018C                     	;# 
  2114  018D                     	;# 
  2115  018E                     	;# 
  2116  0191                     	;# 
  2117  0191                     	;# 
  2118  0192                     	;# 
  2119  0193                     	;# 
  2120  0193                     	;# 
  2121  0194                     	;# 
  2122  0195                     	;# 
  2123  0196                     	;# 
  2124  0199                     	;# 
  2125  019A                     	;# 
  2126  019B                     	;# 
  2127  019B                     	;# 
  2128  019C                     	;# 
  2129  019D                     	;# 
  2130  019E                     	;# 
  2131  019F                     	;# 
  2132  020C                     	;# 
  2133  020D                     	;# 
  2134  0211                     	;# 
  2135  0211                     	;# 
  2136  0212                     	;# 
  2137  0212                     	;# 
  2138  0213                     	;# 
  2139  0213                     	;# 
  2140  0214                     	;# 
  2141  0214                     	;# 
  2142  0215                     	;# 
  2143  0215                     	;# 
  2144  0215                     	;# 
  2145  0216                     	;# 
  2146  0216                     	;# 
  2147  0217                     	;# 
  2148  0217                     	;# 
  2149  0391                     	;# 
  2150  0392                     	;# 
  2151  0393                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0611                     	;# 
  2156  0612                     	;# 
  2157  0613                     	;# 
  2158  0613                     	;# 
  2159  0614                     	;# 
  2160  0615                     	;# 
  2161  0616                     	;# 
  2162  0616                     	;# 
  2163  0711                     	;# 
  2164  0711                     	;# 
  2165  0711                     	;# 
  2166  0712                     	;# 
  2167  0712                     	;# 
  2168  0713                     	;# 
  2169  0713                     	;# 
  2170  0713                     	;# 
  2171  0714                     	;# 
  2172  0714                     	;# 
  2173  0714                     	;# 
  2174  0715                     	;# 
  2175  0715                     	;# 
  2176  0716                     	;# 
  2177  0716                     	;# 
  2178  0716                     	;# 
  2179  0716                     	;# 
  2180  0717                     	;# 
  2181  0717                     	;# 
  2182  0717                     	;# 
  2183  0717                     	;# 
  2184  0718                     	;# 
  2185  0718                     	;# 
  2186  0718                     	;# 
  2187  0719                     	;# 
  2188  0719                     	;# 
  2189  0719                     	;# 
  2190  0719                     	;# 
  2191  071A                     	;# 
  2192  071A                     	;# 
  2193  071A                     	;# 
  2194  071A                     	;# 
  2195  071A                     	;# 
  2196  071B                     	;# 
  2197  071B                     	;# 
  2198  071C                     	;# 
  2199  071C                     	;# 
  2200  071C                     	;# 
  2201  071C                     	;# 
  2202  071C                     	;# 
  2203  071D                     	;# 
  2204  071D                     	;# 
  2205  071E                     	;# 
  2206  071E                     	;# 
  2207  0791                     	;# 
  2208  0791                     	;# 
  2209  0793                     	;# 
  2210  0793                     	;# 
  2211  0794                     	;# 
  2212  0794                     	;# 
  2213  0796                     	;# 
  2214  0796                     	;# 
  2215  0796                     	;# 
  2216  0797                     	;# 
  2217  0797                     	;# 
  2218  0797                     	;# 
  2219  0798                     	;# 
  2220  0798                     	;# 
  2221  0799                     	;# 
  2222  0799                     	;# 
  2223  0799                     	;# 
  2224  079A                     	;# 
  2225  079A                     	;# 
  2226  079A                     	;# 
  2227  079B                     	;# 
  2228  079C                     	;# 
  2229  079C                     	;# 
  2230  079C                     	;# 
  2231  079D                     	;# 
  2232  079E                     	;# 
  2233  079E                     	;# 
  2234  0F8C                     	;# 
  2235  0F8D                     	;# 
  2236  0F91                     	;# 
  2237  0F96                     	;# 
  2238  0F97                     	;# 
  2239  0F9C                     	;# 
  2240  0F9D                     	;# 
  2241  0F9E                     	;# 
  2242  0FE3                     	;# 
  2243  0FE4                     	;# 
  2244  0FE5                     	;# 
  2245  0FE6                     	;# 
  2246  0FE7                     	;# 
  2247  0FE8                     	;# 
  2248  0FE9                     	;# 
  2249  0FEA                     	;# 
  2250  0FEB                     	;# 
  2251  0FED                     	;# 
  2252  0FEE                     	;# 
  2253  0FEF                     	;# 
  2254                           
  2255                           	psect	idataBANK0
  2256  0800                     __pidataBANK0:	
  2257                           
  2258                           ;initializer for _sample_period
  2259  0800  34AE               	retlw	174
  2260                           
  2261                           	psect	idataBANK1
  2262  15DA                     __pidataBANK1:	
  2263                           
  2264                           ;initializer for _Button_StateMachine
  2265  15DA  342E               	retlw	low _Button_State_Initializing
  2266  15DB  340D               	retlw	high _Button_State_Initializing
  2267  15DC  3440               	retlw	low _Button_State_NotPressed
  2268  15DD  3405               	retlw	high _Button_State_NotPressed
  2269  15DE  3490               	retlw	low _Button_State_Pressed
  2270  15DF  340D               	retlw	high _Button_State_Pressed
  2271                           
  2272                           ;initializer for _callback_notPressed
  2273  15E0  3420               	retlw	low _Button_DefaultCallback
  2274  15E1  3415               	retlw	high _Button_DefaultCallback
  2275                           
  2276                           ;initializer for _callback_pressed
  2277  15E2  3420               	retlw	low _Button_DefaultCallback
  2278  15E3  3415               	retlw	high _Button_DefaultCallback
  2279                           
  2280                           ;initializer for _callback_sampled
  2281  15E4  3421               	retlw	low _Sensor_DefaultCallback
  2282  15E5  3415               	retlw	high _Sensor_DefaultCallback
  2283                           
  2284                           	psect	idataBANK2
  2285  1790                     __pidataBANK2:	
  2286                           
  2287                           ;initializer for _mtouch_sensor
  2288  1790  3400               	retlw	0
  2289  1791  3469               	retlw	105
  2290  1792  3430               	retlw	48
  2291  1793  3410               	retlw	16
  2292  1794  3420               	retlw	32
  2293  1795  3400               	retlw	0
  2294  1796  3400               	retlw	0
  2295  1797  3400               	retlw	0
  2296  1798  3400               	retlw	0
  2297  1799  3401               	retlw	1
  2298  179A  345D               	retlw	93
  2299  179B  3430               	retlw	48
  2300  179C  3410               	retlw	16
  2301  179D  3420               	retlw	32
  2302  179E  3400               	retlw	0
  2303  179F  3400               	retlw	0
  2304  17A0  3400               	retlw	0
  2305  17A1  3400               	retlw	0
  2306  17A2  3402               	retlw	2
  2307  17A3  3435               	retlw	53
  2308  17A4  3430               	retlw	48
  2309  17A5  3410               	retlw	16
  2310  17A6  3420               	retlw	32
  2311  17A7  3400               	retlw	0
  2312  17A8  3400               	retlw	0
  2313  17A9  3400               	retlw	0
  2314  17AA  3400               	retlw	0
  2315                           
  2316                           	psect	stringtext1
  2317  1809                     __pstringtext1:	
  2318  1809                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2319  1809  3400               	retlw	0
  2320  180A  340D               	retlw	13
  2321  180B  341C               	retlw	28
  2322  180C  341E               	retlw	30
  2323  180D  3417               	retlw	23
  2324  180E                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2325                           
  2326                           	psect	stringtext2
  2327  1836                     __pstringtext2:	
  2328  1836                     _sensor_scan_group:	
  2329  1836  3462               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2330  1837  3450               	retlw	low (_mtouch_sensor| (0+256))
  2331  1838  3400               	retlw	0
  2332  1839  3459               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2333  183A                     __end_of_sensor_scan_group:	
  2334                           
  2335                           	psect	stringtext3
  2336  1000                     __pstringtext3:	
  2337  1000                     _mtouch_button_init:	
  2338  1000  3400               	retlw	0
  2339  1001  3402               	retlw	2
  2340  1002  3400               	retlw	0
  2341  1003  3400               	retlw	0
  2342  1004  3400               	retlw	0
  2343  1005  3400               	retlw	0
  2344  1006  3400               	retlw	0
  2345  1007  3400               	retlw	0
  2346  1008  3400               	retlw	0
  2347  1009  3400               	retlw	0
  2348  100A  3400               	retlw	0
  2349  100B  3400               	retlw	0
  2350  100C  3400               	retlw	0
  2351  100D  3400               	retlw	0
  2352  100E  3464               	retlw	100
  2353  100F  3401               	retlw	1
  2354  1010  3401               	retlw	1
  2355  1011  3401               	retlw	1
  2356  1012  3400               	retlw	0
  2357  1013  3400               	retlw	0
  2358  1014  3400               	retlw	0
  2359  1015  3400               	retlw	0
  2360  1016  3400               	retlw	0
  2361  1017  3400               	retlw	0
  2362  1018  3400               	retlw	0
  2363  1019  3400               	retlw	0
  2364  101A  3400               	retlw	0
  2365  101B  3400               	retlw	0
  2366  101C  3400               	retlw	0
  2367  101D  3400               	retlw	0
  2368  101E  3464               	retlw	100
  2369  101F  3401               	retlw	1
  2370  1020  3402               	retlw	2
  2371  1021  3400               	retlw	0
  2372  1022  3400               	retlw	0
  2373  1023  3400               	retlw	0
  2374  1024  3400               	retlw	0
  2375  1025  3400               	retlw	0
  2376  1026  3400               	retlw	0
  2377  1027  3400               	retlw	0
  2378  1028  3400               	retlw	0
  2379  1029  3400               	retlw	0
  2380  102A  3400               	retlw	0
  2381  102B  3400               	retlw	0
  2382  102C  3400               	retlw	0
  2383  102D  3400               	retlw	0
  2384  102E  3464               	retlw	100
  2385  102F  3401               	retlw	1
  2386  1030                     __end_of_mtouch_button_init:	
  2387                           
  2388                           	psect	nvBANK1
  2389  00D5                     __pnvBANK1:	
  2390  00D5                     _EUSART_ErrorHandler:	
  2391  00D5                     	ds	2
  2392  00D7                     _EUSART_OverrunErrorHandler:	
  2393  00D7                     	ds	2
  2394  00D9                     _EUSART_FramingErrorHandler:	
  2395  00D9                     	ds	2
  2396  00DB                     _EUSART_RxDefaultInterruptHandler:	
  2397  00DB                     	ds	2
  2398  00DD                     _EUSART_TxDefaultInterruptHandler:	
  2399  00DD                     	ds	2
  2400  00DF                     _eusartTxBufferRemaining:	
  2401  00DF                     	ds	1
  2402  001C                     _T2CON	set	28
  2403  001A                     _TMR2	set	26
  2404  001B                     _PR2	set	27
  2405  000B                     _INTCONbits	set	11
  2406  0012                     _PIR2bits	set	18
  2407  0011                     _PIR1bits	set	17
  2408  001C                     _T2CONbits	set	28
  2409  005F                     _GIE	set	95
  2410  0095                     _OPTION_REGbits	set	149
  2411  008E                     _TRISC	set	142
  2412  008D                     _TRISB	set	141
  2413  008C                     _TRISA	set	140
  2414  0097                     _WDTCON	set	151
  2415  0099                     _OSCCON	set	153
  2416  0091                     _PIE1bits	set	145
  2417  010D                     _LATBbits	set	269
  2418  010E                     _LATCbits	set	270
  2419  010C                     _LATAbits	set	268
  2420  011D                     _APFCON	set	285
  2421  010E                     _LATC	set	270
  2422  010D                     _LATB	set	269
  2423  010C                     _LATA	set	268
  2424  0116                     _BORCON	set	278
  2425  011D                     _APFCONbits	set	285
  2426  018C                     _ANSELA	set	396
  2427  018D                     _ANSELB	set	397
  2428  018E                     _ANSELC	set	398
  2429  0199                     _RCREG	set	409
  2430  019D                     _RCSTAbits	set	413
  2431  019A                     _TXREG	set	410
  2432  019E                     _TXSTAbits	set	414
  2433  019C                     _SPBRGH	set	412
  2434  019B                     _SPBRGL	set	411
  2435  019E                     _TXSTA	set	414
  2436  019D                     _RCSTA	set	413
  2437  019F                     _BAUDCON	set	415
  2438  020C                     _WPUA	set	524
  2439  020D                     _WPUB	set	525
  2440  071A                     _AAD1RES0	set	1818
  2441  0711                     _AD1CON0bits	set	1809
  2442  0714                     _AAD1CON3	set	1812
  2443  0713                     _AD1CON2	set	1811
  2444  0717                     _AD1ACQCON	set	1815
  2445  0716                     _AD1PRECON	set	1814
  2446  0718                     _AAD1GRD	set	1816
  2447  0713                     _AAD1CON2	set	1811
  2448  0719                     _AAD1CAP	set	1817
  2449  0714                     _AD1CON3	set	1812
  2450  0712                     _ADCOMCON	set	1810
  2451  0711                     _AD1CON0	set	1809
  2452  079A                     _AAD2RES0	set	1946
  2453  0791                     _AD2CON0bits	set	1937
  2454  0797                     _AD2ACQCON	set	1943
  2455  0796                     _AD2PRECON	set	1942
  2456  0794                     _AAD2CON3	set	1940
  2457  0798                     _AAD2GRD	set	1944
  2458  0793                     _AD2CON2	set	1939
  2459  0794                     _AD2CON3	set	1940
  2460  0791                     _AD2CON0	set	1937
  2461                           
  2462                           	psect	stringtext4
  2463  1800                     __pstringtext4:	
  2464  1800                     STR_1:	
  2465  1800  3450               	retlw	80	;'P'
  2466  1801  3449               	retlw	73	;'I'
  2467  1802  3443               	retlw	67	;'C'
  2468  1803  3453               	retlw	83	;'S'
  2469  1804  344D               	retlw	77	;'M'
  2470  1805  3441               	retlw	65	;'A'
  2471  1806  3452               	retlw	82	;'R'
  2472  1807  3454               	retlw	84	;'T'
  2473  1808  3400               	retlw	0
  2474                           
  2475                           	psect	stringtext5
  2476  180E                     __pstringtext5:	
  2477  180E                     STR_2:	
  2478  180E  3450               	retlw	80	;'P'
  2479  180F  3449               	retlw	73	;'I'
  2480  1810  3443               	retlw	67	;'C'
  2481  1811  3430               	retlw	48	;'0'
  2482  1812  3400               	retlw	0
  2483                           
  2484                           	psect	stringtext6
  2485  1813                     __pstringtext6:	
  2486  1813                     STR_3:	
  2487  1813  3450               	retlw	80	;'P'
  2488  1814  3449               	retlw	73	;'I'
  2489  1815  3443               	retlw	67	;'C'
  2490  1816  3431               	retlw	49	;'1'
  2491  1817  3400               	retlw	0
  2492                           
  2493                           	psect	stringtext7
  2494  1818                     __pstringtext7:	
  2495  1818                     STR_4:	
  2496  1818  3450               	retlw	80	;'P'
  2497  1819  3449               	retlw	73	;'I'
  2498  181A  3443               	retlw	67	;'C'
  2499  181B  3432               	retlw	50	;'2'
  2500  181C  3400               	retlw	0
  2501                           
  2502                           	psect	stringtext8
  2503  181D                     __pstringtext8:	
  2504  181D                     STR_5:	
  2505  181D  3450               	retlw	80	;'P'
  2506  181E  3449               	retlw	73	;'I'
  2507  181F  3443               	retlw	67	;'C'
  2508  1820  3433               	retlw	51	;'3'
  2509  1821  3400               	retlw	0
  2510                           
  2511                           	psect	stringtext9
  2512  1822                     __pstringtext9:	
  2513  1822                     STR_6:	
  2514  1822  3450               	retlw	80	;'P'
  2515  1823  3449               	retlw	73	;'I'
  2516  1824  3443               	retlw	67	;'C'
  2517  1825  3434               	retlw	52	;'4'
  2518  1826  3400               	retlw	0
  2519                           
  2520                           	psect	stringtext10
  2521  1827                     __pstringtext10:	
  2522  1827                     STR_7:	
  2523  1827  3450               	retlw	80	;'P'
  2524  1828  3449               	retlw	73	;'I'
  2525  1829  3443               	retlw	67	;'C'
  2526  182A  3435               	retlw	53	;'5'
  2527  182B  3400               	retlw	0
  2528                           
  2529                           	psect	stringtext11
  2530  182C                     __pstringtext11:	
  2531  182C                     STR_8:	
  2532  182C  3450               	retlw	80	;'P'
  2533  182D  3449               	retlw	73	;'I'
  2534  182E  3443               	retlw	67	;'C'
  2535  182F  3436               	retlw	54	;'6'
  2536  1830  3400               	retlw	0
  2537                           
  2538                           	psect	stringtext12
  2539  1831                     __pstringtext12:	
  2540  1831                     STR_9:	
  2541  1831  3450               	retlw	80	;'P'
  2542  1832  3449               	retlw	73	;'I'
  2543  1833  3443               	retlw	67	;'C'
  2544  1834  3437               	retlw	55	;'7'
  2545  1835  3400               	retlw	0
  2546                           
  2547                           	psect	stringtext13
  2548  183A                     __pstringtext13:	
  2549  183A                     STR_10:	
  2550  183A  3425               	retlw	37	;'%'
  2551  183B  3463               	retlw	99	;'c'
  2552  183C  3400               	retlw	0
  2553                           
  2554                           	psect	stringtext14
  2555  0000                     __pstringtext14:	
  2556                           
  2557                           ; #config settings
  2558  0000                     
  2559                           	psect	cinit
  2560  0025                     start_initialization:	
  2561  0025                     __initialization:	
  2562                           
  2563                           ; Initialize objects allocated to BANK0
  2564  0025  3188  2000  3180   	fcall	__pidataBANK0	;fetch initializer
  2565  0028  00EE               	movwf	__pdataBANK0& (0+127)
  2566                           
  2567                           ; Initialize objects allocated to BANK1
  2568  0029  30DA               	movlw	low __pidataBANK1
  2569  002A  0084               	movwf	4
  2570  002B  3095               	movlw	(high __pidataBANK1)| (0+128)
  2571  002C  0085               	movwf	5
  2572  002D  30C9               	movlw	low __pdataBANK1
  2573  002E  0086               	movwf	6
  2574  002F  3000               	movlw	high __pdataBANK1
  2575  0030  0087               	movwf	7
  2576  0031  300C               	movlw	12
  2577  0032  3195  258D  3180   	fcall	init_ram
  2578                           
  2579                           ; Initialize objects allocated to BANK2
  2580  0035  3090               	movlw	low __pidataBANK2
  2581  0036  0084               	movwf	4
  2582  0037  3097               	movlw	(high __pidataBANK2)| (0+128)
  2583  0038  0085               	movwf	5
  2584  0039  3050               	movlw	low __pdataBANK2
  2585  003A  0086               	movwf	6
  2586  003B  3001               	movlw	high __pdataBANK2
  2587  003C  0087               	movwf	7
  2588  003D  301B               	movlw	27
  2589  003E  3195  258D  3180   	fcall	init_ram
  2590                           
  2591                           ; Clear objects allocated to COMMON
  2592  0041  01FC               	clrf	__pbssCOMMON& (0+127)
  2593                           
  2594                           ; Clear objects allocated to BANK0
  2595  0042  305D               	movlw	low __pbssBANK0
  2596  0043  0084               	movwf	4
  2597  0044  3000               	movlw	high __pbssBANK0
  2598  0045  0085               	movwf	5
  2599  0046  3011               	movlw	17
  2600  0047  3195  2587  3180   	fcall	clear_ram0
  2601                           
  2602                           ; Clear objects allocated to BANK1
  2603  004A  30A0               	movlw	low __pbssBANK1
  2604  004B  0084               	movwf	4
  2605  004C  3000               	movlw	high __pbssBANK1
  2606  004D  0085               	movwf	5
  2607  004E  3029               	movlw	41
  2608  004F  3195  2587  3180   	fcall	clear_ram0
  2609                           
  2610                           ; Clear objects allocated to BANK2
  2611  0052  3020               	movlw	low __pbssBANK2
  2612  0053  0084               	movwf	4
  2613  0054  3001               	movlw	high __pbssBANK2
  2614  0055  0085               	movwf	5
  2615  0056  3030               	movlw	48
  2616  0057  3195  2587  3180   	fcall	clear_ram0
  2617                           
  2618                           ; Clear objects allocated to BANK3
  2619  005A  30A0               	movlw	low __pbssBANK3
  2620  005B  0084               	movwf	4
  2621  005C  3001               	movlw	high __pbssBANK3
  2622  005D  0085               	movwf	5
  2623  005E  3020               	movlw	32
  2624  005F  3195  2587         	fcall	clear_ram0
  2625  0061                     end_of_initialization:	
  2626                           ;End of C runtime variable initialization code
  2627                           
  2628  0061                     __end_of__initialization:	
  2629  0061  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2630  0062  0020               	movlb	0
  2631  0063  3182  2A30         	ljmp	_main	;jump to C main() function
  2632                           
  2633                           	psect	bssCOMMON
  2634  007C                     __pbssCOMMON:	
  2635  007C                     _eusartRxHead:	
  2636  007C                     	ds	1
  2637                           
  2638                           	psect	bssBANK0
  2639  005D                     __pbssBANK0:	
  2640  005D                     _packet_sample:	
  2641  005D                     	ds	4
  2642  0061                     _last_touch_status:	
  2643  0061                     	ds	2
  2644  0063                     _blink_count:	
  2645  0063                     	ds	1
  2646  0064                     _check_request:	
  2647  0064                     	ds	1
  2648  0065                     _config_status:	
  2649  0065                     	ds	1
  2650  0066                     _rxData:	
  2651  0066                     	ds	1
  2652  0067                     _eusartRxCount:	
  2653  0067                     	ds	1
  2654  0068                     _eusartRxTail:	
  2655  0068                     	ds	1
  2656  0069                     _eusartTxTail:	
  2657  0069                     	ds	1
  2658  006A                     _eusartTxHead:	
  2659  006A                     	ds	1
  2660  006B                     _sensor_globalFlags:	
  2661  006B                     	ds	1
  2662  006C                     _lowpowerActivated:	
  2663  006C                     	ds	1
  2664  006D                     _mtouch_time_toScan:	
  2665  006D                     	ds	1
  2666                           
  2667                           	psect	dataBANK0
  2668  006E                     __pdataBANK0:	
  2669  006E                     _sample_period:	
  2670  006E                     	ds	1
  2671                           
  2672                           	psect	bssBANK1
  2673  00A0                     __pbssBANK1:	
  2674  00A0                     _eusartRxStatusBuffer:	
  2675  00A0                     	ds	8
  2676  00A8                     _eusartRxBuffer:	
  2677  00A8                     	ds	8
  2678  00B0                     _eusartTxBuffer:	
  2679  00B0                     	ds	8
  2680  00B8                     _nout:	
  2681  00B8                     	ds	2
  2682  00BA                     _width:	
  2683  00BA                     	ds	2
  2684  00BC                     _prec:	
  2685  00BC                     	ds	2
  2686  00BE                     _flags:	
  2687  00BE                     	ds	2
  2688  00C0                     _timeout_count:	
  2689  00C0                     	ds	2
  2690  00C2                     _count_conf:	
  2691  00C2                     	ds	2
  2692  00C4                     _packet_noise:	
  2693  00C4                     	ds	2
  2694  00C6                     _blink:	
  2695  00C6                     	ds	1
  2696  00C7                     _prcData:	
  2697  00C7                     	ds	1
  2698  00C8                     _eusartRxLastError:	
  2699  00C8                     	ds	1
  2700                           
  2701                           	psect	dataBANK1
  2702  00C9                     __pdataBANK1:	
  2703  00C9                     _Button_StateMachine:	
  2704  00C9                     	ds	6
  2705  00CF                     _callback_notPressed:	
  2706  00CF                     	ds	2
  2707  00D1                     _callback_pressed:	
  2708  00D1                     	ds	2
  2709  00D3                     _callback_sampled:	
  2710  00D3                     	ds	2
  2711                           
  2712                           	psect	bssBANK2
  2713  0120                     __pbssBANK2:	
  2714  0120                     _mtouch_button:	
  2715  0120                     	ds	48
  2716                           
  2717                           	psect	dataBANK2
  2718  0150                     __pdataBANK2:	
  2719  0150                     _mtouch_sensor:	
  2720  0150                     	ds	27
  2721                           
  2722                           	psect	bssBANK3
  2723  01A0                     __pbssBANK3:	
  2724  01A0                     _dbuf:	
  2725  01A0                     	ds	32
  2726                           
  2727                           	psect	inittext
  2728  158D                     init_ram:	
  2729  158D  00FE               	movwf	126
  2730  158E                     initloop:	
  2731  158E  0012               	moviw fsr0++
  2732  158F  001E               	movwi fsr1++
  2733  1590  0BFE               	decfsz	126,f
  2734  1591  2D8E               	goto	initloop
  2735  1592  3400               	retlw	0
  2736                           
  2737                           	psect	clrtext
  2738  1587                     clear_ram0:	
  2739                           ;	Called with FSR0 containing the base address, and
  2740                           ;	WREG with the size to clear
  2741                           
  2742  1587  0064               	clrwdt	;clear the watchdog before getting into this loop
  2743  1588                     clrloop0:	
  2744  1588  0180               	clrf	0	;clear RAM location pointed to by FSR
  2745  1589  3101               	addfsr 0,1
  2746  158A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2747  158B  2D88               	goto	clrloop0	;have we reached the end yet?
  2748  158C  3400               	retlw	0	;all done for this memory range, return
  2749                           
  2750                           	psect	cstackBANK1
  2751  00E0                     __pcstackBANK1:	
  2752  00E0                     ??_main:	
  2753                           
  2754                           ; 1 bytes @ 0x0
  2755  00E0                     	ds	2
  2756                           
  2757                           	psect	cstackCOMMON
  2758  0070                     __pcstackCOMMON:	
  2759  0070                     ?_MTOUCH_Service_Mainloop:	
  2760  0070                     ?_MTOUCH_Button_isPressed:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766  0070                     ?_MTOUCH_Button_InitializeAll:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0070                     ?_MTOUCH_Button_ServiceAll:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?_MTOUCH_needReburst:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_MTOUCH_Tick:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ?_MTOUCH_Button_Tick:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     ?_MTOUCH_Sensor_Enable:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0070                     ?_Sensor_Sampled_Reset:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0070                     ?_Sensor_Service:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802  0070                     ?_Sensor_isEnabled:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805  0070                     ?_Sensor_RawSample_Update:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     ?_Sensor_setSampled:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_Sensor_postAcquisitionProcess:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?_Sensor_isActive:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ?_Sensor_isCalibrated:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0070                     ?_Sensor_setActive:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0070                     ?_Sensor_setInactive:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0070                     ?_Sensor_isCalibratingAcqTime:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829  0070                     ?_TMR2_LoadPeriodRegister:	
  2830                           ; 1 bytes @ 0x0
  2831                           
  2832  0070                     ?_TMR2_StartTimer:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0070                     ?_TMR2_StopTimer:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0070                     ?_Sensor_autoCalibration:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0070                     ?_Sensor_setCalibratAcqTime:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0070                     ?_Sensor_setCalibrated:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0070                     ?_Button_Service:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0070                     ?_Button_Reading_Update:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0070                     ?_Button_Deviation_Update:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0070                     ?_Button_Baseline_Initialize:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0070                     ?_Button_Baseline_Update:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0070                     ?_Button_Tick_helper:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ?_Button_Reading_Update_Helper:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?_EUSART_Receive_ISR:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ?_EUSART_Transmit_ISR:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ??_EUSART_Transmit_ISR:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_EUSART_DefaultErrorHandler:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_EUSART_RxDataHandler:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ??_EUSART_RxDataHandler:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_PIN_MANAGER_Initialize:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_OSCILLATOR_Initialize:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_WDT_Initialize:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_LED_PROCESS:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_RELAY_PROCESS:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_check_data:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_check_message:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_DATA_PROCESS:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_update_state:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_MTOUCH_Initialize:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_MTOUCH_Sensor_Initialize:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_Sensor_getScanGroupIndex:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_MTOUCH_Button_Initialize:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_EUSART_Initialize:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_EUSART_is_rx_ready:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_EUSART_Read:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_EUSART_Write:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_putch:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_TMR2_Initialize:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_INTERRUPT_InterruptManager:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_SYSTEM_Initialize:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_main:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_LED_2_SetHigh:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_LED_2_SetLow:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0070                     ?_LED_1_SetHigh:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0070                     ?_LED_1_SetLow:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0070                     ?_LED_0_SetHigh:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0070                     ?_LED_0_SetLow:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988                           
  2989                           ; 1 bytes @ 0x0
  2990  0070                     	ds	1
  2991  0071                     ??_MTOUCH_Button_isPressed:	
  2992  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995  0071                     ??_MTOUCH_needReburst:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998  0071                     ?_Sensor_DefaultCallback:	
  2999                           ; 1 bytes @ 0x1
  3000                           
  3001  0071                     ??_Sensor_Sampled_Reset:	
  3002                           ; 1 bytes @ 0x1
  3003                           
  3004  0071                     ??_Sensor_isEnabled:	
  3005                           ; 1 bytes @ 0x1
  3006                           
  3007  0071                     ??_Sensor_setSampled:	
  3008                           ; 1 bytes @ 0x1
  3009                           
  3010  0071                     ??_Sensor_isActive:	
  3011                           ; 1 bytes @ 0x1
  3012                           
  3013  0071                     ??_Sensor_isCalibrated:	
  3014                           ; 1 bytes @ 0x1
  3015                           
  3016  0071                     ??_Sensor_setActive:	
  3017                           ; 1 bytes @ 0x1
  3018                           
  3019  0071                     ??_Sensor_setInactive:	
  3020                           ; 1 bytes @ 0x1
  3021                           
  3022  0071                     ??_Sensor_isCalibratingAcqTime:	
  3023                           ; 1 bytes @ 0x1
  3024                           
  3025  0071                     ??_TMR2_LoadPeriodRegister:	
  3026                           ; 1 bytes @ 0x1
  3027                           
  3028  0071                     ??_TMR2_StartTimer:	
  3029                           ; 1 bytes @ 0x1
  3030                           
  3031  0071                     ??_TMR2_StopTimer:	
  3032                           ; 1 bytes @ 0x1
  3033                           
  3034  0071                     ??_Sensor_setCalibratAcqTime:	
  3035                           ; 1 bytes @ 0x1
  3036                           
  3037  0071                     ??_Sensor_setCalibrated:	
  3038                           ; 1 bytes @ 0x1
  3039                           
  3040  0071                     ?_memcpy:	
  3041                           ; 1 bytes @ 0x1
  3042                           
  3043  0071                     ??_Button_Deviation_Update:	
  3044                           ; 1 bytes @ 0x1
  3045                           
  3046  0071                     ??_Button_Baseline_Update:	
  3047                           ; 1 bytes @ 0x1
  3048                           
  3049  0071                     ??_Button_Tick_helper:	
  3050                           ; 1 bytes @ 0x1
  3051                           
  3052  0071                     ?_EUSART_SetRxInterruptHandler:	
  3053                           ; 1 bytes @ 0x1
  3054                           
  3055  0071                     ??_EUSART_Receive_ISR:	
  3056                           ; 1 bytes @ 0x1
  3057                           
  3058  0071                     ?_EUSART_SetTxInterruptHandler:	
  3059                           ; 1 bytes @ 0x1
  3060                           
  3061  0071                     ?_EUSART_SetFramingErrorHandler:	
  3062                           ; 1 bytes @ 0x1
  3063                           
  3064  0071                     ?_EUSART_SetOverrunErrorHandler:	
  3065                           ; 1 bytes @ 0x1
  3066                           
  3067  0071                     ?_EUSART_SetErrorHandler:	
  3068                           ; 1 bytes @ 0x1
  3069                           
  3070  0071                     ??_EUSART_DefaultErrorHandler:	
  3071                           ; 1 bytes @ 0x1
  3072                           
  3073  0071                     ??_PIN_MANAGER_Initialize:	
  3074                           ; 1 bytes @ 0x1
  3075                           
  3076  0071                     ??_OSCILLATOR_Initialize:	
  3077                           ; 1 bytes @ 0x1
  3078                           
  3079  0071                     ??_WDT_Initialize:	
  3080                           ; 1 bytes @ 0x1
  3081                           
  3082  0071                     ??_LED_PROCESS:	
  3083                           ; 1 bytes @ 0x1
  3084                           
  3085  0071                     ??_RELAY_PROCESS:	
  3086                           ; 1 bytes @ 0x1
  3087                           
  3088  0071                     ??_check_data:	
  3089                           ; 1 bytes @ 0x1
  3090                           
  3091  0071                     ??_Sensor_getScanGroupIndex:	
  3092                           ; 1 bytes @ 0x1
  3093                           
  3094  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0071                     ??_EUSART_is_rx_ready:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103  0071                     ??_EUSART_Read:	
  3104                           ; 1 bytes @ 0x1
  3105                           
  3106  0071                     ??_EUSART_Write:	
  3107                           ; 1 bytes @ 0x1
  3108                           
  3109  0071                     ??_TMR2_Initialize:	
  3110                           ; 1 bytes @ 0x1
  3111                           
  3112  0071                     ??_INTERRUPT_InterruptManager:	
  3113                           ; 1 bytes @ 0x1
  3114                           
  3115  0071                     ??_LED_2_SetHigh:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0071                     ??_LED_2_SetLow:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0071                     ??_LED_1_SetHigh:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0071                     ??_LED_1_SetLow:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0071                     ??_LED_0_SetHigh:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0071                     ??_LED_0_SetLow:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133  0071                     ?___bmul:	
  3134                           ; 1 bytes @ 0x1
  3135                           
  3136  0071                     ?_abs:	
  3137                           ; 1 bytes @ 0x1
  3138                           
  3139  0071                     ?_strlen:	
  3140                           ; 2 bytes @ 0x1
  3141                           
  3142  0071                     Sensor_DefaultCallback@sensor:	
  3143                           ; 2 bytes @ 0x1
  3144                           
  3145  0071                     Sensor_setActive@sensor:	
  3146                           ; 1 bytes @ 0x1
  3147                           
  3148  0071                     Sensor_setInactive@sensor:	
  3149                           ; 1 bytes @ 0x1
  3150                           
  3151  0071                     Sensor_isActive@sensor:	
  3152                           ; 1 bytes @ 0x1
  3153                           
  3154  0071                     Sensor_isCalibrated@sensor:	
  3155                           ; 1 bytes @ 0x1
  3156                           
  3157  0071                     Sensor_setCalibrated@sensor:	
  3158                           ; 1 bytes @ 0x1
  3159                           
  3160  0071                     Sensor_setCalibratAcqTime@sensor:	
  3161                           ; 1 bytes @ 0x1
  3162                           
  3163  0071                     Sensor_isCalibratingAcqTime@sensor:	
  3164                           ; 1 bytes @ 0x1
  3165                           
  3166  0071                     Sensor_Sampled_Reset@sensor:	
  3167                           ; 1 bytes @ 0x1
  3168                           
  3169  0071                     Sensor_setSampled@sensor:	
  3170                           ; 1 bytes @ 0x1
  3171                           
  3172  0071                     TMR2_LoadPeriodRegister@periodVal:	
  3173                           ; 1 bytes @ 0x1
  3174                           
  3175  0071                     ___bmul@multiplicand:	
  3176                           ; 1 bytes @ 0x1
  3177                           
  3178  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  3179                           ; 1 bytes @ 0x1
  3180                           
  3181  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3182                           ; 2 bytes @ 0x1
  3183                           
  3184  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3185                           ; 2 bytes @ 0x1
  3186                           
  3187  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3188                           ; 2 bytes @ 0x1
  3189                           
  3190  0071                     EUSART_SetErrorHandler@interruptHandler:	
  3191                           ; 2 bytes @ 0x1
  3192                           
  3193  0071                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3194                           ; 2 bytes @ 0x1
  3195                           
  3196  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3197                           ; 2 bytes @ 0x1
  3198                           
  3199  0071                     abs@a:	
  3200                           ; 2 bytes @ 0x1
  3201                           
  3202  0071                     memcpy@s1:	
  3203                           ; 2 bytes @ 0x1
  3204                           
  3205                           
  3206                           ; 2 bytes @ 0x1
  3207  0071                     	ds	1
  3208  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3209  0072                     ??_Sensor_DefaultCallback:	
  3210                           ; 1 bytes @ 0x2
  3211                           
  3212  0072                     ?_Sensor_loadADCSettings:	
  3213                           ; 1 bytes @ 0x2
  3214                           
  3215  0072                     ??___bmul:	
  3216                           ; 1 bytes @ 0x2
  3217                           
  3218  0072                     Sensor_loadADCSettings@adc_index:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221  0072                     Sensor_isEnabled@sensor:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224  0072                     MTOUCH_Button_isPressed@name:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0072                     EUSART_Read@readValue:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0072                     EUSART_Write@txData:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233                           
  3234                           ; 1 bytes @ 0x2
  3235  0072                     	ds	1
  3236  0073                     ??_abs:	
  3237  0073                     ??_EUSART_SetRxInterruptHandler:	
  3238                           ; 1 bytes @ 0x3
  3239                           
  3240  0073                     ??_EUSART_SetTxInterruptHandler:	
  3241                           ; 1 bytes @ 0x3
  3242                           
  3243  0073                     ??_EUSART_SetFramingErrorHandler:	
  3244                           ; 1 bytes @ 0x3
  3245                           
  3246  0073                     ??_EUSART_SetOverrunErrorHandler:	
  3247                           ; 1 bytes @ 0x3
  3248                           
  3249  0073                     ??_EUSART_SetErrorHandler:	
  3250                           ; 1 bytes @ 0x3
  3251                           
  3252  0073                     ??_strlen:	
  3253                           ; 1 bytes @ 0x3
  3254                           
  3255  0073                     ??_Sensor_loadADCSettings:	
  3256                           ; 1 bytes @ 0x3
  3257                           
  3258  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  3259                           ; 1 bytes @ 0x3
  3260                           
  3261  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3262                           ; 1 bytes @ 0x3
  3263                           
  3264  0073                     ??_EUSART_Initialize:	
  3265                           ; 1 bytes @ 0x3
  3266                           
  3267  0073                     ??_putch:	
  3268                           ; 1 bytes @ 0x3
  3269                           
  3270  0073                     Sensor_getScanGroupIndex@sensor:	
  3271                           ; 1 bytes @ 0x3
  3272                           
  3273  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3274                           ; 1 bytes @ 0x3
  3275                           
  3276  0073                     Button_Tick_helper@button:	
  3277                           ; 1 bytes @ 0x3
  3278                           
  3279  0073                     putch@txData:	
  3280                           ; 1 bytes @ 0x3
  3281                           
  3282  0073                     check_data@x:	
  3283                           ; 1 bytes @ 0x3
  3284                           
  3285  0073                     LED_PROCESS@x:	
  3286                           ; 1 bytes @ 0x3
  3287                           
  3288  0073                     RELAY_PROCESS@x:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291  0073                     ___bmul@product:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294  0073                     memcpy@n:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297                           
  3298                           ; 2 bytes @ 0x3
  3299  0073                     	ds	1
  3300  0074                     ??_MTOUCH_Button_Tick:	
  3301  0074                     ?_fputc:	
  3302                           ; 1 bytes @ 0x4
  3303                           
  3304  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3305                           ; 2 bytes @ 0x4
  3306                           
  3307  0074                     ___bmul@multiplier:	
  3308                           ; 1 bytes @ 0x4
  3309                           
  3310  0074                     strlen@a:	
  3311                           ; 1 bytes @ 0x4
  3312                           
  3313  0074                     fputc@c:	
  3314                           ; 1 bytes @ 0x4
  3315                           
  3316                           
  3317                           ; 2 bytes @ 0x4
  3318  0074                     	ds	1
  3319  0075                     ??_MTOUCH_Sensor_Enable:	
  3320  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3321                           ; 1 bytes @ 0x5
  3322                           
  3323  0075                     ??_Sensor_RawSample_Update:	
  3324                           ; 1 bytes @ 0x5
  3325                           
  3326  0075                     ??_Sensor_postAcquisitionProcess:	
  3327                           ; 1 bytes @ 0x5
  3328                           
  3329  0075                     ??_Sensor_autoCalibration:	
  3330                           ; 1 bytes @ 0x5
  3331                           
  3332  0075                     ??_memcpy:	
  3333                           ; 1 bytes @ 0x5
  3334                           
  3335  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3336                           ; 1 bytes @ 0x5
  3337                           
  3338  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3339                           ; 1 bytes @ 0x5
  3340                           
  3341  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3342                           ; 1 bytes @ 0x5
  3343                           
  3344  0075                     MTOUCH_Button_Tick@i:	
  3345                           ; 2 bytes @ 0x5
  3346                           
  3347  0075                     strlen@s:	
  3348                           ; 1 bytes @ 0x5
  3349                           
  3350                           
  3351                           ; 1 bytes @ 0x5
  3352  0075                     	ds	1
  3353  0076                     ??_MTOUCH_Tick:	
  3354  0076                     Sensor_RawSample_Update@adcIndex:	
  3355                           ; 1 bytes @ 0x6
  3356                           
  3357  0076                     MTOUCH_Sensor_Enable@sensor:	
  3358                           ; 1 bytes @ 0x6
  3359                           
  3360  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3361                           ; 1 bytes @ 0x6
  3362                           
  3363  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3364                           ; 1 bytes @ 0x6
  3365                           
  3366  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3367                           ; 1 bytes @ 0x6
  3368                           
  3369  0076                     memcpy@tmp:	
  3370                           ; 1 bytes @ 0x6
  3371                           
  3372  0076                     fputc@fp:	
  3373                           ; 1 bytes @ 0x6
  3374                           
  3375  0076                     Sensor_postAcquisitionProcess@deviation:	
  3376                           ; 1 bytes @ 0x6
  3377                           
  3378  0076                     _Sensor_loadADCSettings$562:	
  3379                           ; 2 bytes @ 0x6
  3380                           
  3381                           
  3382                           ; 2 bytes @ 0x6
  3383  0076                     	ds	1
  3384  0077                     ??_fputc:	
  3385  0077                     ??_MTOUCH_Sensor_Initialize:	
  3386                           ; 1 bytes @ 0x7
  3387                           
  3388  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3389                           ; 1 bytes @ 0x7
  3390                           
  3391  0077                     ??_MTOUCH_Button_Initialize:	
  3392                           ; 1 bytes @ 0x7
  3393                           
  3394  0077                     Sensor_RawSample_Update@sensor:	
  3395                           ; 1 bytes @ 0x7
  3396                           
  3397  0077                     Button_Baseline_Update@button:	
  3398                           ; 1 bytes @ 0x7
  3399                           
  3400  0077                     memcpy@s:	
  3401                           ; 1 bytes @ 0x7
  3402                           
  3403                           
  3404                           ; 2 bytes @ 0x7
  3405  0077                     	ds	1
  3406  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3407  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  3408                           ; 1 bytes @ 0x8
  3409                           
  3410  0078                     Sensor_loadADCSettings@addressOffset:	
  3411                           ; 1 bytes @ 0x8
  3412                           
  3413  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3414                           ; 1 bytes @ 0x8
  3415                           
  3416                           
  3417                           ; 1 bytes @ 0x8
  3418  0078                     	ds	1
  3419  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3420  0079                     ??_Button_Reading_Update_Helper:	
  3421                           ; 1 bytes @ 0x9
  3422                           
  3423  0079                     Sensor_postAcquisitionProcess@sensor:	
  3424                           ; 1 bytes @ 0x9
  3425                           
  3426  0079                     Sensor_loadADCSettings@sensor:	
  3427                           ; 1 bytes @ 0x9
  3428                           
  3429  0079                     Sensor_autoCalibration@adcIndex:	
  3430                           ; 1 bytes @ 0x9
  3431                           
  3432  0079                     MTOUCH_Button_Initialize@name:	
  3433                           ; 1 bytes @ 0x9
  3434                           
  3435  0079                     Button_Baseline_Initialize@button:	
  3436                           ; 1 bytes @ 0x9
  3437                           
  3438  0079                     memcpy@d1:	
  3439                           ; 1 bytes @ 0x9
  3440                           
  3441                           
  3442                           ; 1 bytes @ 0x9
  3443  0079                     	ds	1
  3444  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3445  007A                     Sensor_autoCalibration@sensor:	
  3446                           ; 1 bytes @ 0xA
  3447                           
  3448  007A                     MTOUCH_Button_Initialize@button:	
  3449                           ; 1 bytes @ 0xA
  3450                           
  3451  007A                     memcpy@d:	
  3452                           ; 1 bytes @ 0xA
  3453                           
  3454                           
  3455                           ; 1 bytes @ 0xA
  3456  007A                     	ds	1
  3457  007B                     ??_MTOUCH_Button_InitializeAll:	
  3458  007B                     ?_Sensor_Acq_ExecutePacket:	
  3459                           ; 1 bytes @ 0xB
  3460                           
  3461  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3462                           ; 1 bytes @ 0xB
  3463                           
  3464  007B                     Button_Reading_Update_Helper@button:	
  3465                           ; 1 bytes @ 0xB
  3466                           
  3467                           
  3468                           ; 1 bytes @ 0xB
  3469  007B                     	ds	1
  3470  007C                     ??_Button_DefaultCallback:	
  3471  007C                     ??_Button_Reading_Update:	
  3472                           ; 1 bytes @ 0xC
  3473                           
  3474  007C                     ??_myButtonPressedCallback:	
  3475                           ; 1 bytes @ 0xC
  3476                           
  3477  007C                     ??_myButtonReleasedCallback:	
  3478                           ; 1 bytes @ 0xC
  3479                           
  3480  007C                     ??_update_state:	
  3481                           ; 1 bytes @ 0xC
  3482                           
  3483  007C                     ??_MTOUCH_Initialize:	
  3484                           ; 1 bytes @ 0xC
  3485                           
  3486  007C                     ??_SYSTEM_Initialize:	
  3487                           ; 1 bytes @ 0xC
  3488                           
  3489                           
  3490                           	psect	cstackBANK0
  3491  0020                     __pcstackBANK0:	
  3492                           ; 1 bytes @ 0xC
  3493                           
  3494  0020                     ??_Sensor_Acq_ExecutePacket:	
  3495  0020                     ??_Button_Baseline_Initialize:	
  3496                           ; 1 bytes @ 0x0
  3497                           
  3498  0020                     ?_fputs:	
  3499                           ; 1 bytes @ 0x0
  3500                           
  3501  0020                     MTOUCH_Button_InitializeAll@button:	
  3502                           ; 2 bytes @ 0x0
  3503                           
  3504  0020                     Button_Deviation_Update@button:	
  3505                           ; 1 bytes @ 0x0
  3506                           
  3507  0020                     Button_Reading_Update@button:	
  3508                           ; 1 bytes @ 0x0
  3509                           
  3510  0020                     fputs@fp:	
  3511                           ; 1 bytes @ 0x0
  3512                           
  3513                           
  3514                           ; 1 bytes @ 0x0
  3515  0020                     	ds	1
  3516  0021                     ??_fputs:	
  3517  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3518                           ; 1 bytes @ 0x1
  3519                           
  3520  0021                     Button_Deviation_Update@deviation:	
  3521                           ; 1 bytes @ 0x1
  3522                           
  3523                           
  3524                           ; 4 bytes @ 0x1
  3525  0021                     	ds	1
  3526  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3527                           
  3528                           ; 1 bytes @ 0x2
  3529  0022                     	ds	1
  3530  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3531                           
  3532                           ; 1 bytes @ 0x3
  3533  0023                     	ds	1
  3534  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3535  0024                     fputs@c:	
  3536                           ; 1 bytes @ 0x4
  3537                           
  3538                           
  3539                           ; 1 bytes @ 0x4
  3540  0024                     	ds	1
  3541  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3542  0025                     fputs@i:	
  3543                           ; 1 bytes @ 0x5
  3544                           
  3545                           
  3546                           ; 2 bytes @ 0x5
  3547  0025                     	ds	1
  3548  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3549                           
  3550                           ; 1 bytes @ 0x6
  3551  0026                     	ds	1
  3552  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3553  0027                     fputs@s:	
  3554                           ; 1 bytes @ 0x7
  3555                           
  3556                           
  3557                           ; 1 bytes @ 0x7
  3558  0027                     	ds	1
  3559  0028                     ?_pad:	
  3560  0028                     pad@buf:	
  3561                           ; 2 bytes @ 0x8
  3562                           
  3563  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3564                           ; 1 bytes @ 0x8
  3565                           
  3566                           
  3567                           ; 2 bytes @ 0x8
  3568  0028                     	ds	1
  3569  0029                     pad@p:	
  3570                           
  3571                           ; 2 bytes @ 0x9
  3572  0029                     	ds	1
  3573  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3574                           
  3575                           ; 2 bytes @ 0xA
  3576  002A                     	ds	1
  3577  002B                     ??_pad:	
  3578                           
  3579                           ; 1 bytes @ 0xB
  3580  002B                     	ds	1
  3581  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3582  002C                     pad@i:	
  3583                           ; 1 bytes @ 0xC
  3584                           
  3585                           
  3586                           ; 2 bytes @ 0xC
  3587  002C                     	ds	1
  3588  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3589                           
  3590                           ; 1 bytes @ 0xD
  3591  002D                     	ds	1
  3592  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3593  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3594                           ; 1 bytes @ 0xE
  3595                           
  3596  002E                     pad@w:	
  3597                           ; 1 bytes @ 0xE
  3598                           
  3599                           
  3600                           ; 2 bytes @ 0xE
  3601  002E                     	ds	1
  3602  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3603                           
  3604                           ; 1 bytes @ 0xF
  3605  002F                     	ds	1
  3606  0030                     pad@fp:	
  3607                           
  3608                           ; 1 bytes @ 0x10
  3609  0030                     	ds	1
  3610  0031                     ?_ctoa:	
  3611  0031                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3612                           ; 2 bytes @ 0x11
  3613                           
  3614  0031                     ctoa@c:	
  3615                           ; 1 bytes @ 0x11
  3616                           
  3617                           
  3618                           ; 1 bytes @ 0x11
  3619  0031                     	ds	1
  3620  0032                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3621                           
  3622                           ; 2 bytes @ 0x12
  3623  0032                     	ds	1
  3624  0033                     ??_ctoa:	
  3625                           
  3626                           ; 1 bytes @ 0x13
  3627  0033                     	ds	1
  3628  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3629  0034                     ctoa@w:	
  3630                           ; 1 bytes @ 0x14
  3631                           
  3632                           
  3633                           ; 2 bytes @ 0x14
  3634  0034                     	ds	1
  3635  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3636                           
  3637                           ; 1 bytes @ 0x15
  3638  0035                     	ds	1
  3639  0036                     ctoa@fp:	
  3640  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3641                           ; 1 bytes @ 0x16
  3642                           
  3643                           
  3644                           ; 4 bytes @ 0x16
  3645  0036                     	ds	1
  3646  0037                     ?_vfpfcnvrt:	
  3647  0037                     vfpfcnvrt@fmt:	
  3648                           ; 2 bytes @ 0x17
  3649                           
  3650                           
  3651                           ; 1 bytes @ 0x17
  3652  0037                     	ds	1
  3653  0038                     vfpfcnvrt@ap:	
  3654                           
  3655                           ; 1 bytes @ 0x18
  3656  0038                     	ds	1
  3657  0039                     ??_vfpfcnvrt:	
  3658                           
  3659                           ; 1 bytes @ 0x19
  3660  0039                     	ds	1
  3661  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3662                           
  3663                           ; 1 bytes @ 0x1A
  3664  003A                     	ds	1
  3665  003B                     ?_Sensor_Acquisition:	
  3666  003B                     Sensor_Acquisition@sensor_adc2:	
  3667                           ; 1 bytes @ 0x1B
  3668                           
  3669                           
  3670                           ; 1 bytes @ 0x1B
  3671  003B                     	ds	1
  3672  003C                     ??_Sensor_Acquisition:	
  3673                           
  3674                           ; 1 bytes @ 0x1C
  3675  003C                     	ds	1
  3676  003D                     Sensor_Acquisition@retry:	
  3677                           
  3678                           ; 1 bytes @ 0x1D
  3679  003D                     	ds	1
  3680  003E                     Sensor_Acquisition@sensor_adc1:	
  3681  003E                     vfpfcnvrt@c:	
  3682                           ; 1 bytes @ 0x1E
  3683                           
  3684                           
  3685                           ; 1 bytes @ 0x1E
  3686  003E                     	ds	1
  3687  003F                     ??_Sensor_Service:	
  3688  003F                     vfpfcnvrt@fp:	
  3689                           ; 1 bytes @ 0x1F
  3690                           
  3691                           
  3692                           ; 1 bytes @ 0x1F
  3693  003F                     	ds	1
  3694  0040                     ?_vfprintf:	
  3695  0040                     vfprintf@fmt:	
  3696                           ; 2 bytes @ 0x20
  3697                           
  3698                           
  3699                           ; 2 bytes @ 0x20
  3700  0040                     	ds	2
  3701  0042                     Sensor_Service@scanGroup:	
  3702  0042                     vfprintf@ap:	
  3703                           ; 1 bytes @ 0x22
  3704                           
  3705                           
  3706                           ; 1 bytes @ 0x22
  3707  0042                     	ds	1
  3708  0043                     ??_vfprintf:	
  3709  0043                     Sensor_Service@error:	
  3710                           ; 1 bytes @ 0x23
  3711                           
  3712                           
  3713                           ; 1 bytes @ 0x23
  3714  0043                     	ds	1
  3715  0044                     Sensor_Service@sensor_adc1:	
  3716                           
  3717                           ; 1 bytes @ 0x24
  3718  0044                     	ds	1
  3719  0045                     Sensor_Service@sensor_adc2:	
  3720  0045                     vfprintf@fp:	
  3721                           ; 1 bytes @ 0x25
  3722                           
  3723                           
  3724                           ; 1 bytes @ 0x25
  3725  0045                     	ds	1
  3726  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3727  0046                     vfprintf@cfmt:	
  3728                           ; 1 bytes @ 0x26
  3729                           
  3730                           
  3731                           ; 2 bytes @ 0x26
  3732  0046                     	ds	1
  3733  0047                     MTOUCH_Sensor_SampleAll@group:	
  3734                           
  3735                           ; 1 bytes @ 0x27
  3736  0047                     	ds	1
  3737  0048                     ?_printf:	
  3738  0048                     printf@fmt:	
  3739                           ; 2 bytes @ 0x28
  3740                           
  3741                           
  3742                           ; 2 bytes @ 0x28
  3743  0048                     	ds	4
  3744  004C                     ??_printf:	
  3745                           
  3746                           ; 1 bytes @ 0x2C
  3747  004C                     	ds	3
  3748  004F                     printf@ap:	
  3749                           
  3750                           ; 1 bytes @ 0x2F
  3751  004F                     	ds	1
  3752  0050                     ?_Button_DefaultCallback:	
  3753  0050                     ?_myButtonPressedCallback:	
  3754                           ; 1 bytes @ 0x30
  3755                           
  3756  0050                     ?_myButtonReleasedCallback:	
  3757                           ; 1 bytes @ 0x30
  3758                           
  3759  0050                     ??_check_message:	
  3760                           ; 1 bytes @ 0x30
  3761                           
  3762  0050                     ??_DATA_PROCESS:	
  3763                           ; 1 bytes @ 0x30
  3764                           
  3765  0050                     Button_DefaultCallback@button:	
  3766                           ; 1 bytes @ 0x30
  3767                           
  3768  0050                     myButtonPressedCallback@button:	
  3769                           ; 1 bytes @ 0x30
  3770                           
  3771  0050                     myButtonReleasedCallback@button:	
  3772                           ; 1 bytes @ 0x30
  3773                           
  3774                           
  3775                           ; 1 bytes @ 0x30
  3776  0050                     	ds	1
  3777  0051                     ?_Button_State_Initializing:	
  3778  0051                     ?_Button_State_NotPressed:	
  3779                           ; 1 bytes @ 0x31
  3780                           
  3781  0051                     ?_Button_State_Pressed:	
  3782                           ; 1 bytes @ 0x31
  3783                           
  3784  0051                     Button_State_Initializing@button:	
  3785                           ; 1 bytes @ 0x31
  3786                           
  3787  0051                     Button_State_NotPressed@button:	
  3788                           ; 1 bytes @ 0x31
  3789                           
  3790  0051                     Button_State_Pressed@button:	
  3791                           ; 1 bytes @ 0x31
  3792                           
  3793                           
  3794                           ; 1 bytes @ 0x31
  3795  0051                     	ds	1
  3796  0052                     ??_Button_State_Initializing:	
  3797  0052                     ??_Button_State_NotPressed:	
  3798                           ; 1 bytes @ 0x32
  3799                           
  3800  0052                     ??_Button_State_Pressed:	
  3801                           ; 1 bytes @ 0x32
  3802                           
  3803  0052                     DATA_PROCESS@x:	
  3804                           ; 1 bytes @ 0x32
  3805                           
  3806  0052                     check_message@x:	
  3807                           ; 1 bytes @ 0x32
  3808                           
  3809                           
  3810                           ; 1 bytes @ 0x32
  3811  0052                     	ds	4
  3812  0056                     ??_Button_Service:	
  3813                           
  3814                           ; 1 bytes @ 0x36
  3815  0056                     	ds	2
  3816  0058                     Button_Service@name:	
  3817                           
  3818                           ; 1 bytes @ 0x38
  3819  0058                     	ds	1
  3820  0059                     Button_Service@button:	
  3821                           
  3822                           ; 1 bytes @ 0x39
  3823  0059                     	ds	1
  3824  005A                     ??_MTOUCH_Button_ServiceAll:	
  3825                           
  3826                           ; 1 bytes @ 0x3A
  3827  005A                     	ds	1
  3828  005B                     MTOUCH_Button_ServiceAll@button:	
  3829                           
  3830                           ; 1 bytes @ 0x3B
  3831  005B                     	ds	1
  3832  005C                     ??_MTOUCH_Service_Mainloop:	
  3833                           
  3834                           ; 1 bytes @ 0x3C
  3835  005C                     	ds	1
  3836                           
  3837                           	psect	maintext
  3838  0230                     __pmaintext:	
  3839 ;;
  3840 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3841 ;;
  3842 ;; *************** function _main *****************
  3843 ;; Defined at:
  3844 ;;		line 17 in file "main.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;		None
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;		None
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  1    wreg      void 
  3851 ;; Registers used:
  3852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : B1F/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3858 ;;      Params:         0       0       0       0       0       0       0       0
  3859 ;;      Locals:         0       0       0       0       0       0       0       0
  3860 ;;      Temps:          0       0       2       0       0       0       0       0
  3861 ;;      Totals:         0       0       2       0       0       0       0       0
  3862 ;;Total ram usage:        2 bytes
  3863 ;; Hardware stack levels required when called:   19
  3864 ;; This function calls:
  3865 ;;		_DATA_PROCESS
  3866 ;;		_EUSART_Read
  3867 ;;		_EUSART_is_rx_ready
  3868 ;;		_LED_PROCESS
  3869 ;;		_MTOUCH_Button_SetNotPressedCallback
  3870 ;;		_MTOUCH_Button_SetPressedCallback
  3871 ;;		_MTOUCH_Button_isPressed
  3872 ;;		_MTOUCH_Service_Mainloop
  3873 ;;		_RELAY_PROCESS
  3874 ;;		_SYSTEM_Initialize
  3875 ;;		_check_data
  3876 ;;		_check_message
  3877 ;;		_printf
  3878 ;; This function is called by:
  3879 ;;		Startup code after reset
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           
  3884                           ;psect for function _main
  3885  0230                     _main:	
  3886                           
  3887                           ;main.c: 20:     SYSTEM_Initialize();
  3888                           
  3889                           ;incstack = 0
  3890 ;; hardware stack exceeded
  3891                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3892  0230  3196  26B3  3182   	fcall	_SYSTEM_Initialize
  3893                           
  3894                           ;main.c: 21:     (INTCONbits.GIE = 1);
  3895  0233  178B               	bsf	11,7	;volatile
  3896                           
  3897                           ;main.c: 22:     (INTCONbits.PEIE = 1);
  3898  0234  170B               	bsf	11,6	;volatile
  3899                           
  3900                           ;main.c: 23:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3901  0235  30A1               	movlw	low _myButtonPressedCallback
  3902  0236  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3903  0237  3008               	movlw	high _myButtonPressedCallback
  3904  0238  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3905  0239  3195  255D  3182   	fcall	_MTOUCH_Button_SetPressedCallback
  3906                           
  3907                           ;main.c: 24:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3908  023C  3037               	movlw	low _myButtonReleasedCallback
  3909  023D  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3910  023E  3008               	movlw	high _myButtonReleasedCallback
  3911  023F  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3912  0240  3195  2557  3182   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3913  0243  0022               	movlb	2	; select bank2
  3914  0244  110C               	bcf	12,2	;volatile
  3915                           
  3916                           ;main.c: 26:     config_status = 0;
  3917  0245  0020               	movlb	0	; select bank0
  3918  0246  01E5               	clrf	_config_status
  3919                           
  3920                           ;main.c: 27:     last_touch_status.full_status = 0x00;
  3921  0247  01E1               	clrf	_last_touch_status
  3922  0248  01E2               	clrf	_last_touch_status+1
  3923                           
  3924                           ;main.c: 28:     LED_PROCESS(last_touch_status.full_status);
  3925  0249  0861               	movf	_last_touch_status,w
  3926  024A  318D  25F8  3182   	fcall	_LED_PROCESS
  3927                           
  3928                           ;main.c: 29:     RELAY_PROCESS(last_touch_status.full_status);
  3929  024D  0020               	movlb	0	; select bank0
  3930  024E  0861               	movf	_last_touch_status,w
  3931  024F  318B  238E  3182   	fcall	_RELAY_PROCESS
  3932  0252                     l6437:	
  3933                           
  3934                           ;main.c: 31:     {;main.c: 32:         if(EUSART_is_rx_ready())
  3935  0252  3195  2525  3182   	fcall	_EUSART_is_rx_ready
  3936  0255  3A00               	xorlw	0
  3937  0256  1903               	skipnz
  3938  0257  2B43               	goto	l6499
  3939                           
  3940                           ;main.c: 33:         {;main.c: 34:             rxData = EUSART_Read();
  3941  0258  3189  213D  3182   	fcall	_EUSART_Read
  3942  025B  0021               	movlb	1	; select bank1
  3943  025C  00E0               	movwf	??_main^(0+128)
  3944  025D  0860               	movf	??_main^(0+128),w
  3945  025E  0020               	movlb	0	; select bank0
  3946  025F  00E6               	movwf	_rxData
  3947                           
  3948                           ;main.c: 35:             if(check_data(rxData))
  3949  0260  0866               	movf	_rxData,w
  3950  0261  3189  2191  3182   	fcall	_check_data
  3951  0264  3A00               	xorlw	0
  3952  0265  1903               	skipnz
  3953  0266  2B43               	goto	l6499
  3954                           
  3955                           ;main.c: 36:             {;main.c: 37:                 if(check_request == 0)
  3956  0267  0020               	movlb	0	; select bank0
  3957  0268  0864               	movf	_check_request,w
  3958  0269  1D03               	btfss	3,2
  3959  026A  2A76               	goto	l6449
  3960                           
  3961                           ;main.c: 38:                 {;main.c: 39:                     prcData = rxData;
  3962  026B  0866               	movf	_rxData,w
  3963  026C  0021               	movlb	1	; select bank1
  3964  026D  00E0               	movwf	??_main^(0+128)
  3965  026E  0860               	movf	??_main^(0+128),w
  3966  026F  00C7               	movwf	_prcData^(0+128)
  3967                           
  3968                           ;main.c: 40:                     check_message(rxData);
  3969  0270  0020               	movlb	0	; select bank0
  3970  0271  0866               	movf	_rxData,w
  3971  0272  3188  20EE  3182   	fcall	_check_message
  3972                           
  3973                           ;main.c: 41:                 }
  3974  0275  2B43               	goto	l6499
  3975  0276                     l6449:	
  3976                           
  3977                           ;main.c: 43:                 {;main.c: 44:                     if(config_status == 1)
  3978  0276  0365               	decf	_config_status,w
  3979  0277  1D03               	btfss	3,2
  3980  0278  2B35               	goto	l6491
  3981                           
  3982                           ;main.c: 45:                     {;main.c: 46:                         if(rxData == 'T')
  3983  0279  3054               	movlw	84
  3984  027A  0666               	xorwf	_rxData,w
  3985  027B  1D03               	btfss	3,2
  3986  027C  2AD6               	goto	l6471
  3987                           
  3988                           ;main.c: 47:                         {;main.c: 48:                             LED_PROCE
      +                          SS(15);
  3989  027D  300F               	movlw	15
  3990  027E  318D  25F8  3182   	fcall	_LED_PROCESS
  3991                           
  3992                           ;main.c: 49:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  3993  0281  3015               	movlw	21
  3994  0282  0021               	movlb	1	; select bank1
  3995  0283  00E1               	movwf	(??_main^(0+128)+1)
  3996  0284  304B               	movlw	75
  3997  0285  00E0               	movwf	??_main^(0+128)
  3998  0286  30BE               	movlw	190
  3999  0287                     u5577:	
  4000  0287  0B89               	decfsz	9,f
  4001  0288  2A87               	goto	u5577
  4002  0289  0BE0               	decfsz	??_main^(0+128),f
  4003  028A  2A87               	goto	u5577
  4004  028B  0BE1               	decfsz	(??_main^(0+128)+1),f
  4005  028C  2A87               	goto	u5577
  4006  028D  0000               	nop
  4007                           
  4008                           ;main.c: 50:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4009  028E  3015               	movlw	21
  4010  028F  0021               	movlb	1	; select bank1
  4011  0290  00E1               	movwf	(??_main^(0+128)+1)
  4012  0291  304B               	movlw	75
  4013  0292  00E0               	movwf	??_main^(0+128)
  4014  0293  30BE               	movlw	190
  4015  0294                     u5587:	
  4016  0294  0B89               	decfsz	9,f
  4017  0295  2A94               	goto	u5587
  4018  0296  0BE0               	decfsz	??_main^(0+128),f
  4019  0297  2A94               	goto	u5587
  4020  0298  0BE1               	decfsz	(??_main^(0+128)+1),f
  4021  0299  2A94               	goto	u5587
  4022  029A  0000               	nop
  4023                           
  4024                           ;main.c: 51:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4025  029B  3015               	movlw	21
  4026  029C  0021               	movlb	1	; select bank1
  4027  029D  00E1               	movwf	(??_main^(0+128)+1)
  4028  029E  304B               	movlw	75
  4029  029F  00E0               	movwf	??_main^(0+128)
  4030  02A0  30BE               	movlw	190
  4031  02A1                     u5597:	
  4032  02A1  0B89               	decfsz	9,f
  4033  02A2  2AA1               	goto	u5597
  4034  02A3  0BE0               	decfsz	??_main^(0+128),f
  4035  02A4  2AA1               	goto	u5597
  4036  02A5  0BE1               	decfsz	(??_main^(0+128)+1),f
  4037  02A6  2AA1               	goto	u5597
  4038  02A7  0000               	nop
  4039                           
  4040                           ;main.c: 52:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4041  02A8  3015               	movlw	21
  4042  02A9  0021               	movlb	1	; select bank1
  4043  02AA  00E1               	movwf	(??_main^(0+128)+1)
  4044  02AB  304B               	movlw	75
  4045  02AC  00E0               	movwf	??_main^(0+128)
  4046  02AD  30BE               	movlw	190
  4047  02AE                     u5607:	
  4048  02AE  0B89               	decfsz	9,f
  4049  02AF  2AAE               	goto	u5607
  4050  02B0  0BE0               	decfsz	??_main^(0+128),f
  4051  02B1  2AAE               	goto	u5607
  4052  02B2  0BE1               	decfsz	(??_main^(0+128)+1),f
  4053  02B3  2AAE               	goto	u5607
  4054  02B4  0000               	nop
  4055                           
  4056                           ;main.c: 53:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4057  02B5  3015               	movlw	21
  4058  02B6  0021               	movlb	1	; select bank1
  4059  02B7  00E1               	movwf	(??_main^(0+128)+1)
  4060  02B8  304B               	movlw	75
  4061  02B9  00E0               	movwf	??_main^(0+128)
  4062  02BA  30BE               	movlw	190
  4063  02BB                     u5617:	
  4064  02BB  0B89               	decfsz	9,f
  4065  02BC  2ABB               	goto	u5617
  4066  02BD  0BE0               	decfsz	??_main^(0+128),f
  4067  02BE  2ABB               	goto	u5617
  4068  02BF  0BE1               	decfsz	(??_main^(0+128)+1),f
  4069  02C0  2ABB               	goto	u5617
  4070  02C1  0000               	nop
  4071                           
  4072                           ;main.c: 54:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4073  02C2  3015               	movlw	21
  4074  02C3  0021               	movlb	1	; select bank1
  4075  02C4  00E1               	movwf	(??_main^(0+128)+1)
  4076  02C5  304B               	movlw	75
  4077  02C6  00E0               	movwf	??_main^(0+128)
  4078  02C7  30BE               	movlw	190
  4079  02C8                     u5627:	
  4080  02C8  0B89               	decfsz	9,f
  4081  02C9  2AC8               	goto	u5627
  4082  02CA  0BE0               	decfsz	??_main^(0+128),f
  4083  02CB  2AC8               	goto	u5627
  4084  02CC  0BE1               	decfsz	(??_main^(0+128)+1),f
  4085  02CD  2AC8               	goto	u5627
  4086  02CE  0000               	nop
  4087                           
  4088                           ;main.c: 55:                             config_status = 0;
  4089  02CF  0020               	movlb	0	; select bank0
  4090  02D0  01E5               	clrf	_config_status
  4091                           
  4092                           ;main.c: 56:                             check_request = 0;
  4093  02D1  01E4               	clrf	_check_request
  4094                           
  4095                           ;main.c: 57:                             LED_PROCESS(last_touch_status.full_status);
  4096  02D2  0861               	movf	_last_touch_status,w
  4097  02D3  318D  25F8  3182   	fcall	_LED_PROCESS
  4098  02D6                     l6471:	
  4099                           
  4100                           ;main.c: 59:                         if(rxData == 'F')
  4101  02D6  3046               	movlw	70
  4102  02D7  0020               	movlb	0	; select bank0
  4103  02D8  0666               	xorwf	_rxData,w
  4104  02D9  1D03               	btfss	3,2
  4105  02DA  2B43               	goto	l6499
  4106                           
  4107                           ;main.c: 60:                         {;main.c: 61:                             LED_PROCE
      +                          SS(0);
  4108  02DB  3000               	movlw	0
  4109  02DC  318D  25F8  3182   	fcall	_LED_PROCESS
  4110                           
  4111                           ;main.c: 62:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4112  02DF  3015               	movlw	21
  4113  02E0  0021               	movlb	1	; select bank1
  4114  02E1  00E1               	movwf	(??_main^(0+128)+1)
  4115  02E2  304B               	movlw	75
  4116  02E3  00E0               	movwf	??_main^(0+128)
  4117  02E4  30BE               	movlw	190
  4118  02E5                     u5637:	
  4119  02E5  0B89               	decfsz	9,f
  4120  02E6  2AE5               	goto	u5637
  4121  02E7  0BE0               	decfsz	??_main^(0+128),f
  4122  02E8  2AE5               	goto	u5637
  4123  02E9  0BE1               	decfsz	(??_main^(0+128)+1),f
  4124  02EA  2AE5               	goto	u5637
  4125  02EB  0000               	nop
  4126                           
  4127                           ;main.c: 63:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4128  02EC  3015               	movlw	21
  4129  02ED  0021               	movlb	1	; select bank1
  4130  02EE  00E1               	movwf	(??_main^(0+128)+1)
  4131  02EF  304B               	movlw	75
  4132  02F0  00E0               	movwf	??_main^(0+128)
  4133  02F1  30BE               	movlw	190
  4134  02F2                     u5647:	
  4135  02F2  0B89               	decfsz	9,f
  4136  02F3  2AF2               	goto	u5647
  4137  02F4  0BE0               	decfsz	??_main^(0+128),f
  4138  02F5  2AF2               	goto	u5647
  4139  02F6  0BE1               	decfsz	(??_main^(0+128)+1),f
  4140  02F7  2AF2               	goto	u5647
  4141  02F8  0000               	nop
  4142                           
  4143                           ;main.c: 64:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4144  02F9  3015               	movlw	21
  4145  02FA  0021               	movlb	1	; select bank1
  4146  02FB  00E1               	movwf	(??_main^(0+128)+1)
  4147  02FC  304B               	movlw	75
  4148  02FD  00E0               	movwf	??_main^(0+128)
  4149  02FE  30BE               	movlw	190
  4150  02FF                     u5657:	
  4151  02FF  0B89               	decfsz	9,f
  4152  0300  2AFF               	goto	u5657
  4153  0301  0BE0               	decfsz	??_main^(0+128),f
  4154  0302  2AFF               	goto	u5657
  4155  0303  0BE1               	decfsz	(??_main^(0+128)+1),f
  4156  0304  2AFF               	goto	u5657
  4157  0305  0000               	nop
  4158                           
  4159                           ;main.c: 65:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4160  0306  3015               	movlw	21
  4161  0307  0021               	movlb	1	; select bank1
  4162  0308  00E1               	movwf	(??_main^(0+128)+1)
  4163  0309  304B               	movlw	75
  4164  030A  00E0               	movwf	??_main^(0+128)
  4165  030B  30BE               	movlw	190
  4166  030C                     u5667:	
  4167  030C  0B89               	decfsz	9,f
  4168  030D  2B0C               	goto	u5667
  4169  030E  0BE0               	decfsz	??_main^(0+128),f
  4170  030F  2B0C               	goto	u5667
  4171  0310  0BE1               	decfsz	(??_main^(0+128)+1),f
  4172  0311  2B0C               	goto	u5667
  4173  0312  0000               	nop
  4174                           
  4175                           ;main.c: 66:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4176  0313  3015               	movlw	21
  4177  0314  0021               	movlb	1	; select bank1
  4178  0315  00E1               	movwf	(??_main^(0+128)+1)
  4179  0316  304B               	movlw	75
  4180  0317  00E0               	movwf	??_main^(0+128)
  4181  0318  30BE               	movlw	190
  4182  0319                     u5677:	
  4183  0319  0B89               	decfsz	9,f
  4184  031A  2B19               	goto	u5677
  4185  031B  0BE0               	decfsz	??_main^(0+128),f
  4186  031C  2B19               	goto	u5677
  4187  031D  0BE1               	decfsz	(??_main^(0+128)+1),f
  4188  031E  2B19               	goto	u5677
  4189  031F  0000               	nop
  4190                           
  4191                           ;main.c: 67:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4192  0320  3015               	movlw	21
  4193  0321  0021               	movlb	1	; select bank1
  4194  0322  00E1               	movwf	(??_main^(0+128)+1)
  4195  0323  304B               	movlw	75
  4196  0324  00E0               	movwf	??_main^(0+128)
  4197  0325  30BE               	movlw	190
  4198  0326                     u5687:	
  4199  0326  0B89               	decfsz	9,f
  4200  0327  2B26               	goto	u5687
  4201  0328  0BE0               	decfsz	??_main^(0+128),f
  4202  0329  2B26               	goto	u5687
  4203  032A  0BE1               	decfsz	(??_main^(0+128)+1),f
  4204  032B  2B26               	goto	u5687
  4205  032C  0000               	nop
  4206                           
  4207                           ;main.c: 68:                             config_status = 0;
  4208  032D  0020               	movlb	0	; select bank0
  4209  032E  01E5               	clrf	_config_status
  4210                           
  4211                           ;main.c: 69:                             check_request = 0;
  4212  032F  01E4               	clrf	_check_request
  4213                           
  4214                           ;main.c: 70:                             LED_PROCESS(last_touch_status.full_status);
  4215  0330  0861               	movf	_last_touch_status,w
  4216  0331  318D  25F8  3182   	fcall	_LED_PROCESS
  4217  0334  2B43               	goto	l6499
  4218  0335                     l6491:	
  4219                           
  4220                           ;main.c: 74:                     {;main.c: 75:                         if(rxData == 'T')
  4221  0335  3054               	movlw	84
  4222  0336  0666               	xorwf	_rxData,w
  4223  0337  1D03               	btfss	3,2
  4224  0338  2B3E               	goto	l6495
  4225                           
  4226                           ;main.c: 76:                         {;main.c: 77:                             DATA_PROC
      +                          ESS(prcData);
  4227  0339  0021               	movlb	1	; select bank1
  4228  033A  0847               	movf	_prcData^(0+128),w
  4229  033B  3185  25E4  3182   	fcall	_DATA_PROCESS
  4230  033E                     l6495:	
  4231                           
  4232                           ;main.c: 79:                         if(rxData == 'F')
  4233  033E  3046               	movlw	70
  4234  033F  0020               	movlb	0	; select bank0
  4235  0340  0666               	xorwf	_rxData,w
  4236  0341  1903               	btfsc	3,2
  4237                           
  4238                           ;main.c: 80:                         {;main.c: 81:                             check_req
      +                          uest = 0;
  4239  0342  01E4               	clrf	_check_request
  4240  0343                     l6499:	
  4241                           ;main.c: 85:             }
  4242                           
  4243                           
  4244                           ;main.c: 87:         if(MTOUCH_Service_Mainloop())
  4245  0343  3197  27AB  3182   	fcall	_MTOUCH_Service_Mainloop
  4246  0346  3A00               	xorlw	0
  4247  0347  1903               	skipnz
  4248  0348  2A52               	goto	l6437
  4249                           
  4250                           ;main.c: 88:         {;main.c: 89:             if(config_status == 0)
  4251  0349  0020               	movlb	0	; select bank0
  4252  034A  0865               	movf	_config_status,w
  4253  034B  1D03               	btfss	3,2
  4254  034C  2B9A               	goto	l6537
  4255                           
  4256                           ;main.c: 90:             {;main.c: 91:                 if(check_request == 1)
  4257  034D  0364               	decf	_check_request,w
  4258  034E  1D03               	btfss	3,2
  4259  034F  2B5E               	goto	l6511
  4260                           
  4261                           ;main.c: 92:                 {;main.c: 93:                     timeout_count++;
  4262  0350  3001               	movlw	1
  4263  0351  0021               	movlb	1	; select bank1
  4264  0352  07C0               	addwf	_timeout_count^(0+128),f
  4265  0353  3000               	movlw	0
  4266  0354  3DC1               	addwfc	(_timeout_count+1)^(0+128),f
  4267                           
  4268                           ;main.c: 94:                     if(timeout_count == 20)
  4269  0355  3014               	movlw	20
  4270  0356  0640               	xorwf	_timeout_count^(0+128),w
  4271  0357  0441               	iorwf	(_timeout_count+1)^(0+128),w
  4272  0358  1D03               	btfss	3,2
  4273  0359  2B5E               	goto	l6511
  4274                           
  4275                           ;main.c: 95:                     {;main.c: 96:                         timeout_count = 0
      +                          ;
  4276  035A  01C0               	clrf	_timeout_count^(0+128)
  4277  035B  01C1               	clrf	(_timeout_count+1)^(0+128)
  4278                           
  4279                           ;main.c: 97:                         check_request = 0;
  4280  035C  0020               	movlb	0	; select bank0
  4281  035D  01E4               	clrf	_check_request
  4282  035E                     l6511:	
  4283                           
  4284                           ;main.c: 100:                 if(MTOUCH_Button_isPressed(0) == 0 && MTOUCH_Button_isPres
      +                          sed(1) == 1 && MTOUCH_Button_isPressed(2) == 1)
  4285  035E  3000               	movlw	0
  4286  035F  3197  2775  3182   	fcall	_MTOUCH_Button_isPressed
  4287  0362  3A00               	xorlw	0
  4288  0363  1D03               	skipz
  4289  0364  2B96               	goto	l6535
  4290  0365  3001               	movlw	1
  4291  0366  3197  2775  3182   	fcall	_MTOUCH_Button_isPressed
  4292  0369  3A01               	xorlw	1
  4293  036A  1D03               	skipz
  4294  036B  2B96               	goto	l6535
  4295  036C  3002               	movlw	2
  4296  036D  3197  2775  3182   	fcall	_MTOUCH_Button_isPressed
  4297  0370  3A01               	xorlw	1
  4298  0371  1D03               	skipz
  4299  0372  2B96               	goto	l6535
  4300                           
  4301                           ;main.c: 101:                 {;main.c: 102:                     count_conf++;
  4302  0373  3001               	movlw	1
  4303  0374  0021               	movlb	1	; select bank1
  4304  0375  07C2               	addwf	_count_conf^(0+128),f
  4305  0376  3000               	movlw	0
  4306  0377  3DC3               	addwfc	(_count_conf+1)^(0+128),f
  4307                           
  4308                           ;main.c: 103:                     if(count_conf == 1500)
  4309  0378  30DC               	movlw	220
  4310  0379  0642               	xorwf	_count_conf^(0+128),w
  4311  037A  3005               	movlw	5
  4312  037B  1903               	skipnz
  4313  037C  0643               	xorwf	(_count_conf+1)^(0+128),w
  4314  037D  1D03               	btfss	3,2
  4315  037E  2A52               	goto	l6437
  4316                           
  4317                           ;main.c: 104:                     {;main.c: 105:                         count_conf = 0;
  4318  037F  01C2               	clrf	_count_conf^(0+128)
  4319  0380  01C3               	clrf	(_count_conf+1)^(0+128)
  4320                           
  4321                           ;main.c: 106:                         printf("PICSMART");
  4322  0381  3000               	movlw	low (STR_1| (0+32768))
  4323  0382  0020               	movlb	0	; select bank0
  4324  0383  00C8               	movwf	printf@fmt
  4325  0384  3098               	movlw	high (STR_1| (0+32768))
  4326  0385  00C9               	movwf	printf@fmt+1
  4327  0386  3196  265C  3182   	fcall	_printf
  4328                           
  4329                           ;main.c: 107:                         config_status = 1;
  4330  0389  0020               	movlb	0	; select bank0
  4331  038A  01E5               	clrf	_config_status
  4332  038B  0AE5               	incf	_config_status,f
  4333                           
  4334                           ;main.c: 108:                         check_request = 1;
  4335  038C  01E4               	clrf	_check_request
  4336  038D  0AE4               	incf	_check_request,f
  4337                           
  4338                           ;main.c: 109:                         timeout_count = 0;
  4339  038E  0021               	movlb	1	; select bank1
  4340  038F  01C0               	clrf	_timeout_count^(0+128)
  4341  0390  01C1               	clrf	(_timeout_count+1)^(0+128)
  4342                           
  4343                           ;main.c: 110:                         LED_PROCESS(0);
  4344  0391  3000               	movlw	0
  4345  0392  318D  25F8  3182   	fcall	_LED_PROCESS
  4346  0395  2BE5               	goto	L1
  4347  0396                     l6535:	
  4348                           ;main.c: 111:                         blink = 0;
  4349                           
  4350                           
  4351                           ;main.c: 115:                 {;main.c: 116:                     count_conf = 0;
  4352  0396  0021               	movlb	1	; select bank1
  4353  0397  01C2               	clrf	_count_conf^(0+128)
  4354  0398  01C3               	clrf	(_count_conf+1)^(0+128)
  4355  0399  2A52               	goto	l6437
  4356  039A                     l6537:	
  4357                           
  4358                           ;main.c: 120:             {;main.c: 121:                 if(check_request == 1)
  4359  039A  0364               	decf	_check_request,w
  4360  039B  1D03               	btfss	3,2
  4361  039C  2BC3               	goto	l6555
  4362                           
  4363                           ;main.c: 122:                 {;main.c: 123:                     timeout_count++;
  4364  039D  3001               	movlw	1
  4365  039E  0021               	movlb	1	; select bank1
  4366  039F  07C0               	addwf	_timeout_count^(0+128),f
  4367  03A0  3000               	movlw	0
  4368  03A1  3DC1               	addwfc	(_timeout_count+1)^(0+128),f
  4369                           
  4370                           ;main.c: 124:                     if(timeout_count > 30000)
  4371  03A2  3075               	movlw	117
  4372  03A3  0241               	subwf	(_timeout_count+1)^(0+128),w
  4373  03A4  3031               	movlw	49
  4374  03A5  1903               	skipnz
  4375  03A6  0240               	subwf	_timeout_count^(0+128),w
  4376  03A7  1C03               	skipc
  4377  03A8  2BC3               	goto	l6555
  4378                           
  4379                           ;main.c: 125:                     {;main.c: 127:                         LED_PROCESS(0);
  4380  03A9  3000               	movlw	0
  4381  03AA  318D  25F8  3182   	fcall	_LED_PROCESS
  4382                           
  4383                           ;main.c: 128:                         timeout_count++;
  4384  03AD  3001               	movlw	1
  4385  03AE  0021               	movlb	1	; select bank1
  4386  03AF  07C0               	addwf	_timeout_count^(0+128),f
  4387  03B0  3000               	movlw	0
  4388  03B1  3DC1               	addwfc	(_timeout_count+1)^(0+128),f
  4389                           
  4390                           ;main.c: 129:                         if(timeout_count >= 32000)
  4391  03B2  307D               	movlw	125
  4392  03B3  0241               	subwf	(_timeout_count+1)^(0+128),w
  4393  03B4  3000               	movlw	0
  4394  03B5  1903               	skipnz
  4395  03B6  0240               	subwf	_timeout_count^(0+128),w
  4396  03B7  1C03               	skipc
  4397  03B8  2BC3               	goto	l6555
  4398                           
  4399                           ;main.c: 130:                         {;main.c: 131:                             timeout
      +                          _count = 0;
  4400  03B9  01C0               	clrf	_timeout_count^(0+128)
  4401  03BA  01C1               	clrf	(_timeout_count+1)^(0+128)
  4402                           
  4403                           ;main.c: 132:                             LED_PROCESS(last_touch_status.full_status);
  4404  03BB  0020               	movlb	0	; select bank0
  4405  03BC  0861               	movf	_last_touch_status,w
  4406  03BD  318D  25F8  3182   	fcall	_LED_PROCESS
  4407                           
  4408                           ;main.c: 133:                             check_request = 0;
  4409  03C0  0020               	movlb	0	; select bank0
  4410  03C1  01E4               	clrf	_check_request
  4411                           
  4412                           ;main.c: 134:                             config_status = 0;
  4413  03C2  01E5               	clrf	_config_status
  4414  03C3                     l6555:	
  4415                           
  4416                           ;main.c: 139:                 blink_count++;
  4417  03C3  3001               	movlw	1
  4418  03C4  0021               	movlb	1	; select bank1
  4419  03C5  00E0               	movwf	??_main^(0+128)
  4420  03C6  0860               	movf	??_main^(0+128),w
  4421  03C7  0020               	movlb	0	; select bank0
  4422  03C8  07E3               	addwf	_blink_count,f
  4423                           
  4424                           ;main.c: 140:                 if(blink == 0)
  4425  03C9  0021               	movlb	1	; select bank1
  4426  03CA  0846               	movf	_blink^(0+128),w
  4427  03CB  1D03               	btfss	3,2
  4428  03CC  2BDB               	goto	l6567
  4429                           
  4430                           ;main.c: 141:                 {;main.c: 142:                     LED_PROCESS(0);
  4431  03CD  3000               	movlw	0
  4432  03CE  318D  25F8  3182   	fcall	_LED_PROCESS
  4433                           
  4434                           ;main.c: 143:                     if(blink_count == 200)
  4435  03D1  30C8               	movlw	200
  4436  03D2  0020               	movlb	0	; select bank0
  4437  03D3  0663               	xorwf	_blink_count,w
  4438  03D4  1D03               	btfss	3,2
  4439  03D5  2A52               	goto	l6437
  4440                           
  4441                           ;main.c: 144:                     {;main.c: 145:                         blink_count = 0
      +                          ;
  4442  03D6  01E3               	clrf	_blink_count
  4443                           
  4444                           ;main.c: 146:                         blink = 1;
  4445  03D7  0021               	movlb	1	; select bank1
  4446  03D8  01C6               	clrf	_blink^(0+128)
  4447  03D9  0AC6               	incf	_blink^(0+128),f
  4448  03DA  2A52               	goto	l6437
  4449  03DB                     l6567:	
  4450                           
  4451                           ;main.c: 150:                 {;main.c: 151:                     LED_PROCESS(7);
  4452  03DB  3007               	movlw	7
  4453  03DC  318D  25F8  3182   	fcall	_LED_PROCESS
  4454                           
  4455                           ;main.c: 152:                     if(blink_count == 200)
  4456  03DF  30C8               	movlw	200
  4457  03E0  0020               	movlb	0	; select bank0
  4458  03E1  0663               	xorwf	_blink_count,w
  4459  03E2  1D03               	btfss	3,2
  4460  03E3  2A52               	goto	l6437
  4461                           
  4462                           ;main.c: 153:                     {;main.c: 154:                         blink_count = 0
      +                          ;
  4463  03E4  01E3               	clrf	_blink_count
  4464  03E5                     L1:	
  4465                           
  4466                           ;main.c: 155:                         blink = 0;
  4467  03E5  0021               	movlb	1	; select bank1
  4468  03E6  01C6               	clrf	_blink^(0+128)
  4469                           
  4470                           ;main.c: 159:         }
  4471  03E7  2A52               	goto	l6437
  4472  03E8                     __end_of_main:	
  4473                           
  4474                           	psect	text1
  4475  08EE                     __ptext1:	
  4476 ;; *************** function _check_message *****************
  4477 ;; Defined at:
  4478 ;;		line 284 in file "main.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  x               1    wreg     unsigned char 
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;  x               1   50[BANK0 ] unsigned char 
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  1    wreg      void 
  4485 ;; Registers used:
  4486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4492 ;;      Params:         0       0       0       0       0       0       0       0
  4493 ;;      Locals:         0       1       0       0       0       0       0       0
  4494 ;;      Temps:          0       2       0       0       0       0       0       0
  4495 ;;      Totals:         0       3       0       0       0       0       0       0
  4496 ;;Total ram usage:        3 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:   13
  4499 ;; This function calls:
  4500 ;;		_printf
  4501 ;; This function is called by:
  4502 ;;		_main
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           
  4507                           ;psect for function _check_message
  4508  08EE                     _check_message:	
  4509                           
  4510                           ;incstack = 0
  4511                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4512                           ;check_message@x stored from wreg
  4513  08EE  0020               	movlb	0	; select bank0
  4514  08EF  00D2               	movwf	check_message@x
  4515                           
  4516                           ;main.c: 284: void check_message(uint8_t x);main.c: 285: {;main.c: 286:     switch (x)
  4517  08F0  2904               	goto	l6271
  4518  08F1                     l6261:	
  4519                           
  4520                           ;main.c: 289:         {;main.c: 290:             check_request = 0;
  4521  08F1  01E4               	clrf	_check_request
  4522                           
  4523                           ;main.c: 291:             break;
  4524  08F2  0008               	return
  4525  08F3                     l6265:	
  4526                           
  4527                           ;main.c: 299:         {;main.c: 300:             printf("%c",x);
  4528  08F3  303A               	movlw	low (STR_10| (0+32768))
  4529  08F4  00C8               	movwf	printf@fmt
  4530  08F5  3098               	movlw	high (STR_10| (0+32768))
  4531  08F6  00C9               	movwf	printf@fmt+1
  4532  08F7  0852               	movf	check_message@x,w
  4533  08F8  00D0               	movwf	??_check_message
  4534  08F9  01D1               	clrf	??_check_message+1
  4535  08FA  0850               	movf	??_check_message,w
  4536  08FB  00CA               	movwf	?_printf+2
  4537  08FC  0851               	movf	??_check_message+1,w
  4538  08FD  00CB               	movwf	?_printf+3
  4539  08FE  3196  265C         	fcall	_printf
  4540                           
  4541                           ;main.c: 301:             check_request = 1;
  4542  0900  0020               	movlb	0	; select bank0
  4543  0901  01E4               	clrf	_check_request
  4544  0902  0AE4               	incf	_check_request,f
  4545                           
  4546                           ;main.c: 302:             break;
  4547  0903  0008               	return
  4548  0904                     l6271:	
  4549  0904  0852               	movf	check_message@x,w
  4550  0905  00D0               	movwf	??_check_message
  4551  0906  01D1               	clrf	??_check_message+1
  4552                           
  4553                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4554                           ; Switch size 1, requested type "simple"
  4555                           ; Number of cases is 1, Range of values is 0 to 0
  4556                           ; switch strategies available:
  4557                           ; Name         Instructions Cycles
  4558                           ; simple_byte            4     3 (average)
  4559                           ; direct_byte            8     6 (fixed)
  4560                           ; jumptable            260     6 (fixed)
  4561                           ;	Chosen strategy is simple_byte
  4562  0907  0851               	movf	??_check_message+1,w
  4563  0908  3A00               	xorlw	0	; case 0
  4564  0909  1903               	skipnz
  4565  090A  290C               	goto	l6753
  4566  090B  28F3               	goto	l6265
  4567  090C                     l6753:	
  4568                           
  4569                           ; Switch size 1, requested type "simple"
  4570                           ; Number of cases is 2, Range of values is 70 to 84
  4571                           ; switch strategies available:
  4572                           ; Name         Instructions Cycles
  4573                           ; simple_byte            7     4 (average)
  4574                           ; direct_byte           39     9 (fixed)
  4575                           ; jumptable            263     9 (fixed)
  4576                           ;	Chosen strategy is simple_byte
  4577  090C  0850               	movf	??_check_message,w
  4578  090D  3A46               	xorlw	70	; case 70
  4579  090E  1903               	skipnz
  4580  090F  28F1               	goto	l6261
  4581  0910  3A12               	xorlw	18	; case 84
  4582  0911  1903               	skipnz
  4583  0912  28F1               	goto	l6261
  4584  0913  28F3               	goto	l6265
  4585  0914  0008               	return
  4586  0915                     __end_of_check_message:	
  4587                           
  4588                           	psect	text2
  4589  0991                     __ptext2:	
  4590 ;; *************** function _check_data *****************
  4591 ;; Defined at:
  4592 ;;		line 306 in file "main.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  x               1    wreg     unsigned char 
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;  x               1    3[COMMON] unsigned char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  1    wreg      _Bool 
  4599 ;; Registers used:
  4600 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4606 ;;      Params:         0       0       0       0       0       0       0       0
  4607 ;;      Locals:         1       0       0       0       0       0       0       0
  4608 ;;      Temps:          2       0       0       0       0       0       0       0
  4609 ;;      Totals:         3       0       0       0       0       0       0       0
  4610 ;;Total ram usage:        3 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    4
  4613 ;; This function calls:
  4614 ;;		Nothing
  4615 ;; This function is called by:
  4616 ;;		_main
  4617 ;; This function uses a non-reentrant model
  4618 ;;
  4619                           
  4620                           
  4621                           ;psect for function _check_data
  4622  0991                     _check_data:	
  4623                           
  4624                           ;incstack = 0
  4625                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  4626                           ;check_data@x stored from wreg
  4627  0991  00F3               	movwf	check_data@x
  4628                           
  4629                           ;main.c: 306: _Bool check_data(uint8_t x);main.c: 307: {;main.c: 308:     switch(x)
  4630  0992  2997               	goto	l4957
  4631  0993                     l4915:	
  4632  0993  3001               	movlw	1
  4633  0994  0008               	return
  4634  0995                     l4951:	
  4635  0995  3000               	movlw	0
  4636  0996  0008               	return
  4637  0997                     l4957:	
  4638  0997  0873               	movf	check_data@x,w
  4639  0998  00F1               	movwf	??_check_data
  4640  0999  01F2               	clrf	??_check_data+1
  4641                           
  4642                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4643                           ; Switch size 1, requested type "simple"
  4644                           ; Number of cases is 1, Range of values is 0 to 0
  4645                           ; switch strategies available:
  4646                           ; Name         Instructions Cycles
  4647                           ; simple_byte            4     3 (average)
  4648                           ; direct_byte            8     6 (fixed)
  4649                           ; jumptable            260     6 (fixed)
  4650                           ;	Chosen strategy is simple_byte
  4651  099A  0872               	movf	??_check_data+1,w
  4652  099B  3A00               	xorlw	0	; case 0
  4653  099C  1903               	skipnz
  4654  099D  299F               	goto	l6755
  4655  099E  2995               	goto	l4951
  4656  099F                     l6755:	
  4657                           
  4658                           ; Switch size 1, requested type "simple"
  4659                           ; Number of cases is 9, Range of values is 48 to 85
  4660                           ; switch strategies available:
  4661                           ; Name         Instructions Cycles
  4662                           ; simple_byte           28    15 (average)
  4663                           ; direct_byte           85     9 (fixed)
  4664                           ; jumptable            263     9 (fixed)
  4665                           ;	Chosen strategy is simple_byte
  4666  099F  0871               	movf	??_check_data,w
  4667  09A0  3A30               	xorlw	48	; case 48
  4668  09A1  1903               	skipnz
  4669  09A2  2993               	goto	l4915
  4670  09A3  3A01               	xorlw	1	; case 49
  4671  09A4  1903               	skipnz
  4672  09A5  2993               	goto	l4915
  4673  09A6  3A03               	xorlw	3	; case 50
  4674  09A7  1903               	skipnz
  4675  09A8  2993               	goto	l4915
  4676  09A9  3A01               	xorlw	1	; case 51
  4677  09AA  1903               	skipnz
  4678  09AB  2993               	goto	l4915
  4679  09AC  3A07               	xorlw	7	; case 52
  4680  09AD  1903               	skipnz
  4681  09AE  2993               	goto	l4915
  4682  09AF  3A01               	xorlw	1	; case 53
  4683  09B0  1903               	skipnz
  4684  09B1  2993               	goto	l4915
  4685  09B2  3A03               	xorlw	3	; case 54
  4686  09B3  1903               	skipnz
  4687  09B4  2993               	goto	l4915
  4688  09B5  3A01               	xorlw	1	; case 55
  4689  09B6  1903               	skipnz
  4690  09B7  2993               	goto	l4915
  4691  09B8  3A62               	xorlw	98	; case 85
  4692  09B9  1903               	skipnz
  4693  09BA  2993               	goto	l4915
  4694  09BB  2995               	goto	l4951
  4695  09BC  0008               	return
  4696  09BD                     __end_of_check_data:	
  4697                           
  4698                           	psect	text3
  4699  16B3                     __ptext3:	
  4700 ;; *************** function _SYSTEM_Initialize *****************
  4701 ;; Defined at:
  4702 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;		None
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4716 ;;      Params:         0       0       0       0       0       0       0       0
  4717 ;;      Locals:         0       0       0       0       0       0       0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0       0
  4719 ;;      Totals:         0       0       0       0       0       0       0       0
  4720 ;;Total ram usage:        0 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:    9
  4723 ;; This function calls:
  4724 ;;		_EUSART_Initialize
  4725 ;;		_MTOUCH_Initialize
  4726 ;;		_OSCILLATOR_Initialize
  4727 ;;		_PIN_MANAGER_Initialize
  4728 ;;		_TMR2_Initialize
  4729 ;;		_WDT_Initialize
  4730 ;; This function is called by:
  4731 ;;		_main
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           
  4736                           ;psect for function _SYSTEM_Initialize
  4737  16B3                     _SYSTEM_Initialize:	
  4738                           
  4739                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4740                           
  4741                           ;incstack = 0
  4742                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4743  16B3  3197  27E3  3196   	fcall	_PIN_MANAGER_Initialize
  4744                           
  4745                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4746  16B6  3195  2581  3196   	fcall	_OSCILLATOR_Initialize
  4747                           
  4748                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4749  16B9  3187  27FC  3196   	fcall	_WDT_Initialize
  4750                           
  4751                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  4752  16BC  3195  25B3  3196   	fcall	_TMR2_Initialize
  4753                           
  4754                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  4755  16BF  318B  234C  3196   	fcall	_EUSART_Initialize
  4756                           
  4757                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  4758  16C2  3195  25CE         	fcall	_MTOUCH_Initialize
  4759  16C4  0008               	return
  4760  16C5                     __end_of_SYSTEM_Initialize:	
  4761                           
  4762                           	psect	text4
  4763  07FC                     __ptext4:	
  4764 ;; *************** function _WDT_Initialize *****************
  4765 ;; Defined at:
  4766 ;;		line 69 in file "mcc_generated_files/mcc.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;		None
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		wreg
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4780 ;;      Params:         0       0       0       0       0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0
  4783 ;;      Totals:         0       0       0       0       0       0       0       0
  4784 ;;Total ram usage:        0 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    4
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_SYSTEM_Initialize
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           
  4795                           ;psect for function _WDT_Initialize
  4796  07FC                     _WDT_Initialize:	
  4797                           
  4798                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  4799                           
  4800                           ;incstack = 0
  4801                           ; Regs used in _WDT_Initialize: [wreg]
  4802  07FC  3016               	movlw	22
  4803  07FD  0021               	movlb	1	; select bank1
  4804  07FE  0097               	movwf	23	;volatile
  4805  07FF  0008               	return
  4806  0800                     __end_of_WDT_Initialize:	
  4807                           
  4808                           	psect	text5
  4809  15B3                     __ptext5:	
  4810 ;; *************** function _TMR2_Initialize *****************
  4811 ;; Defined at:
  4812 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;		None
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  1    wreg      void 
  4819 ;; Registers used:
  4820 ;;		wreg, status,2
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4826 ;;      Params:         0       0       0       0       0       0       0       0
  4827 ;;      Locals:         0       0       0       0       0       0       0       0
  4828 ;;      Temps:          0       0       0       0       0       0       0       0
  4829 ;;      Totals:         0       0       0       0       0       0       0       0
  4830 ;;Total ram usage:        0 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    4
  4833 ;; This function calls:
  4834 ;;		Nothing
  4835 ;; This function is called by:
  4836 ;;		_SYSTEM_Initialize
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           
  4841                           ;psect for function _TMR2_Initialize
  4842  15B3                     _TMR2_Initialize:	
  4843                           
  4844                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4845                           
  4846                           ;incstack = 0
  4847                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4848  15B3  30FF               	movlw	255
  4849  15B4  0020               	movlb	0	; select bank0
  4850  15B5  009B               	movwf	27	;volatile
  4851                           
  4852                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4853  15B6  019A               	clrf	26	;volatile
  4854                           
  4855                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4856  15B7  1091               	bcf	17,1	;volatile
  4857                           
  4858                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  4859  15B8  3004               	movlw	4
  4860  15B9  009C               	movwf	28	;volatile
  4861  15BA  0008               	return
  4862  15BB                     __end_of_TMR2_Initialize:	
  4863                           
  4864                           	psect	text6
  4865  17E3                     __ptext6:	
  4866 ;; *************** function _PIN_MANAGER_Initialize *****************
  4867 ;; Defined at:
  4868 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;		None
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4882 ;;      Params:         0       0       0       0       0       0       0       0
  4883 ;;      Locals:         0       0       0       0       0       0       0       0
  4884 ;;      Temps:          0       0       0       0       0       0       0       0
  4885 ;;      Totals:         0       0       0       0       0       0       0       0
  4886 ;;Total ram usage:        0 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    4
  4889 ;; This function calls:
  4890 ;;		Nothing
  4891 ;; This function is called by:
  4892 ;;		_SYSTEM_Initialize
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           
  4897                           ;psect for function _PIN_MANAGER_Initialize
  4898  17E3                     _PIN_MANAGER_Initialize:	
  4899                           
  4900                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  4901                           
  4902                           ;incstack = 0
  4903                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4904  17E3  3037               	movlw	55
  4905  17E4  0022               	movlb	2	; select bank2
  4906  17E5  008C               	movwf	12	;volatile
  4907                           
  4908                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x60;
  4909  17E6  3060               	movlw	96
  4910  17E7  008D               	movwf	13	;volatile
  4911                           
  4912                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xAC;
  4913  17E8  30AC               	movlw	172
  4914  17E9  008E               	movwf	14	;volatile
  4915                           
  4916                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  4917  17EA  3008               	movlw	8
  4918  17EB  0021               	movlb	1	; select bank1
  4919  17EC  008C               	movwf	12	;volatile
  4920                           
  4921                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x20;
  4922  17ED  3020               	movlw	32
  4923  17EE  008D               	movwf	13	;volatile
  4924                           
  4925                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x40;
  4926  17EF  3040               	movlw	64
  4927  17F0  008E               	movwf	14	;volatile
  4928                           
  4929                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xEC;
  4930  17F1  30EC               	movlw	236
  4931  17F2  0023               	movlb	3	; select bank3
  4932  17F3  008E               	movwf	14	;volatile
  4933                           
  4934                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  4935  17F4  3040               	movlw	64
  4936  17F5  008D               	movwf	13	;volatile
  4937                           
  4938                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  4939  17F6  3037               	movlw	55
  4940  17F7  008C               	movwf	12	;volatile
  4941                           
  4942                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4943  17F8  0024               	movlb	4	; select bank4
  4944  17F9  018D               	clrf	13	;volatile
  4945                           
  4946                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4947  17FA  018C               	clrf	12	;volatile
  4948                           
  4949                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4950  17FB  0021               	movlb	1	; select bank1
  4951  17FC  1795               	bsf	21,7	;volatile
  4952                           
  4953                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  4954  17FD  0022               	movlb	2	; select bank2
  4955  17FE  019D               	clrf	29	;volatile
  4956  17FF  0008               	return
  4957  1800                     __end_of_PIN_MANAGER_Initialize:	
  4958                           
  4959                           	psect	text7
  4960  1581                     __ptext7:	
  4961 ;; *************** function _OSCILLATOR_Initialize *****************
  4962 ;; Defined at:
  4963 ;;		line 61 in file "mcc_generated_files/mcc.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  1    wreg      void 
  4970 ;; Registers used:
  4971 ;;		wreg, status,2
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4977 ;;      Params:         0       0       0       0       0       0       0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0       0
  4979 ;;      Temps:          0       0       0       0       0       0       0       0
  4980 ;;      Totals:         0       0       0       0       0       0       0       0
  4981 ;;Total ram usage:        0 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    4
  4984 ;; This function calls:
  4985 ;;		Nothing
  4986 ;; This function is called by:
  4987 ;;		_SYSTEM_Initialize
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _OSCILLATOR_Initialize
  4993  1581                     _OSCILLATOR_Initialize:	
  4994                           
  4995                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4999  1581  30F0               	movlw	240
  5000  1582  0021               	movlb	1	; select bank1
  5001  1583  0099               	movwf	25	;volatile
  5002                           
  5003                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  5004  1584  0022               	movlb	2	; select bank2
  5005  1585  0196               	clrf	22	;volatile
  5006  1586  0008               	return
  5007  1587                     __end_of_OSCILLATOR_Initialize:	
  5008                           
  5009                           	psect	text8
  5010  15CE                     __ptext8:	
  5011 ;; *************** function _MTOUCH_Initialize *****************
  5012 ;; Defined at:
  5013 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  1    wreg      void 
  5020 ;; Registers used:
  5021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5027 ;;      Params:         0       0       0       0       0       0       0       0
  5028 ;;      Locals:         0       0       0       0       0       0       0       0
  5029 ;;      Temps:          0       0       0       0       0       0       0       0
  5030 ;;      Totals:         0       0       0       0       0       0       0       0
  5031 ;;Total ram usage:        0 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    8
  5034 ;; This function calls:
  5035 ;;		_MTOUCH_Button_InitializeAll
  5036 ;;		_MTOUCH_Sensor_InitializeAll
  5037 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5038 ;;		_MTOUCH_Sensor_Scan_Initialize
  5039 ;; This function is called by:
  5040 ;;		_SYSTEM_Initialize
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           
  5045                           ;psect for function _MTOUCH_Initialize
  5046  15CE                     _MTOUCH_Initialize:	
  5047                           
  5048                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  5049                           
  5050                           ;incstack = 0
  5051                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5052  15CE  3196  2610  3195   	fcall	_MTOUCH_Sensor_InitializeAll
  5053                           
  5054                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  5055  15D1  3197  27C7  3195   	fcall	_MTOUCH_Button_InitializeAll
  5056                           
  5057                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  5058  15D4  3196  26C5  3195   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  5059                           
  5060                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  5061  15D7  3196  264C         	fcall	_MTOUCH_Sensor_Scan_Initialize
  5062  15D9  0008               	return
  5063  15DA                     __end_of_MTOUCH_Initialize:	
  5064                           
  5065                           	psect	text9
  5066  1610                     __ptext9:	
  5067 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  5068 ;; Defined at:
  5069 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;		None
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  sensor          1   10[COMMON] enum E2854
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  1    wreg      void 
  5076 ;; Registers used:
  5077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5083 ;;      Params:         0       0       0       0       0       0       0       0
  5084 ;;      Locals:         1       0       0       0       0       0       0       0
  5085 ;;      Temps:          1       0       0       0       0       0       0       0
  5086 ;;      Totals:         2       0       0       0       0       0       0       0
  5087 ;;Total ram usage:        2 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    7
  5090 ;; This function calls:
  5091 ;;		_MTOUCH_Sensor_Initialize
  5092 ;; This function is called by:
  5093 ;;		_MTOUCH_Initialize
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           
  5098                           ;psect for function _MTOUCH_Sensor_InitializeAll
  5099  1610                     _MTOUCH_Sensor_InitializeAll:	
  5100                           
  5101                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 225:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 227:     for (sensor = 0; sensor < 3u; sensor
      +                          ++)
  5102                           
  5103                           ;incstack = 0
  5104                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  5105  1610  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  5106  1611                     l6097:	
  5107                           
  5108                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 229:         MTOUCH_Sensor_Initialize(sensor);
  5109  1611  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  5110  1612  3196  26D8  3196   	fcall	_MTOUCH_Sensor_Initialize
  5111                           
  5112                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     }
  5113  1615  3001               	movlw	1
  5114  1616  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  5115  1617  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  5116  1618  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  5117  1619  3003               	movlw	3
  5118  161A  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  5119  161B  1803               	btfsc	3,0
  5120  161C  0008               	return
  5121  161D  2E11               	goto	l6097
  5122  161E                     __end_of_MTOUCH_Sensor_InitializeAll:	
  5123                           
  5124                           	psect	text10
  5125  16D8                     __ptext10:	
  5126 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  5127 ;; Defined at:
  5128 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;  sensor          1    wreg     enum E2854
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;  sensor          1    8[COMMON] enum E2854
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  1    wreg      enum E2858
  5135 ;; Registers used:
  5136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5142 ;;      Params:         0       0       0       0       0       0       0       0
  5143 ;;      Locals:         1       0       0       0       0       0       0       0
  5144 ;;      Temps:          1       0       0       0       0       0       0       0
  5145 ;;      Totals:         2       0       0       0       0       0       0       0
  5146 ;;Total ram usage:        2 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    6
  5149 ;; This function calls:
  5150 ;;		_MTOUCH_Sensor_Calibrate
  5151 ;;		_MTOUCH_Sensor_Enable
  5152 ;;		_Sensor_Sampled_Reset
  5153 ;;		___bmul
  5154 ;; This function is called by:
  5155 ;;		_MTOUCH_Sensor_InitializeAll
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           
  5160                           ;psect for function _MTOUCH_Sensor_Initialize
  5161  16D8                     _MTOUCH_Sensor_Initialize:	
  5162                           
  5163                           ;incstack = 0
  5164                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5165                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  5166  16D8  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  5167                           
  5168                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           209: {;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     MTOUCH_Sensor_Enable(sensor
      +                          );
  5169  16D9  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5170  16DA  3196  26A1  3196   	fcall	_MTOUCH_Sensor_Enable
  5171                           
  5172                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 212:     MTOUCH_Sensor_Calibrate(sensor);
  5173  16DD  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5174  16DE  3196  268F  3196   	fcall	_MTOUCH_Sensor_Calibrate
  5175                           
  5176                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  5177  16E1  3009               	movlw	9
  5178  16E2  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  5179  16E3  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  5180  16E4  00F1               	movwf	___bmul@multiplicand
  5181  16E5  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5182  16E6  3196  266D  3196   	fcall	___bmul
  5183  16E9  3E50               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  5184  16EA  3195  25AB         	fcall	_Sensor_Sampled_Reset
  5185  16EC  0008               	return
  5186  16ED                     __end_of_MTOUCH_Sensor_Initialize:	
  5187                           
  5188                           	psect	text11
  5189  16A1                     __ptext11:	
  5190 ;; *************** function _MTOUCH_Sensor_Enable *****************
  5191 ;; Defined at:
  5192 ;;		line 841 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;  sensor          1    wreg     enum E2854
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  sensor          1    6[COMMON] enum E2854
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  1    wreg      void 
  5199 ;; Registers used:
  5200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5206 ;;      Params:         0       0       0       0       0       0       0       0
  5207 ;;      Locals:         1       0       0       0       0       0       0       0
  5208 ;;      Temps:          1       0       0       0       0       0       0       0
  5209 ;;      Totals:         2       0       0       0       0       0       0       0
  5210 ;;Total ram usage:        2 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    5
  5213 ;; This function calls:
  5214 ;;		___bmul
  5215 ;; This function is called by:
  5216 ;;		_MTOUCH_Sensor_Initialize
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           
  5221                           ;psect for function _MTOUCH_Sensor_Enable
  5222  16A1                     _MTOUCH_Sensor_Enable:	
  5223                           
  5224                           ;incstack = 0
  5225                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5226                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  5227  16A1  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  5228                           
  5229                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 842: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 843:     if(sensor < 3u)
  5230  16A2  3003               	movlw	3
  5231  16A3  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  5232  16A4  1803               	skipnc
  5233  16A5  0008               	return
  5234                           
  5235                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 844:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  5236  16A6  3009               	movlw	9
  5237  16A7  00F5               	movwf	??_MTOUCH_Sensor_Enable
  5238  16A8  0875               	movf	??_MTOUCH_Sensor_Enable,w
  5239  16A9  00F1               	movwf	___bmul@multiplicand
  5240  16AA  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  5241  16AB  3196  266D         	fcall	___bmul
  5242  16AD  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  5243  16AE  0086               	movwf	6
  5244  16AF  3001               	movlw	1	; select bank2/3
  5245  16B0  0087               	movwf	7
  5246  16B1  1581               	bsf	1,3
  5247  16B2  0008               	return
  5248  16B3                     __end_of_MTOUCH_Sensor_Enable:	
  5249                           
  5250                           	psect	text12
  5251  17C7                     __ptext12:	
  5252 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  5253 ;; Defined at:
  5254 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;  button          1    0[BANK0 ] enum E3069
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5268 ;;      Params:         0       0       0       0       0       0       0       0
  5269 ;;      Locals:         0       1       0       0       0       0       0       0
  5270 ;;      Temps:          1       0       0       0       0       0       0       0
  5271 ;;      Totals:         1       1       0       0       0       0       0       0
  5272 ;;Total ram usage:        2 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:    7
  5275 ;; This function calls:
  5276 ;;		_MTOUCH_Button_Initialize
  5277 ;;		_memcpy
  5278 ;; This function is called by:
  5279 ;;		_MTOUCH_Initialize
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _MTOUCH_Button_InitializeAll
  5285  17C7                     _MTOUCH_Button_InitializeAll:	
  5286                           
  5287                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 175:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5291  17C7  3000               	movlw	low (_mtouch_button_init| (0+32768))
  5292  17C8  00F1               	movwf	memcpy@s1
  5293  17C9  3090               	movlw	high (_mtouch_button_init| (0+32768))
  5294  17CA  00F2               	movwf	memcpy@s1+1
  5295  17CB  3030               	movlw	48
  5296  17CC  00F3               	movwf	memcpy@n
  5297  17CD  3000               	movlw	0
  5298  17CE  00F4               	movwf	memcpy@n+1
  5299  17CF  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  5300  17D0  3189  2166  3197   	fcall	_memcpy
  5301                           
  5302                           ;mcc_generated_files/mtouch/mtouch_button.c: 177:     for (button = 0; button < 3u; butt
      +                          on++)
  5303  17D3  0020               	movlb	0	; select bank0
  5304  17D4  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  5305  17D5                     l6111:	
  5306                           
  5307                           ;mcc_generated_files/mtouch/mtouch_button.c: 178:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 179:         MTOUCH_Button_Initialize(button);
  5308  17D5  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  5309  17D6  318A  22DE  3197   	fcall	_MTOUCH_Button_Initialize
  5310                           
  5311                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     }
  5312  17D9  3001               	movlw	1
  5313  17DA  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  5314  17DB  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  5315  17DC  0020               	movlb	0	; select bank0
  5316  17DD  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  5317  17DE  3003               	movlw	3
  5318  17DF  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  5319  17E0  1803               	btfsc	3,0
  5320  17E1  0008               	return
  5321  17E2  2FD5               	goto	l6111
  5322  17E3                     __end_of_MTOUCH_Button_InitializeAll:	
  5323                           
  5324                           	psect	text13
  5325  0966                     __ptext13:	
  5326 ;; *************** function _memcpy *****************
  5327 ;; Defined at:
  5328 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  d1              1    wreg     PTR void 
  5331 ;;		 -> mtouch_button(48), 
  5332 ;;  s1              2    1[COMMON] PTR const void 
  5333 ;;		 -> mtouch_button_init(48), 
  5334 ;;  n               2    3[COMMON] unsigned int 
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;  d1              1    9[COMMON] PTR void 
  5337 ;;		 -> mtouch_button(48), 
  5338 ;;  s               2    7[COMMON] PTR const unsigned char 
  5339 ;;		 -> mtouch_button_init(48), 
  5340 ;;  d               1   10[COMMON] PTR unsigned char 
  5341 ;;		 -> mtouch_button(48), 
  5342 ;;  tmp             1    6[COMMON] unsigned char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      PTR void 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5352 ;;      Params:         4       0       0       0       0       0       0       0
  5353 ;;      Locals:         5       0       0       0       0       0       0       0
  5354 ;;      Temps:          1       0       0       0       0       0       0       0
  5355 ;;      Totals:        10       0       0       0       0       0       0       0
  5356 ;;Total ram usage:       10 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    4
  5359 ;; This function calls:
  5360 ;;		Nothing
  5361 ;; This function is called by:
  5362 ;;		_MTOUCH_Button_InitializeAll
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           
  5367                           ;psect for function _memcpy
  5368  0966                     _memcpy:	
  5369                           
  5370                           ;incstack = 0
  5371                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  5372                           ;memcpy@d1 stored from wreg
  5373  0966  00F9               	movwf	memcpy@d1
  5374  0967  0872               	movf	memcpy@s1+1,w
  5375  0968  00F8               	movwf	memcpy@s+1
  5376  0969  0871               	movf	memcpy@s1,w
  5377  096A  00F7               	movwf	memcpy@s
  5378  096B  0879               	movf	memcpy@d1,w
  5379  096C  00F5               	movwf	??_memcpy
  5380  096D  0875               	movf	??_memcpy,w
  5381  096E  00FA               	movwf	memcpy@d
  5382  096F                     l6035:	
  5383  096F  3001               	movlw	1
  5384  0970  02F3               	subwf	memcpy@n,f
  5385  0971  3000               	movlw	0
  5386  0972  3BF4               	subwfb	memcpy@n+1,f
  5387  0973  0A73               	incf	memcpy@n,w
  5388  0974  1903               	btfsc	3,2
  5389  0975  0A74               	incf	memcpy@n+1,w
  5390  0976  1903               	btfsc	3,2
  5391  0977  0008               	return
  5392  0978  0877               	movf	memcpy@s,w
  5393  0979  0084               	movwf	4
  5394  097A  0878               	movf	memcpy@s+1,w
  5395  097B  0085               	movwf	5
  5396  097C  0800               	movf	0,w	;code access
  5397  097D  00F5               	movwf	??_memcpy
  5398  097E  0875               	movf	??_memcpy,w
  5399  097F  00F6               	movwf	memcpy@tmp
  5400  0980  3001               	movlw	1
  5401  0981  07F7               	addwf	memcpy@s,f
  5402  0982  3000               	movlw	0
  5403  0983  3DF8               	addwfc	memcpy@s+1,f
  5404  0984  0876               	movf	memcpy@tmp,w
  5405  0985  00F5               	movwf	??_memcpy
  5406  0986  087A               	movf	memcpy@d,w
  5407  0987  0086               	movwf	6
  5408  0988  3001               	movlw	1	; select bank2/3
  5409  0989  0087               	movwf	7
  5410  098A  0875               	movf	??_memcpy,w
  5411  098B  0081               	movwf	1
  5412  098C  3001               	movlw	1
  5413  098D  00F5               	movwf	??_memcpy
  5414  098E  0875               	movf	??_memcpy,w
  5415  098F  07FA               	addwf	memcpy@d,f
  5416  0990  296F               	goto	l6035
  5417  0991                     __end_of_memcpy:	
  5418                           
  5419                           	psect	text14
  5420  0B4C                     __ptext14:	
  5421 ;; *************** function _EUSART_Initialize *****************
  5422 ;; Defined at:
  5423 ;;		line 85 in file "mcc_generated_files/eusart.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  1    wreg      void 
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0, pclath, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5437 ;;      Params:         0       0       0       0       0       0       0       0
  5438 ;;      Locals:         0       0       0       0       0       0       0       0
  5439 ;;      Temps:          1       0       0       0       0       0       0       0
  5440 ;;      Totals:         1       0       0       0       0       0       0       0
  5441 ;;Total ram usage:        1 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    5
  5444 ;; This function calls:
  5445 ;;		_EUSART_SetErrorHandler
  5446 ;;		_EUSART_SetFramingErrorHandler
  5447 ;;		_EUSART_SetOverrunErrorHandler
  5448 ;;		_EUSART_SetRxInterruptHandler
  5449 ;;		_EUSART_SetTxInterruptHandler
  5450 ;; This function is called by:
  5451 ;;		_SYSTEM_Initialize
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           
  5456                           ;psect for function _EUSART_Initialize
  5457  0B4C                     _EUSART_Initialize:	
  5458                           
  5459                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
  5460                           
  5461                           ;incstack = 0
  5462                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5463  0B4C  0021               	movlb	1	; select bank1
  5464  0B4D  1291               	bcf	17,5	;volatile
  5465                           
  5466                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5467  0B4E  3077               	movlw	low _EUSART_Receive_ISR
  5468  0B4F  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5469  0B50  300A               	movlw	high _EUSART_Receive_ISR
  5470  0B51  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5471  0B52  3195  2575  318B   	fcall	_EUSART_SetRxInterruptHandler
  5472                           
  5473                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
  5474  0B55  0021               	movlb	1	; select bank1
  5475  0B56  1211               	bcf	17,4	;volatile
  5476                           
  5477                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  5478  0B57  3019               	movlw	low _EUSART_Transmit_ISR
  5479  0B58  00F1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  5480  0B59  3008               	movlw	high _EUSART_Transmit_ISR
  5481  0B5A  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  5482  0B5B  3195  257B  318B   	fcall	_EUSART_SetTxInterruptHandler
  5483                           
  5484                           ;mcc_generated_files/eusart.c: 95:     BAUDCON = 0x08;
  5485  0B5E  3008               	movlw	8
  5486  0B5F  0023               	movlb	3	; select bank3
  5487  0B60  009F               	movwf	31	;volatile
  5488                           
  5489                           ;mcc_generated_files/eusart.c: 98:     RCSTA = 0x90;
  5490  0B61  3090               	movlw	144
  5491  0B62  009D               	movwf	29	;volatile
  5492                           
  5493                           ;mcc_generated_files/eusart.c: 101:     TXSTA = 0x24;
  5494  0B63  3024               	movlw	36
  5495  0B64  009E               	movwf	30	;volatile
  5496                           
  5497                           ;mcc_generated_files/eusart.c: 104:     SPBRGL = 0x40;
  5498  0B65  3040               	movlw	64
  5499  0B66  009B               	movwf	27	;volatile
  5500                           
  5501                           ;mcc_generated_files/eusart.c: 107:     SPBRGH = 0x03;
  5502  0B67  3003               	movlw	3
  5503  0B68  009C               	movwf	28	;volatile
  5504                           
  5505                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5506  0B69  301F               	movlw	low _EUSART_DefaultFramingErrorHandler
  5507  0B6A  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  5508  0B6B  3015               	movlw	high _EUSART_DefaultFramingErrorHandler
  5509  0B6C  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  5510  0B6D  3195  2569  318B   	fcall	_EUSART_SetFramingErrorHandler
  5511                           
  5512                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5513  0B70  3031               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5514  0B71  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  5515  0B72  3015               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5516  0B73  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  5517  0B74  3195  256F  318B   	fcall	_EUSART_SetOverrunErrorHandler
  5518                           
  5519                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5520  0B77  3022               	movlw	low _EUSART_DefaultErrorHandler
  5521  0B78  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  5522  0B79  3015               	movlw	high _EUSART_DefaultErrorHandler
  5523  0B7A  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  5524  0B7B  3195  2563         	fcall	_EUSART_SetErrorHandler
  5525                           
  5526                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
  5527  0B7D  0021               	movlb	1	; select bank1
  5528  0B7E  01C8               	clrf	_eusartRxLastError^(0+128)	;volatile
  5529                           
  5530                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
  5531  0B7F  0020               	movlb	0	; select bank0
  5532  0B80  01EA               	clrf	_eusartTxHead	;volatile
  5533                           
  5534                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
  5535  0B81  01E9               	clrf	_eusartTxTail	;volatile
  5536                           
  5537                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  5538  0B82  3008               	movlw	8
  5539  0B83  00F3               	movwf	??_EUSART_Initialize
  5540  0B84  0873               	movf	??_EUSART_Initialize,w
  5541  0B85  0021               	movlb	1	; select bank1
  5542  0B86  00DF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  5543                           
  5544                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
  5545  0B87  01FC               	clrf	_eusartRxHead	;volatile
  5546                           
  5547                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
  5548  0B88  0020               	movlb	0	; select bank0
  5549  0B89  01E8               	clrf	_eusartRxTail	;volatile
  5550                           
  5551                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
  5552  0B8A  01E7               	clrf	_eusartRxCount	;volatile
  5553                           
  5554                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
  5555  0B8B  0021               	movlb	1	; select bank1
  5556  0B8C  1691               	bsf	17,5	;volatile
  5557  0B8D  0008               	return
  5558  0B8E                     __end_of_EUSART_Initialize:	
  5559                           
  5560                           	psect	text15
  5561  157B                     __ptext15:	
  5562 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  5563 ;; Defined at:
  5564 ;;		line 284 in file "mcc_generated_files/eusart.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5567 ;;		 -> EUSART_Transmit_ISR(1), 
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5579 ;;      Params:         2       0       0       0       0       0       0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0       0
  5582 ;;      Totals:         2       0       0       0       0       0       0       0
  5583 ;;Total ram usage:        2 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    4
  5586 ;; This function calls:
  5587 ;;		Nothing
  5588 ;; This function is called by:
  5589 ;;		_EUSART_Initialize
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           
  5594                           ;psect for function _EUSART_SetTxInterruptHandler
  5595  157B                     _EUSART_SetTxInterruptHandler:	
  5596                           
  5597                           ;mcc_generated_files/eusart.c: 285:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  5598                           
  5599                           ;incstack = 0
  5600                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  5601  157B  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  5602  157C  0021               	movlb	1	; select bank1
  5603  157D  00DE               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  5604  157E  0871               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  5605  157F  00DD               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  5606  1580  0008               	return
  5607  1581                     __end_of_EUSART_SetTxInterruptHandler:	
  5608                           
  5609                           	psect	text16
  5610  1575                     __ptext16:	
  5611 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5612 ;; Defined at:
  5613 ;;		line 288 in file "mcc_generated_files/eusart.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5616 ;;		 -> EUSART_Receive_ISR(1), 
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;		None
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  1    wreg      void 
  5621 ;; Registers used:
  5622 ;;		wreg
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5628 ;;      Params:         2       0       0       0       0       0       0       0
  5629 ;;      Locals:         0       0       0       0       0       0       0       0
  5630 ;;      Temps:          0       0       0       0       0       0       0       0
  5631 ;;      Totals:         2       0       0       0       0       0       0       0
  5632 ;;Total ram usage:        2 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    4
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		_EUSART_Initialize
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           
  5643                           ;psect for function _EUSART_SetRxInterruptHandler
  5644  1575                     _EUSART_SetRxInterruptHandler:	
  5645                           
  5646                           ;mcc_generated_files/eusart.c: 289:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5647                           
  5648                           ;incstack = 0
  5649                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5650  1575  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  5651  1576  0021               	movlb	1	; select bank1
  5652  1577  00DC               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  5653  1578  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  5654  1579  00DB               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  5655  157A  0008               	return
  5656  157B                     __end_of_EUSART_SetRxInterruptHandler:	
  5657                           
  5658                           	psect	text17
  5659  156F                     __ptext17:	
  5660 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5661 ;; Defined at:
  5662 ;;		line 276 in file "mcc_generated_files/eusart.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5665 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;		None
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  1    wreg      void 
  5670 ;; Registers used:
  5671 ;;		wreg
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5677 ;;      Params:         2       0       0       0       0       0       0       0
  5678 ;;      Locals:         0       0       0       0       0       0       0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0       0
  5680 ;;      Totals:         2       0       0       0       0       0       0       0
  5681 ;;Total ram usage:        2 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    4
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_EUSART_Initialize
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           
  5692                           ;psect for function _EUSART_SetOverrunErrorHandler
  5693  156F                     _EUSART_SetOverrunErrorHandler:	
  5694                           
  5695                           ;mcc_generated_files/eusart.c: 277:     EUSART_OverrunErrorHandler = interruptHandler;
  5696                           
  5697                           ;incstack = 0
  5698                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5699  156F  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  5700  1570  0021               	movlb	1	; select bank1
  5701  1571  00D8               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5702  1572  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  5703  1573  00D7               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5704  1574  0008               	return
  5705  1575                     __end_of_EUSART_SetOverrunErrorHandler:	
  5706                           
  5707                           	psect	text18
  5708  1569                     __ptext18:	
  5709 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5710 ;; Defined at:
  5711 ;;		line 272 in file "mcc_generated_files/eusart.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5714 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;		None
  5717 ;; Return value:  Size  Location     Type
  5718 ;;                  1    wreg      void 
  5719 ;; Registers used:
  5720 ;;		wreg
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5726 ;;      Params:         2       0       0       0       0       0       0       0
  5727 ;;      Locals:         0       0       0       0       0       0       0       0
  5728 ;;      Temps:          0       0       0       0       0       0       0       0
  5729 ;;      Totals:         2       0       0       0       0       0       0       0
  5730 ;;Total ram usage:        2 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; Hardware stack levels required when called:    4
  5733 ;; This function calls:
  5734 ;;		Nothing
  5735 ;; This function is called by:
  5736 ;;		_EUSART_Initialize
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           
  5741                           ;psect for function _EUSART_SetFramingErrorHandler
  5742  1569                     _EUSART_SetFramingErrorHandler:	
  5743                           
  5744                           ;mcc_generated_files/eusart.c: 273:     EUSART_FramingErrorHandler = interruptHandler;
  5745                           
  5746                           ;incstack = 0
  5747                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5748  1569  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  5749  156A  0021               	movlb	1	; select bank1
  5750  156B  00DA               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  5751  156C  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  5752  156D  00D9               	movwf	_EUSART_FramingErrorHandler^(0+128)
  5753  156E  0008               	return
  5754  156F                     __end_of_EUSART_SetFramingErrorHandler:	
  5755                           
  5756                           	psect	text19
  5757  1563                     __ptext19:	
  5758 ;; *************** function _EUSART_SetErrorHandler *****************
  5759 ;; Defined at:
  5760 ;;		line 280 in file "mcc_generated_files/eusart.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5763 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;		None
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  1    wreg      void 
  5768 ;; Registers used:
  5769 ;;		wreg
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5775 ;;      Params:         2       0       0       0       0       0       0       0
  5776 ;;      Locals:         0       0       0       0       0       0       0       0
  5777 ;;      Temps:          0       0       0       0       0       0       0       0
  5778 ;;      Totals:         2       0       0       0       0       0       0       0
  5779 ;;Total ram usage:        2 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    4
  5782 ;; This function calls:
  5783 ;;		Nothing
  5784 ;; This function is called by:
  5785 ;;		_EUSART_Initialize
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           
  5790                           ;psect for function _EUSART_SetErrorHandler
  5791  1563                     _EUSART_SetErrorHandler:	
  5792                           
  5793                           ;mcc_generated_files/eusart.c: 281:     EUSART_ErrorHandler = interruptHandler;
  5794                           
  5795                           ;incstack = 0
  5796                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5797  1563  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  5798  1564  0021               	movlb	1	; select bank1
  5799  1565  00D6               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  5800  1566  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  5801  1567  00D5               	movwf	_EUSART_ErrorHandler^(0+128)
  5802  1568  0008               	return
  5803  1569                     __end_of_EUSART_SetErrorHandler:	
  5804                           
  5805                           	psect	text20
  5806  17AB                     __ptext20:	
  5807 ;; *************** function _MTOUCH_Service_Mainloop *****************
  5808 ;; Defined at:
  5809 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;		None
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;		None
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  1    wreg      _Bool 
  5816 ;; Registers used:
  5817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5823 ;;      Params:         0       0       0       0       0       0       0       0
  5824 ;;      Locals:         0       0       0       0       0       0       0       0
  5825 ;;      Temps:          0       1       0       0       0       0       0       0
  5826 ;;      Totals:         0       1       0       0       0       0       0       0
  5827 ;;Total ram usage:        1 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:   18
  5830 ;; This function calls:
  5831 ;;		_MTOUCH_Button_ServiceAll
  5832 ;;		_MTOUCH_Sensor_SampleAll
  5833 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5834 ;;		_MTOUCH_Tick
  5835 ;;		_MTOUCH_needReburst
  5836 ;; This function is called by:
  5837 ;;		_main
  5838 ;;		_touch_example
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           
  5843                           ;psect for function _MTOUCH_Service_Mainloop
  5844  17AB                     _MTOUCH_Service_Mainloop:	
  5845                           
  5846                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  5847                           
  5848                           ;incstack = 0
  5849 ;; hardware stack exceeded
  5850                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5851  17AB  0020               	movlb	0	; select bank0
  5852  17AC  01ED               	clrf	_mtouch_time_toScan
  5853  17AD  0AED               	incf	_mtouch_time_toScan,f
  5854                           
  5855                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  5856                           
  5857                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  5858  17AE  3197  2703  3197   	fcall	_MTOUCH_Sensor_SampleAll
  5859  17B1  3A00               	xorlw	0
  5860  17B2  1D03               	skipz
  5861  17B3  2FB6               	goto	l6221
  5862                           
  5863                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  5864  17B4  3000               	movlw	0
  5865  17B5  0008               	return
  5866  17B6                     l6221:	
  5867                           
  5868                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  5869  17B6  3196  263C  3197   	fcall	_MTOUCH_Button_ServiceAll
  5870                           
  5871                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  5872  17B9  3180  2002  3197   	fcall	_MTOUCH_needReburst
  5873  17BC  0020               	movlb	0	; select bank0
  5874  17BD  00DC               	movwf	??_MTOUCH_Service_Mainloop
  5875  17BE  085C               	movf	??_MTOUCH_Service_Mainloop,w
  5876  17BF  00ED               	movwf	_mtouch_time_toScan
  5877                           
  5878                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  5879  17C0  3196  26C5  3197   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  5880                           
  5881                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  5882  17C3  3195  252E         	fcall	_MTOUCH_Tick
  5883                           
  5884                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  5885  17C5  3001               	movlw	1
  5886  17C6  0008               	return
  5887  17C7                     __end_of_MTOUCH_Service_Mainloop:	
  5888                           
  5889                           	psect	text21
  5890  0002                     __ptext21:	
  5891 ;; *************** function _MTOUCH_needReburst *****************
  5892 ;; Defined at:
  5893 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;		None
  5896 ;; Auto vars:     Size  Location     Type
  5897 ;;  needReburst     1    0        _Bool 
  5898 ;; Return value:  Size  Location     Type
  5899 ;;                  1    wreg      _Bool 
  5900 ;; Registers used:
  5901 ;;		wreg, status,2
  5902 ;; Tracked objects:
  5903 ;;		On entry : 0/0
  5904 ;;		On exit  : 0/0
  5905 ;;		Unchanged: 0/0
  5906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5907 ;;      Params:         0       0       0       0       0       0       0       0
  5908 ;;      Locals:         1       0       0       0       0       0       0       0
  5909 ;;      Temps:          0       0       0       0       0       0       0       0
  5910 ;;      Totals:         1       0       0       0       0       0       0       0
  5911 ;;Total ram usage:        1 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; Hardware stack levels required when called:    4
  5914 ;; This function calls:
  5915 ;;		Nothing
  5916 ;; This function is called by:
  5917 ;;		_MTOUCH_Service_Mainloop
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920                           
  5921                           
  5922                           ;psect for function _MTOUCH_needReburst
  5923  0002                     _MTOUCH_needReburst:	
  5924                           
  5925                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  5926                           
  5927                           ;incstack = 0
  5928                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  5929  0002  3000               	movlw	0
  5930  0003  0008               	return
  5931  0004                     __end_of_MTOUCH_needReburst:	
  5932                           
  5933                           	psect	text22
  5934  152E                     __ptext22:	
  5935 ;; *************** function _MTOUCH_Tick *****************
  5936 ;; Defined at:
  5937 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;		None
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;		None
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  1    wreg      void 
  5944 ;; Registers used:
  5945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5951 ;;      Params:         0       0       0       0       0       0       0       0
  5952 ;;      Locals:         0       0       0       0       0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0       0
  5954 ;;      Totals:         0       0       0       0       0       0       0       0
  5955 ;;Total ram usage:        0 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    6
  5958 ;; This function calls:
  5959 ;;		_MTOUCH_Button_Tick
  5960 ;; This function is called by:
  5961 ;;		_MTOUCH_Service_Mainloop
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           
  5966                           ;psect for function _MTOUCH_Tick
  5967  152E                     _MTOUCH_Tick:	
  5968                           
  5969                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  5970                           
  5971                           ;incstack = 0
  5972                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5973  152E  3197  2719         	fcall	_MTOUCH_Button_Tick
  5974  1530  0008               	return
  5975  1531                     __end_of_MTOUCH_Tick:	
  5976                           
  5977                           	psect	text23
  5978  1719                     __ptext23:	
  5979 ;; *************** function _MTOUCH_Button_Tick *****************
  5980 ;; Defined at:
  5981 ;;		line 297 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;		None
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;  i               1    5[COMMON] unsigned char 
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  1    wreg      void 
  5988 ;; Registers used:
  5989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5995 ;;      Params:         0       0       0       0       0       0       0       0
  5996 ;;      Locals:         1       0       0       0       0       0       0       0
  5997 ;;      Temps:          1       0       0       0       0       0       0       0
  5998 ;;      Totals:         2       0       0       0       0       0       0       0
  5999 ;;Total ram usage:        2 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    5
  6002 ;; This function calls:
  6003 ;;		_Button_Tick_helper
  6004 ;; This function is called by:
  6005 ;;		_MTOUCH_Tick
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           
  6010                           ;psect for function _MTOUCH_Button_Tick
  6011  1719                     _MTOUCH_Button_Tick:	
  6012                           
  6013                           ;mcc_generated_files/mtouch/mtouch_button.c: 299:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 300:     for (i = 0; i < 3u; i++)
  6014                           
  6015                           ;incstack = 0
  6016                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6017  1719  01F5               	clrf	MTOUCH_Button_Tick@i
  6018  171A                     l4615:	
  6019                           
  6020                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 302:         Button_Tick_helper(&mtouch_button[i]);
  6021  171A  0875               	movf	MTOUCH_Button_Tick@i,w
  6022  171B  00F4               	movwf	??_MTOUCH_Button_Tick
  6023  171C  3003               	movlw	3
  6024  171D                     u3455:	
  6025  171D  35F4               	lslf	??_MTOUCH_Button_Tick,f
  6026  171E  3EFF               	addlw	-1
  6027  171F  1D03               	skipz
  6028  1720  2F1D               	goto	u3455
  6029  1721  3574               	lslf	??_MTOUCH_Button_Tick,w
  6030  1722  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  6031  1723  3188  20C7  3197   	fcall	_Button_Tick_helper
  6032                           
  6033                           ;mcc_generated_files/mtouch/mtouch_button.c: 303:     }
  6034  1726  3001               	movlw	1
  6035  1727  00F4               	movwf	??_MTOUCH_Button_Tick
  6036  1728  0874               	movf	??_MTOUCH_Button_Tick,w
  6037  1729  07F5               	addwf	MTOUCH_Button_Tick@i,f
  6038  172A  3003               	movlw	3
  6039  172B  0275               	subwf	MTOUCH_Button_Tick@i,w
  6040  172C  1803               	btfsc	3,0
  6041  172D  0008               	return
  6042  172E  2F1A               	goto	l4615
  6043  172F                     __end_of_MTOUCH_Button_Tick:	
  6044                           
  6045                           	psect	text24
  6046  08C7                     __ptext24:	
  6047 ;; *************** function _Button_Tick_helper *****************
  6048 ;; Defined at:
  6049 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;  button          1    wreg     PTR struct .
  6052 ;;		 -> mtouch_button(48), 
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;  button          1    3[COMMON] PTR struct .
  6055 ;;		 -> mtouch_button(48), 
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      void 
  6058 ;; Registers used:
  6059 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6065 ;;      Params:         0       0       0       0       0       0       0       0
  6066 ;;      Locals:         1       0       0       0       0       0       0       0
  6067 ;;      Temps:          2       0       0       0       0       0       0       0
  6068 ;;      Totals:         3       0       0       0       0       0       0       0
  6069 ;;Total ram usage:        3 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    4
  6072 ;; This function calls:
  6073 ;;		Nothing
  6074 ;; This function is called by:
  6075 ;;		_MTOUCH_Button_Tick
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           
  6080                           ;psect for function _Button_Tick_helper
  6081  08C7                     _Button_Tick_helper:	
  6082                           
  6083                           ;incstack = 0
  6084                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  6085                           ;Button_Tick_helper@button stored from wreg
  6086  08C7  00F3               	movwf	Button_Tick_helper@button
  6087                           
  6088                           ;mcc_generated_files/mtouch/mtouch_button.c: 305: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 306: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 308:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  6089  08C8  0873               	movf	Button_Tick_helper@button,w
  6090  08C9  3E02               	addlw	2
  6091  08CA  0086               	movwf	6
  6092  08CB  3001               	movlw	1	; select bank2/3
  6093  08CC  0087               	movwf	7
  6094  08CD  3002               	movlw	2
  6095  08CE  0601               	xorwf	1,w
  6096  08CF  1D03               	btfss	3,2
  6097  08D0  0008               	return
  6098                           
  6099                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         (button->counter)++;
  6100  08D1  0873               	movf	Button_Tick_helper@button,w
  6101  08D2  3E0A               	addlw	10
  6102  08D3  0086               	movwf	6
  6103  08D4  3001               	movlw	1	; select bank2/3
  6104  08D5  0087               	movwf	7
  6105  08D6  3001               	movlw	1
  6106  08D7  0781               	addwf	1,f
  6107  08D8  3141               	addfsr 1,1
  6108  08D9  1803               	skipnc
  6109  08DA  0A81               	incf	1,f
  6110                           
  6111                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  6112  08DB  0873               	movf	Button_Tick_helper@button,w
  6113  08DC  3E0A               	addlw	10
  6114  08DD  0086               	movwf	6
  6115  08DE  3001               	movlw	1	; select bank2/3
  6116  08DF  0087               	movwf	7
  6117  08E0  0016               	moviw fsr1++
  6118  08E1  0401               	iorwf	1,w
  6119  08E2  1D03               	btfss	3,2
  6120  08E3  0008               	return
  6121                           
  6122                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 313:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  6123  08E4  0873               	movf	Button_Tick_helper@button,w
  6124  08E5  3E0A               	addlw	10
  6125  08E6  0086               	movwf	6
  6126  08E7  3001               	movlw	1	; select bank2/3
  6127  08E8  0087               	movwf	7
  6128  08E9  30FF               	movlw	255
  6129  08EA  3FC0               	movwi [0]fsr1
  6130  08EB  30FF               	movlw	255
  6131  08EC  3FC1               	movwi [1]fsr1
  6132  08ED  0008               	return
  6133  08EE                     __end_of_Button_Tick_helper:	
  6134                           
  6135                           	psect	text25
  6136  16C5                     __ptext25:	
  6137 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  6138 ;; Defined at:
  6139 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;		None
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  sensor          1    3[COMMON] PTR struct .
  6144 ;;		 -> mtouch_sensor(27), 
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  1    wreg      void 
  6147 ;; Registers used:
  6148 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6154 ;;      Params:         0       0       0       0       0       0       0       0
  6155 ;;      Locals:         1       0       0       0       0       0       0       0
  6156 ;;      Temps:          1       0       0       0       0       0       0       0
  6157 ;;      Totals:         2       0       0       0       0       0       0       0
  6158 ;;Total ram usage:        2 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    5
  6161 ;; This function calls:
  6162 ;;		_Sensor_Sampled_Reset
  6163 ;; This function is called by:
  6164 ;;		_MTOUCH_Initialize
  6165 ;;		_MTOUCH_Service_Mainloop
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           
  6170                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  6171  16C5                     _MTOUCH_Sensor_Sampled_ResetAll:	
  6172                           
  6173                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 953:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[3u -1];sensor++)
  6174                           
  6175                           ;incstack = 0
  6176                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  6177  16C5  3050               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  6178  16C6  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6179  16C7  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6180  16C8  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  6181  16C9                     L2:	
  6182  16C9  3062               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
  6183  16CA  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6184  16CB  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  6185  16CC  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6186  16CD  1C03               	btfss	3,0
  6187  16CE  0008               	return
  6188                           
  6189                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 955:         Sensor_Sampled_Reset(sensor);
  6190  16CF  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  6191  16D0  3195  25AB  3196   	fcall	_Sensor_Sampled_Reset
  6192                           
  6193                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 956:     }
  6194  16D3  3009               	movlw	9
  6195  16D4  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6196  16D5  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6197  16D6  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  6198  16D7  2EC9               	goto	L2
  6199  16D8                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  6200                           
  6201                           	psect	text26
  6202  15AB                     __ptext26:	
  6203 ;; *************** function _Sensor_Sampled_Reset *****************
  6204 ;; Defined at:
  6205 ;;		line 964 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;  sensor          1    wreg     PTR struct .
  6208 ;;		 -> mtouch_sensor(27), 
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;  sensor          1    1[COMMON] PTR struct .
  6211 ;;		 -> mtouch_sensor(27), 
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  1    wreg      void 
  6214 ;; Registers used:
  6215 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6221 ;;      Params:         0       0       0       0       0       0       0       0
  6222 ;;      Locals:         1       0       0       0       0       0       0       0
  6223 ;;      Temps:          0       0       0       0       0       0       0       0
  6224 ;;      Totals:         1       0       0       0       0       0       0       0
  6225 ;;Total ram usage:        1 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    4
  6228 ;; This function calls:
  6229 ;;		Nothing
  6230 ;; This function is called by:
  6231 ;;		_MTOUCH_Sensor_Initialize
  6232 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6233 ;; This function uses a non-reentrant model
  6234 ;;
  6235                           
  6236                           
  6237                           ;psect for function _Sensor_Sampled_Reset
  6238  15AB                     _Sensor_Sampled_Reset:	
  6239                           
  6240                           ;incstack = 0
  6241                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6242                           ;Sensor_Sampled_Reset@sensor stored from wreg
  6243  15AB  00F1               	movwf	Sensor_Sampled_Reset@sensor
  6244                           
  6245                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          965: {;mcc_generated_files/mtouch/mtouch_sensor.c: 966:     sensor->sampled = 0;
  6246  15AC  0871               	movf	Sensor_Sampled_Reset@sensor,w
  6247  15AD  3E08               	addlw	8
  6248  15AE  0086               	movwf	6
  6249  15AF  3001               	movlw	1	; select bank2/3
  6250  15B0  0087               	movwf	7
  6251  15B1  1001               	bcf	1,0
  6252  15B2  0008               	return
  6253  15B3                     __end_of_Sensor_Sampled_Reset:	
  6254                           
  6255                           	psect	text27
  6256  1703                     __ptext27:	
  6257 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  6258 ;; Defined at:
  6259 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;		None
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  group           1   39[BANK0 ] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      _Bool 
  6266 ;; Registers used:
  6267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6273 ;;      Params:         0       0       0       0       0       0       0       0
  6274 ;;      Locals:         0       1       0       0       0       0       0       0
  6275 ;;      Temps:          0       1       0       0       0       0       0       0
  6276 ;;      Totals:         0       2       0       0       0       0       0       0
  6277 ;;Total ram usage:        2 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:   10
  6280 ;; This function calls:
  6281 ;;		_Sensor_Service
  6282 ;; This function is called by:
  6283 ;;		_MTOUCH_Service_Mainloop
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           
  6288                           ;psect for function _MTOUCH_Sensor_SampleAll
  6289  1703                     _MTOUCH_Sensor_SampleAll:	
  6290                           
  6291                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 261:     for (group = 0; group < 2u; group++)
  6292                           
  6293                           ;incstack = 0
  6294                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6295  1703  0020               	movlb	0	; select bank0
  6296  1704  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  6297  1705                     l6185:	
  6298                           
  6299                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 263:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  6300  1705  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  6301  1706  3186  2680  3197   	fcall	_Sensor_Service
  6302  1709  3A00               	xorlw	0
  6303  170A  1903               	skipnz
  6304  170B  2F0E               	goto	l6191
  6305                           
  6306                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 264:             return 0;
  6307  170C  3000               	movlw	0
  6308  170D  0008               	return
  6309  170E                     l6191:	
  6310                           
  6311                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 265:     }
  6312  170E  3001               	movlw	1
  6313  170F  0020               	movlb	0	; select bank0
  6314  1710  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  6315  1711  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  6316  1712  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  6317  1713  3002               	movlw	2
  6318  1714  0247               	subwf	MTOUCH_Sensor_SampleAll@group,w
  6319  1715  1C03               	skipc
  6320  1716  2F05               	goto	l6185
  6321                           
  6322                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 266:     return 1;
  6323  1717  3001               	movlw	1
  6324  1718  0008               	return
  6325  1719                     __end_of_MTOUCH_Sensor_SampleAll:	
  6326                           
  6327                           	psect	text28
  6328  0680                     __ptext28:	
  6329 ;; *************** function _Sensor_Service *****************
  6330 ;; Defined at:
  6331 ;;		line 303 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  scanGroup       1    wreg     unsigned char 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  6336 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  6337 ;;		 -> mtouch_sensor(27), 
  6338 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  6339 ;;		 -> NULL(0), mtouch_sensor(27), 
  6340 ;;  error           1   35[BANK0 ] enum E2858
  6341 ;; Return value:  Size  Location     Type
  6342 ;;                  1    wreg      enum E2858
  6343 ;; Registers used:
  6344 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6345 ;; Tracked objects:
  6346 ;;		On entry : 0/0
  6347 ;;		On exit  : 0/0
  6348 ;;		Unchanged: 0/0
  6349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6350 ;;      Params:         0       0       0       0       0       0       0       0
  6351 ;;      Locals:         0       4       0       0       0       0       0       0
  6352 ;;      Temps:          0       3       0       0       0       0       0       0
  6353 ;;      Totals:         0       7       0       0       0       0       0       0
  6354 ;;Total ram usage:        7 bytes
  6355 ;; Hardware stack levels used:    1
  6356 ;; Hardware stack levels required when called:    9
  6357 ;; This function calls:
  6358 ;;		_Sensor_Acquisition
  6359 ;;		_Sensor_DefaultCallback
  6360 ;;		_Sensor_RawSample_Update
  6361 ;;		_Sensor_isEnabled
  6362 ;;		_Sensor_setSampled
  6363 ;; This function is called by:
  6364 ;;		_MTOUCH_Sensor_SampleAll
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           
  6369                           ;psect for function _Sensor_Service
  6370  0680                     _Sensor_Service:	
  6371                           
  6372                           ;incstack = 0
  6373                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6374                           ;Sensor_Service@scanGroup stored from wreg
  6375  0680  0020               	movlb	0	; select bank0
  6376  0681  00C2               	movwf	Sensor_Service@scanGroup
  6377                           
  6378                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 303: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 304: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 305:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 306:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 308:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  6379  0682  0842               	movf	Sensor_Service@scanGroup,w
  6380  0683  00BF               	movwf	??_Sensor_Service
  6381  0684  01C0               	clrf	??_Sensor_Service+1
  6382  0685  35BF               	lslf	??_Sensor_Service,f
  6383  0686  0DC0               	rlf	??_Sensor_Service+1,f
  6384  0687  3036               	movlw	low (_sensor_scan_group| (0+32768))
  6385  0688  073F               	addwf	??_Sensor_Service,w
  6386  0689  0084               	movwf	4
  6387  068A  3098               	movlw	high (_sensor_scan_group| (0+32768))
  6388  068B  3D40               	addwfc	??_Sensor_Service+1,w
  6389  068C  0085               	movwf	5
  6390  068D  0800               	movf	0,w	;code access
  6391  068E  00C1               	movwf	??_Sensor_Service+2
  6392  068F  0841               	movf	??_Sensor_Service+2,w
  6393  0690  00C4               	movwf	Sensor_Service@sensor_adc1
  6394                           
  6395                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 309:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  6396  0691  0842               	movf	Sensor_Service@scanGroup,w
  6397  0692  00BF               	movwf	??_Sensor_Service
  6398  0693  01C0               	clrf	??_Sensor_Service+1
  6399  0694  35BF               	lslf	??_Sensor_Service,f
  6400  0695  0DC0               	rlf	??_Sensor_Service+1,f
  6401  0696  3037               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  6402  0697  073F               	addwf	??_Sensor_Service,w
  6403  0698  0084               	movwf	4
  6404  0699  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  6405  069A  3D40               	addwfc	??_Sensor_Service+1,w
  6406  069B  0085               	movwf	5
  6407  069C  0800               	movf	0,w	;code access
  6408  069D  00C1               	movwf	??_Sensor_Service+2
  6409  069E  0841               	movf	??_Sensor_Service+2,w
  6410  069F  00C5               	movwf	Sensor_Service@sensor_adc2
  6411                           
  6412                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  6413  06A0  0845               	movf	Sensor_Service@sensor_adc2,w
  6414  06A1  00BF               	movwf	??_Sensor_Service
  6415  06A2  083F               	movf	??_Sensor_Service,w
  6416  06A3  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  6417  06A4  0844               	movf	Sensor_Service@sensor_adc1,w
  6418  06A5  318C  24D2  3186   	fcall	_Sensor_Acquisition
  6419  06A8  0020               	movlb	0	; select bank0
  6420  06A9  00C0               	movwf	??_Sensor_Service+1
  6421  06AA  0840               	movf	??_Sensor_Service+1,w
  6422  06AB  00C3               	movwf	Sensor_Service@error
  6423                           
  6424                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:     switch(error)
  6425  06AC  2EEF               	goto	l6143
  6426  06AD                     l6121:	
  6427                           
  6428                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 318:             if(Sensor_isEnabled(sensor_adc1))
  6429  06AD  0844               	movf	Sensor_Service@sensor_adc1,w
  6430  06AE  3196  267E  3186   	fcall	_Sensor_isEnabled
  6431  06B1  3A00               	xorlw	0
  6432  06B2  1903               	skipnz
  6433  06B3  2ECD               	goto	l6131
  6434                           
  6435                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  6436  06B4  0020               	movlb	0	; select bank0
  6437  06B5  086C               	movf	_lowpowerActivated,w
  6438  06B6  1D03               	btfss	3,2
  6439  06B7  2EBC               	goto	l6127
  6440                           
  6441                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc1);
  6442  06B8  0844               	movf	Sensor_Service@sensor_adc1,w
  6443  06B9  3189  2115  3186   	fcall	_Sensor_RawSample_Update
  6444  06BC                     l6127:	
  6445                           
  6446                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc1);
  6447  06BC  0020               	movlb	0	; select bank0
  6448  06BD  0844               	movf	Sensor_Service@sensor_adc1,w
  6449  06BE  3195  25A3  3186   	fcall	_Sensor_setSampled
  6450                           
  6451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc1->sensor);
  6452  06C1  0020               	movlb	0	; select bank0
  6453  06C2  0844               	movf	Sensor_Service@sensor_adc1,w
  6454  06C3  0086               	movwf	6
  6455  06C4  3001               	movlw	1	; select bank2/3
  6456  06C5  0087               	movwf	7
  6457  06C6  0801               	movf	1,w
  6458  06C7  00BF               	movwf	??_Sensor_Service
  6459  06C8  083F               	movf	??_Sensor_Service,w
  6460  06C9  00F1               	movwf	Sensor_DefaultCallback@sensor
  6461  06CA  3195  2521  3186   	fcall	_Sensor_DefaultCallback
  6462  06CD                     l6131:	
  6463                           
  6464                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  6465  06CD  0020               	movlb	0	; select bank0
  6466  06CE  0845               	movf	Sensor_Service@sensor_adc2,w
  6467  06CF  3196  267E  3186   	fcall	_Sensor_isEnabled
  6468  06D2  3A00               	xorlw	0
  6469  06D3  1903               	skipnz
  6470  06D4  2F12               	goto	l6145
  6471                           
  6472                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 332:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 333:                 if(!lowpowerActivated)
  6473  06D5  0020               	movlb	0	; select bank0
  6474  06D6  086C               	movf	_lowpowerActivated,w
  6475  06D7  1D03               	btfss	3,2
  6476  06D8  2EDD               	goto	l6137
  6477                           
  6478                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 335:                     Sensor_RawSample_Update(sensor_adc2);
  6479  06D9  0845               	movf	Sensor_Service@sensor_adc2,w
  6480  06DA  3189  2115  3186   	fcall	_Sensor_RawSample_Update
  6481  06DD                     l6137:	
  6482                           
  6483                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 Sensor_setSampled(sens
      +                          or_adc2);
  6484  06DD  0020               	movlb	0	; select bank0
  6485  06DE  0845               	movf	Sensor_Service@sensor_adc2,w
  6486  06DF  3195  25A3  3186   	fcall	_Sensor_setSampled
  6487                           
  6488                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 338:                 callback_sampled(senso
      +                          r_adc2->sensor);
  6489  06E2  0020               	movlb	0	; select bank0
  6490  06E3  0845               	movf	Sensor_Service@sensor_adc2,w
  6491  06E4  0086               	movwf	6
  6492  06E5  3001               	movlw	1	; select bank2/3
  6493  06E6  0087               	movwf	7
  6494  06E7  0801               	movf	1,w
  6495  06E8  00BF               	movwf	??_Sensor_Service
  6496  06E9  083F               	movf	??_Sensor_Service,w
  6497  06EA  00F1               	movwf	Sensor_DefaultCallback@sensor
  6498  06EB  3195  2521  3186   	fcall	_Sensor_DefaultCallback
  6499  06EE  2F12               	goto	l6145
  6500  06EF                     l6143:	
  6501  06EF  0843               	movf	Sensor_Service@error,w
  6502  06F0  00BF               	movwf	??_Sensor_Service
  6503  06F1  01C0               	clrf	??_Sensor_Service+1
  6504  06F2  1BBF               	btfsc	??_Sensor_Service,7
  6505  06F3  03C0               	decf	??_Sensor_Service+1,f
  6506                           
  6507                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6508                           ; Switch size 1, requested type "simple"
  6509                           ; Number of cases is 2, Range of values is 0 to 255
  6510                           ; switch strategies available:
  6511                           ; Name         Instructions Cycles
  6512                           ; simple_byte            7     4 (average)
  6513                           ; jumptable            260     6 (fixed)
  6514                           ;	Chosen strategy is simple_byte
  6515  06F4  0840               	movf	??_Sensor_Service+1,w
  6516  06F5  3A00               	xorlw	0	; case 0
  6517  06F6  1903               	skipnz
  6518  06F7  2EFC               	goto	l6757
  6519  06F8  3AFF               	xorlw	255	; case 255
  6520  06F9  1903               	skipnz
  6521  06FA  2F01               	goto	l6759
  6522  06FB  2F12               	goto	l6145
  6523  06FC                     l6757:	
  6524                           
  6525                           ; Switch size 1, requested type "simple"
  6526                           ; Number of cases is 1, Range of values is 0 to 0
  6527                           ; switch strategies available:
  6528                           ; Name         Instructions Cycles
  6529                           ; simple_byte            4     3 (average)
  6530                           ; direct_byte            8     6 (fixed)
  6531                           ; jumptable            260     6 (fixed)
  6532                           ;	Chosen strategy is simple_byte
  6533  06FC  083F               	movf	??_Sensor_Service,w
  6534  06FD  3A00               	xorlw	0	; case 0
  6535  06FE  1903               	skipnz
  6536  06FF  2EAD               	goto	l6121
  6537  0700  2F12               	goto	l6145
  6538  0701                     l6759:	
  6539                           
  6540                           ; Switch size 1, requested type "simple"
  6541                           ; Number of cases is 5, Range of values is 251 to 255
  6542                           ; switch strategies available:
  6543                           ; Name         Instructions Cycles
  6544                           ; direct_byte           15     5 (fixed)
  6545                           ; simple_byte           16     9 (average)
  6546                           ; jumptable            263     9 (fixed)
  6547                           ;	Chosen strategy is simple_byte
  6548  0701  083F               	movf	??_Sensor_Service,w
  6549  0702  3AFB               	xorlw	251	; case 251
  6550  0703  1903               	skipnz
  6551  0704  2F12               	goto	l6145
  6552  0705  3A07               	xorlw	7	; case 252
  6553  0706  1903               	skipnz
  6554  0707  2F12               	goto	l6145
  6555  0708  3A01               	xorlw	1	; case 253
  6556  0709  1903               	skipnz
  6557  070A  2F12               	goto	l6145
  6558  070B  3A03               	xorlw	3	; case 254
  6559  070C  1903               	skipnz
  6560  070D  2F12               	goto	l6145
  6561  070E  3A01               	xorlw	1	; case 255
  6562  070F  1903               	skipnz
  6563  0710  2F12               	goto	l6145
  6564  0711  2F12               	goto	l6145
  6565  0712                     l6145:	
  6566                           
  6567                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     return error;
  6568  0712  0020               	movlb	0	; select bank0
  6569  0713  0843               	movf	Sensor_Service@error,w
  6570  0714  0008               	return
  6571  0715                     __end_of_Sensor_Service:	
  6572                           
  6573                           	psect	text29
  6574  15A3                     __ptext29:	
  6575 ;; *************** function _Sensor_setSampled *****************
  6576 ;; Defined at:
  6577 ;;		line 969 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  sensor          1    wreg     PTR struct .
  6580 ;;		 -> NULL(0), mtouch_sensor(27), 
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;  sensor          1    1[COMMON] PTR struct .
  6583 ;;		 -> NULL(0), mtouch_sensor(27), 
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  1    wreg      void 
  6586 ;; Registers used:
  6587 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6593 ;;      Params:         0       0       0       0       0       0       0       0
  6594 ;;      Locals:         1       0       0       0       0       0       0       0
  6595 ;;      Temps:          0       0       0       0       0       0       0       0
  6596 ;;      Totals:         1       0       0       0       0       0       0       0
  6597 ;;Total ram usage:        1 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    4
  6600 ;; This function calls:
  6601 ;;		Nothing
  6602 ;; This function is called by:
  6603 ;;		_Sensor_Service
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           
  6608                           ;psect for function _Sensor_setSampled
  6609  15A3                     _Sensor_setSampled:	
  6610                           
  6611                           ;incstack = 0
  6612                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  6613                           ;Sensor_setSampled@sensor stored from wreg
  6614  15A3  00F1               	movwf	Sensor_setSampled@sensor
  6615                           
  6616                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 969: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 970
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 971:     sensor->sampled = 1;
  6617  15A4  0871               	movf	Sensor_setSampled@sensor,w
  6618  15A5  3E08               	addlw	8
  6619  15A6  0086               	movwf	6
  6620  15A7  3001               	movlw	1	; select bank2/3
  6621  15A8  0087               	movwf	7
  6622  15A9  1401               	bsf	1,0
  6623  15AA  0008               	return
  6624  15AB                     __end_of_Sensor_setSampled:	
  6625                           
  6626                           	psect	text30
  6627  0915                     __ptext30:	
  6628 ;; *************** function _Sensor_RawSample_Update *****************
  6629 ;; Defined at:
  6630 ;;		line 802 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;  sensor          1    wreg     PTR struct .
  6633 ;;		 -> NULL(0), mtouch_sensor(27), 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;  sensor          1    7[COMMON] PTR struct .
  6636 ;;		 -> NULL(0), mtouch_sensor(27), 
  6637 ;;  adcIndex        1    6[COMMON] unsigned char 
  6638 ;; Return value:  Size  Location     Type
  6639 ;;                  1    wreg      void 
  6640 ;; Registers used:
  6641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6647 ;;      Params:         0       0       0       0       0       0       0       0
  6648 ;;      Locals:         2       0       0       0       0       0       0       0
  6649 ;;      Temps:          1       0       0       0       0       0       0       0
  6650 ;;      Totals:         3       0       0       0       0       0       0       0
  6651 ;;Total ram usage:        3 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:    5
  6654 ;; This function calls:
  6655 ;;		_Sensor_getScanGroupIndex
  6656 ;; This function is called by:
  6657 ;;		_Sensor_Service
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           
  6662                           ;psect for function _Sensor_RawSample_Update
  6663  0915                     _Sensor_RawSample_Update:	
  6664                           
  6665                           ;incstack = 0
  6666                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6667                           ;Sensor_RawSample_Update@sensor stored from wreg
  6668  0915  00F7               	movwf	Sensor_RawSample_Update@sensor
  6669                           
  6670                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 803: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 804:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  6671  0916  0877               	movf	Sensor_RawSample_Update@sensor,w
  6672  0917  3189  21BD  3189   	fcall	_Sensor_getScanGroupIndex
  6673  091A  00F5               	movwf	??_Sensor_RawSample_Update
  6674  091B  0875               	movf	??_Sensor_RawSample_Update,w
  6675  091C  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  6676                           
  6677                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 806:     if (INTCONbits.GIE == (uint8_t)1)
  6678  091D  1F8B               	btfss	11,7	;volatile
  6679  091E  292F               	goto	l4469
  6680                           
  6681                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 808:         INTCONbits.GIE = (uint8_t)0;
  6682  091F  138B               	bcf	11,7	;volatile
  6683                           
  6684                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 809:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  6685  0920  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  6686  0921  3E5D               	addlw	(low (_packet_sample| 0))& (0+255)
  6687  0922  0086               	movwf	6
  6688  0923  0187               	clrf	7
  6689  0924  0877               	movf	Sensor_RawSample_Update@sensor,w
  6690  0925  3E06               	addlw	6
  6691  0926  0084               	movwf	4
  6692  0927  3001               	movlw	1	; select bank2/3
  6693  0928  0085               	movwf	5
  6694  0929  3F40               	moviw [0]fsr1
  6695  092A  3F80               	movwi [0]fsr0
  6696  092B  3F41               	moviw [1]fsr1
  6697  092C  3F81               	movwi [1]fsr0
  6698                           
  6699                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810:         INTCONbits.GIE = (uint8_t)1;
  6700  092D  178B               	bsf	11,7	;volatile
  6701                           
  6702                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 811:     }
  6703  092E  0008               	return
  6704  092F                     l4469:	
  6705                           
  6706                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 813:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 814:         sensor->rawSample = packet_sample[adcIndex];
  6707  092F  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  6708  0930  3E5D               	addlw	(low (_packet_sample| 0))& (0+255)
  6709  0931  0086               	movwf	6
  6710  0932  0187               	clrf	7
  6711  0933  0877               	movf	Sensor_RawSample_Update@sensor,w
  6712  0934  3E06               	addlw	6
  6713  0935  0084               	movwf	4
  6714  0936  3001               	movlw	1	; select bank2/3
  6715  0937  0085               	movwf	5
  6716  0938  3F40               	moviw [0]fsr1
  6717  0939  3F80               	movwi [0]fsr0
  6718  093A  3F41               	moviw [1]fsr1
  6719  093B  3F81               	movwi [1]fsr0
  6720  093C  0008               	return
  6721  093D                     __end_of_Sensor_RawSample_Update:	
  6722                           
  6723                           	psect	text31
  6724  1521                     __ptext31:	
  6725 ;; *************** function _Sensor_DefaultCallback *****************
  6726 ;; Defined at:
  6727 ;;		line 823 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;  sensor          1    1[COMMON] enum E2854
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;		None
  6732 ;; Return value:  Size  Location     Type
  6733 ;;                  1    wreg      void 
  6734 ;; Registers used:
  6735 ;;		None
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6741 ;;      Params:         1       0       0       0       0       0       0       0
  6742 ;;      Locals:         0       0       0       0       0       0       0       0
  6743 ;;      Temps:          0       0       0       0       0       0       0       0
  6744 ;;      Totals:         1       0       0       0       0       0       0       0
  6745 ;;Total ram usage:        1 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    4
  6748 ;; This function calls:
  6749 ;;		Nothing
  6750 ;; This function is called by:
  6751 ;;		_Sensor_Service
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           
  6756                           ;psect for function _Sensor_DefaultCallback
  6757  1521                     _Sensor_DefaultCallback:	
  6758                           
  6759                           ;incstack = 0
  6760                           ; Regs used in _Sensor_DefaultCallback: []
  6761  1521  0008               	return
  6762  1522                     __end_of_Sensor_DefaultCallback:	
  6763                           
  6764                           	psect	text32
  6765  0CD2                     __ptext32:	
  6766 ;; *************** function _Sensor_Acquisition *****************
  6767 ;; Defined at:
  6768 ;;		line 372 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;  sensor_adc1     1    wreg     PTR struct .
  6771 ;;		 -> NULL(0), mtouch_sensor(27), 
  6772 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  6773 ;;		 -> mtouch_sensor(27), 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  6776 ;;		 -> NULL(0), mtouch_sensor(27), 
  6777 ;;  retry           1   29[BANK0 ] unsigned char 
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      enum E2858
  6780 ;; Registers used:
  6781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6787 ;;      Params:         0       1       0       0       0       0       0       0
  6788 ;;      Locals:         0       2       0       0       0       0       0       0
  6789 ;;      Temps:          0       1       0       0       0       0       0       0
  6790 ;;      Totals:         0       4       0       0       0       0       0       0
  6791 ;;Total ram usage:        4 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    8
  6794 ;; This function calls:
  6795 ;;		_Sensor_Acq_ExecutePacket
  6796 ;;		_Sensor_Scanfrequency_Evaluation
  6797 ;;		_Sensor_isActive
  6798 ;;		_Sensor_isCalibrated
  6799 ;;		_Sensor_postAcquisitionProcess
  6800 ;; This function is called by:
  6801 ;;		_Sensor_Service
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           
  6806                           ;psect for function _Sensor_Acquisition
  6807  0CD2                     _Sensor_Acquisition:	
  6808                           
  6809                           ;incstack = 0
  6810                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6811                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  6812  0CD2  0020               	movlb	0	; select bank0
  6813  0CD3  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  6814                           
  6815                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 372: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 373: {;mcc_generated_files/mtouch/mtouch_sensor.c: 374:     
      +                          uint8_t retry = (uint8_t)5;
  6816  0CD4  3005               	movlw	5
  6817  0CD5  00BC               	movwf	??_Sensor_Acquisition
  6818  0CD6  083C               	movf	??_Sensor_Acquisition,w
  6819  0CD7  00BD               	movwf	Sensor_Acquisition@retry
  6820                           
  6821                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 377:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  6822  0CD8  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6823  0CD9  1D03               	btfss	3,2
  6824  0CDA  2CE8               	goto	l5983
  6825  0CDB  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6826  0CDC  1D03               	btfss	3,2
  6827  0CDD  2CE8               	goto	l5983
  6828                           
  6829                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 379:         return MTOUCH_SENSOR_ERROR_invalid_index;
  6830  0CDE  30FF               	movlw	255
  6831  0CDF  0008               	return
  6832  0CE0                     l5977:	
  6833                           
  6834                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         retry--;
  6835  0CE0  3001               	movlw	1
  6836  0CE1  0020               	movlb	0	; select bank0
  6837  0CE2  02BD               	subwf	Sensor_Acquisition@retry,f
  6838                           
  6839                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:         if(retry == 0)
  6840  0CE3  083D               	movf	Sensor_Acquisition@retry,w
  6841  0CE4  1D03               	btfss	3,2
  6842  0CE5  2CE8               	goto	l5983
  6843                           
  6844                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 392:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  6845  0CE6  30FC               	movlw	252
  6846  0CE7  0008               	return
  6847  0CE8                     l5983:	
  6848                           
  6849                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  6850  0CE8  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6851  0CE9  00BC               	movwf	??_Sensor_Acquisition
  6852  0CEA  083C               	movf	??_Sensor_Acquisition,w
  6853  0CEB  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  6854  0CEC  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6855  0CED  3180  2065  318C   	fcall	_Sensor_Acq_ExecutePacket
  6856  0CF0  3A00               	xorlw	0
  6857  0CF1  1D03               	skipz
  6858  0CF2  2CE0               	goto	l5977
  6859                           
  6860                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_adc1 != ((void*)0))
  6861  0CF3  0020               	movlb	0	; select bank0
  6862  0CF4  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6863  0CF5  1903               	btfsc	3,2
  6864  0CF6  2CFB               	goto	l5989
  6865                           
  6866                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 398:         Sensor_postAcquisitionProcess(sensor_adc1);
  6867  0CF7  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6868  0CF8  318B  2314  318C   	fcall	_Sensor_postAcquisitionProcess
  6869  0CFB                     l5989:	
  6870                           
  6871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 401:     if(sensor_adc2 !=((void*)0))
  6872  0CFB  0020               	movlb	0	; select bank0
  6873  0CFC  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6874  0CFD  1903               	btfsc	3,2
  6875  0CFE  2D03               	goto	l5993
  6876                           
  6877                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 403:         Sensor_postAcquisitionProcess(sensor_adc2);
  6878  0CFF  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6879  0D00  318B  2314  318C   	fcall	_Sensor_postAcquisitionProcess
  6880  0D03                     l5993:	
  6881                           
  6882                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  6883  0D03  0020               	movlb	0	; select bank0
  6884  0D04  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6885  0D05  3196  2602  318C   	fcall	_Sensor_isActive
  6886  0D08  3A00               	xorlw	0
  6887  0D09  1903               	skipnz
  6888  0D0A  2D13               	goto	l5997
  6889  0D0B  0020               	movlb	0	; select bank0
  6890  0D0C  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6891  0D0D  3195  25C4  318C   	fcall	_Sensor_isCalibrated
  6892  0D10  3A00               	xorlw	0
  6893  0D11  1D03               	skipz
  6894  0D12  2D23               	goto	l6001
  6895  0D13                     l5997:	
  6896  0D13  0020               	movlb	0	; select bank0
  6897  0D14  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6898  0D15  3196  2602  318C   	fcall	_Sensor_isActive
  6899  0D18  3A00               	xorlw	0
  6900  0D19  1903               	skipnz
  6901  0D1A  2D2C               	goto	l6005
  6902  0D1B  0020               	movlb	0	; select bank0
  6903  0D1C  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6904  0D1D  3195  25C4  318C   	fcall	_Sensor_isCalibrated
  6905  0D20  3A00               	xorlw	0
  6906  0D21  1903               	skipnz
  6907  0D22  2D2C               	goto	l6005
  6908  0D23                     l6001:	
  6909                           
  6910                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 409:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  6911  0D23  0020               	movlb	0	; select bank0
  6912  0D24  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  6913  0D25  00BC               	movwf	??_Sensor_Acquisition
  6914  0D26  083C               	movf	??_Sensor_Acquisition,w
  6915  0D27  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  6916  0D28  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  6917  0D29  318E  2665         	fcall	_Sensor_Scanfrequency_Evaluation
  6918  0D2B  0008               	return
  6919  0D2C                     l6005:	
  6920                           
  6921                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:     return MTOUCH_SENSOR_ERROR_none;
  6922  0D2C  3000               	movlw	0
  6923  0D2D  0008               	return
  6924  0D2E                     __end_of_Sensor_Acquisition:	
  6925                           
  6926                           	psect	text33
  6927  0B14                     __ptext33:	
  6928 ;; *************** function _Sensor_postAcquisitionProcess *****************
  6929 ;; Defined at:
  6930 ;;		line 415 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;  sensor          1    wreg     PTR struct .
  6933 ;;		 -> NULL(0), mtouch_sensor(27), 
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;  sensor          1    9[COMMON] PTR struct .
  6936 ;;		 -> NULL(0), mtouch_sensor(27), 
  6937 ;;  deviation       2    6[COMMON] unsigned short 
  6938 ;;  adcIndex        1    8[COMMON] unsigned char 
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  1    wreg      void 
  6941 ;; Registers used:
  6942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6948 ;;      Params:         0       0       0       0       0       0       0       0
  6949 ;;      Locals:         4       0       0       0       0       0       0       0
  6950 ;;      Temps:          1       0       0       0       0       0       0       0
  6951 ;;      Totals:         5       0       0       0       0       0       0       0
  6952 ;;Total ram usage:        5 bytes
  6953 ;; Hardware stack levels used:    1
  6954 ;; Hardware stack levels required when called:    5
  6955 ;; This function calls:
  6956 ;;		_Sensor_getScanGroupIndex
  6957 ;;		_Sensor_isEnabled
  6958 ;;		_Sensor_setActive
  6959 ;;		_Sensor_setInactive
  6960 ;;		_abs
  6961 ;; This function is called by:
  6962 ;;		_Sensor_Acquisition
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           
  6967                           ;psect for function _Sensor_postAcquisitionProcess
  6968  0B14                     _Sensor_postAcquisitionProcess:	
  6969                           
  6970                           ;incstack = 0
  6971                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6972                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  6973  0B14  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  6974                           
  6975                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 415: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 416: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 417:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 418:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  6976  0B15  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6977  0B16  3189  21BD  318B   	fcall	_Sensor_getScanGroupIndex
  6978  0B19  00F5               	movwf	??_Sensor_postAcquisitionProcess
  6979  0B1A  0875               	movf	??_Sensor_postAcquisitionProcess,w
  6980  0B1B  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  6981                           
  6982                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     if(Sensor_isEnabled(sensor))
  6983  0B1C  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6984  0B1D  3196  267E  318B   	fcall	_Sensor_isEnabled
  6985  0B20  3A00               	xorlw	0
  6986  0B21  1903               	skipnz
  6987  0B22  2B3B               	goto	l4295
  6988                           
  6989                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  6990  0B23  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  6991  0B24  3E06               	addlw	6
  6992  0B25  0086               	movwf	6
  6993  0B26  3001               	movlw	1	; select bank2/3
  6994  0B27  0087               	movwf	7
  6995  0B28  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  6996  0B29  3E5D               	addlw	(low (_packet_sample| 0))& (0+255)
  6997  0B2A  0084               	movwf	4
  6998  0B2B  0185               	clrf	5
  6999  0B2C  3F40               	moviw [0]fsr1
  7000  0B2D  0200               	subwf	0,w
  7001  0B2E  00F1               	movwf	abs@a
  7002  0B2F  3101               	addfsr 0,1
  7003  0B30  3F41               	moviw [1]fsr1
  7004  0B31  3B00               	subwfb	0,w
  7005  0B32  00F2               	movwf	abs@a+1
  7006  0B33  3197  2746  318B   	fcall	_abs
  7007  0B36  0872               	movf	?_abs+1,w
  7008  0B37  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  7009  0B38  0871               	movf	?_abs,w
  7010  0B39  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  7011  0B3A  2B3D               	goto	l4297
  7012  0B3B                     l4295:	
  7013                           
  7014                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423:         deviation = 0;
  7015  0B3B  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  7016  0B3C  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  7017  0B3D                     l4297:	
  7018                           
  7019                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     if(deviation > 100u)
  7020  0B3D  3000               	movlw	0
  7021  0B3E  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  7022  0B3F  3065               	movlw	101
  7023  0B40  1903               	skipnz
  7024  0B41  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  7025  0B42  1C03               	skipc
  7026  0B43  2B48               	goto	l4301
  7027                           
  7028                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:         Sensor_setActive(sensor);
  7029  0B44  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  7030  0B45  3195  2593         	fcall	_Sensor_setActive
  7031  0B47  0008               	return
  7032  0B48                     l4301:	
  7033                           
  7034                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:         Sensor_setInactive(sensor);
  7035  0B48  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  7036  0B49  3195  259B         	fcall	_Sensor_setInactive
  7037  0B4B  0008               	return
  7038  0B4C                     __end_of_Sensor_postAcquisitionProcess:	
  7039                           
  7040                           	psect	text34
  7041  159B                     __ptext34:	
  7042 ;; *************** function _Sensor_setInactive *****************
  7043 ;; Defined at:
  7044 ;;		line 877 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;  sensor          1    wreg     PTR struct .
  7047 ;;		 -> NULL(0), mtouch_sensor(27), 
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;  sensor          1    1[COMMON] PTR struct .
  7050 ;;		 -> NULL(0), mtouch_sensor(27), 
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  1    wreg      void 
  7053 ;; Registers used:
  7054 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7055 ;; Tracked objects:
  7056 ;;		On entry : 0/0
  7057 ;;		On exit  : 0/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7060 ;;      Params:         0       0       0       0       0       0       0       0
  7061 ;;      Locals:         1       0       0       0       0       0       0       0
  7062 ;;      Temps:          0       0       0       0       0       0       0       0
  7063 ;;      Totals:         1       0       0       0       0       0       0       0
  7064 ;;Total ram usage:        1 bytes
  7065 ;; Hardware stack levels used:    1
  7066 ;; Hardware stack levels required when called:    4
  7067 ;; This function calls:
  7068 ;;		Nothing
  7069 ;; This function is called by:
  7070 ;;		_Sensor_postAcquisitionProcess
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074                           
  7075                           ;psect for function _Sensor_setInactive
  7076  159B                     _Sensor_setInactive:	
  7077                           
  7078                           ;incstack = 0
  7079                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7080                           ;Sensor_setInactive@sensor stored from wreg
  7081  159B  00F1               	movwf	Sensor_setInactive@sensor
  7082                           
  7083                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 877: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 87
      +                          8: {;mcc_generated_files/mtouch/mtouch_sensor.c: 879:     sensor->active = 0;
  7084  159C  0871               	movf	Sensor_setInactive@sensor,w
  7085  159D  3E08               	addlw	8
  7086  159E  0086               	movwf	6
  7087  159F  3001               	movlw	1	; select bank2/3
  7088  15A0  0087               	movwf	7
  7089  15A1  1081               	bcf	1,1
  7090  15A2  0008               	return
  7091  15A3                     __end_of_Sensor_setInactive:	
  7092                           
  7093                           	psect	text35
  7094  1593                     __ptext35:	
  7095 ;; *************** function _Sensor_setActive *****************
  7096 ;; Defined at:
  7097 ;;		line 872 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7098 ;; Parameters:    Size  Location     Type
  7099 ;;  sensor          1    wreg     PTR struct .
  7100 ;;		 -> NULL(0), mtouch_sensor(27), 
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;  sensor          1    1[COMMON] PTR struct .
  7103 ;;		 -> NULL(0), mtouch_sensor(27), 
  7104 ;; Return value:  Size  Location     Type
  7105 ;;                  1    wreg      void 
  7106 ;; Registers used:
  7107 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7108 ;; Tracked objects:
  7109 ;;		On entry : 0/0
  7110 ;;		On exit  : 0/0
  7111 ;;		Unchanged: 0/0
  7112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7113 ;;      Params:         0       0       0       0       0       0       0       0
  7114 ;;      Locals:         1       0       0       0       0       0       0       0
  7115 ;;      Temps:          0       0       0       0       0       0       0       0
  7116 ;;      Totals:         1       0       0       0       0       0       0       0
  7117 ;;Total ram usage:        1 bytes
  7118 ;; Hardware stack levels used:    1
  7119 ;; Hardware stack levels required when called:    4
  7120 ;; This function calls:
  7121 ;;		Nothing
  7122 ;; This function is called by:
  7123 ;;		_Sensor_postAcquisitionProcess
  7124 ;; This function uses a non-reentrant model
  7125 ;;
  7126                           
  7127                           
  7128                           ;psect for function _Sensor_setActive
  7129  1593                     _Sensor_setActive:	
  7130                           
  7131                           ;incstack = 0
  7132                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7133                           ;Sensor_setActive@sensor stored from wreg
  7134  1593  00F1               	movwf	Sensor_setActive@sensor
  7135                           
  7136                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 872: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 873:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 874:     sensor->active = 1;
  7137  1594  0871               	movf	Sensor_setActive@sensor,w
  7138  1595  3E08               	addlw	8
  7139  1596  0086               	movwf	6
  7140  1597  3001               	movlw	1	; select bank2/3
  7141  1598  0087               	movwf	7
  7142  1599  1481               	bsf	1,1
  7143  159A  0008               	return
  7144  159B                     __end_of_Sensor_setActive:	
  7145                           
  7146                           	psect	text36
  7147  0E65                     __ptext36:	
  7148 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  7149 ;; Defined at:
  7150 ;;		line 733 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  sensor_adc1     1    wreg     PTR struct .
  7153 ;;		 -> NULL(0), mtouch_sensor(27), 
  7154 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  7155 ;;		 -> mtouch_sensor(27), 
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;  sensor_adc1     1   17[BANK0 ] PTR struct .
  7158 ;;		 -> NULL(0), mtouch_sensor(27), 
  7159 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  7160 ;;  packet_noise    2   18[BANK0 ] unsigned short 
  7161 ;;  i               1   26[BANK0 ] unsigned char 
  7162 ;;  retry           1   21[BANK0 ] unsigned char 
  7163 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  1    wreg      enum E2858
  7166 ;; Registers used:
  7167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7173 ;;      Params:         0       1       0       0       0       0       0       0
  7174 ;;      Locals:         0      10       0       0       0       0       0       0
  7175 ;;      Temps:          0       2       0       0       0       0       0       0
  7176 ;;      Totals:         0      13       0       0       0       0       0       0
  7177 ;;Total ram usage:       13 bytes
  7178 ;; Hardware stack levels used:    1
  7179 ;; Hardware stack levels required when called:    7
  7180 ;; This function calls:
  7181 ;;		_Sensor_Acq_ExecutePacket
  7182 ;; This function is called by:
  7183 ;;		_Sensor_Acquisition
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           
  7188                           ;psect for function _Sensor_Scanfrequency_Evaluation
  7189  0E65                     _Sensor_Scanfrequency_Evaluation:	
  7190                           
  7191                           ;incstack = 0
  7192                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  7193                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  7194  0E65  0020               	movlb	0	; select bank0
  7195  0E66  00B1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  7196                           
  7197                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 734: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 735:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 737:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 738:     mtouch_sensor_sampleperiod_t best_sample_period;
  7198  0E67  0021               	movlb	1	; select bank1
  7199  0E68  0845               	movf	(_packet_noise+1)^(0+128),w
  7200  0E69  0020               	movlb	0	; select bank0
  7201  0E6A  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  7202  0E6B  0021               	movlb	1	; select bank1
  7203  0E6C  0844               	movf	_packet_noise^(0+128),w
  7204  0E6D  0020               	movlb	0	; select bank0
  7205  0E6E  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7206  0E6F  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  7207  0E70  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  7208  0E71  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  7209  0E72  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  7210  0E73  0021               	movlb	1	; select bank1
  7211  0E74  0844               	movf	_packet_noise^(0+128),w
  7212  0E75  0020               	movlb	0	; select bank0
  7213  0E76  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  7214  0E77  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  7215  0E78  0021               	movlb	1	; select bank1
  7216  0E79  0845               	movf	(_packet_noise+1)^(0+128),w
  7217  0E7A  0020               	movlb	0	; select bank0
  7218  0E7B  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  7219  0E7C  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  7220                           
  7221                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:     best_sample_period = sample_period
      +                          ;
  7222  0E7D  086E               	movf	_sample_period,w
  7223  0E7E  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7224  0E7F  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7225  0E80  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  7226                           
  7227                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  7228  0E81  085E               	movf	_packet_sample+1,w
  7229  0E82  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  7230  0E83  085D               	movf	_packet_sample,w
  7231  0E84  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  7232                           
  7233                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  7234  0E85  0860               	movf	_packet_sample+3,w
  7235  0E86  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  7236  0E87  085F               	movf	_packet_sample+2,w
  7237  0E88  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  7238                           
  7239                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  7240  0E89  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  7241  0E8A                     l5897:	
  7242                           
  7243                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 749:         sample_period += frequency_hop[i];
  7244  0E8A  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  7245  0E8B  3E09               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  7246  0E8C  0084               	movwf	4
  7247  0E8D  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  7248  0E8E  1803               	skipnc
  7249  0E8F  3E01               	addlw	1
  7250  0E90  0085               	movwf	5
  7251  0E91  0800               	movf	0,w	;code access
  7252  0E92  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7253  0E93  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7254  0E94  07EE               	addwf	_sample_period,f
  7255                           
  7256                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  7257  0E95  30AE               	movlw	174
  7258  0E96  026E               	subwf	_sample_period,w
  7259  0E97  1803               	skipnc
  7260  0E98  2E9D               	goto	l5905
  7261                           
  7262                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  7263  0E99  30AE               	movlw	174
  7264  0E9A  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7265  0E9B  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7266  0E9C  07EE               	addwf	_sample_period,f
  7267  0E9D                     l5905:	
  7268                           
  7269                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:         retry = (uint8_t)5;
  7270  0E9D  3005               	movlw	5
  7271  0E9E  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7272  0E9F  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7273  0EA0  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  7274  0EA1                     l5913:	
  7275                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  7276                           
  7277                           
  7278                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  7279  0EA1  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  7280  0EA2  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7281  0EA3  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7282  0EA4  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  7283  0EA5  0831               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  7284  0EA6  3180  2065  318E   	fcall	_Sensor_Acq_ExecutePacket
  7285  0EA9  3A00               	xorlw	0
  7286  0EAA  1903               	btfsc	3,2
  7287  0EAB  2EB4               	goto	l5915
  7288                           
  7289                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             retry--;
  7290  0EAC  3001               	movlw	1
  7291  0EAD  0020               	movlb	0	; select bank0
  7292  0EAE  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  7293                           
  7294                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             if(retry == 0)
  7295  0EAF  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  7296  0EB0  1D03               	btfss	3,2
  7297  0EB1  2EA1               	goto	l5913
  7298                           
  7299                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 767:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  7300  0EB2  30FC               	movlw	252
  7301  0EB3  0008               	return
  7302  0EB4                     l5915:	
  7303                           
  7304                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         if(packet_noise_Max < packet_n
      +                          oise)
  7305  0EB4  0021               	movlb	1	; select bank1
  7306  0EB5  0845               	movf	(_packet_noise+1)^(0+128),w
  7307  0EB6  0020               	movlb	0	; select bank0
  7308  0EB7  0233               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  7309  0EB8  1D03               	skipz
  7310  0EB9  2EBE               	goto	u4755
  7311  0EBA  0021               	movlb	1	; select bank1
  7312  0EBB  0844               	movf	_packet_noise^(0+128),w
  7313  0EBC  0020               	movlb	0	; select bank0
  7314  0EBD  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  7315  0EBE                     u4755:	
  7316  0EBE  1803               	skipnc
  7317  0EBF  2ED4               	goto	l5919
  7318                           
  7319                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 773:             packet_noise_Max = packet_noise;
  7320  0EC0  0021               	movlb	1	; select bank1
  7321  0EC1  0845               	movf	(_packet_noise+1)^(0+128),w
  7322  0EC2  0020               	movlb	0	; select bank0
  7323  0EC3  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  7324  0EC4  0021               	movlb	1	; select bank1
  7325  0EC5  0844               	movf	_packet_noise^(0+128),w
  7326  0EC6  0020               	movlb	0	; select bank0
  7327  0EC7  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  7328                           
  7329                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             best_sample_period = sampl
      +                          e_period;
  7330  0EC8  086E               	movf	_sample_period,w
  7331  0EC9  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7332  0ECA  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7333  0ECB  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  7334                           
  7335                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  7336  0ECC  085E               	movf	_packet_sample+1,w
  7337  0ECD  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  7338  0ECE  085D               	movf	_packet_sample,w
  7339  0ECF  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  7340                           
  7341                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  7342  0ED0  0860               	movf	_packet_sample+3,w
  7343  0ED1  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  7344  0ED2  085F               	movf	_packet_sample+2,w
  7345  0ED3  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  7346  0ED4                     l5919:	
  7347                           
  7348                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     }
  7349  0ED4  3001               	movlw	1
  7350  0ED5  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7351  0ED6  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7352  0ED7  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  7353  0ED8  3005               	movlw	5
  7354  0ED9  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  7355  0EDA  1C03               	skipc
  7356  0EDB  2E8A               	goto	l5897
  7357                           
  7358                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:     sample_period = best_sample_period
      +                          ;
  7359  0EDC  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  7360  0EDD  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  7361  0EDE  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7362  0EDF  00EE               	movwf	_sample_period
  7363                           
  7364                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 781:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  7365  0EE0  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  7366  0EE1  00DE               	movwf	_packet_sample+1
  7367  0EE2  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  7368  0EE3  00DD               	movwf	_packet_sample
  7369                           
  7370                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  7371  0EE4  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  7372  0EE5  00E0               	movwf	_packet_sample+3
  7373  0EE6  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  7374  0EE7  00DF               	movwf	_packet_sample+2
  7375                           
  7376                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:     return MTOUCH_SENSOR_ERROR_none;
  7377  0EE8  3000               	movlw	0
  7378  0EE9  0008               	return
  7379  0EEA                     __end_of_Sensor_Scanfrequency_Evaluation:	
  7380                           
  7381                           	psect	text37
  7382  0065                     __ptext37:	
  7383 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  7384 ;; Defined at:
  7385 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  sensor_adc1     1    wreg     PTR struct .
  7388 ;;		 -> NULL(0), mtouch_sensor(27), 
  7389 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  7390 ;;		 -> mtouch_sensor(27), 
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  7393 ;;		 -> NULL(0), mtouch_sensor(27), 
  7394 ;;  last_b          2   10[BANK0 ] unsigned short 
  7395 ;;  last_a          2    8[BANK0 ] unsigned short 
  7396 ;;  packet_count    1   12[BANK0 ] unsigned char 
  7397 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  7398 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  7399 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  7400 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  7401 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  7402 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  7403 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  7404 ;; Return value:  Size  Location     Type
  7405 ;;                  1    wreg      enum E2858
  7406 ;; Registers used:
  7407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7408 ;; Tracked objects:
  7409 ;;		On entry : 0/0
  7410 ;;		On exit  : 0/0
  7411 ;;		Unchanged: 0/0
  7412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7413 ;;      Params:         1       0       0       0       0       0       0       0
  7414 ;;      Locals:         0      13       0       0       0       0       0       0
  7415 ;;      Temps:          0       1       0       0       0       0       0       0
  7416 ;;      Totals:         1      14       0       0       0       0       0       0
  7417 ;;Total ram usage:       15 bytes
  7418 ;; Hardware stack levels used:    1
  7419 ;; Hardware stack levels required when called:    6
  7420 ;; This function calls:
  7421 ;;		_MTOUCH_Sensor_Scan_Initialize
  7422 ;;		_Sensor_autoCalibration
  7423 ;;		_Sensor_isActive
  7424 ;;		_Sensor_isCalibrated
  7425 ;;		_Sensor_isEnabled
  7426 ;;		_Sensor_loadADCSettings
  7427 ;;		_TMR2_LoadPeriodRegister
  7428 ;;		_TMR2_StartTimer
  7429 ;;		_TMR2_StopTimer
  7430 ;;		_abs
  7431 ;; This function is called by:
  7432 ;;		_Sensor_Acquisition
  7433 ;;		_Sensor_Scanfrequency_Evaluation
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           
  7438                           ;psect for function _Sensor_Acq_ExecutePacket
  7439  0065                     _Sensor_Acq_ExecutePacket:	
  7440                           
  7441                           ;incstack = 0
  7442                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7443                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  7444  0065  0020               	movlb	0	; select bank0
  7445  0066  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  7446                           
  7447                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 476:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  7448  0067  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  7449  0068  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  7450                           
  7451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  7452  0069  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  7453  006A  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  7454                           
  7455                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:     uint8_t activeSensor = 0;
  7456  006B  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  7457                           
  7458                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 481:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 487:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  7459  006C  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  7460  006D  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  7461                           
  7462                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  7463  006E  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7464  006F  1903               	btfsc	3,2
  7465  0070  28AB               	goto	l5671
  7466  0071  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7467  0072  1903               	btfsc	3,2
  7468  0073  28AB               	goto	l5671
  7469                           
  7470                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 490:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  7471  0074  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7472  0075  3E08               	addlw	8
  7473  0076  0086               	movwf	6
  7474  0077  3001               	movlw	1	; select bank2/3
  7475  0078  0087               	movwf	7
  7476  0079  1981               	btfsc	1,3
  7477  007A  288B               	goto	l5653
  7478  007B  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7479  007C  3E08               	addlw	8
  7480  007D  0086               	movwf	6
  7481  007E  3001               	movlw	1	; select bank2/3
  7482  007F  0087               	movwf	7
  7483  0080  1D81               	btfss	1,3
  7484  0081  288B               	goto	l5653
  7485                           
  7486                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 492:             sensor_adc1->enabled = 1;
  7487  0082  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7488  0083  3E08               	addlw	8
  7489  0084  0086               	movwf	6
  7490  0085  3001               	movlw	1	; select bank2/3
  7491  0086  0087               	movwf	7
  7492  0087  1581               	bsf	1,3
  7493                           
  7494                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:             sensor1ForceEnabled = 1;
  7495  0088  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  7496  0089  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  7497                           
  7498                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 494:         }
  7499  008A  28C0               	goto	l5695
  7500  008B                     l5653:	
  7501  008B  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7502  008C  3E08               	addlw	8
  7503  008D  0086               	movwf	6
  7504  008E  3001               	movlw	1	; select bank2/3
  7505  008F  0087               	movwf	7
  7506  0090  1981               	btfsc	1,3
  7507  0091  28A2               	goto	l5661
  7508  0092  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7509  0093  3E08               	addlw	8
  7510  0094  0086               	movwf	6
  7511  0095  3001               	movlw	1	; select bank2/3
  7512  0096  0087               	movwf	7
  7513  0097  1D81               	btfss	1,3
  7514  0098  28A2               	goto	l5661
  7515                           
  7516                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 497:             sensor_adc2->enabled = 1;
  7517  0099  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7518  009A  3E08               	addlw	8
  7519  009B  0086               	movwf	6
  7520  009C  3001               	movlw	1	; select bank2/3
  7521  009D  0087               	movwf	7
  7522  009E  1581               	bsf	1,3
  7523                           
  7524                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:             sensor2ForceEnabled = 1;
  7525  009F  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  7526  00A0  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  7527                           
  7528                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         }
  7529  00A1  28C0               	goto	l5695
  7530  00A2                     l5661:	
  7531  00A2  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7532  00A3  3E08               	addlw	8
  7533  00A4  0086               	movwf	6
  7534  00A5  3001               	movlw	1	; select bank2/3
  7535  00A6  0087               	movwf	7
  7536  00A7  1981               	btfsc	1,3
  7537  00A8  28C0               	goto	l5695
  7538  00A9                     l5663:	
  7539  00A9  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7540  00AA  28B8               	goto	L4
  7541  00AB                     l5671:	
  7542                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:     }
  7543                           
  7544  00AB  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7545  00AC  1D03               	btfss	3,2
  7546  00AD  28B1               	goto	l5683
  7547  00AE  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7548  00AF  1D03               	btfss	3,2
  7549  00B0  28A9               	goto	l5663
  7550  00B1                     l5683:	
  7551                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 510:         if(sensor_adc2->enabled == 0)
  7552                           
  7553  00B1  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7554  00B2  1903               	btfsc	3,2
  7555  00B3  28C0               	goto	l5695
  7556  00B4  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7557  00B5  1D03               	btfss	3,2
  7558  00B6  28C0               	goto	l5695
  7559                           
  7560                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 519:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 520:         if(sensor_adc1->enabled == 0)
  7561  00B7  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7562  00B8                     L4:	
  7563  00B8  3E08               	addlw	8
  7564  00B9  0086               	movwf	6
  7565  00BA  3001               	movlw	1	; select bank2/3
  7566  00BB  0087               	movwf	7
  7567  00BC  1981               	btfsc	1,3
  7568  00BD  28C0               	goto	l5695
  7569  00BE                     l5665:	
  7570                           
  7571                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 502:             return MTOUCH_SENSOR_ERROR_none;
  7572  00BE  3000               	movlw	0
  7573  00BF  0008               	return
  7574  00C0                     l5695:	
  7575                           
  7576                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     if(Sensor_isActive(sensor_adc2))
  7577  00C0  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7578  00C1  3196  2602  3180   	fcall	_Sensor_isActive
  7579  00C4  3A00               	xorlw	0
  7580  00C5  1903               	skipnz
  7581  00C6  28CA               	goto	l5699
  7582                           
  7583                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         activeSensor = 1;
  7584  00C7  0020               	movlb	0	; select bank0
  7585  00C8  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  7586  00C9  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  7587  00CA                     l5699:	
  7588                           
  7589                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     ADCOMCON_temp = ADCOMCON;
  7590  00CA  002E               	movlb	14	; select bank14
  7591  00CB  0812               	movf	18,w	;volatile
  7592  00CC  0020               	movlb	0	; select bank0
  7593  00CD  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7594  00CE  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7595  00CF  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  7596                           
  7597                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     AD1CON2_temp = AD1CON2;
  7598  00D0  002E               	movlb	14	; select bank14
  7599  00D1  0813               	movf	19,w	;volatile
  7600  00D2  0020               	movlb	0	; select bank0
  7601  00D3  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7602  00D4  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7603  00D5  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  7604                           
  7605                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:     AD2CON2_temp = AD2CON2;
  7606  00D6  002F               	movlb	15	; select bank15
  7607  00D7  0813               	movf	19,w	;volatile
  7608  00D8  0020               	movlb	0	; select bank0
  7609  00D9  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7610  00DA  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7611  00DB  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  7612                           
  7613                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:     MTOUCH_Sensor_Scan_Initialize();
  7614  00DC  3196  264C  3180   	fcall	_MTOUCH_Sensor_Scan_Initialize
  7615                           
  7616                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     if(sensor_adc1!=((void*)0))
  7617  00DF  0020               	movlb	0	; select bank0
  7618  00E0  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7619  00E1  1903               	btfsc	3,2
  7620  00E2  28F6               	goto	l5715
  7621                           
  7622                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 548:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7623  00E3  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7624  00E4  3E04               	addlw	4
  7625  00E5  0086               	movwf	6
  7626  00E6  3001               	movlw	1	; select bank2/3
  7627  00E7  0087               	movwf	7
  7628  00E8  0801               	movf	1,w
  7629  00E9  3EFF               	addlw	255
  7630  00EA  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7631  00EB  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7632  00EC  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7633                           
  7634                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         ADxIF_flag = 0;
  7635  00ED  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7636                           
  7637                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD1GRD = 0b01000000;
  7638  00EE  3040               	movlw	64
  7639  00EF  002E               	movlb	14	; select bank14
  7640  00F0  0098               	movwf	24	;volatile
  7641                           
  7642                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         AAD2GRD = 0b00000000;
  7643  00F1  002F               	movlb	15	; select bank15
  7644  00F2  0198               	clrf	24	;volatile
  7645                           
  7646                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:         APFCONbits.GRDASEL = 0x0;
  7647  00F3  0022               	movlb	2	; select bank2
  7648  00F4  101D               	bcf	29,0	;volatile
  7649                           
  7650                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
  7651  00F5  2909               	goto	l5725
  7652  00F6                     l5715:	
  7653                           
  7654                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7655  00F6  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7656  00F7  3E04               	addlw	4
  7657  00F8  0086               	movwf	6
  7658  00F9  3001               	movlw	1	; select bank2/3
  7659  00FA  0087               	movwf	7
  7660  00FB  0801               	movf	1,w
  7661  00FC  3EFF               	addlw	255
  7662  00FD  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7663  00FE  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7664  00FF  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7665                           
  7666                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 1;
  7667  0100  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7668  0101  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  7669                           
  7670                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b00000000;
  7671  0102  002E               	movlb	14	; select bank14
  7672  0103  0198               	clrf	24	;volatile
  7673                           
  7674                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b01000000;
  7675  0104  3040               	movlw	64
  7676  0105  002F               	movlb	15	; select bank15
  7677  0106  0098               	movwf	24	;volatile
  7678                           
  7679                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x1;
  7680  0107  0022               	movlb	2	; select bank2
  7681  0108  141D               	bsf	29,0	;volatile
  7682  0109                     l5725:	
  7683                           
  7684                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  7685  0109  01F2               	clrf	Sensor_loadADCSettings@adc_index
  7686  010A  0020               	movlb	0	; select bank0
  7687  010B  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7688  010C  3183  23E8  3180   	fcall	_Sensor_loadADCSettings
  7689                           
  7690                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  7691  010F  01F2               	clrf	Sensor_loadADCSettings@adc_index
  7692  0110  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  7693  0111  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7694  0112  3183  23E8  3180   	fcall	_Sensor_loadADCSettings
  7695                           
  7696                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor_globalFlags.done = 0;
  7697  0115  0020               	movlb	0	; select bank0
  7698  0116  106B               	bcf	_sensor_globalFlags,0	;volatile
  7699                           
  7700                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:     sensor_globalFlags.error = 0;
  7701  0117  116B               	bcf	_sensor_globalFlags,2	;volatile
  7702                           
  7703                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:     sensor_globalFlags.interrupted = 0
      +                          ;
  7704  0118  11EB               	bcf	_sensor_globalFlags,3	;volatile
  7705                           
  7706                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  7707  0119  086E               	movf	_sample_period,w
  7708  011A  3195  2552  3180   	fcall	_TMR2_LoadPeriodRegister
  7709                           
  7710                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     TMR2_StartTimer();
  7711  011D  3195  2528  3180   	fcall	_TMR2_StartTimer
  7712                           
  7713                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     packet_noise = 0;
  7714  0120  0021               	movlb	1	; select bank1
  7715  0121  01C4               	clrf	_packet_noise^(0+128)
  7716  0122  01C5               	clrf	(_packet_noise+1)^(0+128)
  7717  0123                     l5741:	
  7718                           
  7719                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 576:         if(ADxIF_flag == 0)
  7720  0123  0020               	movlb	0	; select bank0
  7721  0124  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  7722  0125  1D03               	btfss	3,2
  7723  0126  292D               	goto	l286
  7724                           
  7725                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 578:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7726  0127  1F11               	btfss	17,6	;volatile
  7727  0128  10EB               	bcf	_sensor_globalFlags,1	;volatile
  7728  0129                     l288:	
  7729  0129  1F11               	btfss	17,6	;volatile
  7730  012A  2929               	goto	l288
  7731                           
  7732                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             PIR1bits.AD1IF = 0;
  7733  012B  1311               	bcf	17,6	;volatile
  7734                           
  7735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         }
  7736  012C  2933               	goto	l5749
  7737  012D                     l286:	
  7738                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         else
  7739                           
  7740                           
  7741                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 584:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7742  012D  1B12               	btfsc	18,6	;volatile
  7743  012E  2930               	goto	l293
  7744  012F  10EB               	bcf	_sensor_globalFlags,1	;volatile
  7745  0130                     l293:	
  7746  0130  1F12               	btfss	18,6	;volatile
  7747  0131  2930               	goto	l293
  7748                           
  7749                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             PIR2bits.AD2IF = 0;
  7750  0132  1312               	bcf	18,6	;volatile
  7751  0133                     l5749:	
  7752                           
  7753                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         AAD1GRD ^= 0b00100001;
  7754  0133  3021               	movlw	33
  7755  0134  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7756  0135  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7757  0136  002E               	movlb	14	; select bank14
  7758  0137  0698               	xorwf	24,f	;volatile
  7759                           
  7760                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         AAD2GRD ^= 0b00100001;
  7761  0138  3021               	movlw	33
  7762  0139  0020               	movlb	0	; select bank0
  7763  013A  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7764  013B  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7765  013C  002F               	movlb	15	; select bank15
  7766  013D  0698               	xorwf	24,f	;volatile
  7767                           
  7768                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         AAD1CON3 ^= 0b11000000;
  7769  013E  30C0               	movlw	192
  7770  013F  0020               	movlb	0	; select bank0
  7771  0140  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7772  0141  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7773  0142  002E               	movlb	14	; select bank14
  7774  0143  0694               	xorwf	20,f	;volatile
  7775                           
  7776                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:         AAD2CON3 ^= 0b11000000;
  7777  0144  30C0               	movlw	192
  7778  0145  0020               	movlb	0	; select bank0
  7779  0146  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  7780  0147  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  7781  0148  002F               	movlb	15	; select bank15
  7782  0149  0694               	xorwf	20,f	;volatile
  7783                           
  7784                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         if ((packet_counter & 0x01) ==
      +                           0)
  7785  014A  0020               	movlb	0	; select bank0
  7786  014B  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  7787  014C  2993               	goto	l5765
  7788                           
  7789                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 596:             packet_sample[0] += AAD1RES0;
  7790  014D  002E               	movlb	14	; select bank14
  7791  014E  081A               	movf	26,w	;volatile
  7792  014F  0020               	movlb	0	; select bank0
  7793  0150  07DD               	addwf	_packet_sample,f
  7794  0151  002E               	movlb	14	; select bank14
  7795  0152  081B               	movf	27,w	;volatile
  7796  0153  0020               	movlb	0	; select bank0
  7797  0154  3DDE               	addwfc	_packet_sample+1,f
  7798                           
  7799                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             packet_sample[1] += AAD2RE
      +                          S0;
  7800  0155  002F               	movlb	15	; select bank15
  7801  0156  081A               	movf	26,w	;volatile
  7802  0157  0020               	movlb	0	; select bank0
  7803  0158  07DF               	addwf	_packet_sample+2,f
  7804  0159  002F               	movlb	15	; select bank15
  7805  015A  081B               	movf	27,w	;volatile
  7806  015B  0020               	movlb	0	; select bank0
  7807  015C  3DE0               	addwfc	_packet_sample+3,f
  7808                           
  7809                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             if(activeSensor ==0)
  7810  015D  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7811  015E  1D03               	btfss	3,2
  7812  015F  2978               	goto	l5761
  7813                           
  7814                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 600:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  7815  0160  002E               	movlb	14	; select bank14
  7816  0161  081A               	movf	26,w	;volatile
  7817  0162  0020               	movlb	0	; select bank0
  7818  0163  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7819  0164  00F1               	movwf	abs@a
  7820  0165  002E               	movlb	14	; select bank14
  7821  0166  081B               	movf	27,w	;volatile
  7822  0167  0020               	movlb	0	; select bank0
  7823  0168  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7824  0169  00F2               	movwf	abs@a+1
  7825  016A  3197  2746  3180   	fcall	_abs
  7826  016D  0871               	movf	?_abs,w
  7827  016E  0021               	movlb	1	; select bank1
  7828  016F  07C4               	addwf	_packet_noise^(0+128),f
  7829  0170  0872               	movf	?_abs+1,w
  7830  0171  3DC5               	addwfc	(_packet_noise+1)^(0+128),f
  7831                           
  7832                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:                 last_b = AAD1RES0;
  7833  0172  002E               	movlb	14	; select bank14
  7834  0173  081B               	movf	27,w	;volatile
  7835  0174  0020               	movlb	0	; select bank0
  7836  0175  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7837  0176  002E               	movlb	14	; select bank14
  7838  0177  298F               	goto	L3
  7839  0178                     l5761:	
  7840                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             }
  7841                           
  7842                           
  7843                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 605:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  7844  0178  002F               	movlb	15	; select bank15
  7845  0179  081A               	movf	26,w	;volatile
  7846  017A  0020               	movlb	0	; select bank0
  7847  017B  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7848  017C  00F1               	movwf	abs@a
  7849  017D  002F               	movlb	15	; select bank15
  7850  017E  081B               	movf	27,w	;volatile
  7851  017F  0020               	movlb	0	; select bank0
  7852  0180  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7853  0181  00F2               	movwf	abs@a+1
  7854  0182  3197  2746  3180   	fcall	_abs
  7855  0185  0871               	movf	?_abs,w
  7856  0186  0021               	movlb	1	; select bank1
  7857  0187  07C4               	addwf	_packet_noise^(0+128),f
  7858  0188  0872               	movf	?_abs+1,w
  7859  0189  3DC5               	addwfc	(_packet_noise+1)^(0+128),f
  7860                           
  7861                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:                 last_b = AAD2RES0;
  7862  018A  002F               	movlb	15	; select bank15
  7863  018B  081B               	movf	27,w	;volatile
  7864  018C  0020               	movlb	0	; select bank0
  7865  018D  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7866  018E  002F               	movlb	15	; select bank15
  7867  018F                     L3:	
  7868  018F  081A               	movf	26,w	;volatile
  7869  0190  0020               	movlb	0	; select bank0
  7870  0191  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  7871  0192  29C7               	goto	l5777
  7872  0193                     l5765:	
  7873                           
  7874                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 611:             packet_sample[0] -= AAD1RES0;
  7875  0193  002E               	movlb	14	; select bank14
  7876  0194  081A               	movf	26,w	;volatile
  7877  0195  0020               	movlb	0	; select bank0
  7878  0196  02DD               	subwf	_packet_sample,f
  7879  0197  002E               	movlb	14	; select bank14
  7880  0198  081B               	movf	27,w	;volatile
  7881  0199  0020               	movlb	0	; select bank0
  7882  019A  3BDE               	subwfb	_packet_sample+1,f
  7883                           
  7884                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             packet_sample[1] -= AAD2RE
      +                          S0;
  7885  019B  002F               	movlb	15	; select bank15
  7886  019C  081A               	movf	26,w	;volatile
  7887  019D  0020               	movlb	0	; select bank0
  7888  019E  02DF               	subwf	_packet_sample+2,f
  7889  019F  002F               	movlb	15	; select bank15
  7890  01A0  081B               	movf	27,w	;volatile
  7891  01A1  0020               	movlb	0	; select bank0
  7892  01A2  3BE0               	subwfb	_packet_sample+3,f
  7893                           
  7894                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 613:             if(activeSensor ==0)
  7895  01A3  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7896  01A4  1D03               	btfss	3,2
  7897  01A5  29AD               	goto	l5773
  7898                           
  7899                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 615:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  7900  01A6  002E               	movlb	14	; select bank14
  7901  01A7  081A               	movf	26,w	;volatile
  7902  01A8  0020               	movlb	0	; select bank0
  7903  01A9  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7904  01AA  00F1               	movwf	abs@a
  7905  01AB  002E               	movlb	14	; select bank14
  7906  01AC  29B3               	goto	L6
  7907  01AD                     l5773:	
  7908                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:             }
  7909                           
  7910                           
  7911                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 620:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  7912  01AD  002F               	movlb	15	; select bank15
  7913  01AE  081A               	movf	26,w	;volatile
  7914  01AF  0020               	movlb	0	; select bank0
  7915  01B0  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7916  01B1  00F1               	movwf	abs@a
  7917  01B2  002F               	movlb	15	; select bank15
  7918  01B3                     L6:	
  7919  01B3  081B               	movf	27,w	;volatile
  7920  01B4  0020               	movlb	0	; select bank0
  7921  01B5  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  7922  01B6  00F2               	movwf	abs@a+1
  7923  01B7  3197  2746  3180   	fcall	_abs
  7924  01BA  0871               	movf	?_abs,w
  7925  01BB  0021               	movlb	1	; select bank1
  7926  01BC  07C4               	addwf	_packet_noise^(0+128),f
  7927  01BD  0872               	movf	?_abs+1,w
  7928  01BE  3DC5               	addwfc	(_packet_noise+1)^(0+128),f
  7929                           
  7930                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:                 last_a = AAD1RES0;
  7931  01BF  002E               	movlb	14	; select bank14
  7932  01C0  081B               	movf	27,w	;volatile
  7933  01C1  0020               	movlb	0	; select bank0
  7934  01C2  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  7935  01C3  002E               	movlb	14	; select bank14
  7936  01C4  081A               	movf	26,w	;volatile
  7937  01C5  0020               	movlb	0	; select bank0
  7938  01C6  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  7939  01C7                     l5777:	
  7940                           
  7941                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:         if (packet_counter == 0)
  7942  01C7  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  7943  01C8  1903               	btfsc	3,2
  7944                           
  7945                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 629:             sensor_globalFlags.done = (uint8_t)1;
  7946  01C9  146B               	bsf	_sensor_globalFlags,0	;volatile
  7947                           
  7948                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:         packet_counter--;
  7949  01CA  3001               	movlw	1
  7950  01CB  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  7951                           
  7952                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:         if (sensor_globalFlags.check !
      +                          = 0)
  7953  01CC  1CEB               	btfss	_sensor_globalFlags,1	;volatile
  7954  01CD  29D0               	goto	l303
  7955                           
  7956                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 635:             sensor_globalFlags.error = 1;
  7957  01CE  156B               	bsf	_sensor_globalFlags,2	;volatile
  7958                           
  7959                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:             sensor_globalFlags.done = 
      +                          1;
  7960  01CF  146B               	bsf	_sensor_globalFlags,0	;volatile
  7961  01D0                     l303:	
  7962                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         }
  7963                           
  7964                           
  7965                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:         sensor_globalFlags.check = 1;
  7966  01D0  14EB               	bsf	_sensor_globalFlags,1	;volatile
  7967                           
  7968                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:     } while(sensor_globalFlags.done ==
      +                           0);
  7969  01D1  1C6B               	btfss	_sensor_globalFlags,0	;volatile
  7970  01D2  2923               	goto	l5741
  7971                           
  7972                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     TMR2_StopTimer();
  7973  01D3  3195  252B  3180   	fcall	_TMR2_StopTimer
  7974                           
  7975                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     ADCOMCON = ADCOMCON_temp;
  7976  01D6  0020               	movlb	0	; select bank0
  7977  01D7  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  7978  01D8  002E               	movlb	14	; select bank14
  7979  01D9  0092               	movwf	18	;volatile
  7980                           
  7981                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     AD1CON2 = AD1CON2_temp;
  7982  01DA  0020               	movlb	0	; select bank0
  7983  01DB  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  7984  01DC  002E               	movlb	14	; select bank14
  7985  01DD  0093               	movwf	19	;volatile
  7986                           
  7987                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     AD2CON2 = AD2CON2_temp;
  7988  01DE  0020               	movlb	0	; select bank0
  7989  01DF  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  7990  01E0  002F               	movlb	15	; select bank15
  7991  01E1  0093               	movwf	19	;volatile
  7992                           
  7993                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:     if(sensor_globalFlags.error)
  7994  01E2  0020               	movlb	0	; select bank0
  7995  01E3  1D6B               	btfss	_sensor_globalFlags,2	;volatile
  7996  01E4  29E7               	goto	l305
  7997                           
  7998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 648:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  7999  01E5  30FB               	movlw	251
  8000  01E6  0008               	return
  8001  01E7                     l305:	
  8002                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     }
  8003                           
  8004                           
  8005                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(sensor_globalFlags.interrupted)
  8006  01E7  1DEB               	btfss	_sensor_globalFlags,3	;volatile
  8007  01E8  29EB               	goto	l5805
  8008                           
  8009                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 653:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  8010  01E9  30FA               	movlw	250
  8011  01EA  0008               	return
  8012  01EB                     l5805:	
  8013                           
  8014                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     if (sensor1ForceEnabled)
  8015  01EB  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  8016  01EC  1903               	btfsc	3,2
  8017  01ED  29F4               	goto	l5809
  8018                           
  8019                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:         sensor_adc1->enabled = 0;
  8020  01EE  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8021  01EF  3E08               	addlw	8
  8022  01F0  0086               	movwf	6
  8023  01F1  3001               	movlw	1	; select bank2/3
  8024  01F2  0087               	movwf	7
  8025  01F3  1181               	bcf	1,3
  8026  01F4                     l5809:	
  8027                           
  8028                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     if (sensor2ForceEnabled)
  8029  01F4  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  8030  01F5  1903               	btfsc	3,2
  8031  01F6  29FD               	goto	l5813
  8032                           
  8033                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:         sensor_adc2->enabled = 0;
  8034  01F7  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8035  01F8  3E08               	addlw	8
  8036  01F9  0086               	movwf	6
  8037  01FA  3001               	movlw	1	; select bank2/3
  8038  01FB  0087               	movwf	7
  8039  01FC  1181               	bcf	1,3
  8040  01FD                     l5813:	
  8041                           
  8042                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  8043  01FD  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8044  01FE  3196  267E  3180   	fcall	_Sensor_isEnabled
  8045  0201  3A00               	xorlw	0
  8046  0202  1903               	skipnz
  8047  0203  2A11               	goto	l5819
  8048  0204  0020               	movlb	0	; select bank0
  8049  0205  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8050  0206  3195  25C4  3180   	fcall	_Sensor_isCalibrated
  8051  0209  3A00               	xorlw	0
  8052  020A  1D03               	skipz
  8053  020B  2A11               	goto	l5819
  8054                           
  8055                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:         Sensor_autoCalibration(sensor_
      +                          adc1);
  8056  020C  0020               	movlb	0	; select bank0
  8057  020D  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8058  020E  3187  2715  3180   	fcall	_Sensor_autoCalibration
  8059  0211                     l5819:	
  8060                           
  8061                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 667:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  8062  0211  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8063  0212  3196  267E  3180   	fcall	_Sensor_isEnabled
  8064  0215  3A00               	xorlw	0
  8065  0216  1903               	skipnz
  8066  0217  2A23               	goto	l5825
  8067  0218  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8068  0219  3195  25C4  3180   	fcall	_Sensor_isCalibrated
  8069  021C  3A00               	xorlw	0
  8070  021D  1D03               	skipz
  8071  021E  2A23               	goto	l5825
  8072                           
  8073                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:         Sensor_autoCalibration(sensor_
      +                          adc2);
  8074  021F  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8075  0220  3187  2715  3180   	fcall	_Sensor_autoCalibration
  8076  0223                     l5825:	
  8077                           
  8078                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 670:     AD1PRECON = 0;
  8079  0223  002E               	movlb	14	; select bank14
  8080  0224  0196               	clrf	22	;volatile
  8081                           
  8082                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671:     AD2PRECON = 0;
  8083  0225  002F               	movlb	15	; select bank15
  8084  0226  0196               	clrf	22	;volatile
  8085                           
  8086                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     AD1ACQCON = 0;
  8087  0227  002E               	movlb	14	; select bank14
  8088  0228  0197               	clrf	23	;volatile
  8089                           
  8090                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:     AD2ACQCON = 0;
  8091  0229  002F               	movlb	15	; select bank15
  8092  022A  0197               	clrf	23	;volatile
  8093                           
  8094                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 674:     AD1CON0bits.ADON = 0;
  8095  022B  002E               	movlb	14	; select bank14
  8096  022C  1011               	bcf	17,0	;volatile
  8097                           
  8098                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     AD2CON0bits.ADON = 0;
  8099  022D  002F               	movlb	15	; select bank15
  8100  022E  1011               	bcf	17,0	;volatile
  8101  022F  28BE               	goto	l5665
  8102  0230                     __end_of_Sensor_Acq_ExecutePacket:	
  8103                           
  8104                           	psect	text38
  8105  152B                     __ptext38:	
  8106 ;; *************** function _TMR2_StopTimer *****************
  8107 ;; Defined at:
  8108 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;		None
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;		None
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  1    wreg      void 
  8115 ;; Registers used:
  8116 ;;		None
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8122 ;;      Params:         0       0       0       0       0       0       0       0
  8123 ;;      Locals:         0       0       0       0       0       0       0       0
  8124 ;;      Temps:          0       0       0       0       0       0       0       0
  8125 ;;      Totals:         0       0       0       0       0       0       0       0
  8126 ;;Total ram usage:        0 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:    4
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		_Sensor_Acq_ExecutePacket
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           
  8137                           ;psect for function _TMR2_StopTimer
  8138  152B                     _TMR2_StopTimer:	
  8139                           
  8140                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  8141                           
  8142                           ;incstack = 0
  8143                           ; Regs used in _TMR2_StopTimer: []
  8144  152B  0020               	movlb	0	; select bank0
  8145  152C  111C               	bcf	28,2	;volatile
  8146  152D  0008               	return
  8147  152E                     __end_of_TMR2_StopTimer:	
  8148                           
  8149                           	psect	text39
  8150  1528                     __ptext39:	
  8151 ;; *************** function _TMR2_StartTimer *****************
  8152 ;; Defined at:
  8153 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;		None
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;		None
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      void 
  8160 ;; Registers used:
  8161 ;;		None
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8167 ;;      Params:         0       0       0       0       0       0       0       0
  8168 ;;      Locals:         0       0       0       0       0       0       0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0       0
  8170 ;;      Totals:         0       0       0       0       0       0       0       0
  8171 ;;Total ram usage:        0 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    4
  8174 ;; This function calls:
  8175 ;;		Nothing
  8176 ;; This function is called by:
  8177 ;;		_Sensor_Acq_ExecutePacket
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           
  8182                           ;psect for function _TMR2_StartTimer
  8183  1528                     _TMR2_StartTimer:	
  8184                           
  8185                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  8186                           
  8187                           ;incstack = 0
  8188                           ; Regs used in _TMR2_StartTimer: []
  8189  1528  0020               	movlb	0	; select bank0
  8190  1529  151C               	bsf	28,2	;volatile
  8191  152A  0008               	return
  8192  152B                     __end_of_TMR2_StartTimer:	
  8193                           
  8194                           	psect	text40
  8195  1552                     __ptext40:	
  8196 ;; *************** function _TMR2_LoadPeriodRegister *****************
  8197 ;; Defined at:
  8198 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;  periodVal       1    wreg     unsigned char 
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;  periodVal       1    1[COMMON] unsigned char 
  8203 ;; Return value:  Size  Location     Type
  8204 ;;                  1    wreg      void 
  8205 ;; Registers used:
  8206 ;;		wreg
  8207 ;; Tracked objects:
  8208 ;;		On entry : 0/0
  8209 ;;		On exit  : 0/0
  8210 ;;		Unchanged: 0/0
  8211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8212 ;;      Params:         0       0       0       0       0       0       0       0
  8213 ;;      Locals:         1       0       0       0       0       0       0       0
  8214 ;;      Temps:          0       0       0       0       0       0       0       0
  8215 ;;      Totals:         1       0       0       0       0       0       0       0
  8216 ;;Total ram usage:        1 bytes
  8217 ;; Hardware stack levels used:    1
  8218 ;; Hardware stack levels required when called:    4
  8219 ;; This function calls:
  8220 ;;		Nothing
  8221 ;; This function is called by:
  8222 ;;		_Sensor_Acq_ExecutePacket
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           
  8227                           ;psect for function _TMR2_LoadPeriodRegister
  8228  1552                     _TMR2_LoadPeriodRegister:	
  8229                           
  8230                           ;incstack = 0
  8231                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  8232                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  8233  1552  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  8234                           
  8235                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  8236  1553  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  8237  1554  0020               	movlb	0	; select bank0
  8238  1555  009B               	movwf	27	;volatile
  8239  1556  0008               	return
  8240  1557                     __end_of_TMR2_LoadPeriodRegister:	
  8241                           
  8242                           	psect	text41
  8243  03E8                     __ptext41:	
  8244 ;; *************** function _Sensor_loadADCSettings *****************
  8245 ;; Defined at:
  8246 ;;		line 437 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;  sensor          1    wreg     PTR struct .
  8249 ;;		 -> NULL(0), mtouch_sensor(27), 
  8250 ;;  adc_index       1    2[COMMON] unsigned char 
  8251 ;; Auto vars:     Size  Location     Type
  8252 ;;  sensor          1    9[COMMON] PTR struct .
  8253 ;;		 -> NULL(0), mtouch_sensor(27), 
  8254 ;;  addressOffse    1    8[COMMON] unsigned char 
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  1    wreg      void 
  8257 ;; Registers used:
  8258 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8264 ;;      Params:         1       0       0       0       0       0       0       0
  8265 ;;      Locals:         4       0       0       0       0       0       0       0
  8266 ;;      Temps:          3       0       0       0       0       0       0       0
  8267 ;;      Totals:         8       0       0       0       0       0       0       0
  8268 ;;Total ram usage:        8 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:    5
  8271 ;; This function calls:
  8272 ;;		_Sensor_isCalibrated
  8273 ;;		_Sensor_isCalibratingAcqTime
  8274 ;; This function is called by:
  8275 ;;		_Sensor_Acq_ExecutePacket
  8276 ;; This function uses a non-reentrant model
  8277 ;;
  8278                           
  8279                           
  8280                           ;psect for function _Sensor_loadADCSettings
  8281  03E8                     _Sensor_loadADCSettings:	
  8282                           
  8283                           ;incstack = 0
  8284                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8285                           ;Sensor_loadADCSettings@sensor stored from wreg
  8286  03E8  00F9               	movwf	Sensor_loadADCSettings@sensor
  8287                           
  8288                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 438
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     if (sensor == ((void*)0))
  8289  03E9  0879               	movf	Sensor_loadADCSettings@sensor,w
  8290  03EA  1903               	btfsc	3,2
  8291  03EB  0008               	return
  8292                           
  8293                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  8294  03EC  0872               	movf	Sensor_loadADCSettings@adc_index,w
  8295  03ED  1D03               	btfss	3,2
  8296  03EE  2BF2               	goto	l3915
  8297  03EF  01F6               	clrf	_Sensor_loadADCSettings$562
  8298  03F0  01F7               	clrf	_Sensor_loadADCSettings$562+1
  8299  03F1  2BF6               	goto	l257
  8300  03F2                     l3915:	
  8301  03F2  3080               	movlw	128
  8302  03F3  00F6               	movwf	_Sensor_loadADCSettings$562
  8303  03F4  3000               	movlw	0
  8304  03F5  00F7               	movwf	_Sensor_loadADCSettings$562+1
  8305  03F6                     l257:	
  8306  03F6  0876               	movf	_Sensor_loadADCSettings$562,w
  8307  03F7  00F3               	movwf	??_Sensor_loadADCSettings
  8308  03F8  0873               	movf	??_Sensor_loadADCSettings,w
  8309  03F9  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  8310                           
  8311                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  8312  03FA  0A79               	incf	Sensor_loadADCSettings@sensor,w
  8313  03FB  0086               	movwf	6
  8314  03FC  3001               	movlw	1	; select bank2/3
  8315  03FD  0087               	movwf	7
  8316  03FE  0801               	movf	1,w
  8317  03FF  00F3               	movwf	??_Sensor_loadADCSettings
  8318  0400  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8319  0401  3E11               	addlw	17
  8320  0402  00F4               	movwf	??_Sensor_loadADCSettings+1
  8321  0403  01F5               	clrf	??_Sensor_loadADCSettings+2
  8322  0404  3007               	movlw	7
  8323  0405  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8324  0406  0874               	movf	??_Sensor_loadADCSettings+1,w
  8325  0407  0086               	movwf	6
  8326  0408  0875               	movf	??_Sensor_loadADCSettings+2,w
  8327  0409  0087               	movwf	7
  8328  040A  0873               	movf	??_Sensor_loadADCSettings,w
  8329  040B  0081               	movwf	1
  8330                           
  8331                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  8332  040C  0879               	movf	Sensor_loadADCSettings@sensor,w
  8333  040D  3E05               	addlw	5
  8334  040E  0086               	movwf	6
  8335  040F  3001               	movlw	1	; select bank2/3
  8336  0410  0087               	movwf	7
  8337  0411  0801               	movf	1,w
  8338  0412  00F3               	movwf	??_Sensor_loadADCSettings
  8339  0413  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8340  0414  3E19               	addlw	25
  8341  0415  00F4               	movwf	??_Sensor_loadADCSettings+1
  8342  0416  01F5               	clrf	??_Sensor_loadADCSettings+2
  8343  0417  3007               	movlw	7
  8344  0418  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8345  0419  0874               	movf	??_Sensor_loadADCSettings+1,w
  8346  041A  0086               	movwf	6
  8347  041B  0875               	movf	??_Sensor_loadADCSettings+2,w
  8348  041C  0087               	movwf	7
  8349  041D  0873               	movf	??_Sensor_loadADCSettings,w
  8350  041E  0081               	movwf	1
  8351                           
  8352                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  8353  041F  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8354  0420  3E13               	addlw	19
  8355  0421  00F3               	movwf	??_Sensor_loadADCSettings
  8356  0422  01F4               	clrf	??_Sensor_loadADCSettings+1
  8357  0423  3007               	movlw	7
  8358  0424  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8359  0425  0873               	movf	??_Sensor_loadADCSettings,w
  8360  0426  0086               	movwf	6
  8361  0427  0874               	movf	??_Sensor_loadADCSettings+1,w
  8362  0428  0087               	movwf	7
  8363  0429  3050               	movlw	80
  8364  042A  0081               	movwf	1
  8365                           
  8366                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  8367  042B  30FE               	movlw	254
  8368  042C  00F3               	movwf	??_Sensor_loadADCSettings
  8369  042D  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8370  042E  3E18               	addlw	24
  8371  042F  0086               	movwf	6
  8372  0430  0187               	clrf	7
  8373  0431  3007               	movlw	7
  8374  0432  3D87               	addwfc	7,f
  8375  0433  0873               	movf	??_Sensor_loadADCSettings,w
  8376  0434  0581               	andwf	1,f
  8377                           
  8378                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:     if (Sensor_isCalibrated(sensor))
  8379  0435  0879               	movf	Sensor_loadADCSettings@sensor,w
  8380  0436  3195  25C4  3183   	fcall	_Sensor_isCalibrated
  8381  0439  3A00               	xorlw	0
  8382  043A  1903               	skipnz
  8383  043B  2C50               	goto	l3929
  8384                           
  8385                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 451:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  8386  043C  0879               	movf	Sensor_loadADCSettings@sensor,w
  8387  043D  3E02               	addlw	2
  8388  043E  0086               	movwf	6
  8389  043F  3001               	movlw	1	; select bank2/3
  8390  0440  0087               	movwf	7
  8391  0441  0801               	movf	1,w
  8392  0442  00F3               	movwf	??_Sensor_loadADCSettings
  8393  0443  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8394  0444  3E16               	addlw	22
  8395  0445  00F4               	movwf	??_Sensor_loadADCSettings+1
  8396  0446  01F5               	clrf	??_Sensor_loadADCSettings+2
  8397  0447  3007               	movlw	7
  8398  0448  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8399  0449  0874               	movf	??_Sensor_loadADCSettings+1,w
  8400  044A  0086               	movwf	6
  8401  044B  0875               	movf	??_Sensor_loadADCSettings+2,w
  8402  044C  0087               	movwf	7
  8403  044D  0873               	movf	??_Sensor_loadADCSettings,w
  8404  044E  0081               	movwf	1
  8405  044F  2C63               	goto	l3933
  8406  0450                     l3929:	
  8407                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     }
  8408                           
  8409                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  8410                           
  8411                           
  8412                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 456:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  8413  0450  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8414  0451  3E16               	addlw	22
  8415  0452  00F3               	movwf	??_Sensor_loadADCSettings
  8416  0453  01F4               	clrf	??_Sensor_loadADCSettings+1
  8417  0454  3007               	movlw	7
  8418  0455  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8419  0456  0873               	movf	??_Sensor_loadADCSettings,w
  8420  0457  0086               	movwf	6
  8421  0458  0874               	movf	??_Sensor_loadADCSettings+1,w
  8422  0459  0087               	movwf	7
  8423  045A  3020               	movlw	32
  8424  045B  0081               	movwf	1
  8425                           
  8426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  8427  045C  0879               	movf	Sensor_loadADCSettings@sensor,w
  8428  045D  3195  25BB  3183   	fcall	_Sensor_isCalibratingAcqTime
  8429  0460  3A00               	xorlw	0
  8430  0461  1903               	skipnz
  8431  0462  2C76               	goto	l3935
  8432  0463                     l3933:	
  8433                           
  8434                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  8435  0463  0879               	movf	Sensor_loadADCSettings@sensor,w
  8436  0464  3E03               	addlw	3
  8437  0465  0086               	movwf	6
  8438  0466  3001               	movlw	1	; select bank2/3
  8439  0467  0087               	movwf	7
  8440  0468  0801               	movf	1,w
  8441  0469  00F3               	movwf	??_Sensor_loadADCSettings
  8442  046A  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8443  046B  3E17               	addlw	23
  8444  046C  00F4               	movwf	??_Sensor_loadADCSettings+1
  8445  046D  01F5               	clrf	??_Sensor_loadADCSettings+2
  8446  046E  3007               	movlw	7
  8447  046F  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  8448  0470  0874               	movf	??_Sensor_loadADCSettings+1,w
  8449  0471  0086               	movwf	6
  8450  0472  0875               	movf	??_Sensor_loadADCSettings+2,w
  8451  0473  0087               	movwf	7
  8452  0474  0873               	movf	??_Sensor_loadADCSettings,w
  8453  0475  2C81               	goto	L7
  8454  0476                     l3935:	
  8455                           
  8456                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  8457  0476  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  8458  0477  3E17               	addlw	23
  8459  0478  00F3               	movwf	??_Sensor_loadADCSettings
  8460  0479  01F4               	clrf	??_Sensor_loadADCSettings+1
  8461  047A  3007               	movlw	7
  8462  047B  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  8463  047C  0873               	movf	??_Sensor_loadADCSettings,w
  8464  047D  0086               	movwf	6
  8465  047E  0874               	movf	??_Sensor_loadADCSettings+1,w
  8466  047F  0087               	movwf	7
  8467  0480  3020               	movlw	32
  8468  0481                     L7:	
  8469  0481  0081               	movwf	1
  8470                           
  8471                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  8472                           
  8473                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  8474  0482  0879               	movf	Sensor_loadADCSettings@sensor,w
  8475  0483  3E04               	addlw	4
  8476  0484  0086               	movwf	6
  8477  0485  3001               	movlw	1	; select bank2/3
  8478  0486  0087               	movwf	7
  8479  0487  0801               	movf	1,w
  8480  0488  00F3               	movwf	??_Sensor_loadADCSettings
  8481  0489  01F4               	clrf	??_Sensor_loadADCSettings+1
  8482  048A  3009               	movlw	9
  8483  048B                     u2405:	
  8484  048B  35F3               	lslf	??_Sensor_loadADCSettings,f
  8485  048C  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  8486  048D  0B89               	decfsz	9,f
  8487  048E  2C8B               	goto	u2405
  8488  048F  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  8489  0490  3E5D               	addlw	(low (_packet_sample| 0))& (0+255)
  8490  0491  0086               	movwf	6
  8491  0492  0187               	clrf	7
  8492  0493  0873               	movf	??_Sensor_loadADCSettings,w
  8493  0494  3FC0               	movwi [0]fsr1
  8494  0495  0874               	movf	??_Sensor_loadADCSettings+1,w
  8495  0496  3FC1               	movwi [1]fsr1
  8496  0497  0008               	return
  8497  0498                     __end_of_Sensor_loadADCSettings:	
  8498                           
  8499                           	psect	text42
  8500  15C4                     __ptext42:	
  8501 ;; *************** function _Sensor_isCalibrated *****************
  8502 ;; Defined at:
  8503 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  sensor          1    wreg     PTR struct .
  8506 ;;		 -> NULL(0), mtouch_sensor(27), 
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;  sensor          1    1[COMMON] PTR struct .
  8509 ;;		 -> NULL(0), mtouch_sensor(27), 
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  1    wreg      _Bool 
  8512 ;; Registers used:
  8513 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8514 ;; Tracked objects:
  8515 ;;		On entry : 0/0
  8516 ;;		On exit  : 0/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8519 ;;      Params:         0       0       0       0       0       0       0       0
  8520 ;;      Locals:         1       0       0       0       0       0       0       0
  8521 ;;      Temps:          0       0       0       0       0       0       0       0
  8522 ;;      Totals:         1       0       0       0       0       0       0       0
  8523 ;;Total ram usage:        1 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:    4
  8526 ;; This function calls:
  8527 ;;		Nothing
  8528 ;; This function is called by:
  8529 ;;		_Sensor_Acquisition
  8530 ;;		_Sensor_loadADCSettings
  8531 ;;		_Sensor_Acq_ExecutePacket
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           
  8536                           ;psect for function _Sensor_isCalibrated
  8537  15C4                     _Sensor_isCalibrated:	
  8538                           
  8539                           ;incstack = 0
  8540                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  8541                           ;Sensor_isCalibrated@sensor stored from wreg
  8542  15C4  00F1               	movwf	Sensor_isCalibrated@sensor
  8543                           
  8544                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor->calibr
      +                          ated;
  8545  15C5  0871               	movf	Sensor_isCalibrated@sensor,w
  8546  15C6  3E08               	addlw	8
  8547  15C7  0086               	movwf	6
  8548  15C8  3001               	movlw	1	; select bank2/3
  8549  15C9  0087               	movwf	7
  8550  15CA  0C01               	rrf	1,w
  8551  15CB  0C89               	rrf	9,f
  8552  15CC  3901               	andlw	1
  8553  15CD  0008               	return
  8554  15CE                     __end_of_Sensor_isCalibrated:	
  8555                           
  8556                           	psect	text43
  8557  167E                     __ptext43:	
  8558 ;; *************** function _Sensor_isEnabled *****************
  8559 ;; Defined at:
  8560 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;  sensor          1    wreg     PTR struct .
  8563 ;;		 -> NULL(0), mtouch_sensor(27), 
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;  sensor          1    2[COMMON] PTR struct .
  8566 ;;		 -> NULL(0), mtouch_sensor(27), 
  8567 ;; Return value:  Size  Location     Type
  8568 ;;                  1    wreg      _Bool 
  8569 ;; Registers used:
  8570 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8571 ;; Tracked objects:
  8572 ;;		On entry : 0/0
  8573 ;;		On exit  : 0/0
  8574 ;;		Unchanged: 0/0
  8575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8576 ;;      Params:         0       0       0       0       0       0       0       0
  8577 ;;      Locals:         1       0       0       0       0       0       0       0
  8578 ;;      Temps:          1       0       0       0       0       0       0       0
  8579 ;;      Totals:         2       0       0       0       0       0       0       0
  8580 ;;Total ram usage:        2 bytes
  8581 ;; Hardware stack levels used:    1
  8582 ;; Hardware stack levels required when called:    4
  8583 ;; This function calls:
  8584 ;;		Nothing
  8585 ;; This function is called by:
  8586 ;;		_Sensor_Service
  8587 ;;		_Sensor_postAcquisitionProcess
  8588 ;;		_Sensor_Acq_ExecutePacket
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           
  8593                           ;psect for function _Sensor_isEnabled
  8594  167E                     _Sensor_isEnabled:	
  8595                           
  8596                           ;incstack = 0
  8597                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8598                           ;Sensor_isEnabled@sensor stored from wreg
  8599  167E  00F2               	movwf	Sensor_isEnabled@sensor
  8600                           
  8601                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 857:     if(sensor!=((void*)0))
  8602  167F  0872               	movf	Sensor_isEnabled@sensor,w
  8603  1680  1903               	btfsc	3,2
  8604  1681  2E8D               	goto	l3893
  8605                           
  8606                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 858:         return (_Bool)sensor->enabled;
  8607  1682  0872               	movf	Sensor_isEnabled@sensor,w
  8608  1683  3E08               	addlw	8
  8609  1684  0086               	movwf	6
  8610  1685  3001               	movlw	1	; select bank2/3
  8611  1686  0087               	movwf	7
  8612  1687  0C01               	rrf	1,w
  8613  1688  00F1               	movwf	??_Sensor_isEnabled
  8614  1689  0CF1               	rrf	??_Sensor_isEnabled,f
  8615  168A  0C71               	rrf	??_Sensor_isEnabled,w
  8616  168B  3901               	andlw	1
  8617  168C  0008               	return
  8618  168D                     l3893:	
  8619                           
  8620                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860:         return 0;
  8621  168D  3000               	movlw	0
  8622  168E  0008               	return
  8623  168F                     __end_of_Sensor_isEnabled:	
  8624                           
  8625                           	psect	text44
  8626  1602                     __ptext44:	
  8627 ;; *************** function _Sensor_isActive *****************
  8628 ;; Defined at:
  8629 ;;		line 882 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8630 ;; Parameters:    Size  Location     Type
  8631 ;;  sensor          1    wreg     PTR struct .
  8632 ;;		 -> NULL(0), mtouch_sensor(27), 
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;  sensor          1    1[COMMON] PTR struct .
  8635 ;;		 -> NULL(0), mtouch_sensor(27), 
  8636 ;; Return value:  Size  Location     Type
  8637 ;;                  1    wreg      _Bool 
  8638 ;; Registers used:
  8639 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8645 ;;      Params:         0       0       0       0       0       0       0       0
  8646 ;;      Locals:         1       0       0       0       0       0       0       0
  8647 ;;      Temps:          0       0       0       0       0       0       0       0
  8648 ;;      Totals:         1       0       0       0       0       0       0       0
  8649 ;;Total ram usage:        1 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    4
  8652 ;; This function calls:
  8653 ;;		Nothing
  8654 ;; This function is called by:
  8655 ;;		_Sensor_Acquisition
  8656 ;;		_Sensor_Acq_ExecutePacket
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           
  8661                           ;psect for function _Sensor_isActive
  8662  1602                     _Sensor_isActive:	
  8663                           
  8664                           ;incstack = 0
  8665                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8666                           ;Sensor_isActive@sensor stored from wreg
  8667  1602  00F1               	movwf	Sensor_isActive@sensor
  8668                           
  8669                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 882: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 883:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 884:     if(sensor == ((void*)0))
  8670  1603  0871               	movf	Sensor_isActive@sensor,w
  8671  1604  1D03               	btfss	3,2
  8672  1605  2E08               	goto	l3903
  8673                           
  8674                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885:         return 0;
  8675  1606  3000               	movlw	0
  8676  1607  0008               	return
  8677  1608                     l3903:	
  8678                           
  8679                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     return (_Bool)sensor->active;
  8680  1608  0871               	movf	Sensor_isActive@sensor,w
  8681  1609  3E08               	addlw	8
  8682  160A  0086               	movwf	6
  8683  160B  3001               	movlw	1	; select bank2/3
  8684  160C  0087               	movwf	7
  8685  160D  0C01               	rrf	1,w
  8686  160E  3901               	andlw	1
  8687  160F  0008               	return
  8688  1610                     __end_of_Sensor_isActive:	
  8689                           
  8690                           	psect	text45
  8691  0715                     __ptext45:	
  8692 ;; *************** function _Sensor_autoCalibration *****************
  8693 ;; Defined at:
  8694 ;;		line 688 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  sensor          1    wreg     PTR struct .
  8697 ;;		 -> NULL(0), mtouch_sensor(27), 
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;  sensor          1   10[COMMON] PTR struct .
  8700 ;;		 -> NULL(0), mtouch_sensor(27), 
  8701 ;;  adcIndex        1    9[COMMON] unsigned char 
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  1    wreg      void 
  8704 ;; Registers used:
  8705 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8706 ;; Tracked objects:
  8707 ;;		On entry : 0/0
  8708 ;;		On exit  : 0/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8711 ;;      Params:         0       0       0       0       0       0       0       0
  8712 ;;      Locals:         2       0       0       0       0       0       0       0
  8713 ;;      Temps:          4       0       0       0       0       0       0       0
  8714 ;;      Totals:         6       0       0       0       0       0       0       0
  8715 ;;Total ram usage:        6 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; Hardware stack levels required when called:    5
  8718 ;; This function calls:
  8719 ;;		_Sensor_getScanGroupIndex
  8720 ;;		_Sensor_isCalibratingAcqTime
  8721 ;;		_Sensor_setCalibratAcqTime
  8722 ;;		_Sensor_setCalibrated
  8723 ;;		_abs
  8724 ;; This function is called by:
  8725 ;;		_Sensor_Acq_ExecutePacket
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           
  8730                           ;psect for function _Sensor_autoCalibration
  8731  0715                     _Sensor_autoCalibration:	
  8732                           
  8733                           ;incstack = 0
  8734                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8735                           ;Sensor_autoCalibration@sensor stored from wreg
  8736  0715  00FA               	movwf	Sensor_autoCalibration@sensor
  8737                           
  8738                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 689: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 690:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  8739  0716  087A               	movf	Sensor_autoCalibration@sensor,w
  8740  0717  3189  21BD  3187   	fcall	_Sensor_getScanGroupIndex
  8741  071A  00F5               	movwf	??_Sensor_autoCalibration
  8742  071B  0875               	movf	??_Sensor_autoCalibration,w
  8743  071C  00F9               	movwf	Sensor_autoCalibration@adcIndex
  8744                           
  8745                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  8746  071D  087A               	movf	Sensor_autoCalibration@sensor,w
  8747  071E  3195  25BB  3187   	fcall	_Sensor_isCalibratingAcqTime
  8748  0721  3A00               	xorlw	0
  8749  0722  1D03               	skipz
  8750  0723  2F56               	goto	l3955
  8751                           
  8752                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 694:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  8753  0724  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  8754  0725  3E5D               	addlw	(low (_packet_sample| 0))& (0+255)
  8755  0726  0086               	movwf	6
  8756  0727  0187               	clrf	7
  8757  0728  3F40               	moviw [0]fsr1
  8758  0729  00F5               	movwf	??_Sensor_autoCalibration
  8759  072A  3F41               	moviw [1]fsr1
  8760  072B  00F6               	movwf	??_Sensor_autoCalibration+1
  8761  072C  087A               	movf	Sensor_autoCalibration@sensor,w
  8762  072D  3E04               	addlw	4
  8763  072E  0086               	movwf	6
  8764  072F  3001               	movlw	1	; select bank2/3
  8765  0730  0087               	movwf	7
  8766  0731  0801               	movf	1,w
  8767  0732  00F7               	movwf	??_Sensor_autoCalibration+2
  8768  0733  01F8               	clrf	??_Sensor_autoCalibration+3
  8769  0734  3009               	movlw	9
  8770  0735                     u2425:	
  8771  0735  35F7               	lslf	??_Sensor_autoCalibration+2,f
  8772  0736  0DF8               	rlf	??_Sensor_autoCalibration+3,f
  8773  0737  0B89               	decfsz	9,f
  8774  0738  2F35               	goto	u2425
  8775  0739  0876               	movf	??_Sensor_autoCalibration+1,w
  8776  073A  0278               	subwf	??_Sensor_autoCalibration+3,w
  8777  073B  1D03               	skipz
  8778  073C  2F3F               	goto	u2435
  8779  073D  0875               	movf	??_Sensor_autoCalibration,w
  8780  073E  0277               	subwf	??_Sensor_autoCalibration+2,w
  8781  073F                     u2435:	
  8782  073F  1803               	skipnc
  8783  0740  2F52               	goto	l3953
  8784                           
  8785                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 696:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  8786  0741  3001               	movlw	1
  8787  0742  00F5               	movwf	??_Sensor_autoCalibration
  8788  0743  087A               	movf	Sensor_autoCalibration@sensor,w
  8789  0744  3E05               	addlw	5
  8790  0745  0086               	movwf	6
  8791  0746  3001               	movlw	1	; select bank2/3
  8792  0747  0087               	movwf	7
  8793  0748  0875               	movf	??_Sensor_autoCalibration,w
  8794  0749  0781               	addwf	1,f
  8795  074A  300F               	movlw	15
  8796  074B  0201               	subwf	1,w
  8797  074C  1C03               	skipc
  8798  074D  0008               	return
  8799                           
  8800                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 697:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  8801  074E  087A               	movf	Sensor_autoCalibration@sensor,w
  8802  074F  3196  262D         	fcall	_Sensor_setCalibratAcqTime
  8803  0751  0008               	return
  8804  0752                     l3953:	
  8805                           
  8806                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 701:              Sensor_setCalibratAcqTime(sensor);
  8807  0752  087A               	movf	Sensor_autoCalibration@sensor,w
  8808  0753  3196  262D         	fcall	_Sensor_setCalibratAcqTime
  8809  0755  0008               	return
  8810  0756                     l3955:	
  8811                           
  8812                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 706:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  8813  0756  087A               	movf	Sensor_autoCalibration@sensor,w
  8814  0757  3E04               	addlw	4
  8815  0758  0086               	movwf	6
  8816  0759  3001               	movlw	1	; select bank2/3
  8817  075A  0087               	movwf	7
  8818  075B  0801               	movf	1,w
  8819  075C  00F5               	movwf	??_Sensor_autoCalibration
  8820  075D  01F6               	clrf	??_Sensor_autoCalibration+1
  8821  075E  35F5               	lslf	??_Sensor_autoCalibration,f
  8822  075F  0DF6               	rlf	??_Sensor_autoCalibration+1,f
  8823  0760  087A               	movf	Sensor_autoCalibration@sensor,w
  8824  0761  3E06               	addlw	6
  8825  0762  0086               	movwf	6
  8826  0763  3001               	movlw	1	; select bank2/3
  8827  0764  0087               	movwf	7
  8828  0765  3579               	lslf	Sensor_autoCalibration@adcIndex,w
  8829  0766  3E5D               	addlw	(low (_packet_sample| 0))& (0+255)
  8830  0767  0084               	movwf	4
  8831  0768  0185               	clrf	5
  8832  0769  3F40               	moviw [0]fsr1
  8833  076A  0200               	subwf	0,w
  8834  076B  00F1               	movwf	abs@a
  8835  076C  3101               	addfsr 0,1
  8836  076D  3F41               	moviw [1]fsr1
  8837  076E  3B00               	subwfb	0,w
  8838  076F  00F2               	movwf	abs@a+1
  8839  0770  3197  2746  3187   	fcall	_abs
  8840  0773  0876               	movf	??_Sensor_autoCalibration+1,w
  8841  0774  0272               	subwf	?_abs+1,w
  8842  0775  1D03               	skipz
  8843  0776  2F79               	goto	u2455
  8844  0777  0875               	movf	??_Sensor_autoCalibration,w
  8845  0778  0271               	subwf	?_abs,w
  8846  0779                     u2455:	
  8847  0779  1803               	skipnc
  8848  077A  2F88               	goto	l3961
  8849                           
  8850                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 707:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 708:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  8851  077B  3020               	movlw	32
  8852  077C  00F5               	movwf	??_Sensor_autoCalibration
  8853  077D  087A               	movf	Sensor_autoCalibration@sensor,w
  8854  077E  3E02               	addlw	2
  8855  077F  0086               	movwf	6
  8856  0780  3001               	movlw	1	; select bank2/3
  8857  0781  0087               	movwf	7
  8858  0782  0875               	movf	??_Sensor_autoCalibration,w
  8859  0783  0081               	movwf	1
  8860                           
  8861                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             Sensor_setCalibrated(senso
      +                          r);
  8862  0784  087A               	movf	Sensor_autoCalibration@sensor,w
  8863  0785  3195  25F4         	fcall	_Sensor_setCalibrated
  8864                           
  8865                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 710:         }
  8866  0787  0008               	return
  8867  0788                     l3961:	
  8868                           
  8869                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 712:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->acquisition_time += (uint8_t)2;
  8870  0788  3002               	movlw	2
  8871  0789  00F5               	movwf	??_Sensor_autoCalibration
  8872  078A  087A               	movf	Sensor_autoCalibration@sensor,w
  8873  078B  3E03               	addlw	3
  8874  078C  0086               	movwf	6
  8875  078D  3001               	movlw	1	; select bank2/3
  8876  078E  0087               	movwf	7
  8877  078F  0875               	movf	??_Sensor_autoCalibration,w
  8878  0790  0781               	addwf	1,f
  8879                           
  8880                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
  8881  0791  087A               	movf	Sensor_autoCalibration@sensor,w
  8882  0792  3E03               	addlw	3
  8883  0793  0086               	movwf	6
  8884  0794  3001               	movlw	1	; select bank2/3
  8885  0795  0087               	movwf	7
  8886  0796  3020               	movlw	32
  8887  0797  0201               	subwf	1,w
  8888  0798  1C03               	skipc
  8889  0799  0008               	return
  8890                           
  8891                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 719:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
  8892  079A  3020               	movlw	32
  8893  079B  00F5               	movwf	??_Sensor_autoCalibration
  8894  079C  087A               	movf	Sensor_autoCalibration@sensor,w
  8895  079D  3E02               	addlw	2
  8896  079E  0086               	movwf	6
  8897  079F  3001               	movlw	1	; select bank2/3
  8898  07A0  0087               	movwf	7
  8899  07A1  0875               	movf	??_Sensor_autoCalibration,w
  8900  07A2  0081               	movwf	1
  8901                           
  8902                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:                 Sensor_setCalibrated(s
      +                          ensor);
  8903  07A3  087A               	movf	Sensor_autoCalibration@sensor,w
  8904  07A4  3195  25F4         	fcall	_Sensor_setCalibrated
  8905  07A6  0008               	return
  8906  07A7                     __end_of_Sensor_autoCalibration:	
  8907                           
  8908                           	psect	text46
  8909  1746                     __ptext46:	
  8910 ;; *************** function _abs *****************
  8911 ;; Defined at:
  8912 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  8913 ;; Parameters:    Size  Location     Type
  8914 ;;  a               2    1[COMMON] int 
  8915 ;; Auto vars:     Size  Location     Type
  8916 ;;		None
  8917 ;; Return value:  Size  Location     Type
  8918 ;;                  2    1[COMMON] int 
  8919 ;; Registers used:
  8920 ;;		wreg, status,2, status,0
  8921 ;; Tracked objects:
  8922 ;;		On entry : 0/0
  8923 ;;		On exit  : 0/0
  8924 ;;		Unchanged: 0/0
  8925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8926 ;;      Params:         2       0       0       0       0       0       0       0
  8927 ;;      Locals:         0       0       0       0       0       0       0       0
  8928 ;;      Temps:          2       0       0       0       0       0       0       0
  8929 ;;      Totals:         4       0       0       0       0       0       0       0
  8930 ;;Total ram usage:        4 bytes
  8931 ;; Hardware stack levels used:    1
  8932 ;; Hardware stack levels required when called:    4
  8933 ;; This function calls:
  8934 ;;		Nothing
  8935 ;; This function is called by:
  8936 ;;		_Sensor_postAcquisitionProcess
  8937 ;;		_Sensor_Acq_ExecutePacket
  8938 ;;		_Sensor_autoCalibration
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           
  8943                           ;psect for function _abs
  8944  1746                     _abs:	
  8945                           
  8946                           ;incstack = 0
  8947                           ; Regs used in _abs: [wreg+status,2+status,0]
  8948  1746  0872               	movf	abs@a+1,w
  8949  1747  3A80               	xorlw	128
  8950  1748  00F3               	movwf	??_abs
  8951  1749  3080               	movlw	128
  8952  174A  0273               	subwf	??_abs,w
  8953  174B  1D03               	skipz
  8954  174C  2F4F               	goto	u2325
  8955  174D  3001               	movlw	1
  8956  174E  0271               	subwf	abs@a,w
  8957  174F                     u2325:	
  8958  174F  1803               	skipnc
  8959  1750  0008               	return
  8960  1751  0971               	comf	abs@a,w
  8961  1752  00F3               	movwf	??_abs
  8962  1753  0972               	comf	abs@a+1,w
  8963  1754  00F4               	movwf	??_abs+1
  8964  1755  0AF3               	incf	??_abs,f
  8965  1756  1903               	skipnz
  8966  1757  0AF4               	incf	??_abs+1,f
  8967  1758  0873               	movf	??_abs,w
  8968  1759  00F1               	movwf	?_abs
  8969  175A  0874               	movf	??_abs+1,w
  8970  175B  00F2               	movwf	?_abs+1
  8971  175C  0008               	return
  8972  175D                     __end_of_abs:	
  8973                           
  8974                           	psect	text47
  8975  15F4                     __ptext47:	
  8976 ;; *************** function _Sensor_setCalibrated *****************
  8977 ;; Defined at:
  8978 ;;		line 925 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;  sensor          1    wreg     PTR struct .
  8981 ;;		 -> NULL(0), mtouch_sensor(27), 
  8982 ;; Auto vars:     Size  Location     Type
  8983 ;;  sensor          1    1[COMMON] PTR struct .
  8984 ;;		 -> NULL(0), mtouch_sensor(27), 
  8985 ;; Return value:  Size  Location     Type
  8986 ;;                  1    wreg      void 
  8987 ;; Registers used:
  8988 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8989 ;; Tracked objects:
  8990 ;;		On entry : 0/0
  8991 ;;		On exit  : 0/0
  8992 ;;		Unchanged: 0/0
  8993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8994 ;;      Params:         0       0       0       0       0       0       0       0
  8995 ;;      Locals:         1       0       0       0       0       0       0       0
  8996 ;;      Temps:          0       0       0       0       0       0       0       0
  8997 ;;      Totals:         1       0       0       0       0       0       0       0
  8998 ;;Total ram usage:        1 bytes
  8999 ;; Hardware stack levels used:    1
  9000 ;; Hardware stack levels required when called:    4
  9001 ;; This function calls:
  9002 ;;		Nothing
  9003 ;; This function is called by:
  9004 ;;		_Sensor_autoCalibration
  9005 ;; This function uses a non-reentrant model
  9006 ;;
  9007                           
  9008                           
  9009                           ;psect for function _Sensor_setCalibrated
  9010  15F4                     _Sensor_setCalibrated:	
  9011                           
  9012                           ;incstack = 0
  9013                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  9014                           ;Sensor_setCalibrated@sensor stored from wreg
  9015  15F4  00F1               	movwf	Sensor_setCalibrated@sensor
  9016                           
  9017                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          926: {;mcc_generated_files/mtouch/mtouch_sensor.c: 927:     sensor->calibrated = 1;
  9018  15F5  0871               	movf	Sensor_setCalibrated@sensor,w
  9019  15F6  3E08               	addlw	8
  9020  15F7  0086               	movwf	6
  9021  15F8  3001               	movlw	1	; select bank2/3
  9022  15F9  0087               	movwf	7
  9023  15FA  1501               	bsf	1,2
  9024                           
  9025                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928:     sensor->acqTime_cal = 0;
  9026  15FB  0871               	movf	Sensor_setCalibrated@sensor,w
  9027  15FC  3E08               	addlw	8
  9028  15FD  0086               	movwf	6
  9029  15FE  3001               	movlw	1	; select bank2/3
  9030  15FF  0087               	movwf	7
  9031  1600  1201               	bcf	1,4
  9032  1601  0008               	return
  9033  1602                     __end_of_Sensor_setCalibrated:	
  9034                           
  9035                           	psect	text48
  9036  162D                     __ptext48:	
  9037 ;; *************** function _Sensor_setCalibratAcqTime *****************
  9038 ;; Defined at:
  9039 ;;		line 931 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  sensor          1    wreg     PTR struct .
  9042 ;;		 -> NULL(0), mtouch_sensor(27), 
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;  sensor          1    1[COMMON] PTR struct .
  9045 ;;		 -> NULL(0), mtouch_sensor(27), 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  1    wreg      void 
  9048 ;; Registers used:
  9049 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9055 ;;      Params:         0       0       0       0       0       0       0       0
  9056 ;;      Locals:         1       0       0       0       0       0       0       0
  9057 ;;      Temps:          0       0       0       0       0       0       0       0
  9058 ;;      Totals:         1       0       0       0       0       0       0       0
  9059 ;;Total ram usage:        1 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    4
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_Sensor_autoCalibration
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           
  9070                           ;psect for function _Sensor_setCalibratAcqTime
  9071  162D                     _Sensor_setCalibratAcqTime:	
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  9075                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
  9076  162D  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
  9077                           
  9078                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 931: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 932: {;mcc_generated_files/mtouch/mtouch_sensor.c: 933:     sensor->acqTime_cal = 1
      +                          ;
  9079  162E  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  9080  162F  3E08               	addlw	8
  9081  1630  0086               	movwf	6
  9082  1631  3001               	movlw	1	; select bank2/3
  9083  1632  0087               	movwf	7
  9084  1633  1601               	bsf	1,4
  9085                           
  9086                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 934:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
  9087  1634  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  9088  1635  3E03               	addlw	3
  9089  1636  0086               	movwf	6
  9090  1637  3001               	movlw	1	; select bank2/3
  9091  1638  0087               	movwf	7
  9092  1639  0181               	clrf	1
  9093  163A  0A81               	incf	1,f
  9094  163B  0008               	return
  9095  163C                     __end_of_Sensor_setCalibratAcqTime:	
  9096                           
  9097                           	psect	text49
  9098  15BB                     __ptext49:	
  9099 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  9100 ;; Defined at:
  9101 ;;		line 937 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9102 ;; Parameters:    Size  Location     Type
  9103 ;;  sensor          1    wreg     PTR struct .
  9104 ;;		 -> NULL(0), mtouch_sensor(27), 
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;  sensor          1    1[COMMON] PTR struct .
  9107 ;;		 -> NULL(0), mtouch_sensor(27), 
  9108 ;; Return value:  Size  Location     Type
  9109 ;;                  1    wreg      _Bool 
  9110 ;; Registers used:
  9111 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9112 ;; Tracked objects:
  9113 ;;		On entry : 0/0
  9114 ;;		On exit  : 0/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9117 ;;      Params:         0       0       0       0       0       0       0       0
  9118 ;;      Locals:         1       0       0       0       0       0       0       0
  9119 ;;      Temps:          0       0       0       0       0       0       0       0
  9120 ;;      Totals:         1       0       0       0       0       0       0       0
  9121 ;;Total ram usage:        1 bytes
  9122 ;; Hardware stack levels used:    1
  9123 ;; Hardware stack levels required when called:    4
  9124 ;; This function calls:
  9125 ;;		Nothing
  9126 ;; This function is called by:
  9127 ;;		_Sensor_loadADCSettings
  9128 ;;		_Sensor_autoCalibration
  9129 ;; This function uses a non-reentrant model
  9130 ;;
  9131                           
  9132                           
  9133                           ;psect for function _Sensor_isCalibratingAcqTime
  9134  15BB                     _Sensor_isCalibratingAcqTime:	
  9135                           
  9136                           ;incstack = 0
  9137                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  9138                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
  9139  15BB  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
  9140                           
  9141                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 938: {;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     return (_Bool)sensor
      +                          ->acqTime_cal;
  9142  15BC  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
  9143  15BD  3E08               	addlw	8
  9144  15BE  0086               	movwf	6
  9145  15BF  3001               	movlw	1	; select bank2/3
  9146  15C0  0087               	movwf	7
  9147  15C1  0E01               	swapf	1,w
  9148  15C2  3901               	andlw	1
  9149  15C3  0008               	return
  9150  15C4                     __end_of_Sensor_isCalibratingAcqTime:	
  9151                           
  9152                           	psect	text50
  9153  09BD                     __ptext50:	
  9154 ;; *************** function _Sensor_getScanGroupIndex *****************
  9155 ;; Defined at:
  9156 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  sensor          1    wreg     PTR struct .
  9159 ;;		 -> NULL(0), mtouch_sensor(27), 
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;  sensor          1    3[COMMON] PTR struct .
  9162 ;;		 -> NULL(0), mtouch_sensor(27), 
  9163 ;;  sensorGroup     1    4[COMMON] unsigned char 
  9164 ;; Return value:  Size  Location     Type
  9165 ;;                  1    wreg      unsigned char 
  9166 ;; Registers used:
  9167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  9168 ;; Tracked objects:
  9169 ;;		On entry : 0/0
  9170 ;;		On exit  : 0/0
  9171 ;;		Unchanged: 0/0
  9172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9173 ;;      Params:         0       0       0       0       0       0       0       0
  9174 ;;      Locals:         2       0       0       0       0       0       0       0
  9175 ;;      Temps:          2       0       0       0       0       0       0       0
  9176 ;;      Totals:         4       0       0       0       0       0       0       0
  9177 ;;Total ram usage:        4 bytes
  9178 ;; Hardware stack levels used:    1
  9179 ;; Hardware stack levels required when called:    4
  9180 ;; This function calls:
  9181 ;;		Nothing
  9182 ;; This function is called by:
  9183 ;;		_Sensor_postAcquisitionProcess
  9184 ;;		_Sensor_autoCalibration
  9185 ;;		_Sensor_RawSample_Update
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           
  9190                           ;psect for function _Sensor_getScanGroupIndex
  9191  09BD                     _Sensor_getScanGroupIndex:	
  9192                           
  9193                           ;incstack = 0
  9194                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
  9195                           ;Sensor_getScanGroupIndex@sensor stored from wreg
  9196  09BD  00F3               	movwf	Sensor_getScanGroupIndex@sensor
  9197                           
  9198                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 355: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 356:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 357:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
  9199  09BE  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
  9200  09BF                     l3825:	
  9201                           
  9202                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 359:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
  9203  09BF  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  9204  09C0  00F1               	movwf	??_Sensor_getScanGroupIndex
  9205  09C1  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  9206  09C2  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  9207  09C3  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  9208  09C4  3036               	movlw	low (_sensor_scan_group| (0+32768))
  9209  09C5  0771               	addwf	??_Sensor_getScanGroupIndex,w
  9210  09C6  0084               	movwf	4
  9211  09C7  3098               	movlw	high (_sensor_scan_group| (0+32768))
  9212  09C8  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  9213  09C9  0085               	movwf	5
  9214  09CA  0800               	movf	0,w	;code access
  9215  09CB  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  9216  09CC  1D03               	skipz
  9217  09CD  29D0               	goto	l3831
  9218  09CE                     l3827:	
  9219                           
  9220                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:             return 0;
  9221  09CE  3000               	movlw	0
  9222  09CF  0008               	return
  9223  09D0                     l3831:	
  9224                           
  9225                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
  9226  09D0  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  9227  09D1  00F1               	movwf	??_Sensor_getScanGroupIndex
  9228  09D2  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  9229  09D3  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  9230  09D4  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  9231  09D5  3037               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  9232  09D6  0771               	addwf	??_Sensor_getScanGroupIndex,w
  9233  09D7  0084               	movwf	4
  9234  09D8  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  9235  09D9  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  9236  09DA  0085               	movwf	5
  9237  09DB  0800               	movf	0,w	;code access
  9238  09DC  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  9239  09DD  1D03               	skipz
  9240  09DE  29E1               	goto	l3837
  9241                           
  9242                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:             return 1;
  9243  09DF  3001               	movlw	1
  9244  09E0  0008               	return
  9245  09E1                     l3837:	
  9246                           
  9247                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     }
  9248  09E1  3001               	movlw	1
  9249  09E2  00F1               	movwf	??_Sensor_getScanGroupIndex
  9250  09E3  0871               	movf	??_Sensor_getScanGroupIndex,w
  9251  09E4  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
  9252  09E5  3002               	movlw	2
  9253  09E6  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
  9254  09E7  1803               	btfsc	3,0
  9255  09E8  29CE               	goto	l3827
  9256  09E9  29BF               	goto	l3825
  9257  09EA                     __end_of_Sensor_getScanGroupIndex:	
  9258                           
  9259                           	psect	text51
  9260  164C                     __ptext51:	
  9261 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  9262 ;; Defined at:
  9263 ;;		line 239 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;		None
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;		None
  9268 ;; Return value:  Size  Location     Type
  9269 ;;                  1    wreg      void 
  9270 ;; Registers used:
  9271 ;;		wreg, status,2, status,0
  9272 ;; Tracked objects:
  9273 ;;		On entry : 0/0
  9274 ;;		On exit  : 0/0
  9275 ;;		Unchanged: 0/0
  9276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9277 ;;      Params:         0       0       0       0       0       0       0       0
  9278 ;;      Locals:         0       0       0       0       0       0       0       0
  9279 ;;      Temps:          0       0       0       0       0       0       0       0
  9280 ;;      Totals:         0       0       0       0       0       0       0       0
  9281 ;;Total ram usage:        0 bytes
  9282 ;; Hardware stack levels used:    1
  9283 ;; Hardware stack levels required when called:    4
  9284 ;; This function calls:
  9285 ;;		Nothing
  9286 ;; This function is called by:
  9287 ;;		_MTOUCH_Initialize
  9288 ;;		_Sensor_Acq_ExecutePacket
  9289 ;; This function uses a non-reentrant model
  9290 ;;
  9291                           
  9292                           
  9293                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  9294  164C                     _MTOUCH_Sensor_Scan_Initialize:	
  9295                           
  9296                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     T2CONbits.T2CKPS = 0x0;
  9297                           
  9298                           ;incstack = 0
  9299                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  9300  164C  30FC               	movlw	-4
  9301  164D  0020               	movlb	0	; select bank0
  9302  164E  059C               	andwf	28,f	;volatile
  9303                           
  9304                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     AD1CON0 = (uint8_t)0;
  9305  164F  002E               	movlb	14	; select bank14
  9306  1650  0191               	clrf	17	;volatile
  9307                           
  9308                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     AD2CON0 = (uint8_t)0;
  9309  1651  002F               	movlb	15	; select bank15
  9310  1652  0191               	clrf	17	;volatile
  9311                           
  9312                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
  9313  1653  3090               	movlw	144
  9314  1654  002E               	movlb	14	; select bank14
  9315  1655  0092               	movwf	18	;volatile
  9316                           
  9317                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 246:     AD1CON3 = (uint8_t)0b01000000;
  9318  1656  3040               	movlw	64
  9319  1657  0094               	movwf	20	;volatile
  9320                           
  9321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     AD2CON3 = (uint8_t)0b01000000;
  9322  1658  3040               	movlw	64
  9323  1659  002F               	movlb	15	; select bank15
  9324  165A  0094               	movwf	20	;volatile
  9325  165B  0008               	return
  9326  165C                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  9327                           
  9328                           	psect	text52
  9329  163C                     __ptext52:	
  9330 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  9331 ;; Defined at:
  9332 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;  button          1   59[BANK0 ] enum E3069
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  1    wreg      void 
  9339 ;; Registers used:
  9340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9346 ;;      Params:         0       0       0       0       0       0       0       0
  9347 ;;      Locals:         0       1       0       0       0       0       0       0
  9348 ;;      Temps:          0       1       0       0       0       0       0       0
  9349 ;;      Totals:         0       2       0       0       0       0       0       0
  9350 ;;Total ram usage:        2 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:   17
  9353 ;; This function calls:
  9354 ;;		_Button_Service
  9355 ;; This function is called by:
  9356 ;;		_MTOUCH_Service_Mainloop
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           
  9361                           ;psect for function _MTOUCH_Button_ServiceAll
  9362  163C                     _MTOUCH_Button_ServiceAll:	
  9363                           
  9364                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 194:     for (button = 0; button < 3u; button
      +                          ++)
  9365                           
  9366                           ;incstack = 0
  9367 ;; hardware stack exceeded
  9368                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9369  163C  0020               	movlb	0	; select bank0
  9370  163D  01DB               	clrf	MTOUCH_Button_ServiceAll@button
  9371  163E                     l6205:	
  9372                           
  9373                           ;mcc_generated_files/mtouch/mtouch_button.c: 195:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 196:         Button_Service(button);
  9374  163E  085B               	movf	MTOUCH_Button_ServiceAll@button,w
  9375  163F  3187  27A7  3196   	fcall	_Button_Service
  9376                           
  9377                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     }
  9378  1642  3001               	movlw	1
  9379  1643  0020               	movlb	0	; select bank0
  9380  1644  00DA               	movwf	??_MTOUCH_Button_ServiceAll
  9381  1645  085A               	movf	??_MTOUCH_Button_ServiceAll,w
  9382  1646  07DB               	addwf	MTOUCH_Button_ServiceAll@button,f
  9383  1647  3003               	movlw	3
  9384  1648  025B               	subwf	MTOUCH_Button_ServiceAll@button,w
  9385  1649  1803               	btfsc	3,0
  9386  164A  0008               	return
  9387  164B  2E3E               	goto	l6205
  9388  164C                     __end_of_MTOUCH_Button_ServiceAll:	
  9389                           
  9390                           	psect	text53
  9391  07A7                     __ptext53:	
  9392 ;; *************** function _Button_Service *****************
  9393 ;; Defined at:
  9394 ;;		line 200 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9395 ;; Parameters:    Size  Location     Type
  9396 ;;  name            1    wreg     enum E3069
  9397 ;; Auto vars:     Size  Location     Type
  9398 ;;  name            1   56[BANK0 ] enum E3069
  9399 ;;  button          1   57[BANK0 ] PTR struct .
  9400 ;;		 -> mtouch_button(48), 
  9401 ;; Return value:  Size  Location     Type
  9402 ;;                  1    wreg      void 
  9403 ;; Registers used:
  9404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9405 ;; Tracked objects:
  9406 ;;		On entry : 0/0
  9407 ;;		On exit  : 0/0
  9408 ;;		Unchanged: 0/0
  9409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9410 ;;      Params:         0       0       0       0       0       0       0       0
  9411 ;;      Locals:         0       2       0       0       0       0       0       0
  9412 ;;      Temps:          0       2       0       0       0       0       0       0
  9413 ;;      Totals:         0       4       0       0       0       0       0       0
  9414 ;;Total ram usage:        4 bytes
  9415 ;; Hardware stack levels used:    1
  9416 ;; Hardware stack levels required when called:   16
  9417 ;; This function calls:
  9418 ;;		_Button_Deviation_Update
  9419 ;;		_Button_Reading_Update
  9420 ;;		_Button_State_Initializing
  9421 ;;		_Button_State_NotPressed
  9422 ;;		_Button_State_Pressed
  9423 ;;		_MTOUCH_Button_Initialize
  9424 ;;		_MTOUCH_Sensor_isCalibrated
  9425 ;;		_MTOUCH_Sensor_wasSampled
  9426 ;; This function is called by:
  9427 ;;		_MTOUCH_Button_ServiceAll
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431                           
  9432                           ;psect for function _Button_Service
  9433  07A7                     _Button_Service:	
  9434                           
  9435                           ;incstack = 0
  9436 ;; hardware stack exceeded
  9437                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9438                           ;Button_Service@name stored from wreg
  9439  07A7  0020               	movlb	0	; select bank0
  9440  07A8  00D8               	movwf	Button_Service@name
  9441                           
  9442                           ;mcc_generated_files/mtouch/mtouch_button.c: 200: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 201: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 202:     mtouch_button_t* button = &mtouch_button[name];
  9443  07A9  0858               	movf	Button_Service@name,w
  9444  07AA  00D6               	movwf	??_Button_Service
  9445  07AB  3003               	movlw	3
  9446  07AC                     u5125:	
  9447  07AC  35D6               	lslf	??_Button_Service,f
  9448  07AD  3EFF               	addlw	-1
  9449  07AE  1D03               	skipz
  9450  07AF  2FAC               	goto	u5125
  9451  07B0  3556               	lslf	??_Button_Service,w
  9452  07B1  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  9453  07B2  00D7               	movwf	??_Button_Service+1
  9454  07B3  0857               	movf	??_Button_Service+1,w
  9455  07B4  00D9               	movwf	Button_Service@button
  9456                           
  9457                           ;mcc_generated_files/mtouch/mtouch_button.c: 204:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  9458  07B5  0A59               	incf	Button_Service@button,w
  9459  07B6  0086               	movwf	6
  9460  07B7  3001               	movlw	1	; select bank2/3
  9461  07B8  0087               	movwf	7
  9462  07B9  0801               	movf	1,w
  9463  07BA  3196  261E  3187   	fcall	_MTOUCH_Sensor_wasSampled
  9464  07BD  3A00               	xorlw	0
  9465  07BE  1903               	skipnz
  9466  07BF  0008               	return
  9467  07C0  0020               	movlb	0	; select bank0
  9468  07C1  0A59               	incf	Button_Service@button,w
  9469  07C2  0086               	movwf	6
  9470  07C3  3001               	movlw	1	; select bank2/3
  9471  07C4  0087               	movwf	7
  9472  07C5  0801               	movf	1,w
  9473  07C6  3196  26ED  3187   	fcall	_MTOUCH_Sensor_isCalibrated
  9474  07C9  3A00               	xorlw	0
  9475  07CA  1903               	skipnz
  9476  07CB  0008               	return
  9477                           
  9478                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Reading_Update(button);
  9479  07CC  0020               	movlb	0	; select bank0
  9480  07CD  0859               	movf	Button_Service@button,w
  9481  07CE  3195  25E6  3187   	fcall	_Button_Reading_Update
  9482                           
  9483                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:         Button_Deviation_Update(button
      +                          );
  9484  07D1  0020               	movlb	0	; select bank0
  9485  07D2  0859               	movf	Button_Service@button,w
  9486  07D3  318E  26EA  3187   	fcall	_Button_Deviation_Update
  9487                           
  9488                           ;mcc_generated_files/mtouch/mtouch_button.c: 209:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  9489  07D6  0020               	movlb	0	; select bank0
  9490  07D7  0859               	movf	Button_Service@button,w
  9491  07D8  3E02               	addlw	2
  9492  07D9  0086               	movwf	6
  9493  07DA  3001               	movlw	1	; select bank2/3
  9494  07DB  0087               	movwf	7
  9495  07DC  3003               	movlw	3
  9496  07DD  0201               	subwf	1,w
  9497  07DE  1C03               	skipc
  9498  07DF  2FE8               	goto	l6169
  9499                           
  9500                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 211:             MTOUCH_Button_Initialize(button->name);
  9501  07E0  0859               	movf	Button_Service@button,w
  9502  07E1  0086               	movwf	6
  9503  07E2  3001               	movlw	1	; select bank2/3
  9504  07E3  0087               	movwf	7
  9505  07E4  0801               	movf	1,w
  9506  07E5  318A  22DE  3187   	fcall	_MTOUCH_Button_Initialize
  9507  07E8                     l6169:	
  9508                           
  9509                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
  9510  07E8  0020               	movlb	0	; select bank0
  9511  07E9  0859               	movf	Button_Service@button,w
  9512  07EA  00D6               	movwf	??_Button_Service
  9513  07EB  0856               	movf	??_Button_Service,w
  9514  07EC  00D1               	movwf	Button_State_Pressed@button
  9515  07ED  0859               	movf	Button_Service@button,w
  9516  07EE  3E02               	addlw	2
  9517  07EF  0086               	movwf	6
  9518  07F0  3001               	movlw	1	; select bank2/3
  9519  07F1  0087               	movwf	7
  9520  07F2  3501               	lslf	1,w
  9521  07F3  3EC9               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  9522  07F4  0086               	movwf	6
  9523  07F5  0187               	clrf	7
  9524  07F6  3F41               	moviw [1]fsr1
  9525  07F7  008A               	movwf	10
  9526  07F8  3F40               	moviw [0]fsr1
  9527  07F9  000A               	callw
  9528  07FA  3187               	pagesel	$
  9529  07FB  0008               	return
  9530  07FC                     __end_of_Button_Service:	
  9531                           
  9532                           	psect	text54
  9533  161E                     __ptext54:	
  9534 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  9535 ;; Defined at:
  9536 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;  sensor          1    wreg     enum E2854
  9539 ;; Auto vars:     Size  Location     Type
  9540 ;;  sensor          1    6[COMMON] enum E2854
  9541 ;; Return value:  Size  Location     Type
  9542 ;;                  1    wreg      _Bool 
  9543 ;; Registers used:
  9544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9545 ;; Tracked objects:
  9546 ;;		On entry : 0/0
  9547 ;;		On exit  : 0/0
  9548 ;;		Unchanged: 0/0
  9549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9550 ;;      Params:         0       0       0       0       0       0       0       0
  9551 ;;      Locals:         1       0       0       0       0       0       0       0
  9552 ;;      Temps:          1       0       0       0       0       0       0       0
  9553 ;;      Totals:         2       0       0       0       0       0       0       0
  9554 ;;Total ram usage:        2 bytes
  9555 ;; Hardware stack levels used:    1
  9556 ;; Hardware stack levels required when called:    5
  9557 ;; This function calls:
  9558 ;;		___bmul
  9559 ;; This function is called by:
  9560 ;;		_Button_Service
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           
  9565                           ;psect for function _MTOUCH_Sensor_wasSampled
  9566  161E                     _MTOUCH_Sensor_wasSampled:	
  9567                           
  9568                           ;incstack = 0
  9569                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9570                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  9571  161E  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
  9572                           
  9573                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 959: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 960: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 961:     return (_Bool)mtouch_sensor[sensor].sampled;
  9574  161F  3009               	movlw	9
  9575  1620  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
  9576  1621  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
  9577  1622  00F1               	movwf	___bmul@multiplicand
  9578  1623  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  9579  1624  3196  266D         	fcall	___bmul
  9580  1626  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  9581  1627  0086               	movwf	6
  9582  1628  3001               	movlw	1	; select bank2/3
  9583  1629  0087               	movwf	7
  9584  162A  0801               	movf	1,w
  9585  162B  3901               	andlw	1
  9586  162C  0008               	return
  9587  162D                     __end_of_MTOUCH_Sensor_wasSampled:	
  9588                           
  9589                           	psect	text55
  9590  16ED                     __ptext55:	
  9591 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  9592 ;; Defined at:
  9593 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9594 ;; Parameters:    Size  Location     Type
  9595 ;;  sensor          1    wreg     enum E2854
  9596 ;; Auto vars:     Size  Location     Type
  9597 ;;  sensor          1    6[COMMON] enum E2854
  9598 ;; Return value:  Size  Location     Type
  9599 ;;                  1    wreg      _Bool 
  9600 ;; Registers used:
  9601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9602 ;; Tracked objects:
  9603 ;;		On entry : 0/0
  9604 ;;		On exit  : 0/0
  9605 ;;		Unchanged: 0/0
  9606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9607 ;;      Params:         0       0       0       0       0       0       0       0
  9608 ;;      Locals:         1       0       0       0       0       0       0       0
  9609 ;;      Temps:          1       0       0       0       0       0       0       0
  9610 ;;      Totals:         2       0       0       0       0       0       0       0
  9611 ;;Total ram usage:        2 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; Hardware stack levels required when called:    5
  9614 ;; This function calls:
  9615 ;;		___bmul
  9616 ;; This function is called by:
  9617 ;;		_Button_Service
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           
  9622                           ;psect for function _MTOUCH_Sensor_isCalibrated
  9623  16ED                     _MTOUCH_Sensor_isCalibrated:	
  9624                           
  9625                           ;incstack = 0
  9626                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9627                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  9628  16ED  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
  9629                           
  9630                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 914:     if(sensor < 3u)
  9631  16EE  3003               	movlw	3
  9632  16EF  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
  9633  16F0  1803               	skipnc
  9634  16F1  2F01               	goto	l6017
  9635                           
  9636                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
  9637  16F2  3009               	movlw	9
  9638  16F3  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
  9639  16F4  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
  9640  16F5  00F1               	movwf	___bmul@multiplicand
  9641  16F6  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  9642  16F7  3196  266D         	fcall	___bmul
  9643  16F9  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  9644  16FA  0086               	movwf	6
  9645  16FB  3001               	movlw	1	; select bank2/3
  9646  16FC  0087               	movwf	7
  9647  16FD  0C01               	rrf	1,w
  9648  16FE  0C89               	rrf	9,f
  9649  16FF  3901               	andlw	1
  9650  1700  0008               	return
  9651  1701                     l6017:	
  9652                           
  9653                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:         return 0;
  9654  1701  3000               	movlw	0
  9655  1702  0008               	return
  9656  1703                     __end_of_MTOUCH_Sensor_isCalibrated:	
  9657                           
  9658                           	psect	text56
  9659  0540                     __ptext56:	
  9660 ;; *************** function _Button_State_NotPressed *****************
  9661 ;; Defined at:
  9662 ;;		line 237 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9663 ;; Parameters:    Size  Location     Type
  9664 ;;  button          1   49[BANK0 ] PTR struct .
  9665 ;;		 -> mtouch_button(48), 
  9666 ;; Auto vars:     Size  Location     Type
  9667 ;;		None
  9668 ;; Return value:  Size  Location     Type
  9669 ;;                  1    wreg      void 
  9670 ;; Registers used:
  9671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9672 ;; Tracked objects:
  9673 ;;		On entry : 0/0
  9674 ;;		On exit  : 0/0
  9675 ;;		Unchanged: 0/0
  9676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9677 ;;      Params:         0       1       0       0       0       0       0       0
  9678 ;;      Locals:         0       0       0       0       0       0       0       0
  9679 ;;      Temps:          0       2       0       0       0       0       0       0
  9680 ;;      Totals:         0       3       0       0       0       0       0       0
  9681 ;;Total ram usage:        3 bytes
  9682 ;; Hardware stack levels used:    1
  9683 ;; Hardware stack levels required when called:    7
  9684 ;; This function calls:
  9685 ;;		_Button_Baseline_Update
  9686 ;;		_Button_DefaultCallback
  9687 ;;		_MTOUCH_Button_Initialize
  9688 ;;		_myButtonPressedCallback
  9689 ;; This function is called by:
  9690 ;;		_Button_Service
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           
  9695                           ;psect for function _Button_State_NotPressed
  9696  0540                     _Button_State_NotPressed:	
  9697                           
  9698                           ;mcc_generated_files/mtouch/mtouch_button.c: 237: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 238: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 240:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
  9699                           
  9700                           ;incstack = 0
  9701                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9702  0540  0020               	movlb	0	; select bank0
  9703  0541  0851               	movf	Button_State_NotPressed@button,w
  9704  0542  3E09               	addlw	9
  9705  0543  0086               	movwf	6
  9706  0544  3001               	movlw	1	; select bank2/3
  9707  0545  0087               	movwf	7
  9708  0546  0801               	movf	1,w
  9709  0547  3A80               	xorlw	128
  9710  0548  00D2               	movwf	??_Button_State_NotPressed
  9711  0549  0851               	movf	Button_State_NotPressed@button,w
  9712  054A  3E0E               	addlw	14
  9713  054B  0086               	movwf	6
  9714  054C  3001               	movlw	1	; select bank2/3
  9715  054D  0087               	movwf	7
  9716  054E  0301               	decf	1,w
  9717  054F  3AFF               	xorlw	255
  9718  0550  3A80               	xorlw	128
  9719  0551  02D2               	subwf	??_Button_State_NotPressed,f
  9720  0552  1803               	skipnc
  9721  0553  2D7F               	goto	l6067
  9722                           
  9723                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 242:         (button->counter)++;
  9724  0554  0851               	movf	Button_State_NotPressed@button,w
  9725  0555  3E0A               	addlw	10
  9726  0556  0086               	movwf	6
  9727  0557  3001               	movlw	1	; select bank2/3
  9728  0558  0087               	movwf	7
  9729  0559  3001               	movlw	1
  9730  055A  0781               	addwf	1,f
  9731  055B  3141               	addfsr 1,1
  9732  055C  1803               	skipnc
  9733  055D  0A81               	incf	1,f
  9734                           
  9735                           ;mcc_generated_files/mtouch/mtouch_button.c: 243:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
  9736  055E  0851               	movf	Button_State_NotPressed@button,w
  9737  055F  3E0A               	addlw	10
  9738  0560  0086               	movwf	6
  9739  0561  3001               	movlw	1	; select bank2/3
  9740  0562  0087               	movwf	7
  9741  0563  3F40               	moviw [0]fsr1
  9742  0564  00D2               	movwf	??_Button_State_NotPressed
  9743  0565  3F41               	moviw [1]fsr1
  9744  0566  00D3               	movwf	??_Button_State_NotPressed+1
  9745  0567  3000               	movlw	0
  9746  0568  0253               	subwf	??_Button_State_NotPressed+1,w
  9747  0569  3041               	movlw	65
  9748  056A  1903               	skipnz
  9749  056B  0252               	subwf	??_Button_State_NotPressed,w
  9750  056C  1C03               	skipc
  9751  056D  2DC1               	goto	l522
  9752                           
  9753                           ;mcc_generated_files/mtouch/mtouch_button.c: 244:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 245:             button->counter = (mtouch_button_statecounter_t)0;
  9754  056E  0851               	movf	Button_State_NotPressed@button,w
  9755  056F  3E0A               	addlw	10
  9756  0570  0086               	movwf	6
  9757  0571  3001               	movlw	1	; select bank2/3
  9758  0572  0087               	movwf	7
  9759  0573  3000               	movlw	0
  9760  0574  3FC0               	movwi [0]fsr1
  9761  0575  3FC1               	movwi [1]fsr1
  9762                           
  9763                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:             MTOUCH_Button_Initialize(b
      +                          utton->name);
  9764  0576  0851               	movf	Button_State_NotPressed@button,w
  9765  0577  0086               	movwf	6
  9766  0578  3001               	movlw	1	; select bank2/3
  9767  0579  0087               	movwf	7
  9768  057A  0801               	movf	1,w
  9769  057B  318A  22DE  3185   	fcall	_MTOUCH_Button_Initialize
  9770  057E  2DC1               	goto	l522
  9771  057F                     l6067:	
  9772  057F  0851               	movf	Button_State_NotPressed@button,w
  9773  0580  3E09               	addlw	9
  9774  0581  0086               	movwf	6
  9775  0582  3001               	movlw	1	; select bank2/3
  9776  0583  0087               	movwf	7
  9777  0584  0801               	movf	1,w
  9778  0585  00D2               	movwf	??_Button_State_NotPressed
  9779  0586  01D3               	clrf	??_Button_State_NotPressed+1
  9780  0587  1BD2               	btfsc	??_Button_State_NotPressed,7
  9781  0588  03D3               	decf	??_Button_State_NotPressed+1,f
  9782  0589  0851               	movf	Button_State_NotPressed@button,w
  9783  058A  3E0E               	addlw	14
  9784  058B  0086               	movwf	6
  9785  058C  3001               	movlw	1	; select bank2/3
  9786  058D  0087               	movwf	7
  9787  058E  0853               	movf	??_Button_State_NotPressed+1,w
  9788  058F  3A80               	xorlw	128
  9789  0590  3C80               	sublw	128
  9790  0591  1D03               	skipz
  9791  0592  2D95               	goto	u5025
  9792  0593  0852               	movf	??_Button_State_NotPressed,w
  9793  0594  0201               	subwf	1,w
  9794  0595                     u5025:	
  9795  0595  1803               	skipnc
  9796  0596  2DB8               	goto	l6073
  9797                           
  9798                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 253:         button->state = MTOUCH_BUTTON_STATE_pressed;
  9799  0597  3002               	movlw	2
  9800  0598  0020               	movlb	0	; select bank0
  9801  0599  00D2               	movwf	??_Button_State_NotPressed
  9802  059A  0851               	movf	Button_State_NotPressed@button,w
  9803  059B  3E02               	addlw	2
  9804  059C  0086               	movwf	6
  9805  059D  3001               	movlw	1	; select bank2/3
  9806  059E  0087               	movwf	7
  9807  059F  0852               	movf	??_Button_State_NotPressed,w
  9808  05A0  0081               	movwf	1
  9809                           
  9810                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9811  05A1  0851               	movf	Button_State_NotPressed@button,w
  9812  05A2  3E0A               	addlw	10
  9813  05A3  0086               	movwf	6
  9814  05A4  3001               	movlw	1	; select bank2/3
  9815  05A5  0087               	movwf	7
  9816  05A6  3000               	movlw	0
  9817  05A7  3FC0               	movwi [0]fsr1
  9818  05A8  3FC1               	movwi [1]fsr1
  9819                           
  9820                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:         callback_pressed(button->name)
      +                          ;
  9821  05A9  0851               	movf	Button_State_NotPressed@button,w
  9822  05AA  0086               	movwf	6
  9823  05AB  3001               	movlw	1	; select bank2/3
  9824  05AC  0087               	movwf	7
  9825  05AD  0801               	movf	1,w
  9826  05AE  00D2               	movwf	??_Button_State_NotPressed
  9827  05AF  0852               	movf	??_Button_State_NotPressed,w
  9828  05B0  00D0               	movwf	myButtonPressedCallback@button
  9829  05B1  0021               	movlb	1	; select bank1
  9830  05B2  0852               	movf	(_callback_pressed+1)^(0+128),w
  9831  05B3  008A               	movwf	10
  9832  05B4  0851               	movf	_callback_pressed^(0+128),w
  9833  05B5  000A               	callw
  9834  05B6  3185               	pagesel	$
  9835                           
  9836                           ;mcc_generated_files/mtouch/mtouch_button.c: 256:     }
  9837  05B7  2DC1               	goto	l522
  9838  05B8                     l6073:	
  9839                           
  9840                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 260:         button->counter = (mtouch_button_statecounter_t)0;
  9841  05B8  0020               	movlb	0	; select bank0
  9842  05B9  0851               	movf	Button_State_NotPressed@button,w
  9843  05BA  3E0A               	addlw	10
  9844  05BB  0086               	movwf	6
  9845  05BC  3001               	movlw	1	; select bank2/3
  9846  05BD  0087               	movwf	7
  9847  05BE  3000               	movlw	0
  9848  05BF  3FC0               	movwi [0]fsr1
  9849  05C0  3FC1               	movwi [1]fsr1
  9850  05C1                     l522:	
  9851                           
  9852                           ;mcc_generated_files/mtouch/mtouch_button.c: 265:     (button->baseline_count)++;
  9853  05C1  0020               	movlb	0	; select bank0
  9854  05C2  0851               	movf	Button_State_NotPressed@button,w
  9855  05C3  3E0C               	addlw	12
  9856  05C4  0086               	movwf	6
  9857  05C5  3001               	movlw	1	; select bank2/3
  9858  05C6  0087               	movwf	7
  9859  05C7  3001               	movlw	1
  9860  05C8  0781               	addwf	1,f
  9861  05C9  3141               	addfsr 1,1
  9862  05CA  1803               	skipnc
  9863  05CB  0A81               	incf	1,f
  9864                           
  9865                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
  9866  05CC  0851               	movf	Button_State_NotPressed@button,w
  9867  05CD  3E0C               	addlw	12
  9868  05CE  0086               	movwf	6
  9869  05CF  3001               	movlw	1	; select bank2/3
  9870  05D0  0087               	movwf	7
  9871  05D1  0016               	moviw fsr1++
  9872  05D2  3A40               	xorlw	64
  9873  05D3  00D2               	movwf	??_Button_State_NotPressed
  9874  05D4  0016               	moviw fsr1++
  9875  05D5  04D2               	iorwf	??_Button_State_NotPressed,f
  9876  05D6  1D03               	btfss	3,2
  9877  05D7  0008               	return
  9878                           
  9879                           ;mcc_generated_files/mtouch/mtouch_button.c: 267:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
  9880  05D8  0851               	movf	Button_State_NotPressed@button,w
  9881  05D9  3E0C               	addlw	12
  9882  05DA  0086               	movwf	6
  9883  05DB  3001               	movlw	1	; select bank2/3
  9884  05DC  0087               	movwf	7
  9885  05DD  3000               	movlw	0
  9886  05DE  3FC0               	movwi [0]fsr1
  9887  05DF  3FC1               	movwi [1]fsr1
  9888                           
  9889                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         Button_Baseline_Update(button)
      +                          ;
  9890  05E0  0851               	movf	Button_State_NotPressed@button,w
  9891  05E1  318F  2771         	fcall	_Button_Baseline_Update
  9892  05E3  0008               	return
  9893  05E4                     __end_of_Button_State_NotPressed:	
  9894                           
  9895                           	psect	text57
  9896  0D2E                     __ptext57:	
  9897 ;; *************** function _Button_State_Initializing *****************
  9898 ;; Defined at:
  9899 ;;		line 217 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9900 ;; Parameters:    Size  Location     Type
  9901 ;;  button          1   49[BANK0 ] PTR struct .
  9902 ;;		 -> mtouch_button(48), 
  9903 ;; Auto vars:     Size  Location     Type
  9904 ;;		None
  9905 ;; Return value:  Size  Location     Type
  9906 ;;                  1    wreg      void 
  9907 ;; Registers used:
  9908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9909 ;; Tracked objects:
  9910 ;;		On entry : 0/0
  9911 ;;		On exit  : 0/0
  9912 ;;		Unchanged: 0/0
  9913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9914 ;;      Params:         0       1       0       0       0       0       0       0
  9915 ;;      Locals:         0       0       0       0       0       0       0       0
  9916 ;;      Temps:          0       4       0       0       0       0       0       0
  9917 ;;      Totals:         0       5       0       0       0       0       0       0
  9918 ;;Total ram usage:        5 bytes
  9919 ;; Hardware stack levels used:    1
  9920 ;; Hardware stack levels required when called:    7
  9921 ;; This function calls:
  9922 ;;		_Button_Baseline_Initialize
  9923 ;;		_Button_Baseline_Update
  9924 ;; This function is called by:
  9925 ;;		_Button_Service
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function _Button_State_Initializing
  9931  0D2E                     _Button_State_Initializing:	
  9932                           
  9933                           ;mcc_generated_files/mtouch/mtouch_button.c: 217: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 218: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 220:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
  9934                           
  9935                           ;incstack = 0
  9936                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9937  0D2E  0020               	movlb	0	; select bank0
  9938  0D2F  0851               	movf	Button_State_Initializing@button,w
  9939  0D30  3E0A               	addlw	10
  9940  0D31  0086               	movwf	6
  9941  0D32  3001               	movlw	1	; select bank2/3
  9942  0D33  0087               	movwf	7
  9943  0D34  3F40               	moviw [0]fsr1
  9944  0D35  00D2               	movwf	??_Button_State_Initializing
  9945  0D36  3F41               	moviw [1]fsr1
  9946  0D37  00D3               	movwf	??_Button_State_Initializing+1
  9947  0D38  3000               	movlw	0
  9948  0D39  0253               	subwf	??_Button_State_Initializing+1,w
  9949  0D3A  3009               	movlw	9
  9950  0D3B  1903               	skipnz
  9951  0D3C  0252               	subwf	??_Button_State_Initializing,w
  9952  0D3D  1803               	skipnc
  9953  0D3E  2D44               	goto	l6051
  9954                           
  9955                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 222:         Button_Baseline_Initialize(button);
  9956  0D3F  0851               	movf	Button_State_Initializing@button,w
  9957  0D40  3189  21EA  318D   	fcall	_Button_Baseline_Initialize
  9958                           
  9959                           ;mcc_generated_files/mtouch/mtouch_button.c: 223:     } else {
  9960  0D43  2D48               	goto	l6053
  9961  0D44                     l6051:	
  9962                           
  9963                           ;mcc_generated_files/mtouch/mtouch_button.c: 224:         Button_Baseline_Update(button)
      +                          ;
  9964  0D44  0851               	movf	Button_State_Initializing@button,w
  9965  0D45  318F  2771  318D   	fcall	_Button_Baseline_Update
  9966  0D48                     l6053:	
  9967                           
  9968                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:     (button->counter)++;
  9969  0D48  0020               	movlb	0	; select bank0
  9970  0D49  0851               	movf	Button_State_Initializing@button,w
  9971  0D4A  3E0A               	addlw	10
  9972  0D4B  0086               	movwf	6
  9973  0D4C  3001               	movlw	1	; select bank2/3
  9974  0D4D  0087               	movwf	7
  9975  0D4E  3001               	movlw	1
  9976  0D4F  0781               	addwf	1,f
  9977  0D50  3141               	addfsr 1,1
  9978  0D51  1803               	skipnc
  9979  0D52  0A81               	incf	1,f
  9980                           
  9981                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
  9982  0D53  0851               	movf	Button_State_Initializing@button,w
  9983  0D54  3E0A               	addlw	10
  9984  0D55  0086               	movwf	6
  9985  0D56  3001               	movlw	1	; select bank2/3
  9986  0D57  0087               	movwf	7
  9987  0D58  3F40               	moviw [0]fsr1
  9988  0D59  00D2               	movwf	??_Button_State_Initializing
  9989  0D5A  3F41               	moviw [1]fsr1
  9990  0D5B  00D3               	movwf	??_Button_State_Initializing+1
  9991  0D5C  3000               	movlw	0
  9992  0D5D  0253               	subwf	??_Button_State_Initializing+1,w
  9993  0D5E  3010               	movlw	16
  9994  0D5F  1903               	skipnz
  9995  0D60  0252               	subwf	??_Button_State_Initializing,w
  9996  0D61  1C03               	skipc
  9997  0D62  0008               	return
  9998                           
  9999                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 10000  0D63  0851               	movf	Button_State_Initializing@button,w
 10001  0D64  3E05               	addlw	5
 10002  0D65  0086               	movwf	6
 10003  0D66  3001               	movlw	1	; select bank2/3
 10004  0D67  0087               	movwf	7
 10005  0D68  3F40               	moviw [0]fsr1
 10006  0D69  00D2               	movwf	??_Button_State_Initializing
 10007  0D6A  3F41               	moviw [1]fsr1
 10008  0D6B  00D3               	movwf	??_Button_State_Initializing+1
 10009  0D6C  3F42               	moviw [2]fsr1
 10010  0D6D  00D4               	movwf	??_Button_State_Initializing+2
 10011  0D6E  3F43               	moviw [3]fsr1
 10012  0D6F  00D5               	movwf	??_Button_State_Initializing+3
 10013  0D70  3004               	movlw	4
 10014  0D71                     u4995:	
 10015  0D71  36D5               	lsrf	??_Button_State_Initializing+3,f
 10016  0D72  0CD4               	rrf	??_Button_State_Initializing+2,f
 10017  0D73  0CD3               	rrf	??_Button_State_Initializing+1,f
 10018  0D74  0CD2               	rrf	??_Button_State_Initializing,f
 10019  0D75  0B89               	decfsz	9,f
 10020  0D76  2D71               	goto	u4995
 10021  0D77  0851               	movf	Button_State_Initializing@button,w
 10022  0D78  3E03               	addlw	3
 10023  0D79  0086               	movwf	6
 10024  0D7A  3001               	movlw	1	; select bank2/3
 10025  0D7B  0087               	movwf	7
 10026  0D7C  0852               	movf	??_Button_State_Initializing,w
 10027  0D7D  3FC0               	movwi [0]fsr1
 10028  0D7E  0853               	movf	??_Button_State_Initializing+1,w
 10029  0D7F  3FC1               	movwi [1]fsr1
 10030                           
 10031                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 10032  0D80  0851               	movf	Button_State_Initializing@button,w
 10033  0D81  3E02               	addlw	2
 10034  0D82  0086               	movwf	6
 10035  0D83  3001               	movlw	1	; select bank2/3
 10036  0D84  0087               	movwf	7
 10037  0D85  0181               	clrf	1
 10038  0D86  0A81               	incf	1,f
 10039                           
 10040                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10041  0D87  0851               	movf	Button_State_Initializing@button,w
 10042  0D88  3E0A               	addlw	10
 10043  0D89  0086               	movwf	6
 10044  0D8A  3001               	movlw	1	; select bank2/3
 10045  0D8B  0087               	movwf	7
 10046  0D8C  3000               	movlw	0
 10047  0D8D  3FC0               	movwi [0]fsr1
 10048  0D8E  3FC1               	movwi [1]fsr1
 10049  0D8F  0008               	return
 10050  0D90                     __end_of_Button_State_Initializing:	
 10051                           
 10052                           	psect	text58
 10053  0D90                     __ptext58:	
 10054 ;; *************** function _Button_State_Pressed *****************
 10055 ;; Defined at:
 10056 ;;		line 273 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10057 ;; Parameters:    Size  Location     Type
 10058 ;;  button          1   49[BANK0 ] PTR struct .
 10059 ;;		 -> mtouch_button(48), 
 10060 ;; Auto vars:     Size  Location     Type
 10061 ;;		None
 10062 ;; Return value:  Size  Location     Type
 10063 ;;                  1    wreg      void 
 10064 ;; Registers used:
 10065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10066 ;; Tracked objects:
 10067 ;;		On entry : 0/0
 10068 ;;		On exit  : 0/0
 10069 ;;		Unchanged: 0/0
 10070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10071 ;;      Params:         0       1       0       0       0       0       0       0
 10072 ;;      Locals:         0       0       0       0       0       0       0       0
 10073 ;;      Temps:          0       2       0       0       0       0       0       0
 10074 ;;      Totals:         0       3       0       0       0       0       0       0
 10075 ;;Total ram usage:        3 bytes
 10076 ;; Hardware stack levels used:    1
 10077 ;; Hardware stack levels required when called:   15
 10078 ;; This function calls:
 10079 ;;		_Button_DefaultCallback
 10080 ;;		_MTOUCH_Button_Initialize
 10081 ;;		_myButtonReleasedCallback
 10082 ;; This function is called by:
 10083 ;;		_Button_Service
 10084 ;; This function uses a non-reentrant model
 10085 ;;
 10086                           
 10087                           
 10088                           ;psect for function _Button_State_Pressed
 10089  0D90                     _Button_State_Pressed:	
 10090                           
 10091                           ;mcc_generated_files/mtouch/mtouch_button.c: 273: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 274: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 276:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 10092                           
 10093                           ;incstack = 0
 10094 ;; hardware stack exceeded
 10095                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10096  0D90  0020               	movlb	0	; select bank0
 10097  0D91  0851               	movf	Button_State_Pressed@button,w
 10098  0D92  3E0A               	addlw	10
 10099  0D93  0086               	movwf	6
 10100  0D94  3001               	movlw	1	; select bank2/3
 10101  0D95  0087               	movwf	7
 10102  0D96  3F40               	moviw [0]fsr1
 10103  0D97  00D2               	movwf	??_Button_State_Pressed
 10104  0D98  3F41               	moviw [1]fsr1
 10105  0D99  00D3               	movwf	??_Button_State_Pressed+1
 10106  0D9A  3007               	movlw	7
 10107  0D9B  0253               	subwf	??_Button_State_Pressed+1,w
 10108  0D9C  30D0               	movlw	208
 10109  0D9D  1903               	skipnz
 10110  0D9E  0252               	subwf	??_Button_State_Pressed,w
 10111  0D9F  1C03               	skipc
 10112  0DA0  2DB9               	goto	l6085
 10113                           
 10114                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         MTOUCH_Button_Initialize(button->name);
 10115  0DA1  0851               	movf	Button_State_Pressed@button,w
 10116  0DA2  0086               	movwf	6
 10117  0DA3  3001               	movlw	1	; select bank2/3
 10118  0DA4  0087               	movwf	7
 10119  0DA5  0801               	movf	1,w
 10120  0DA6  318A  22DE  318D   	fcall	_MTOUCH_Button_Initialize
 10121                           
 10122                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         callback_notPressed(button->na
      +                          me);
 10123  0DA9  0020               	movlb	0	; select bank0
 10124  0DAA  0851               	movf	Button_State_Pressed@button,w
 10125  0DAB  0086               	movwf	6
 10126  0DAC  3001               	movlw	1	; select bank2/3
 10127  0DAD  0087               	movwf	7
 10128  0DAE  0801               	movf	1,w
 10129  0DAF  00D2               	movwf	??_Button_State_Pressed
 10130  0DB0  0852               	movf	??_Button_State_Pressed,w
 10131  0DB1  00D0               	movwf	myButtonReleasedCallback@button
 10132  0DB2  0021               	movlb	1	; select bank1
 10133  0DB3  0850               	movf	(_callback_notPressed+1)^(0+128),w
 10134  0DB4  008A               	movwf	10
 10135  0DB5  084F               	movf	_callback_notPressed^(0+128),w
 10136  0DB6  000A               	callw
 10137  0DB7  318D               	pagesel	$
 10138                           
 10139                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:     }
 10140  0DB8  0008               	return
 10141  0DB9                     l6085:	
 10142  0DB9  0851               	movf	Button_State_Pressed@button,w
 10143  0DBA  3E09               	addlw	9
 10144  0DBB  0086               	movwf	6
 10145  0DBC  3001               	movlw	1	; select bank2/3
 10146  0DBD  0087               	movwf	7
 10147  0DBE  0801               	movf	1,w
 10148  0DBF  3A80               	xorlw	128
 10149  0DC0  00D2               	movwf	??_Button_State_Pressed
 10150  0DC1  0851               	movf	Button_State_Pressed@button,w
 10151  0DC2  3E0E               	addlw	14
 10152  0DC3  0086               	movwf	6
 10153  0DC4  3001               	movlw	1	; select bank2/3
 10154  0DC5  0087               	movwf	7
 10155  0DC6  0851               	movf	Button_State_Pressed@button,w
 10156  0DC7  3E0E               	addlw	14
 10157  0DC8  0084               	movwf	4
 10158  0DC9  3001               	movlw	1	; select bank2/3
 10159  0DCA  0085               	movwf	5
 10160  0DCB  3600               	lsrf	0,w
 10161  0DCC  0201               	subwf	1,w
 10162  0DCD  3A80               	xorlw	128
 10163  0DCE  02D2               	subwf	??_Button_State_Pressed,f
 10164  0DCF  1803               	skipnc
 10165  0DD0  0008               	return
 10166                           
 10167                           ;mcc_generated_files/mtouch/mtouch_button.c: 284:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 10168  0DD1  0851               	movf	Button_State_Pressed@button,w
 10169  0DD2  3E02               	addlw	2
 10170  0DD3  0086               	movwf	6
 10171  0DD4  3001               	movlw	1	; select bank2/3
 10172  0DD5  0087               	movwf	7
 10173  0DD6  0181               	clrf	1
 10174  0DD7  0A81               	incf	1,f
 10175                           
 10176                           ;mcc_generated_files/mtouch/mtouch_button.c: 286:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10177  0DD8  0851               	movf	Button_State_Pressed@button,w
 10178  0DD9  3E0A               	addlw	10
 10179  0DDA  0086               	movwf	6
 10180  0DDB  3001               	movlw	1	; select bank2/3
 10181  0DDC  0087               	movwf	7
 10182  0DDD  3000               	movlw	0
 10183  0DDE  3FC0               	movwi [0]fsr1
 10184  0DDF  3FC1               	movwi [1]fsr1
 10185                           
 10186                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 10187  0DE0  0851               	movf	Button_State_Pressed@button,w
 10188  0DE1  3E0C               	addlw	12
 10189  0DE2  0086               	movwf	6
 10190  0DE3  3001               	movlw	1	; select bank2/3
 10191  0DE4  0087               	movwf	7
 10192  0DE5  30FF               	movlw	255
 10193  0DE6  3FC0               	movwi [0]fsr1
 10194  0DE7  30FB               	movlw	251
 10195  0DE8  3FC1               	movwi [1]fsr1
 10196                           
 10197                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:         callback_notPressed(button->na
      +                          me);
 10198  0DE9  0851               	movf	Button_State_Pressed@button,w
 10199  0DEA  0086               	movwf	6
 10200  0DEB  3001               	movlw	1	; select bank2/3
 10201  0DEC  0087               	movwf	7
 10202  0DED  0801               	movf	1,w
 10203  0DEE  00D2               	movwf	??_Button_State_Pressed
 10204  0DEF  0852               	movf	??_Button_State_Pressed,w
 10205  0DF0  00D0               	movwf	myButtonReleasedCallback@button
 10206  0DF1  0021               	movlb	1	; select bank1
 10207  0DF2  0850               	movf	(_callback_notPressed+1)^(0+128),w
 10208  0DF3  008A               	movwf	10
 10209  0DF4  084F               	movf	_callback_notPressed^(0+128),w
 10210  0DF5  000A               	callw
 10211  0DF6  318D               	pagesel	$
 10212  0DF7  0008               	return
 10213  0DF8                     __end_of_Button_State_Pressed:	
 10214                           
 10215                           	psect	text59
 10216  08A1                     __ptext59:	
 10217 ;; *************** function _myButtonPressedCallback *****************
 10218 ;; Defined at:
 10219 ;;		line 165 in file "main.c"
 10220 ;; Parameters:    Size  Location     Type
 10221 ;;  button          1   48[BANK0 ] enum E2913
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;		None
 10224 ;; Return value:  Size  Location     Type
 10225 ;;                  1    wreg      void 
 10226 ;; Registers used:
 10227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10228 ;; Tracked objects:
 10229 ;;		On entry : 0/0
 10230 ;;		On exit  : 0/0
 10231 ;;		Unchanged: 0/0
 10232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10233 ;;      Params:         0       1       0       0       0       0       0       0
 10234 ;;      Locals:         0       0       0       0       0       0       0       0
 10235 ;;      Temps:          0       0       0       0       0       0       0       0
 10236 ;;      Totals:         0       1       0       0       0       0       0       0
 10237 ;;Total ram usage:        1 bytes
 10238 ;; Hardware stack levels used:    1
 10239 ;; Hardware stack levels required when called:    6
 10240 ;; This function calls:
 10241 ;;		_LED_PROCESS
 10242 ;;		_RELAY_PROCESS
 10243 ;; This function is called by:
 10244 ;;		_main
 10245 ;;		_Button_State_NotPressed
 10246 ;; This function uses a non-reentrant model
 10247 ;;
 10248                           
 10249                           
 10250                           ;psect for function _myButtonPressedCallback
 10251  08A1                     _myButtonPressedCallback:	
 10252                           
 10253                           ;main.c: 165: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 166:
      +                           {;main.c: 167:     count_conf = 0;
 10254                           
 10255                           ;incstack = 0
 10256                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10257  08A1  0021               	movlb	1	; select bank1
 10258  08A2  01C2               	clrf	_count_conf^(0+128)
 10259  08A3  01C3               	clrf	(_count_conf+1)^(0+128)
 10260                           
 10261                           ;main.c: 168:     if(config_status == 0)
 10262  08A4  0020               	movlb	0	; select bank0
 10263  08A5  0865               	movf	_config_status,w
 10264  08A6  1D03               	btfss	3,2
 10265  08A7  0008               	return
 10266                           
 10267                           ;main.c: 169:     {;main.c: 170:         if(button == 0) last_touch_status.full_status ^
      +                          = 0b00000001;
 10268  08A8  0850               	movf	myButtonPressedCallback@button,w
 10269  08A9  1D03               	btfss	3,2
 10270  08AA  28AF               	goto	l4389
 10271  08AB  3001               	movlw	1
 10272  08AC  06E1               	xorwf	_last_touch_status,f
 10273  08AD  3000               	movlw	0
 10274  08AE  06E2               	xorwf	_last_touch_status+1,f
 10275  08AF                     l4389:	
 10276                           
 10277                           ;main.c: 171:         if(button == 1) last_touch_status.full_status ^= 0b00000010;
 10278  08AF  0350               	decf	myButtonPressedCallback@button,w
 10279  08B0  1D03               	btfss	3,2
 10280  08B1  28B6               	goto	l4393
 10281  08B2  3002               	movlw	2
 10282  08B3  06E1               	xorwf	_last_touch_status,f
 10283  08B4  3000               	movlw	0
 10284  08B5  06E2               	xorwf	_last_touch_status+1,f
 10285  08B6                     l4393:	
 10286                           
 10287                           ;main.c: 172:         if(button == 2) last_touch_status.full_status ^= 0b00000100;
 10288  08B6  3002               	movlw	2
 10289  08B7  0650               	xorwf	myButtonPressedCallback@button,w
 10290  08B8  1D03               	btfss	3,2
 10291  08B9  28BE               	goto	l4397
 10292  08BA  3004               	movlw	4
 10293  08BB  06E1               	xorwf	_last_touch_status,f
 10294  08BC  3000               	movlw	0
 10295  08BD  06E2               	xorwf	_last_touch_status+1,f
 10296  08BE                     l4397:	
 10297                           
 10298                           ;main.c: 174:         LED_PROCESS(last_touch_status.full_status);
 10299  08BE  0861               	movf	_last_touch_status,w
 10300  08BF  318D  25F8  3188   	fcall	_LED_PROCESS
 10301                           
 10302                           ;main.c: 175:         RELAY_PROCESS(last_touch_status.full_status);
 10303  08C2  0020               	movlb	0	; select bank0
 10304  08C3  0861               	movf	_last_touch_status,w
 10305  08C4  318B  238E         	fcall	_RELAY_PROCESS
 10306  08C6  0008               	return
 10307  08C7                     __end_of_myButtonPressedCallback:	
 10308                           
 10309                           	psect	text60
 10310  1520                     __ptext60:	
 10311 ;; *************** function _Button_DefaultCallback *****************
 10312 ;; Defined at:
 10313 ;;		line 527 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10314 ;; Parameters:    Size  Location     Type
 10315 ;;  button          1   48[BANK0 ] enum E3069
 10316 ;; Auto vars:     Size  Location     Type
 10317 ;;		None
 10318 ;; Return value:  Size  Location     Type
 10319 ;;                  1    wreg      void 
 10320 ;; Registers used:
 10321 ;;		None
 10322 ;; Tracked objects:
 10323 ;;		On entry : 0/0
 10324 ;;		On exit  : 0/0
 10325 ;;		Unchanged: 0/0
 10326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10327 ;;      Params:         0       1       0       0       0       0       0       0
 10328 ;;      Locals:         0       0       0       0       0       0       0       0
 10329 ;;      Temps:          0       0       0       0       0       0       0       0
 10330 ;;      Totals:         0       1       0       0       0       0       0       0
 10331 ;;Total ram usage:        1 bytes
 10332 ;; Hardware stack levels used:    1
 10333 ;; Hardware stack levels required when called:    4
 10334 ;; This function calls:
 10335 ;;		Nothing
 10336 ;; This function is called by:
 10337 ;;		_Button_State_NotPressed
 10338 ;;		_Button_State_Pressed
 10339 ;; This function uses a non-reentrant model
 10340 ;;
 10341                           
 10342                           
 10343                           ;psect for function _Button_DefaultCallback
 10344  1520                     _Button_DefaultCallback:	
 10345                           
 10346                           ;incstack = 0
 10347                           ; Regs used in _Button_DefaultCallback: []
 10348  1520  0008               	return
 10349  1521                     __end_of_Button_DefaultCallback:	
 10350                           
 10351                           	psect	text61
 10352  0837                     __ptext61:	
 10353 ;; *************** function _myButtonReleasedCallback *****************
 10354 ;; Defined at:
 10355 ;;		line 178 in file "main.c"
 10356 ;; Parameters:    Size  Location     Type
 10357 ;;  button          1   48[BANK0 ] enum E2913
 10358 ;; Auto vars:     Size  Location     Type
 10359 ;;		None
 10360 ;; Return value:  Size  Location     Type
 10361 ;;                  1    wreg      void 
 10362 ;; Registers used:
 10363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10364 ;; Tracked objects:
 10365 ;;		On entry : 0/0
 10366 ;;		On exit  : 0/0
 10367 ;;		Unchanged: 0/0
 10368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10369 ;;      Params:         0       1       0       0       0       0       0       0
 10370 ;;      Locals:         0       0       0       0       0       0       0       0
 10371 ;;      Temps:          0       0       0       0       0       0       0       0
 10372 ;;      Totals:         0       1       0       0       0       0       0       0
 10373 ;;Total ram usage:        1 bytes
 10374 ;; Hardware stack levels used:    1
 10375 ;; Hardware stack levels required when called:   14
 10376 ;; This function calls:
 10377 ;;		_MTOUCH_Button_isPressed
 10378 ;;		_update_state
 10379 ;; This function is called by:
 10380 ;;		_main
 10381 ;;		_Button_State_Pressed
 10382 ;; This function uses a non-reentrant model
 10383 ;;
 10384                           
 10385                           
 10386                           ;psect for function _myButtonReleasedCallback
 10387  0837                     _myButtonReleasedCallback:	
 10388                           
 10389                           ;main.c: 178: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 179
      +                          : {;main.c: 180:     count_conf = 0;
 10390                           
 10391                           ;incstack = 0
 10392 ;; hardware stack exceeded
 10393                           ; Regs used in _myButtonReleasedCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10394  0837  0021               	movlb	1	; select bank1
 10395  0838  01C2               	clrf	_count_conf^(0+128)
 10396  0839  01C3               	clrf	(_count_conf+1)^(0+128)
 10397                           
 10398                           ;main.c: 181:     if(config_status == 0)
 10399  083A  0020               	movlb	0	; select bank0
 10400  083B  0865               	movf	_config_status,w
 10401  083C  1D03               	btfss	3,2
 10402  083D  0008               	return
 10403                           
 10404                           ;main.c: 182:     {;main.c: 184:         if(MTOUCH_Button_isPressed(0)==0&&MTOUCH_Button
      +                          _isPressed(1)==0&&MTOUCH_Button_isPressed(2)==0)
 10405  083E  3000               	movlw	0
 10406  083F  3197  2775  3188   	fcall	_MTOUCH_Button_isPressed
 10407  0842  3A00               	xorlw	0
 10408  0843  1D03               	skipz
 10409  0844  0008               	return
 10410  0845  3001               	movlw	1
 10411  0846  3197  2775  3188   	fcall	_MTOUCH_Button_isPressed
 10412  0849  3A00               	xorlw	0
 10413  084A  1D03               	skipz
 10414  084B  0008               	return
 10415  084C  3002               	movlw	2
 10416  084D  3197  2775  3188   	fcall	_MTOUCH_Button_isPressed
 10417  0850  3A00               	xorlw	0
 10418  0851  1D03               	skipz
 10419  0852  0008               	return
 10420                           
 10421                           ;main.c: 185:         {;main.c: 186:             update_state();
 10422  0853  318C  2478         	fcall	_update_state
 10423  0855  0008               	return
 10424  0856                     __end_of_myButtonReleasedCallback:	
 10425                           
 10426                           	psect	text62
 10427  1775                     __ptext62:	
 10428 ;; *************** function _MTOUCH_Button_isPressed *****************
 10429 ;; Defined at:
 10430 ;;		line 374 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10431 ;; Parameters:    Size  Location     Type
 10432 ;;  name            1    wreg     enum E3069
 10433 ;; Auto vars:     Size  Location     Type
 10434 ;;  name            1    2[COMMON] enum E3069
 10435 ;; Return value:  Size  Location     Type
 10436 ;;                  1    wreg      _Bool 
 10437 ;; Registers used:
 10438 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10439 ;; Tracked objects:
 10440 ;;		On entry : 0/0
 10441 ;;		On exit  : 0/0
 10442 ;;		Unchanged: 0/0
 10443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10444 ;;      Params:         0       0       0       0       0       0       0       0
 10445 ;;      Locals:         1       0       0       0       0       0       0       0
 10446 ;;      Temps:          1       0       0       0       0       0       0       0
 10447 ;;      Totals:         2       0       0       0       0       0       0       0
 10448 ;;Total ram usage:        2 bytes
 10449 ;; Hardware stack levels used:    1
 10450 ;; Hardware stack levels required when called:    4
 10451 ;; This function calls:
 10452 ;;		Nothing
 10453 ;; This function is called by:
 10454 ;;		_main
 10455 ;;		_myButtonReleasedCallback
 10456 ;;		_touch_example
 10457 ;;		_MTOUCH_Button_Buttonmask_Get
 10458 ;; This function uses a non-reentrant model
 10459 ;;
 10460                           
 10461                           
 10462                           ;psect for function _MTOUCH_Button_isPressed
 10463  1775                     _MTOUCH_Button_isPressed:	
 10464                           
 10465                           ;incstack = 0
 10466                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 10467                           ;MTOUCH_Button_isPressed@name stored from wreg
 10468  1775  00F2               	movwf	MTOUCH_Button_isPressed@name
 10469                           
 10470                           ;mcc_generated_files/mtouch/mtouch_button.c: 374: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 375: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 376:     if(name < 3u)
 10471  1776  3003               	movlw	3
 10472  1777  0272               	subwf	MTOUCH_Button_isPressed@name,w
 10473  1778  1803               	skipnc
 10474  1779  2F8E               	goto	l3995
 10475                           
 10476                           ;mcc_generated_files/mtouch/mtouch_button.c: 377:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 10477  177A  0872               	movf	MTOUCH_Button_isPressed@name,w
 10478  177B  00F1               	movwf	??_MTOUCH_Button_isPressed
 10479  177C  3003               	movlw	3
 10480  177D                     u2505:	
 10481  177D  35F1               	lslf	??_MTOUCH_Button_isPressed,f
 10482  177E  3EFF               	addlw	-1
 10483  177F  1D03               	skipz
 10484  1780  2F7D               	goto	u2505
 10485  1781  3571               	lslf	??_MTOUCH_Button_isPressed,w
 10486  1782  3E22               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 10487  1783  0086               	movwf	6
 10488  1784  3001               	movlw	1	; select bank2/3
 10489  1785  0087               	movwf	7
 10490  1786  3002               	movlw	2
 10491  1787  0601               	xorwf	1,w
 10492  1788  1D03               	btfss	3,2
 10493  1789  2F8C               	goto	u2510
 10494  178A  3001               	movlw	1
 10495  178B  0008               	return
 10496  178C                     u2510:	
 10497  178C  3000               	movlw	0
 10498  178D  0008               	return
 10499  178E                     l3995:	
 10500                           
 10501                           ;mcc_generated_files/mtouch/mtouch_button.c: 379:         return 0;
 10502  178E  3000               	movlw	0
 10503  178F  0008               	return
 10504  1790                     __end_of_MTOUCH_Button_isPressed:	
 10505                           
 10506                           	psect	text63
 10507  0ADE                     __ptext63:	
 10508 ;; *************** function _MTOUCH_Button_Initialize *****************
 10509 ;; Defined at:
 10510 ;;		line 159 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;  name            1    wreg     enum E3069
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;  name            1    9[COMMON] enum E3069
 10515 ;;  button          1   10[COMMON] PTR struct .
 10516 ;;		 -> mtouch_button(48), 
 10517 ;; Return value:  Size  Location     Type
 10518 ;;                  1    wreg      void 
 10519 ;; Registers used:
 10520 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10521 ;; Tracked objects:
 10522 ;;		On entry : 0/0
 10523 ;;		On exit  : 0/0
 10524 ;;		Unchanged: 0/0
 10525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10526 ;;      Params:         0       0       0       0       0       0       0       0
 10527 ;;      Locals:         2       0       0       0       0       0       0       0
 10528 ;;      Temps:          2       0       0       0       0       0       0       0
 10529 ;;      Totals:         4       0       0       0       0       0       0       0
 10530 ;;Total ram usage:        4 bytes
 10531 ;; Hardware stack levels used:    1
 10532 ;; Hardware stack levels required when called:    6
 10533 ;; This function calls:
 10534 ;;		_MTOUCH_Sensor_Calibrate
 10535 ;; This function is called by:
 10536 ;;		_MTOUCH_Button_InitializeAll
 10537 ;;		_Button_Service
 10538 ;;		_Button_State_NotPressed
 10539 ;;		_Button_State_Pressed
 10540 ;; This function uses a non-reentrant model
 10541 ;;
 10542                           
 10543                           
 10544                           ;psect for function _MTOUCH_Button_Initialize
 10545  0ADE                     _MTOUCH_Button_Initialize:	
 10546                           
 10547                           ;incstack = 0
 10548                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10549                           ;MTOUCH_Button_Initialize@name stored from wreg
 10550  0ADE  00F9               	movwf	MTOUCH_Button_Initialize@name
 10551                           
 10552                           ;mcc_generated_files/mtouch/mtouch_button.c: 159: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 160: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 161:     mtouch_button_t* button = &mtouch_button[name];
 10553  0ADF  0879               	movf	MTOUCH_Button_Initialize@name,w
 10554  0AE0  00F7               	movwf	??_MTOUCH_Button_Initialize
 10555  0AE1  3003               	movlw	3
 10556  0AE2                     u4775:	
 10557  0AE2  35F7               	lslf	??_MTOUCH_Button_Initialize,f
 10558  0AE3  3EFF               	addlw	-1
 10559  0AE4  1D03               	skipz
 10560  0AE5  2AE2               	goto	u4775
 10561  0AE6  3577               	lslf	??_MTOUCH_Button_Initialize,w
 10562  0AE7  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 10563  0AE8  00F8               	movwf	??_MTOUCH_Button_Initialize+1
 10564  0AE9  0878               	movf	??_MTOUCH_Button_Initialize+1,w
 10565  0AEA  00FA               	movwf	MTOUCH_Button_Initialize@button
 10566                           
 10567                           ;mcc_generated_files/mtouch/mtouch_button.c: 163:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 10568  0AEB  087A               	movf	MTOUCH_Button_Initialize@button,w
 10569  0AEC  3E02               	addlw	2
 10570  0AED  0086               	movwf	6
 10571  0AEE  3001               	movlw	1	; select bank2/3
 10572  0AEF  0087               	movwf	7
 10573  0AF0  0181               	clrf	1
 10574                           
 10575                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 10576  0AF1  087A               	movf	MTOUCH_Button_Initialize@button,w
 10577  0AF2  3E05               	addlw	5
 10578  0AF3  0086               	movwf	6
 10579  0AF4  3001               	movlw	1	; select bank2/3
 10580  0AF5  0087               	movwf	7
 10581  0AF6  3000               	movlw	0
 10582  0AF7  3FC0               	movwi [0]fsr1
 10583  0AF8  3000               	movlw	0
 10584  0AF9  3FC1               	movwi [1]fsr1
 10585  0AFA  3FC2               	movwi [2]fsr1
 10586  0AFB  3FC3               	movwi [3]fsr1
 10587                           
 10588                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 10589  0AFC  087A               	movf	MTOUCH_Button_Initialize@button,w
 10590  0AFD  3E0A               	addlw	10
 10591  0AFE  0086               	movwf	6
 10592  0AFF  3001               	movlw	1	; select bank2/3
 10593  0B00  0087               	movwf	7
 10594  0B01  3000               	movlw	0
 10595  0B02  3FC0               	movwi [0]fsr1
 10596  0B03  3FC1               	movwi [1]fsr1
 10597                           
 10598                           ;mcc_generated_files/mtouch/mtouch_button.c: 166:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 10599  0B04  087A               	movf	MTOUCH_Button_Initialize@button,w
 10600  0B05  3E0C               	addlw	12
 10601  0B06  0086               	movwf	6
 10602  0B07  3001               	movlw	1	; select bank2/3
 10603  0B08  0087               	movwf	7
 10604  0B09  3000               	movlw	0
 10605  0B0A  3FC0               	movwi [0]fsr1
 10606  0B0B  3FC1               	movwi [1]fsr1
 10607                           
 10608                           ;mcc_generated_files/mtouch/mtouch_button.c: 168:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 10609  0B0C  0A7A               	incf	MTOUCH_Button_Initialize@button,w
 10610  0B0D  0086               	movwf	6
 10611  0B0E  3001               	movlw	1	; select bank2/3
 10612  0B0F  0087               	movwf	7
 10613  0B10  0801               	movf	1,w
 10614  0B11  3196  268F         	fcall	_MTOUCH_Sensor_Calibrate
 10615  0B13  0008               	return
 10616  0B14                     __end_of_MTOUCH_Button_Initialize:	
 10617                           
 10618                           	psect	text64
 10619  168F                     __ptext64:	
 10620 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 10621 ;; Defined at:
 10622 ;;		line 904 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10623 ;; Parameters:    Size  Location     Type
 10624 ;;  sensor          1    wreg     enum E2854
 10625 ;; Auto vars:     Size  Location     Type
 10626 ;;  sensor          1    6[COMMON] enum E2854
 10627 ;; Return value:  Size  Location     Type
 10628 ;;                  1    wreg      void 
 10629 ;; Registers used:
 10630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10631 ;; Tracked objects:
 10632 ;;		On entry : 0/0
 10633 ;;		On exit  : 0/0
 10634 ;;		Unchanged: 0/0
 10635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10636 ;;      Params:         0       0       0       0       0       0       0       0
 10637 ;;      Locals:         1       0       0       0       0       0       0       0
 10638 ;;      Temps:          1       0       0       0       0       0       0       0
 10639 ;;      Totals:         2       0       0       0       0       0       0       0
 10640 ;;Total ram usage:        2 bytes
 10641 ;; Hardware stack levels used:    1
 10642 ;; Hardware stack levels required when called:    5
 10643 ;; This function calls:
 10644 ;;		___bmul
 10645 ;; This function is called by:
 10646 ;;		_MTOUCH_Sensor_Initialize
 10647 ;;		_MTOUCH_Button_Initialize
 10648 ;; This function uses a non-reentrant model
 10649 ;;
 10650                           
 10651                           
 10652                           ;psect for function _MTOUCH_Sensor_Calibrate
 10653  168F                     _MTOUCH_Sensor_Calibrate:	
 10654                           
 10655                           ;incstack = 0
 10656                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10657                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 10658  168F  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
 10659                           
 10660                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 904: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 905: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 906:     if(sensor < 3u)
 10661  1690  3003               	movlw	3
 10662  1691  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 10663  1692  1803               	skipnc
 10664  1693  0008               	return
 10665                           
 10666                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 908:         mtouch_sensor[sensor].calibrated = 0;
 10667  1694  3009               	movlw	9
 10668  1695  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
 10669  1696  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
 10670  1697  00F1               	movwf	___bmul@multiplicand
 10671  1698  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 10672  1699  3196  266D         	fcall	___bmul
 10673  169B  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 10674  169C  0086               	movwf	6
 10675  169D  3001               	movlw	1	; select bank2/3
 10676  169E  0087               	movwf	7
 10677  169F  1101               	bcf	1,2
 10678  16A0  0008               	return
 10679  16A1                     __end_of_MTOUCH_Sensor_Calibrate:	
 10680                           
 10681                           	psect	text65
 10682  0F71                     __ptext65:	
 10683 ;; *************** function _Button_Baseline_Update *****************
 10684 ;; Defined at:
 10685 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10686 ;; Parameters:    Size  Location     Type
 10687 ;;  button          1    wreg     PTR struct .
 10688 ;;		 -> mtouch_button(48), 
 10689 ;; Auto vars:     Size  Location     Type
 10690 ;;  button          1    7[COMMON] PTR struct .
 10691 ;;		 -> mtouch_button(48), 
 10692 ;; Return value:  Size  Location     Type
 10693 ;;                  1    wreg      void 
 10694 ;; Registers used:
 10695 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10696 ;; Tracked objects:
 10697 ;;		On entry : 0/0
 10698 ;;		On exit  : 0/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10701 ;;      Params:         0       0       0       0       0       0       0       0
 10702 ;;      Locals:         1       0       0       0       0       0       0       0
 10703 ;;      Temps:          6       0       0       0       0       0       0       0
 10704 ;;      Totals:         7       0       0       0       0       0       0       0
 10705 ;;Total ram usage:        7 bytes
 10706 ;; Hardware stack levels used:    1
 10707 ;; Hardware stack levels required when called:    4
 10708 ;; This function calls:
 10709 ;;		Nothing
 10710 ;; This function is called by:
 10711 ;;		_Button_State_Initializing
 10712 ;;		_Button_State_NotPressed
 10713 ;; This function uses a non-reentrant model
 10714 ;;
 10715                           
 10716                           
 10717                           ;psect for function _Button_Baseline_Update
 10718  0F71                     _Button_Baseline_Update:	
 10719                           
 10720                           ;incstack = 0
 10721                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 10722                           ;Button_Baseline_Update@button stored from wreg
 10723  0F71  00F7               	movwf	Button_Baseline_Update@button
 10724                           
 10725                           ;mcc_generated_files/mtouch/mtouch_button.c: 481: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 482: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 483:     if (GIE == (uint8_t)1)
 10726  0F72  1F8B               	btfss	11,7	;volatile
 10727  0F73  2FBB               	goto	l4371
 10728                           
 10729                           ;mcc_generated_files/mtouch/mtouch_button.c: 484:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 485:         GIE = (uint8_t)0;
 10730  0F74  138B               	bcf	11,7	;volatile
 10731                           
 10732                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 10733  0F75  0877               	movf	Button_Baseline_Update@button,w
 10734  0F76  3E05               	addlw	5
 10735  0F77  0086               	movwf	6
 10736  0F78  3001               	movlw	1	; select bank2/3
 10737  0F79  0087               	movwf	7
 10738  0F7A  3F40               	moviw [0]fsr1
 10739  0F7B  00F1               	movwf	??_Button_Baseline_Update
 10740  0F7C  3F41               	moviw [1]fsr1
 10741  0F7D  00F2               	movwf	??_Button_Baseline_Update+1
 10742  0F7E  3F42               	moviw [2]fsr1
 10743  0F7F  00F3               	movwf	??_Button_Baseline_Update+2
 10744  0F80  3F43               	moviw [3]fsr1
 10745  0F81  00F4               	movwf	??_Button_Baseline_Update+3
 10746  0F82  3004               	movlw	4
 10747  0F83                     u3015:	
 10748  0F83  36F4               	lsrf	??_Button_Baseline_Update+3,f
 10749  0F84  0CF3               	rrf	??_Button_Baseline_Update+2,f
 10750  0F85  0CF2               	rrf	??_Button_Baseline_Update+1,f
 10751  0F86  0CF1               	rrf	??_Button_Baseline_Update,f
 10752  0F87  0B89               	decfsz	9,f
 10753  0F88  2F83               	goto	u3015
 10754  0F89  0877               	movf	Button_Baseline_Update@button,w
 10755  0F8A  3E05               	addlw	5
 10756  0F8B  0086               	movwf	6
 10757  0F8C  3001               	movlw	1	; select bank2/3
 10758  0F8D  0087               	movwf	7
 10759  0F8E  0871               	movf	??_Button_Baseline_Update,w
 10760  0F8F  0281               	subwf	1,f
 10761  0F90  3141               	addfsr 1,1
 10762  0F91  0872               	movf	??_Button_Baseline_Update+1,w
 10763  0F92  3B81               	subwfb	1,f
 10764  0F93  3141               	addfsr 1,1
 10765  0F94  0873               	movf	??_Button_Baseline_Update+2,w
 10766  0F95  3B81               	subwfb	1,f
 10767  0F96  3141               	addfsr 1,1
 10768  0F97  0874               	movf	??_Button_Baseline_Update+3,w
 10769  0F98  3B81               	subwfb	1,f
 10770  0F99  317D               	addfsr 1,-3
 10771                           
 10772                           ;mcc_generated_files/mtouch/mtouch_button.c: 487:         button->baseline += button->re
      +                          ading;
 10773  0F9A  0877               	movf	Button_Baseline_Update@button,w
 10774  0F9B  3E03               	addlw	3
 10775  0F9C  0086               	movwf	6
 10776  0F9D  3001               	movlw	1	; select bank2/3
 10777  0F9E  0087               	movwf	7
 10778  0F9F  3F40               	moviw [0]fsr1
 10779  0FA0  00F1               	movwf	??_Button_Baseline_Update
 10780  0FA1  3F41               	moviw [1]fsr1
 10781  0FA2  00F2               	movwf	??_Button_Baseline_Update+1
 10782  0FA3  0871               	movf	??_Button_Baseline_Update,w
 10783  0FA4  00F3               	movwf	??_Button_Baseline_Update+2
 10784  0FA5  0872               	movf	??_Button_Baseline_Update+1,w
 10785  0FA6  00F4               	movwf	??_Button_Baseline_Update+3
 10786  0FA7  01F5               	clrf	??_Button_Baseline_Update+4
 10787  0FA8  01F6               	clrf	??_Button_Baseline_Update+5
 10788  0FA9  0877               	movf	Button_Baseline_Update@button,w
 10789  0FAA  3E05               	addlw	5
 10790  0FAB  0086               	movwf	6
 10791  0FAC  3001               	movlw	1	; select bank2/3
 10792  0FAD  0087               	movwf	7
 10793  0FAE  0873               	movf	??_Button_Baseline_Update+2,w
 10794  0FAF  0781               	addwf	1,f
 10795  0FB0  3141               	addfsr 1,1
 10796  0FB1  0874               	movf	??_Button_Baseline_Update+3,w
 10797  0FB2  3D81               	addwfc	1,f
 10798  0FB3  3141               	addfsr 1,1
 10799  0FB4  0875               	movf	??_Button_Baseline_Update+4,w
 10800  0FB5  3D81               	addwfc	1,f
 10801  0FB6  3141               	addfsr 1,1
 10802  0FB7  0876               	movf	??_Button_Baseline_Update+5,w
 10803  0FB8  3D81               	addwfc	1,f
 10804                           
 10805                           ;mcc_generated_files/mtouch/mtouch_button.c: 488:         GIE = (uint8_t)1;
 10806  0FB9  178B               	bsf	11,7	;volatile
 10807                           
 10808                           ;mcc_generated_files/mtouch/mtouch_button.c: 489:     }
 10809  0FBA  0008               	return
 10810  0FBB                     l4371:	
 10811                           
 10812                           ;mcc_generated_files/mtouch/mtouch_button.c: 491:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 492:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 10813  0FBB  0877               	movf	Button_Baseline_Update@button,w
 10814  0FBC  3E05               	addlw	5
 10815  0FBD  0086               	movwf	6
 10816  0FBE  3001               	movlw	1	; select bank2/3
 10817  0FBF  0087               	movwf	7
 10818  0FC0  3F40               	moviw [0]fsr1
 10819  0FC1  00F1               	movwf	??_Button_Baseline_Update
 10820  0FC2  3F41               	moviw [1]fsr1
 10821  0FC3  00F2               	movwf	??_Button_Baseline_Update+1
 10822  0FC4  3F42               	moviw [2]fsr1
 10823  0FC5  00F3               	movwf	??_Button_Baseline_Update+2
 10824  0FC6  3F43               	moviw [3]fsr1
 10825  0FC7  00F4               	movwf	??_Button_Baseline_Update+3
 10826  0FC8  3004               	movlw	4
 10827  0FC9                     u3025:	
 10828  0FC9  36F4               	lsrf	??_Button_Baseline_Update+3,f
 10829  0FCA  0CF3               	rrf	??_Button_Baseline_Update+2,f
 10830  0FCB  0CF2               	rrf	??_Button_Baseline_Update+1,f
 10831  0FCC  0CF1               	rrf	??_Button_Baseline_Update,f
 10832  0FCD  0B89               	decfsz	9,f
 10833  0FCE  2FC9               	goto	u3025
 10834  0FCF  0877               	movf	Button_Baseline_Update@button,w
 10835  0FD0  3E05               	addlw	5
 10836  0FD1  0086               	movwf	6
 10837  0FD2  3001               	movlw	1	; select bank2/3
 10838  0FD3  0087               	movwf	7
 10839  0FD4  0871               	movf	??_Button_Baseline_Update,w
 10840  0FD5  0281               	subwf	1,f
 10841  0FD6  3141               	addfsr 1,1
 10842  0FD7  0872               	movf	??_Button_Baseline_Update+1,w
 10843  0FD8  3B81               	subwfb	1,f
 10844  0FD9  3141               	addfsr 1,1
 10845  0FDA  0873               	movf	??_Button_Baseline_Update+2,w
 10846  0FDB  3B81               	subwfb	1,f
 10847  0FDC  3141               	addfsr 1,1
 10848  0FDD  0874               	movf	??_Button_Baseline_Update+3,w
 10849  0FDE  3B81               	subwfb	1,f
 10850  0FDF  317D               	addfsr 1,-3
 10851                           
 10852                           ;mcc_generated_files/mtouch/mtouch_button.c: 493:         button->baseline += button->re
      +                          ading;
 10853  0FE0  0877               	movf	Button_Baseline_Update@button,w
 10854  0FE1  3E03               	addlw	3
 10855  0FE2  0086               	movwf	6
 10856  0FE3  3001               	movlw	1	; select bank2/3
 10857  0FE4  0087               	movwf	7
 10858  0FE5  3F40               	moviw [0]fsr1
 10859  0FE6  00F1               	movwf	??_Button_Baseline_Update
 10860  0FE7  3F41               	moviw [1]fsr1
 10861  0FE8  00F2               	movwf	??_Button_Baseline_Update+1
 10862  0FE9  0871               	movf	??_Button_Baseline_Update,w
 10863  0FEA  00F3               	movwf	??_Button_Baseline_Update+2
 10864  0FEB  0872               	movf	??_Button_Baseline_Update+1,w
 10865  0FEC  00F4               	movwf	??_Button_Baseline_Update+3
 10866  0FED  01F5               	clrf	??_Button_Baseline_Update+4
 10867  0FEE  01F6               	clrf	??_Button_Baseline_Update+5
 10868  0FEF  0877               	movf	Button_Baseline_Update@button,w
 10869  0FF0  3E05               	addlw	5
 10870  0FF1  0086               	movwf	6
 10871  0FF2  3001               	movlw	1	; select bank2/3
 10872  0FF3  0087               	movwf	7
 10873  0FF4  0873               	movf	??_Button_Baseline_Update+2,w
 10874  0FF5  0781               	addwf	1,f
 10875  0FF6  3141               	addfsr 1,1
 10876  0FF7  0874               	movf	??_Button_Baseline_Update+3,w
 10877  0FF8  3D81               	addwfc	1,f
 10878  0FF9  3141               	addfsr 1,1
 10879  0FFA  0875               	movf	??_Button_Baseline_Update+4,w
 10880  0FFB  3D81               	addwfc	1,f
 10881  0FFC  3141               	addfsr 1,1
 10882  0FFD  0876               	movf	??_Button_Baseline_Update+5,w
 10883  0FFE  3D81               	addwfc	1,f
 10884  0FFF  0008               	return
 10885  1000                     __end_of_Button_Baseline_Update:	
 10886                           
 10887                           	psect	text66
 10888  09EA                     __ptext66:	
 10889 ;; *************** function _Button_Baseline_Initialize *****************
 10890 ;; Defined at:
 10891 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;  button          1    wreg     PTR struct .
 10894 ;;		 -> mtouch_button(48), 
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;  button          1    9[COMMON] PTR struct .
 10897 ;;		 -> mtouch_button(48), 
 10898 ;; Return value:  Size  Location     Type
 10899 ;;                  1    wreg      void 
 10900 ;; Registers used:
 10901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10902 ;; Tracked objects:
 10903 ;;		On entry : 0/0
 10904 ;;		On exit  : 0/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10907 ;;      Params:         0       0       0       0       0       0       0       0
 10908 ;;      Locals:         1       0       0       0       0       0       0       0
 10909 ;;      Temps:          0       4       0       0       0       0       0       0
 10910 ;;      Totals:         1       4       0       0       0       0       0       0
 10911 ;;Total ram usage:        5 bytes
 10912 ;; Hardware stack levels used:    1
 10913 ;; Hardware stack levels required when called:    6
 10914 ;; This function calls:
 10915 ;;		_MTOUCH_Sensor_RawSample_Get
 10916 ;; This function is called by:
 10917 ;;		_Button_State_Initializing
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           
 10922                           ;psect for function _Button_Baseline_Initialize
 10923  09EA                     _Button_Baseline_Initialize:	
 10924                           
 10925                           ;incstack = 0
 10926                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10927                           ;Button_Baseline_Initialize@button stored from wreg
 10928  09EA  00F9               	movwf	Button_Baseline_Initialize@button
 10929                           
 10930                           ;mcc_generated_files/mtouch/mtouch_button.c: 475: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 476: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 477:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 10931  09EB  0A79               	incf	Button_Baseline_Initialize@button,w
 10932  09EC  0086               	movwf	6
 10933  09ED  3001               	movlw	1	; select bank2/3
 10934  09EE  0087               	movwf	7
 10935  09EF  0801               	movf	1,w
 10936  09F0  3188  2001  3189   	fcall	_MTOUCH_Sensor_RawSample_Get
 10937  09F3  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10938  09F4  0020               	movlb	0	; select bank0
 10939  09F5  00A0               	movwf	??_Button_Baseline_Initialize
 10940  09F6  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10941  09F7  00A1               	movwf	??_Button_Baseline_Initialize+1
 10942  09F8  01A2               	clrf	??_Button_Baseline_Initialize+2
 10943  09F9  01A3               	clrf	??_Button_Baseline_Initialize+3
 10944  09FA  0879               	movf	Button_Baseline_Initialize@button,w
 10945  09FB  3E05               	addlw	5
 10946  09FC  0086               	movwf	6
 10947  09FD  3001               	movlw	1	; select bank2/3
 10948  09FE  0087               	movwf	7
 10949  09FF  0820               	movf	??_Button_Baseline_Initialize,w
 10950  0A00  3FC0               	movwi [0]fsr1
 10951  0A01  0821               	movf	??_Button_Baseline_Initialize+1,w
 10952  0A02  3FC1               	movwi [1]fsr1
 10953  0A03  0822               	movf	??_Button_Baseline_Initialize+2,w
 10954  0A04  3FC2               	movwi [2]fsr1
 10955  0A05  0823               	movf	??_Button_Baseline_Initialize+3,w
 10956  0A06  3FC3               	movwi [3]fsr1
 10957                           
 10958                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 10959  0A07  0879               	movf	Button_Baseline_Initialize@button,w
 10960  0A08  3E05               	addlw	5
 10961  0A09  0086               	movwf	6
 10962  0A0A  3001               	movlw	1	; select bank2/3
 10963  0A0B  0087               	movwf	7
 10964  0A0C  3004               	movlw	4
 10965  0A0D                     u4785:	
 10966  0A0D  3581               	lslf	1,f
 10967  0A0E  3141               	addfsr 1,1
 10968  0A0F  0D81               	rlf	1,f
 10969  0A10  3141               	addfsr 1,1
 10970  0A11  0D81               	rlf	1,f
 10971  0A12  3141               	addfsr 1,1
 10972  0A13  0D81               	rlf	1,f
 10973  0A14  317D               	addfsr 1,-3
 10974  0A15  0B89               	decfsz	9,f
 10975  0A16  2A0D               	goto	u4785
 10976  0A17  0008               	return
 10977  0A18                     __end_of_Button_Baseline_Initialize:	
 10978                           
 10979                           	psect	text67
 10980  15E6                     __ptext67:	
 10981 ;; *************** function _Button_Reading_Update *****************
 10982 ;; Defined at:
 10983 ;;		line 448 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10984 ;; Parameters:    Size  Location     Type
 10985 ;;  button          1    wreg     PTR struct .
 10986 ;;		 -> mtouch_button(48), 
 10987 ;; Auto vars:     Size  Location     Type
 10988 ;;  button          1    0[BANK0 ] PTR struct .
 10989 ;;		 -> mtouch_button(48), 
 10990 ;; Return value:  Size  Location     Type
 10991 ;;                  1    wreg      void 
 10992 ;; Registers used:
 10993 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10994 ;; Tracked objects:
 10995 ;;		On entry : 0/0
 10996 ;;		On exit  : 0/0
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10999 ;;      Params:         0       0       0       0       0       0       0       0
 11000 ;;      Locals:         0       1       0       0       0       0       0       0
 11001 ;;      Temps:          0       0       0       0       0       0       0       0
 11002 ;;      Totals:         0       1       0       0       0       0       0       0
 11003 ;;Total ram usage:        1 bytes
 11004 ;; Hardware stack levels used:    1
 11005 ;; Hardware stack levels required when called:    7
 11006 ;; This function calls:
 11007 ;;		_Button_Reading_Update_Helper
 11008 ;; This function is called by:
 11009 ;;		_Button_Service
 11010 ;; This function uses a non-reentrant model
 11011 ;;
 11012                           
 11013                           
 11014                           ;psect for function _Button_Reading_Update
 11015  15E6                     _Button_Reading_Update:	
 11016                           
 11017                           ;incstack = 0
 11018                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11019                           ;Button_Reading_Update@button stored from wreg
 11020  15E6  0020               	movlb	0	; select bank0
 11021  15E7  00A0               	movwf	Button_Reading_Update@button
 11022                           
 11023                           ;mcc_generated_files/mtouch/mtouch_button.c: 448: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 449: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 450:     if (GIE == (uint8_t) 1)
 11024  15E8  1F8B               	btfss	11,7	;volatile
 11025  15E9  2DF0               	goto	l6045
 11026                           
 11027                           ;mcc_generated_files/mtouch/mtouch_button.c: 451:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 452:         GIE = (uint8_t) 0;
 11028  15EA  138B               	bcf	11,7	;volatile
 11029                           
 11030                           ;mcc_generated_files/mtouch/mtouch_button.c: 453:         Button_Reading_Update_Helper(b
      +                          utton);
 11031  15EB  0820               	movf	Button_Reading_Update@button,w
 11032  15EC  318B  23DB         	fcall	_Button_Reading_Update_Helper
 11033                           
 11034                           ;mcc_generated_files/mtouch/mtouch_button.c: 454:         GIE = (uint8_t) 1;
 11035  15EE  178B               	bsf	11,7	;volatile
 11036                           
 11037                           ;mcc_generated_files/mtouch/mtouch_button.c: 455:     }
 11038  15EF  0008               	return
 11039  15F0                     l6045:	
 11040                           
 11041                           ;mcc_generated_files/mtouch/mtouch_button.c: 457:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 458:         Button_Reading_Update_Helper(button);
 11042  15F0  0820               	movf	Button_Reading_Update@button,w
 11043  15F1  318B  23DB         	fcall	_Button_Reading_Update_Helper
 11044  15F3  0008               	return
 11045  15F4                     __end_of_Button_Reading_Update:	
 11046                           
 11047                           	psect	text68
 11048  0BDB                     __ptext68:	
 11049 ;; *************** function _Button_Reading_Update_Helper *****************
 11050 ;; Defined at:
 11051 ;;		line 462 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;  button          1    wreg     PTR struct .
 11054 ;;		 -> mtouch_button(48), 
 11055 ;; Auto vars:     Size  Location     Type
 11056 ;;  button          1   11[COMMON] PTR struct .
 11057 ;;		 -> mtouch_button(48), 
 11058 ;; Return value:  Size  Location     Type
 11059 ;;                  1    wreg      void 
 11060 ;; Registers used:
 11061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11062 ;; Tracked objects:
 11063 ;;		On entry : 0/0
 11064 ;;		On exit  : 0/0
 11065 ;;		Unchanged: 0/0
 11066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11067 ;;      Params:         0       0       0       0       0       0       0       0
 11068 ;;      Locals:         1       0       0       0       0       0       0       0
 11069 ;;      Temps:          2       0       0       0       0       0       0       0
 11070 ;;      Totals:         3       0       0       0       0       0       0       0
 11071 ;;Total ram usage:        3 bytes
 11072 ;; Hardware stack levels used:    1
 11073 ;; Hardware stack levels required when called:    6
 11074 ;; This function calls:
 11075 ;;		_MTOUCH_Sensor_RawSample_Get
 11076 ;; This function is called by:
 11077 ;;		_Button_Reading_Update
 11078 ;; This function uses a non-reentrant model
 11079 ;;
 11080                           
 11081                           
 11082                           ;psect for function _Button_Reading_Update_Helper
 11083  0BDB                     _Button_Reading_Update_Helper:	
 11084                           
 11085                           ;incstack = 0
 11086                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11087                           ;Button_Reading_Update_Helper@button stored from wreg
 11088  0BDB  00FB               	movwf	Button_Reading_Update_Helper@button
 11089                           
 11090                           ;mcc_generated_files/mtouch/mtouch_button.c: 462: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 463: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 464:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 11091  0BDC  087B               	movf	Button_Reading_Update_Helper@button,w
 11092  0BDD  3E02               	addlw	2
 11093  0BDE  0086               	movwf	6
 11094  0BDF  3001               	movlw	1	; select bank2/3
 11095  0BE0  0087               	movwf	7
 11096  0BE1  0801               	movf	1,w
 11097  0BE2  1903               	btfsc	3,2
 11098  0BE3  2C17               	goto	l5949
 11099                           
 11100                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         button->reading -= button->reading>>((uint8_t)2u);
 11101  0BE4  087B               	movf	Button_Reading_Update_Helper@button,w
 11102  0BE5  3E03               	addlw	3
 11103  0BE6  0086               	movwf	6
 11104  0BE7  3001               	movlw	1	; select bank2/3
 11105  0BE8  0087               	movwf	7
 11106  0BE9  3F40               	moviw [0]fsr1
 11107  0BEA  00F9               	movwf	??_Button_Reading_Update_Helper
 11108  0BEB  3F41               	moviw [1]fsr1
 11109  0BEC  00FA               	movwf	??_Button_Reading_Update_Helper+1
 11110  0BED  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11111  0BEE  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11112  0BEF  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11113  0BF0  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11114  0BF1  087B               	movf	Button_Reading_Update_Helper@button,w
 11115  0BF2  3E03               	addlw	3
 11116  0BF3  0086               	movwf	6
 11117  0BF4  3001               	movlw	1	; select bank2/3
 11118  0BF5  0087               	movwf	7
 11119  0BF6  0879               	movf	??_Button_Reading_Update_Helper,w
 11120  0BF7  0281               	subwf	1,f
 11121  0BF8  3141               	addfsr 1,1
 11122  0BF9  087A               	movf	??_Button_Reading_Update_Helper+1,w
 11123  0BFA  3B81               	subwfb	1,f
 11124  0BFB  317F               	addfsr 1,-1
 11125                           
 11126                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 11127  0BFC  0A7B               	incf	Button_Reading_Update_Helper@button,w
 11128  0BFD  0086               	movwf	6
 11129  0BFE  3001               	movlw	1	; select bank2/3
 11130  0BFF  0087               	movwf	7
 11131  0C00  0801               	movf	1,w
 11132  0C01  3188  2001         	fcall	_MTOUCH_Sensor_RawSample_Get
 11133  0C03  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11134  0C04  00F9               	movwf	??_Button_Reading_Update_Helper
 11135  0C05  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11136  0C06  00FA               	movwf	??_Button_Reading_Update_Helper+1
 11137  0C07  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11138  0C08  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11139  0C09  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 11140  0C0A  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 11141  0C0B  087B               	movf	Button_Reading_Update_Helper@button,w
 11142  0C0C  3E03               	addlw	3
 11143  0C0D  0086               	movwf	6
 11144  0C0E  3001               	movlw	1	; select bank2/3
 11145  0C0F  0087               	movwf	7
 11146  0C10  0879               	movf	??_Button_Reading_Update_Helper,w
 11147  0C11  0781               	addwf	1,f
 11148  0C12  3141               	addfsr 1,1
 11149  0C13  087A               	movf	??_Button_Reading_Update_Helper+1,w
 11150  0C14  3D81               	addwfc	1,f
 11151  0C15  317F               	addfsr 1,-1
 11152                           
 11153                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     }
 11154  0C16  0008               	return
 11155  0C17                     l5949:	
 11156                           
 11157                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 471:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 11158  0C17  0A7B               	incf	Button_Reading_Update_Helper@button,w
 11159  0C18  0086               	movwf	6
 11160  0C19  3001               	movlw	1	; select bank2/3
 11161  0C1A  0087               	movwf	7
 11162  0C1B  0801               	movf	1,w
 11163  0C1C  3188  2001         	fcall	_MTOUCH_Sensor_RawSample_Get
 11164  0C1E  087B               	movf	Button_Reading_Update_Helper@button,w
 11165  0C1F  3E03               	addlw	3
 11166  0C20  0086               	movwf	6
 11167  0C21  3001               	movlw	1	; select bank2/3
 11168  0C22  0087               	movwf	7
 11169  0C23  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11170  0C24  3FC0               	movwi [0]fsr1
 11171  0C25  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11172  0C26  3FC1               	movwi [1]fsr1
 11173  0C27  0008               	return
 11174  0C28                     __end_of_Button_Reading_Update_Helper:	
 11175                           
 11176                           	psect	text69
 11177  0801                     __ptext69:	
 11178 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 11179 ;; Defined at:
 11180 ;;		line 792 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;  name            1    wreg     enum E2854
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;  name            1    8[COMMON] enum E2854
 11185 ;; Return value:  Size  Location     Type
 11186 ;;                  2    5[COMMON] unsigned short 
 11187 ;; Registers used:
 11188 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11189 ;; Tracked objects:
 11190 ;;		On entry : 0/0
 11191 ;;		On exit  : 0/0
 11192 ;;		Unchanged: 0/0
 11193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11194 ;;      Params:         2       0       0       0       0       0       0       0
 11195 ;;      Locals:         1       0       0       0       0       0       0       0
 11196 ;;      Temps:          1       0       0       0       0       0       0       0
 11197 ;;      Totals:         4       0       0       0       0       0       0       0
 11198 ;;Total ram usage:        4 bytes
 11199 ;; Hardware stack levels used:    1
 11200 ;; Hardware stack levels required when called:    5
 11201 ;; This function calls:
 11202 ;;		___bmul
 11203 ;; This function is called by:
 11204 ;;		_Button_Reading_Update_Helper
 11205 ;;		_Button_Baseline_Initialize
 11206 ;; This function uses a non-reentrant model
 11207 ;;
 11208                           
 11209                           
 11210                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 11211  0801                     _MTOUCH_Sensor_RawSample_Get:	
 11212                           
 11213                           ;incstack = 0
 11214                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11215                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 11216  0801  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 11217                           
 11218                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          793: {;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     if (name < 3u)
 11219  0802  3003               	movlw	3
 11220  0803  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 11221  0804  1803               	skipnc
 11222  0805  2816               	goto	l5849
 11223                           
 11224                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 795:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 796:         return mtouch_sensor[name].rawSample;
 11225  0806  3009               	movlw	9
 11226  0807  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 11227  0808  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 11228  0809  00F1               	movwf	___bmul@multiplicand
 11229  080A  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 11230  080B  3196  266D         	fcall	___bmul
 11231  080D  3E56               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 11232  080E  0086               	movwf	6
 11233  080F  3001               	movlw	1	; select bank2/3
 11234  0810  0087               	movwf	7
 11235  0811  3F40               	moviw [0]fsr1
 11236  0812  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 11237  0813  3F41               	moviw [1]fsr1
 11238  0814  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 11239  0815  0008               	return
 11240  0816                     l5849:	
 11241                           
 11242                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 799:         return (mtouch_sensor_sample_t
      +                          )0;
 11243  0816  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 11244  0817  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 11245  0818  0008               	return
 11246  0819                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 11247                           
 11248                           	psect	text70
 11249  166D                     __ptext70:	
 11250 ;; *************** function ___bmul *****************
 11251 ;; Defined at:
 11252 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 11253 ;; Parameters:    Size  Location     Type
 11254 ;;  multiplier      1    wreg     unsigned char 
 11255 ;;  multiplicand    1    1[COMMON] unsigned char 
 11256 ;; Auto vars:     Size  Location     Type
 11257 ;;  multiplier      1    4[COMMON] unsigned char 
 11258 ;;  product         1    3[COMMON] unsigned char 
 11259 ;; Return value:  Size  Location     Type
 11260 ;;                  1    wreg      unsigned char 
 11261 ;; Registers used:
 11262 ;;		wreg, status,2, status,0
 11263 ;; Tracked objects:
 11264 ;;		On entry : 0/0
 11265 ;;		On exit  : 0/0
 11266 ;;		Unchanged: 0/0
 11267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11268 ;;      Params:         1       0       0       0       0       0       0       0
 11269 ;;      Locals:         2       0       0       0       0       0       0       0
 11270 ;;      Temps:          1       0       0       0       0       0       0       0
 11271 ;;      Totals:         4       0       0       0       0       0       0       0
 11272 ;;Total ram usage:        4 bytes
 11273 ;; Hardware stack levels used:    1
 11274 ;; Hardware stack levels required when called:    4
 11275 ;; This function calls:
 11276 ;;		Nothing
 11277 ;; This function is called by:
 11278 ;;		_MTOUCH_Sensor_Initialize
 11279 ;;		_MTOUCH_Sensor_RawSample_Get
 11280 ;;		_MTOUCH_Sensor_Enable
 11281 ;;		_MTOUCH_Sensor_Calibrate
 11282 ;;		_MTOUCH_Sensor_isCalibrated
 11283 ;;		_MTOUCH_Sensor_wasSampled
 11284 ;;		_MTOUCH_Sensor_isAnySensorActive
 11285 ;;		_MTOUCH_Sensor_Disable
 11286 ;;		_MTOUCH_Sensor_isEnabled
 11287 ;;		_MTOUCH_Sensor_isActive
 11288 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 11289 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 11290 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 11291 ;;		_MTOUCH_Sensor_Oversampling_Get
 11292 ;;		_MTOUCH_Sensor_Oversampling_Set
 11293 ;; This function uses a non-reentrant model
 11294 ;;
 11295                           
 11296                           
 11297                           ;psect for function ___bmul
 11298  166D                     ___bmul:	
 11299                           
 11300                           ;incstack = 0
 11301                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11302                           ;___bmul@multiplier stored from wreg
 11303  166D  00F4               	movwf	___bmul@multiplier
 11304  166E  01F3               	clrf	___bmul@product
 11305  166F                     l5623:	
 11306  166F  1C74               	btfss	___bmul@multiplier,0
 11307  1670  2E75               	goto	l5627
 11308  1671  0871               	movf	___bmul@multiplicand,w
 11309  1672  00F2               	movwf	??___bmul
 11310  1673  0872               	movf	??___bmul,w
 11311  1674  07F3               	addwf	___bmul@product,f
 11312  1675                     l5627:	
 11313  1675  1003               	clrc
 11314  1676  0DF1               	rlf	___bmul@multiplicand,f
 11315  1677  1003               	clrc
 11316  1678  0CF4               	rrf	___bmul@multiplier,f
 11317  1679  0874               	movf	___bmul@multiplier,w
 11318  167A  1D03               	btfss	3,2
 11319  167B  2E6F               	goto	l5623
 11320  167C  0873               	movf	___bmul@product,w
 11321  167D  0008               	return
 11322  167E                     __end_of___bmul:	
 11323                           
 11324                           	psect	text71
 11325  0EEA                     __ptext71:	
 11326 ;; *************** function _Button_Deviation_Update *****************
 11327 ;; Defined at:
 11328 ;;		line 399 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11329 ;; Parameters:    Size  Location     Type
 11330 ;;  button          1    wreg     PTR struct .
 11331 ;;		 -> mtouch_button(48), 
 11332 ;; Auto vars:     Size  Location     Type
 11333 ;;  button          1    0[BANK0 ] PTR struct .
 11334 ;;		 -> mtouch_button(48), 
 11335 ;;  deviation       4    1[BANK0 ] long 
 11336 ;; Return value:  Size  Location     Type
 11337 ;;                  1    wreg      void 
 11338 ;; Registers used:
 11339 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : 0/0
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11345 ;;      Params:         0       0       0       0       0       0       0       0
 11346 ;;      Locals:         0       5       0       0       0       0       0       0
 11347 ;;      Temps:         10       0       0       0       0       0       0       0
 11348 ;;      Totals:        10       5       0       0       0       0       0       0
 11349 ;;Total ram usage:       15 bytes
 11350 ;; Hardware stack levels used:    1
 11351 ;; Hardware stack levels required when called:    4
 11352 ;; This function calls:
 11353 ;;		Nothing
 11354 ;; This function is called by:
 11355 ;;		_Button_Service
 11356 ;; This function uses a non-reentrant model
 11357 ;;
 11358                           
 11359                           
 11360                           ;psect for function _Button_Deviation_Update
 11361  0EEA                     _Button_Deviation_Update:	
 11362                           
 11363                           ;incstack = 0
 11364                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 11365                           ;Button_Deviation_Update@button stored from wreg
 11366  0EEA  0020               	movlb	0	; select bank0
 11367  0EEB  00A0               	movwf	Button_Deviation_Update@button
 11368                           
 11369                           ;mcc_generated_files/mtouch/mtouch_button.c: 399: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 400: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 401:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 403:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 11370  0EEC  0820               	movf	Button_Deviation_Update@button,w
 11371  0EED  3E05               	addlw	5
 11372  0EEE  0086               	movwf	6
 11373  0EEF  3001               	movlw	1	; select bank2/3
 11374  0EF0  0087               	movwf	7
 11375  0EF1  3F40               	moviw [0]fsr1
 11376  0EF2  00F1               	movwf	??_Button_Deviation_Update
 11377  0EF3  3F41               	moviw [1]fsr1
 11378  0EF4  00F2               	movwf	??_Button_Deviation_Update+1
 11379  0EF5  3F42               	moviw [2]fsr1
 11380  0EF6  00F3               	movwf	??_Button_Deviation_Update+2
 11381  0EF7  3F43               	moviw [3]fsr1
 11382  0EF8  00F4               	movwf	??_Button_Deviation_Update+3
 11383  0EF9  3004               	movlw	4
 11384  0EFA                     u3265:	
 11385  0EFA  36F4               	lsrf	??_Button_Deviation_Update+3,f
 11386  0EFB  0CF3               	rrf	??_Button_Deviation_Update+2,f
 11387  0EFC  0CF2               	rrf	??_Button_Deviation_Update+1,f
 11388  0EFD  0CF1               	rrf	??_Button_Deviation_Update,f
 11389  0EFE  0B89               	decfsz	9,f
 11390  0EFF  2EFA               	goto	u3265
 11391  0F00  0820               	movf	Button_Deviation_Update@button,w
 11392  0F01  3E03               	addlw	3
 11393  0F02  0086               	movwf	6
 11394  0F03  3001               	movlw	1	; select bank2/3
 11395  0F04  0087               	movwf	7
 11396  0F05  3F40               	moviw [0]fsr1
 11397  0F06  00F5               	movwf	??_Button_Deviation_Update+4
 11398  0F07  3F41               	moviw [1]fsr1
 11399  0F08  00F6               	movwf	??_Button_Deviation_Update+5
 11400  0F09  0875               	movf	??_Button_Deviation_Update+4,w
 11401  0F0A  00F7               	movwf	??_Button_Deviation_Update+6
 11402  0F0B  0876               	movf	??_Button_Deviation_Update+5,w
 11403  0F0C  00F8               	movwf	??_Button_Deviation_Update+7
 11404  0F0D  01F9               	clrf	??_Button_Deviation_Update+8
 11405  0F0E  01FA               	clrf	??_Button_Deviation_Update+9
 11406  0F0F  0871               	movf	??_Button_Deviation_Update,w
 11407  0F10  02F7               	subwf	??_Button_Deviation_Update+6,f
 11408  0F11  0872               	movf	??_Button_Deviation_Update+1,w
 11409  0F12  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 11410  0F13  0873               	movf	??_Button_Deviation_Update+2,w
 11411  0F14  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 11412  0F15  0874               	movf	??_Button_Deviation_Update+3,w
 11413  0F16  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 11414  0F17  087A               	movf	??_Button_Deviation_Update+9,w
 11415  0F18  00A4               	movwf	Button_Deviation_Update@deviation+3
 11416  0F19  0879               	movf	??_Button_Deviation_Update+8,w
 11417  0F1A  00A3               	movwf	Button_Deviation_Update@deviation+2
 11418  0F1B  0878               	movf	??_Button_Deviation_Update+7,w
 11419  0F1C  00A2               	movwf	Button_Deviation_Update@deviation+1
 11420  0F1D  0877               	movf	??_Button_Deviation_Update+6,w
 11421  0F1E  00A1               	movwf	Button_Deviation_Update@deviation
 11422                           
 11423                           ;mcc_generated_files/mtouch/mtouch_button.c: 406:     deviation = deviation >> (button->
      +                          scaling);
 11424  0F1F  0821               	movf	Button_Deviation_Update@deviation,w
 11425  0F20  00F1               	movwf	??_Button_Deviation_Update
 11426  0F21  0822               	movf	Button_Deviation_Update@deviation+1,w
 11427  0F22  00F2               	movwf	??_Button_Deviation_Update+1
 11428  0F23  0823               	movf	Button_Deviation_Update@deviation+2,w
 11429  0F24  00F3               	movwf	??_Button_Deviation_Update+2
 11430  0F25  0824               	movf	Button_Deviation_Update@deviation+3,w
 11431  0F26  00F4               	movwf	??_Button_Deviation_Update+3
 11432  0F27  0820               	movf	Button_Deviation_Update@button,w
 11433  0F28  3E0F               	addlw	15
 11434  0F29  0086               	movwf	6
 11435  0F2A  3001               	movlw	1	; select bank2/3
 11436  0F2B  0087               	movwf	7
 11437  0F2C  0A01               	incf	1,w
 11438  0F2D  2F32               	goto	u3270
 11439  0F2E                     u3275:	
 11440  0F2E  37F4               	asrf	??_Button_Deviation_Update+3,f
 11441  0F2F  0CF3               	rrf	??_Button_Deviation_Update+2,f
 11442  0F30  0CF2               	rrf	??_Button_Deviation_Update+1,f
 11443  0F31  0CF1               	rrf	??_Button_Deviation_Update,f
 11444  0F32                     u3270:	
 11445  0F32  0B89               	decfsz	9,f
 11446  0F33  2F2E               	goto	u3275
 11447  0F34  0874               	movf	??_Button_Deviation_Update+3,w
 11448  0F35  00A4               	movwf	Button_Deviation_Update@deviation+3
 11449  0F36  0873               	movf	??_Button_Deviation_Update+2,w
 11450  0F37  00A3               	movwf	Button_Deviation_Update@deviation+2
 11451  0F38  0872               	movf	??_Button_Deviation_Update+1,w
 11452  0F39  00A2               	movwf	Button_Deviation_Update@deviation+1
 11453  0F3A  0871               	movf	??_Button_Deviation_Update,w
 11454  0F3B  00A1               	movwf	Button_Deviation_Update@deviation
 11455                           
 11456                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:     if (deviation > ((0x7f)))
 11457  0F3C  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 11458  0F3D  2F53               	goto	l4517
 11459  0F3E  0824               	movf	Button_Deviation_Update@deviation+3,w
 11460  0F3F  1D03               	btfss	3,2
 11461  0F40  2F4B               	goto	l4515
 11462  0F41  0823               	movf	Button_Deviation_Update@deviation+2,w
 11463  0F42  1D03               	btfss	3,2
 11464  0F43  2F4B               	goto	l4515
 11465  0F44  0822               	movf	Button_Deviation_Update@deviation+1,w
 11466  0F45  1D03               	btfss	3,2
 11467  0F46  2F4B               	goto	l4515
 11468  0F47  3080               	movlw	128
 11469  0F48  0221               	subwf	Button_Deviation_Update@deviation,w
 11470  0F49  1C03               	btfss	3,0
 11471  0F4A  2F53               	goto	l4517
 11472  0F4B                     l4515:	
 11473                           
 11474                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 411:         deviation = ((0x7f));
 11475  0F4B  3000               	movlw	0
 11476  0F4C  00A4               	movwf	Button_Deviation_Update@deviation+3
 11477  0F4D  3000               	movlw	0
 11478  0F4E  00A3               	movwf	Button_Deviation_Update@deviation+2
 11479  0F4F  3000               	movlw	0
 11480  0F50  00A2               	movwf	Button_Deviation_Update@deviation+1
 11481  0F51  307F               	movlw	127
 11482  0F52  00A1               	movwf	Button_Deviation_Update@deviation
 11483  0F53                     l4517:	
 11484                           
 11485                           ;mcc_generated_files/mtouch/mtouch_button.c: 413:     if (deviation < ((-1-0x7f)))
 11486  0F53  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 11487  0F54  2F67               	goto	l4521
 11488  0F55  3080               	movlw	128
 11489  0F56  0221               	subwf	Button_Deviation_Update@deviation,w
 11490  0F57  30FF               	movlw	255
 11491  0F58  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 11492  0F59  30FF               	movlw	255
 11493  0F5A  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 11494  0F5B  30FF               	movlw	255
 11495  0F5C  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 11496  0F5D  1803               	btfsc	3,0
 11497  0F5E  2F67               	goto	l4521
 11498                           
 11499                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 415:         deviation = ((-1-0x7f));
 11500  0F5F  30FF               	movlw	255
 11501  0F60  00A4               	movwf	Button_Deviation_Update@deviation+3
 11502  0F61  30FF               	movlw	255
 11503  0F62  00A3               	movwf	Button_Deviation_Update@deviation+2
 11504  0F63  30FF               	movlw	255
 11505  0F64  00A2               	movwf	Button_Deviation_Update@deviation+1
 11506  0F65  3080               	movlw	128
 11507  0F66  00A1               	movwf	Button_Deviation_Update@deviation
 11508  0F67                     l4521:	
 11509                           
 11510                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 11511  0F67  0821               	movf	Button_Deviation_Update@deviation,w
 11512  0F68  00F1               	movwf	??_Button_Deviation_Update
 11513  0F69  0820               	movf	Button_Deviation_Update@button,w
 11514  0F6A  3E09               	addlw	9
 11515  0F6B  0086               	movwf	6
 11516  0F6C  3001               	movlw	1	; select bank2/3
 11517  0F6D  0087               	movwf	7
 11518  0F6E  0871               	movf	??_Button_Deviation_Update,w
 11519  0F6F  0081               	movwf	1
 11520  0F70  0008               	return
 11521  0F71                     __end_of_Button_Deviation_Update:	
 11522                           
 11523                           	psect	text72
 11524  155D                     __ptext72:	
 11525 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 11526 ;; Defined at:
 11527 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11528 ;; Parameters:    Size  Location     Type
 11529 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 11530 ;;		 -> myButtonPressedCallback(1), 
 11531 ;; Auto vars:     Size  Location     Type
 11532 ;;		None
 11533 ;; Return value:  Size  Location     Type
 11534 ;;                  1    wreg      void 
 11535 ;; Registers used:
 11536 ;;		wreg
 11537 ;; Tracked objects:
 11538 ;;		On entry : 0/0
 11539 ;;		On exit  : 0/0
 11540 ;;		Unchanged: 0/0
 11541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11542 ;;      Params:         2       0       0       0       0       0       0       0
 11543 ;;      Locals:         0       0       0       0       0       0       0       0
 11544 ;;      Temps:          0       0       0       0       0       0       0       0
 11545 ;;      Totals:         2       0       0       0       0       0       0       0
 11546 ;;Total ram usage:        2 bytes
 11547 ;; Hardware stack levels used:    1
 11548 ;; Hardware stack levels required when called:    4
 11549 ;; This function calls:
 11550 ;;		Nothing
 11551 ;; This function is called by:
 11552 ;;		_main
 11553 ;; This function uses a non-reentrant model
 11554 ;;
 11555                           
 11556                           
 11557                           ;psect for function _MTOUCH_Button_SetPressedCallback
 11558  155D                     _MTOUCH_Button_SetPressedCallback:	
 11559                           
 11560                           ;mcc_generated_files/mtouch/mtouch_button.c: 528: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          529: {;mcc_generated_files/mtouch/mtouch_button.c: 530:     callback_pressed = callback;
 11561                           
 11562                           ;incstack = 0
 11563                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 11564  155D  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 11565  155E  0021               	movlb	1	; select bank1
 11566  155F  00D2               	movwf	(_callback_pressed+1)^(0+128)
 11567  1560  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 11568  1561  00D1               	movwf	_callback_pressed^(0+128)
 11569  1562  0008               	return
 11570  1563                     __end_of_MTOUCH_Button_SetPressedCallback:	
 11571                           
 11572                           	psect	text73
 11573  1557                     __ptext73:	
 11574 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 11575 ;; Defined at:
 11576 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11577 ;; Parameters:    Size  Location     Type
 11578 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 11579 ;;		 -> myButtonReleasedCallback(1), 
 11580 ;; Auto vars:     Size  Location     Type
 11581 ;;		None
 11582 ;; Return value:  Size  Location     Type
 11583 ;;                  1    wreg      void 
 11584 ;; Registers used:
 11585 ;;		wreg
 11586 ;; Tracked objects:
 11587 ;;		On entry : 0/0
 11588 ;;		On exit  : 0/0
 11589 ;;		Unchanged: 0/0
 11590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11591 ;;      Params:         2       0       0       0       0       0       0       0
 11592 ;;      Locals:         0       0       0       0       0       0       0       0
 11593 ;;      Temps:          0       0       0       0       0       0       0       0
 11594 ;;      Totals:         2       0       0       0       0       0       0       0
 11595 ;;Total ram usage:        2 bytes
 11596 ;; Hardware stack levels used:    1
 11597 ;; Hardware stack levels required when called:    4
 11598 ;; This function calls:
 11599 ;;		Nothing
 11600 ;; This function is called by:
 11601 ;;		_main
 11602 ;; This function uses a non-reentrant model
 11603 ;;
 11604                           
 11605                           
 11606                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 11607  1557                     _MTOUCH_Button_SetNotPressedCallback:	
 11608                           
 11609                           ;mcc_generated_files/mtouch/mtouch_button.c: 532: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 533: {;mcc_generated_files/mtouch/mtouch_button.c: 534:     callback_notPressed = cal
      +                          lback;
 11610                           
 11611                           ;incstack = 0
 11612                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 11613  1557  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 11614  1558  0021               	movlb	1	; select bank1
 11615  1559  00D0               	movwf	(_callback_notPressed+1)^(0+128)
 11616  155A  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 11617  155B  00CF               	movwf	_callback_notPressed^(0+128)
 11618  155C  0008               	return
 11619  155D                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 11620                           
 11621                           	psect	text74
 11622  1525                     __ptext74:	
 11623 ;; *************** function _EUSART_is_rx_ready *****************
 11624 ;; Defined at:
 11625 ;;		line 134 in file "mcc_generated_files/eusart.c"
 11626 ;; Parameters:    Size  Location     Type
 11627 ;;		None
 11628 ;; Auto vars:     Size  Location     Type
 11629 ;;		None
 11630 ;; Return value:  Size  Location     Type
 11631 ;;                  1    wreg      unsigned char 
 11632 ;; Registers used:
 11633 ;;		wreg
 11634 ;; Tracked objects:
 11635 ;;		On entry : 0/0
 11636 ;;		On exit  : 0/0
 11637 ;;		Unchanged: 0/0
 11638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11639 ;;      Params:         0       0       0       0       0       0       0       0
 11640 ;;      Locals:         0       0       0       0       0       0       0       0
 11641 ;;      Temps:          0       0       0       0       0       0       0       0
 11642 ;;      Totals:         0       0       0       0       0       0       0       0
 11643 ;;Total ram usage:        0 bytes
 11644 ;; Hardware stack levels used:    1
 11645 ;; Hardware stack levels required when called:    4
 11646 ;; This function calls:
 11647 ;;		Nothing
 11648 ;; This function is called by:
 11649 ;;		_main
 11650 ;; This function uses a non-reentrant model
 11651 ;;
 11652                           
 11653                           
 11654                           ;psect for function _EUSART_is_rx_ready
 11655  1525                     _EUSART_is_rx_ready:	
 11656                           
 11657                           ;mcc_generated_files/eusart.c: 136:     return eusartRxCount;
 11658                           
 11659                           ;incstack = 0
 11660                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 11661  1525  0020               	movlb	0	; select bank0
 11662  1526  0867               	movf	_eusartRxCount,w	;volatile
 11663  1527  0008               	return
 11664  1528                     __end_of_EUSART_is_rx_ready:	
 11665                           
 11666                           	psect	text75
 11667  093D                     __ptext75:	
 11668 ;; *************** function _EUSART_Read *****************
 11669 ;; Defined at:
 11670 ;;		line 148 in file "mcc_generated_files/eusart.c"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;		None
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;  readValue       1    2[COMMON] unsigned char 
 11675 ;; Return value:  Size  Location     Type
 11676 ;;                  1    wreg      unsigned char 
 11677 ;; Registers used:
 11678 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11684 ;;      Params:         0       0       0       0       0       0       0       0
 11685 ;;      Locals:         1       0       0       0       0       0       0       0
 11686 ;;      Temps:          1       0       0       0       0       0       0       0
 11687 ;;      Totals:         2       0       0       0       0       0       0       0
 11688 ;;Total ram usage:        2 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    4
 11691 ;; This function calls:
 11692 ;;		Nothing
 11693 ;; This function is called by:
 11694 ;;		_main
 11695 ;;		_getch
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           
 11700                           ;psect for function _EUSART_Read
 11701  093D                     _EUSART_Read:	
 11702  093D                     l4857:	
 11703                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 11704                           
 11705                           ;incstack = 0
 11706                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 11707                           
 11708                           
 11709                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 11710  093D  0020               	movlb	0	; select bank0
 11711  093E  0867               	movf	_eusartRxCount,w	;volatile
 11712  093F  1D03               	btfss	3,2
 11713  0940  2943               	goto	l4859
 11714  0941  0064               	clrwdt	;# 
 11715  0942  293D               	goto	l4857
 11716  0943                     l4859:	
 11717                           
 11718                           ;mcc_generated_files/eusart.c: 157:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 11719  0943  0868               	movf	_eusartRxTail,w	;volatile
 11720  0944  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 11721  0945  0086               	movwf	6
 11722  0946  0187               	clrf	7
 11723  0947  0801               	movf	1,w
 11724  0948  00F1               	movwf	??_EUSART_Read
 11725  0949  0871               	movf	??_EUSART_Read,w
 11726  094A  0021               	movlb	1	; select bank1
 11727  094B  00C8               	movwf	_eusartRxLastError^(0+128)	;volatile
 11728                           
 11729                           ;mcc_generated_files/eusart.c: 159:     readValue = eusartRxBuffer[eusartRxTail++];
 11730  094C  0020               	movlb	0	; select bank0
 11731  094D  0868               	movf	_eusartRxTail,w
 11732  094E  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 11733  094F  0086               	movwf	6
 11734  0950  0187               	clrf	7
 11735  0951  0801               	movf	1,w
 11736  0952  00F1               	movwf	??_EUSART_Read
 11737  0953  0871               	movf	??_EUSART_Read,w
 11738  0954  00F2               	movwf	EUSART_Read@readValue
 11739  0955  3001               	movlw	1
 11740  0956  00F1               	movwf	??_EUSART_Read
 11741  0957  0871               	movf	??_EUSART_Read,w
 11742  0958  07E8               	addwf	_eusartRxTail,f	;volatile
 11743                           
 11744                           ;mcc_generated_files/eusart.c: 160:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 11745  0959  3008               	movlw	8
 11746  095A  0268               	subwf	_eusartRxTail,w	;volatile
 11747  095B  1803               	btfsc	3,0
 11748                           
 11749                           ;mcc_generated_files/eusart.c: 161:     {;mcc_generated_files/eusart.c: 162:         eus
      +                          artRxTail = 0;
 11750  095C  01E8               	clrf	_eusartRxTail	;volatile
 11751                           
 11752                           ;mcc_generated_files/eusart.c: 164:     PIE1bits.RCIE = 0;
 11753  095D  0021               	movlb	1	; select bank1
 11754  095E  1291               	bcf	17,5	;volatile
 11755                           
 11756                           ;mcc_generated_files/eusart.c: 165:     eusartRxCount--;
 11757  095F  3001               	movlw	1
 11758  0960  0020               	movlb	0	; select bank0
 11759  0961  02E7               	subwf	_eusartRxCount,f	;volatile
 11760                           
 11761                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 1;
 11762  0962  0021               	movlb	1	; select bank1
 11763  0963  1691               	bsf	17,5	;volatile
 11764                           
 11765                           ;mcc_generated_files/eusart.c: 168:     return readValue;
 11766  0964  0872               	movf	EUSART_Read@readValue,w
 11767  0965  0008               	return
 11768  0966                     __end_of_EUSART_Read:	
 11769                           
 11770                           	psect	text76
 11771  05E4                     __ptext76:	
 11772 ;; *************** function _DATA_PROCESS *****************
 11773 ;; Defined at:
 11774 ;;		line 204 in file "main.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;  x               1    wreg     unsigned char 
 11777 ;; Auto vars:     Size  Location     Type
 11778 ;;  x               1   50[BANK0 ] unsigned char 
 11779 ;; Return value:  Size  Location     Type
 11780 ;;                  1    wreg      void 
 11781 ;; Registers used:
 11782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11783 ;; Tracked objects:
 11784 ;;		On entry : 0/0
 11785 ;;		On exit  : 0/0
 11786 ;;		Unchanged: 0/0
 11787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11788 ;;      Params:         0       0       0       0       0       0       0       0
 11789 ;;      Locals:         0       1       0       0       0       0       0       0
 11790 ;;      Temps:          0       2       0       0       0       0       0       0
 11791 ;;      Totals:         0       3       0       0       0       0       0       0
 11792 ;;Total ram usage:        3 bytes
 11793 ;; Hardware stack levels used:    1
 11794 ;; Hardware stack levels required when called:   14
 11795 ;; This function calls:
 11796 ;;		_LED_PROCESS
 11797 ;;		_RELAY_PROCESS
 11798 ;;		_update_state
 11799 ;; This function is called by:
 11800 ;;		_main
 11801 ;; This function uses a non-reentrant model
 11802 ;;
 11803                           
 11804                           
 11805                           ;psect for function _DATA_PROCESS
 11806  05E4                     _DATA_PROCESS:	
 11807                           
 11808                           ;incstack = 0
 11809                           ; Regs used in _DATA_PROCESS: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11810                           ;DATA_PROCESS@x stored from wreg
 11811  05E4  0020               	movlb	0	; select bank0
 11812  05E5  00D2               	movwf	DATA_PROCESS@x
 11813                           
 11814                           ;main.c: 204: void DATA_PROCESS(char x);main.c: 205: {;main.c: 206:     switch(x)
 11815  05E6  2E5A               	goto	l6335
 11816  05E7                     l6281:	
 11817                           
 11818                           ;main.c: 209:         {;main.c: 210:             LED_PROCESS(0);
 11819  05E7  3000               	movlw	0
 11820  05E8  318D  25F8  3185   	fcall	_LED_PROCESS
 11821                           
 11822                           ;main.c: 211:             RELAY_PROCESS(0);
 11823  05EB  3000               	movlw	0
 11824  05EC  318B  238E         	fcall	_RELAY_PROCESS
 11825                           
 11826                           ;main.c: 212:             check_request = 0;
 11827  05EE  0020               	movlb	0	; select bank0
 11828  05EF  01E4               	clrf	_check_request
 11829                           
 11830                           ;main.c: 213:             last_touch_status.full_status = 0;
 11831  05F0  01E1               	clrf	_last_touch_status
 11832  05F1  01E2               	clrf	_last_touch_status+1
 11833                           
 11834                           ;main.c: 214:             break;
 11835  05F2  0008               	return
 11836  05F3                     l6287:	
 11837                           
 11838                           ;main.c: 217:         {;main.c: 218:             LED_PROCESS(1);
 11839  05F3  3001               	movlw	1
 11840  05F4  318D  25F8  3185   	fcall	_LED_PROCESS
 11841                           
 11842                           ;main.c: 219:             RELAY_PROCESS(1);
 11843  05F7  3001               	movlw	1
 11844  05F8  318B  238E         	fcall	_RELAY_PROCESS
 11845                           
 11846                           ;main.c: 220:             check_request = 0;
 11847  05FA  0020               	movlb	0	; select bank0
 11848  05FB  01E4               	clrf	_check_request
 11849                           
 11850                           ;main.c: 221:             last_touch_status.full_status = 1;
 11851  05FC  3001               	movlw	1
 11852  05FD  00E1               	movwf	_last_touch_status
 11853  05FE  3000               	movlw	0
 11854  05FF  00E2               	movwf	_last_touch_status+1
 11855                           
 11856                           ;main.c: 222:             break;
 11857  0600  0008               	return
 11858  0601                     l6293:	
 11859                           
 11860                           ;main.c: 225:         {;main.c: 226:             LED_PROCESS(2);
 11861  0601  3002               	movlw	2
 11862  0602  318D  25F8  3185   	fcall	_LED_PROCESS
 11863                           
 11864                           ;main.c: 227:             RELAY_PROCESS(2);
 11865  0605  3002               	movlw	2
 11866  0606  318B  238E         	fcall	_RELAY_PROCESS
 11867                           
 11868                           ;main.c: 228:             check_request = 0;
 11869  0608  0020               	movlb	0	; select bank0
 11870  0609  01E4               	clrf	_check_request
 11871                           
 11872                           ;main.c: 229:             last_touch_status.full_status = 2;
 11873  060A  3002               	movlw	2
 11874  060B  00E1               	movwf	_last_touch_status
 11875  060C  3000               	movlw	0
 11876  060D  00E2               	movwf	_last_touch_status+1
 11877                           
 11878                           ;main.c: 230:             break;
 11879  060E  0008               	return
 11880  060F                     l6299:	
 11881                           
 11882                           ;main.c: 233:         {;main.c: 234:             LED_PROCESS(3);
 11883  060F  3003               	movlw	3
 11884  0610  318D  25F8  3185   	fcall	_LED_PROCESS
 11885                           
 11886                           ;main.c: 235:             RELAY_PROCESS(3);
 11887  0613  3003               	movlw	3
 11888  0614  318B  238E         	fcall	_RELAY_PROCESS
 11889                           
 11890                           ;main.c: 236:             check_request = 0;
 11891  0616  0020               	movlb	0	; select bank0
 11892  0617  01E4               	clrf	_check_request
 11893                           
 11894                           ;main.c: 237:             last_touch_status.full_status = 3;
 11895  0618  3003               	movlw	3
 11896  0619  00E1               	movwf	_last_touch_status
 11897  061A  3000               	movlw	0
 11898  061B  00E2               	movwf	_last_touch_status+1
 11899                           
 11900                           ;main.c: 238:             break;
 11901  061C  0008               	return
 11902  061D                     l6305:	
 11903                           
 11904                           ;main.c: 241:         {;main.c: 242:             LED_PROCESS(4);
 11905  061D  3004               	movlw	4
 11906  061E  318D  25F8  3185   	fcall	_LED_PROCESS
 11907                           
 11908                           ;main.c: 243:             RELAY_PROCESS(4);
 11909  0621  3004               	movlw	4
 11910  0622  318B  238E         	fcall	_RELAY_PROCESS
 11911                           
 11912                           ;main.c: 244:             check_request = 0;
 11913  0624  0020               	movlb	0	; select bank0
 11914  0625  01E4               	clrf	_check_request
 11915                           
 11916                           ;main.c: 245:             last_touch_status.full_status = 4;
 11917  0626  3004               	movlw	4
 11918  0627  00E1               	movwf	_last_touch_status
 11919  0628  3000               	movlw	0
 11920  0629  00E2               	movwf	_last_touch_status+1
 11921                           
 11922                           ;main.c: 246:             break;
 11923  062A  0008               	return
 11924  062B                     l6311:	
 11925                           
 11926                           ;main.c: 249:         {;main.c: 250:             LED_PROCESS(5);
 11927  062B  3005               	movlw	5
 11928  062C  318D  25F8  3185   	fcall	_LED_PROCESS
 11929                           
 11930                           ;main.c: 251:             RELAY_PROCESS(5);
 11931  062F  3005               	movlw	5
 11932  0630  318B  238E         	fcall	_RELAY_PROCESS
 11933                           
 11934                           ;main.c: 252:             check_request = 0;
 11935  0632  0020               	movlb	0	; select bank0
 11936  0633  01E4               	clrf	_check_request
 11937                           
 11938                           ;main.c: 253:             last_touch_status.full_status = 5;
 11939  0634  3005               	movlw	5
 11940  0635  00E1               	movwf	_last_touch_status
 11941  0636  3000               	movlw	0
 11942  0637  00E2               	movwf	_last_touch_status+1
 11943                           
 11944                           ;main.c: 254:             break;
 11945  0638  0008               	return
 11946  0639                     l6317:	
 11947                           
 11948                           ;main.c: 257:         {;main.c: 258:             LED_PROCESS(6);
 11949  0639  3006               	movlw	6
 11950  063A  318D  25F8  3185   	fcall	_LED_PROCESS
 11951                           
 11952                           ;main.c: 259:             RELAY_PROCESS(6);
 11953  063D  3006               	movlw	6
 11954  063E  318B  238E         	fcall	_RELAY_PROCESS
 11955                           
 11956                           ;main.c: 260:             check_request = 0;
 11957  0640  0020               	movlb	0	; select bank0
 11958  0641  01E4               	clrf	_check_request
 11959                           
 11960                           ;main.c: 261:             last_touch_status.full_status = 6;
 11961  0642  3006               	movlw	6
 11962  0643  00E1               	movwf	_last_touch_status
 11963  0644  3000               	movlw	0
 11964  0645  00E2               	movwf	_last_touch_status+1
 11965                           
 11966                           ;main.c: 262:             break;
 11967  0646  0008               	return
 11968  0647                     l6323:	
 11969                           
 11970                           ;main.c: 265:         {;main.c: 266:             LED_PROCESS(7);
 11971  0647  3007               	movlw	7
 11972  0648  318D  25F8  3185   	fcall	_LED_PROCESS
 11973                           
 11974                           ;main.c: 267:             RELAY_PROCESS(7);
 11975  064B  3007               	movlw	7
 11976  064C  318B  238E         	fcall	_RELAY_PROCESS
 11977                           
 11978                           ;main.c: 268:             check_request = 0;
 11979  064E  0020               	movlb	0	; select bank0
 11980  064F  01E4               	clrf	_check_request
 11981                           
 11982                           ;main.c: 269:             last_touch_status.full_status = 7;
 11983  0650  3007               	movlw	7
 11984  0651  00E1               	movwf	_last_touch_status
 11985  0652  3000               	movlw	0
 11986  0653  00E2               	movwf	_last_touch_status+1
 11987                           
 11988                           ;main.c: 270:             break;
 11989  0654  0008               	return
 11990  0655                     l6329:	
 11991                           
 11992                           ;main.c: 273:         {;main.c: 274:             update_state();
 11993  0655  318C  2478         	fcall	_update_state
 11994                           
 11995                           ;main.c: 275:             break;
 11996  0657  0008               	return
 11997  0658                     l6331:	
 11998                           
 11999                           ;main.c: 278:         {;main.c: 279:             check_request = 0;
 12000  0658  01E4               	clrf	_check_request
 12001                           
 12002                           ;main.c: 280:             break;
 12003  0659  0008               	return
 12004  065A                     l6335:	
 12005  065A  0852               	movf	DATA_PROCESS@x,w
 12006  065B  00D0               	movwf	??_DATA_PROCESS
 12007  065C  01D1               	clrf	??_DATA_PROCESS+1
 12008                           
 12009                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12010                           ; Switch size 1, requested type "simple"
 12011                           ; Number of cases is 1, Range of values is 0 to 0
 12012                           ; switch strategies available:
 12013                           ; Name         Instructions Cycles
 12014                           ; simple_byte            4     3 (average)
 12015                           ; direct_byte            8     6 (fixed)
 12016                           ; jumptable            260     6 (fixed)
 12017                           ;	Chosen strategy is simple_byte
 12018  065D  0851               	movf	??_DATA_PROCESS+1,w
 12019  065E  3A00               	xorlw	0	; case 0
 12020  065F  1903               	skipnz
 12021  0660  2E62               	goto	l6761
 12022  0661  2E58               	goto	l6331
 12023  0662                     l6761:	
 12024                           
 12025                           ; Switch size 1, requested type "simple"
 12026                           ; Number of cases is 9, Range of values is 48 to 85
 12027                           ; switch strategies available:
 12028                           ; Name         Instructions Cycles
 12029                           ; simple_byte           28    15 (average)
 12030                           ; direct_byte           85     9 (fixed)
 12031                           ; jumptable            263     9 (fixed)
 12032                           ;	Chosen strategy is simple_byte
 12033  0662  0850               	movf	??_DATA_PROCESS,w
 12034  0663  3A30               	xorlw	48	; case 48
 12035  0664  1903               	skipnz
 12036  0665  2DE7               	goto	l6281
 12037  0666  3A01               	xorlw	1	; case 49
 12038  0667  1903               	skipnz
 12039  0668  2DF3               	goto	l6287
 12040  0669  3A03               	xorlw	3	; case 50
 12041  066A  1903               	skipnz
 12042  066B  2E01               	goto	l6293
 12043  066C  3A01               	xorlw	1	; case 51
 12044  066D  1903               	skipnz
 12045  066E  2E0F               	goto	l6299
 12046  066F  3A07               	xorlw	7	; case 52
 12047  0670  1903               	skipnz
 12048  0671  2E1D               	goto	l6305
 12049  0672  3A01               	xorlw	1	; case 53
 12050  0673  1903               	skipnz
 12051  0674  2E2B               	goto	l6311
 12052  0675  3A03               	xorlw	3	; case 54
 12053  0676  1903               	skipnz
 12054  0677  2E39               	goto	l6317
 12055  0678  3A01               	xorlw	1	; case 55
 12056  0679  1903               	skipnz
 12057  067A  2E47               	goto	l6323
 12058  067B  3A62               	xorlw	98	; case 85
 12059  067C  1903               	skipnz
 12060  067D  2E55               	goto	l6329
 12061  067E  2E58               	goto	l6331
 12062  067F  0008               	return
 12063  0680                     __end_of_DATA_PROCESS:	
 12064                           
 12065                           	psect	text77
 12066  0C78                     __ptext77:	
 12067 ;; *************** function _update_state *****************
 12068 ;; Defined at:
 12069 ;;		line 190 in file "main.c"
 12070 ;; Parameters:    Size  Location     Type
 12071 ;;		None
 12072 ;; Auto vars:     Size  Location     Type
 12073 ;;		None
 12074 ;; Return value:  Size  Location     Type
 12075 ;;                  1    wreg      void 
 12076 ;; Registers used:
 12077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12078 ;; Tracked objects:
 12079 ;;		On entry : 0/0
 12080 ;;		On exit  : 0/0
 12081 ;;		Unchanged: 0/0
 12082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12083 ;;      Params:         0       0       0       0       0       0       0       0
 12084 ;;      Locals:         0       0       0       0       0       0       0       0
 12085 ;;      Temps:          0       0       0       0       0       0       0       0
 12086 ;;      Totals:         0       0       0       0       0       0       0       0
 12087 ;;Total ram usage:        0 bytes
 12088 ;; Hardware stack levels used:    1
 12089 ;; Hardware stack levels required when called:   13
 12090 ;; This function calls:
 12091 ;;		_printf
 12092 ;; This function is called by:
 12093 ;;		_myButtonReleasedCallback
 12094 ;;		_DATA_PROCESS
 12095 ;; This function uses a non-reentrant model
 12096 ;;
 12097                           
 12098                           
 12099                           ;psect for function _update_state
 12100  0C78                     _update_state:	
 12101                           
 12102                           ;main.c: 192:     switch(last_touch_status.full_status)
 12103                           
 12104                           ;incstack = 0
 12105 ;; hardware stack exceeded
 12106                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12107  0C78  2CB1               	goto	l5873
 12108  0C79                     l5855:	
 12109  0C79  300E               	movlw	low (STR_2| (0+32768))
 12110  0C7A  00C8               	movwf	printf@fmt
 12111  0C7B  3098               	movlw	high (STR_2| (0+32768))
 12112  0C7C  00C9               	movwf	printf@fmt+1
 12113  0C7D  3196  265C         	fcall	_printf
 12114  0C7F  0008               	return
 12115  0C80                     l5857:	
 12116  0C80  3013               	movlw	low (STR_3| (0+32768))
 12117  0C81  00C8               	movwf	printf@fmt
 12118  0C82  3098               	movlw	high (STR_3| (0+32768))
 12119  0C83  00C9               	movwf	printf@fmt+1
 12120  0C84  3196  265C         	fcall	_printf
 12121  0C86  0008               	return
 12122  0C87                     l5859:	
 12123  0C87  3018               	movlw	low (STR_4| (0+32768))
 12124  0C88  00C8               	movwf	printf@fmt
 12125  0C89  3098               	movlw	high (STR_4| (0+32768))
 12126  0C8A  00C9               	movwf	printf@fmt+1
 12127  0C8B  3196  265C         	fcall	_printf
 12128  0C8D  0008               	return
 12129  0C8E                     l5861:	
 12130  0C8E  301D               	movlw	low (STR_5| (0+32768))
 12131  0C8F  00C8               	movwf	printf@fmt
 12132  0C90  3098               	movlw	high (STR_5| (0+32768))
 12133  0C91  00C9               	movwf	printf@fmt+1
 12134  0C92  3196  265C         	fcall	_printf
 12135  0C94  0008               	return
 12136  0C95                     l5863:	
 12137  0C95  3022               	movlw	low (STR_6| (0+32768))
 12138  0C96  00C8               	movwf	printf@fmt
 12139  0C97  3098               	movlw	high (STR_6| (0+32768))
 12140  0C98  00C9               	movwf	printf@fmt+1
 12141  0C99  3196  265C         	fcall	_printf
 12142  0C9B  0008               	return
 12143  0C9C                     l5865:	
 12144  0C9C  3027               	movlw	low (STR_7| (0+32768))
 12145  0C9D  00C8               	movwf	printf@fmt
 12146  0C9E  3098               	movlw	high (STR_7| (0+32768))
 12147  0C9F  00C9               	movwf	printf@fmt+1
 12148  0CA0  3196  265C         	fcall	_printf
 12149  0CA2  0008               	return
 12150  0CA3                     l5867:	
 12151  0CA3  302C               	movlw	low (STR_8| (0+32768))
 12152  0CA4  00C8               	movwf	printf@fmt
 12153  0CA5  3098               	movlw	high (STR_8| (0+32768))
 12154  0CA6  00C9               	movwf	printf@fmt+1
 12155  0CA7  3196  265C         	fcall	_printf
 12156  0CA9  0008               	return
 12157  0CAA                     l5869:	
 12158  0CAA  3031               	movlw	low (STR_9| (0+32768))
 12159  0CAB  00C8               	movwf	printf@fmt
 12160  0CAC  3098               	movlw	high (STR_9| (0+32768))
 12161  0CAD  00C9               	movwf	printf@fmt+1
 12162  0CAE  3196  265C         	fcall	_printf
 12163  0CB0  0008               	return
 12164  0CB1                     l5873:	
 12165                           
 12166                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12167                           ; Switch size 1, requested type "simple"
 12168                           ; Number of cases is 1, Range of values is 0 to 0
 12169                           ; switch strategies available:
 12170                           ; Name         Instructions Cycles
 12171                           ; simple_byte            4     3 (average)
 12172                           ; direct_byte            8     6 (fixed)
 12173                           ; jumptable            260     6 (fixed)
 12174                           ;	Chosen strategy is simple_byte
 12175  0CB1  0020               	movlb	0	; select bank0
 12176  0CB2  0862               	movf	_last_touch_status+1,w
 12177  0CB3  3A00               	xorlw	0	; case 0
 12178  0CB4  1903               	skipnz
 12179  0CB5  2CB7               	goto	l6763
 12180  0CB6  2CD1               	goto	l1028
 12181  0CB7                     l6763:	
 12182                           
 12183                           ; Switch size 1, requested type "simple"
 12184                           ; Number of cases is 8, Range of values is 0 to 7
 12185                           ; switch strategies available:
 12186                           ; Name         Instructions Cycles
 12187                           ; direct_byte           22     6 (fixed)
 12188                           ; simple_byte           25    13 (average)
 12189                           ; jumptable            260     6 (fixed)
 12190                           ;	Chosen strategy is simple_byte
 12191  0CB7  0861               	movf	_last_touch_status,w
 12192  0CB8  3A00               	xorlw	0	; case 0
 12193  0CB9  1903               	skipnz
 12194  0CBA  2C79               	goto	l5855
 12195  0CBB  3A01               	xorlw	1	; case 1
 12196  0CBC  1903               	skipnz
 12197  0CBD  2C80               	goto	l5857
 12198  0CBE  3A03               	xorlw	3	; case 2
 12199  0CBF  1903               	skipnz
 12200  0CC0  2C87               	goto	l5859
 12201  0CC1  3A01               	xorlw	1	; case 3
 12202  0CC2  1903               	skipnz
 12203  0CC3  2C8E               	goto	l5861
 12204  0CC4  3A07               	xorlw	7	; case 4
 12205  0CC5  1903               	skipnz
 12206  0CC6  2C95               	goto	l5863
 12207  0CC7  3A01               	xorlw	1	; case 5
 12208  0CC8  1903               	skipnz
 12209  0CC9  2C9C               	goto	l5865
 12210  0CCA  3A03               	xorlw	3	; case 6
 12211  0CCB  1903               	skipnz
 12212  0CCC  2CA3               	goto	l5867
 12213  0CCD  3A01               	xorlw	1	; case 7
 12214  0CCE  1903               	skipnz
 12215  0CCF  2CAA               	goto	l5869
 12216  0CD0  2CD1               	goto	l1028
 12217  0CD1                     l1028:	
 12218  0CD1  0008               	return
 12219  0CD2                     __end_of_update_state:	
 12220                           
 12221                           	psect	text78
 12222  165C                     __ptext78:	
 12223 ;; *************** function _printf *****************
 12224 ;; Defined at:
 12225 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;  fmt             2   40[BANK0 ] PTR const unsigned char 
 12228 ;;		 -> STR_10(3), STR_9(5), STR_8(5), STR_7(5), 
 12229 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 12230 ;;		 -> STR_2(5), STR_1(9), 
 12231 ;; Auto vars:     Size  Location     Type
 12232 ;;  ret             2    0        int 
 12233 ;;  ap              1   47[BANK0 ] PTR void [1]
 12234 ;;		 -> ?_printf(2), 
 12235 ;; Return value:  Size  Location     Type
 12236 ;;                  2   40[BANK0 ] int 
 12237 ;; Registers used:
 12238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12239 ;; Tracked objects:
 12240 ;;		On entry : 0/0
 12241 ;;		On exit  : 0/0
 12242 ;;		Unchanged: 0/0
 12243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12244 ;;      Params:         0       4       0       0       0       0       0       0
 12245 ;;      Locals:         0       3       0       0       0       0       0       0
 12246 ;;      Temps:          0       1       0       0       0       0       0       0
 12247 ;;      Totals:         0       8       0       0       0       0       0       0
 12248 ;;Total ram usage:        8 bytes
 12249 ;; Hardware stack levels used:    1
 12250 ;; Hardware stack levels required when called:   12
 12251 ;; This function calls:
 12252 ;;		_vfprintf
 12253 ;; This function is called by:
 12254 ;;		_main
 12255 ;;		_update_state
 12256 ;;		_check_message
 12257 ;; This function uses a non-reentrant model
 12258 ;;
 12259                           
 12260                           
 12261                           ;psect for function _printf
 12262  165C                     _printf:	
 12263                           
 12264                           ;incstack = 0
 12265                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12266  165C  304A               	movlw	(low ((?_printf| 0+2)))& (0+255)
 12267  165D  0020               	movlb	0	; select bank0
 12268  165E  00CC               	movwf	??_printf
 12269  165F  084C               	movf	??_printf,w
 12270  1660  00CF               	movwf	printf@ap
 12271  1661  0849               	movf	printf@fmt+1,w
 12272  1662  00C1               	movwf	vfprintf@fmt+1
 12273  1663  0848               	movf	printf@fmt,w
 12274  1664  00C0               	movwf	vfprintf@fmt
 12275  1665  304F               	movlw	(low (printf@ap| 0))& (0+255)
 12276  1666  00CC               	movwf	??_printf
 12277  1667  084C               	movf	??_printf,w
 12278  1668  00C2               	movwf	vfprintf@ap
 12279  1669  3000               	movlw	0
 12280  166A  318A  2218         	fcall	_vfprintf
 12281  166C  0008               	return
 12282  166D                     __end_of_printf:	
 12283                           
 12284                           	psect	text79
 12285  0A18                     __ptext79:	
 12286 ;; *************** function _vfprintf *****************
 12287 ;; Defined at:
 12288 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12289 ;; Parameters:    Size  Location     Type
 12290 ;;  fp              1    wreg     PTR struct _IO_FILE
 12291 ;;		 -> NULL(0), 
 12292 ;;  fmt             2   32[BANK0 ] PTR const unsigned char 
 12293 ;;		 -> STR_10(3), STR_9(5), STR_8(5), STR_7(5), 
 12294 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 12295 ;;		 -> STR_2(5), STR_1(9), 
 12296 ;;  ap              1   34[BANK0 ] PTR PTR void 
 12297 ;;		 -> printf@ap(1), 
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;  fp              1   37[BANK0 ] PTR struct _IO_FILE
 12300 ;;		 -> NULL(0), 
 12301 ;;  cfmt            2   38[BANK0 ] PTR unsigned char 
 12302 ;;		 -> STR_10(3), STR_9(5), STR_8(5), STR_7(5), 
 12303 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
 12304 ;;		 -> STR_2(5), STR_1(9), 
 12305 ;; Return value:  Size  Location     Type
 12306 ;;                  2   32[BANK0 ] int 
 12307 ;; Registers used:
 12308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12309 ;; Tracked objects:
 12310 ;;		On entry : 0/0
 12311 ;;		On exit  : 0/0
 12312 ;;		Unchanged: 0/0
 12313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12314 ;;      Params:         0       3       0       0       0       0       0       0
 12315 ;;      Locals:         0       3       0       0       0       0       0       0
 12316 ;;      Temps:          0       2       0       0       0       0       0       0
 12317 ;;      Totals:         0       8       0       0       0       0       0       0
 12318 ;;Total ram usage:        8 bytes
 12319 ;; Hardware stack levels used:    1
 12320 ;; Hardware stack levels required when called:   11
 12321 ;; This function calls:
 12322 ;;		_vfpfcnvrt
 12323 ;; This function is called by:
 12324 ;;		_printf
 12325 ;; This function uses a non-reentrant model
 12326 ;;
 12327                           
 12328                           
 12329                           ;psect for function _vfprintf
 12330  0A18                     _vfprintf:	
 12331                           
 12332                           ;incstack = 0
 12333                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12334                           ;vfprintf@fp stored from wreg
 12335  0A18  0020               	movlb	0	; select bank0
 12336  0A19  00C5               	movwf	vfprintf@fp
 12337                           
 12338                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 12339  0A1A  0841               	movf	vfprintf@fmt+1,w
 12340  0A1B  00C7               	movwf	vfprintf@cfmt+1
 12341  0A1C  0840               	movf	vfprintf@fmt,w
 12342  0A1D  00C6               	movwf	vfprintf@cfmt
 12343                           
 12344                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 12345  0A1E  0021               	movlb	1	; select bank1
 12346  0A1F  01B8               	clrf	_nout^(0+128)
 12347  0A20  01B9               	clrf	(_nout+1)^(0+128)
 12348  0A21                     l5609:	
 12349                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 12350                           
 12351                           
 12352                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 12353  0A21  0020               	movlb	0	; select bank0
 12354  0A22  0846               	movf	vfprintf@cfmt,w
 12355  0A23  0084               	movwf	4
 12356  0A24  0847               	movf	vfprintf@cfmt+1,w
 12357  0A25  0085               	movwf	5
 12358  0A26  0012               	moviw fsr0++
 12359  0A27  1903               	btfsc	3,2
 12360  0A28  2A3E               	goto	l5611
 12361                           
 12362                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 12363  0A29  3046               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
 12364  0A2A  00C3               	movwf	??_vfprintf
 12365  0A2B  0843               	movf	??_vfprintf,w
 12366  0A2C  00B7               	movwf	vfpfcnvrt@fmt
 12367  0A2D  0842               	movf	vfprintf@ap,w
 12368  0A2E  00C4               	movwf	??_vfprintf+1
 12369  0A2F  0844               	movf	??_vfprintf+1,w
 12370  0A30  00B8               	movwf	vfpfcnvrt@ap
 12371  0A31  0845               	movf	vfprintf@fp,w
 12372  0A32  3184  2498  318A   	fcall	_vfpfcnvrt
 12373  0A35  0020               	movlb	0	; select bank0
 12374  0A36  0837               	movf	?_vfpfcnvrt,w
 12375  0A37  0021               	movlb	1	; select bank1
 12376  0A38  07B8               	addwf	_nout^(0+128),f
 12377  0A39  0020               	movlb	0	; select bank0
 12378  0A3A  0838               	movf	?_vfpfcnvrt+1,w
 12379  0A3B  0021               	movlb	1	; select bank1
 12380  0A3C  3DB9               	addwfc	(_nout+1)^(0+128),f
 12381  0A3D  2A21               	goto	l5609
 12382  0A3E                     l5611:	
 12383                           
 12384                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 12385  0A3E  0021               	movlb	1	; select bank1
 12386  0A3F  0839               	movf	(_nout+1)^(0+128),w
 12387  0A40  0020               	movlb	0	; select bank0
 12388  0A41  00C1               	movwf	?_vfprintf+1
 12389  0A42  0021               	movlb	1	; select bank1
 12390  0A43  0838               	movf	_nout^(0+128),w
 12391  0A44  0020               	movlb	0	; select bank0
 12392  0A45  00C0               	movwf	?_vfprintf
 12393  0A46  0008               	return
 12394  0A47                     __end_of_vfprintf:	
 12395                           
 12396                           	psect	text80
 12397  0498                     __ptext80:	
 12398 ;; *************** function _vfpfcnvrt *****************
 12399 ;; Defined at:
 12400 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;  fp              1    wreg     PTR struct _IO_FILE
 12403 ;;		 -> NULL(0), 
 12404 ;;  fmt             1   23[BANK0 ] PTR PTR unsigned char 
 12405 ;;		 -> vfprintf@cfmt(2), 
 12406 ;;  ap              1   24[BANK0 ] PTR PTR void 
 12407 ;;		 -> printf@ap(1), 
 12408 ;; Auto vars:     Size  Location     Type
 12409 ;;  fp              1   31[BANK0 ] PTR struct _IO_FILE
 12410 ;;		 -> NULL(0), 
 12411 ;;  llu             8    0        unsigned long long 
 12412 ;;  ll              8    0        long long 
 12413 ;;  f               4    0        long long 
 12414 ;;  ct              3    0        unsigned char [3]
 12415 ;;  vp              2    0        PTR void 
 12416 ;;  i               2    0        int 
 12417 ;;  done            2    0        int 
 12418 ;;  cp              2    0        PTR unsigned char 
 12419 ;;  c               1   30[BANK0 ] unsigned char 
 12420 ;; Return value:  Size  Location     Type
 12421 ;;                  2   23[BANK0 ] int 
 12422 ;; Registers used:
 12423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12424 ;; Tracked objects:
 12425 ;;		On entry : 0/0
 12426 ;;		On exit  : 0/0
 12427 ;;		Unchanged: 0/0
 12428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12429 ;;      Params:         0       2       0       0       0       0       0       0
 12430 ;;      Locals:         0       2       0       0       0       0       0       0
 12431 ;;      Temps:          0       5       0       0       0       0       0       0
 12432 ;;      Totals:         0       9       0       0       0       0       0       0
 12433 ;;Total ram usage:        9 bytes
 12434 ;; Hardware stack levels used:    1
 12435 ;; Hardware stack levels required when called:   10
 12436 ;; This function calls:
 12437 ;;		_ctoa
 12438 ;;		_fputc
 12439 ;; This function is called by:
 12440 ;;		_vfprintf
 12441 ;; This function uses a non-reentrant model
 12442 ;;
 12443                           
 12444                           
 12445                           ;psect for function _vfpfcnvrt
 12446  0498                     _vfpfcnvrt:	
 12447                           
 12448                           ;incstack = 0
 12449                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12450                           ;vfpfcnvrt@fp stored from wreg
 12451  0498  0020               	movlb	0	; select bank0
 12452  0499  00BF               	movwf	vfpfcnvrt@fp
 12453                           
 12454                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 12455  049A  0837               	movf	vfpfcnvrt@fmt,w
 12456  049B  0086               	movwf	6
 12457  049C  0187               	clrf	7
 12458  049D  3F40               	moviw [0]fsr1
 12459  049E  00B9               	movwf	??_vfpfcnvrt
 12460  049F  3F41               	moviw [1]fsr1
 12461  04A0  00BA               	movwf	??_vfpfcnvrt+1
 12462  04A1  0839               	movf	??_vfpfcnvrt,w
 12463  04A2  0084               	movwf	4
 12464  04A3  083A               	movf	??_vfpfcnvrt+1,w
 12465  04A4  0085               	movwf	5
 12466  04A5  0012               	moviw fsr0++
 12467  04A6  3A25               	xorlw	37
 12468  04A7  1D03               	btfss	3,2
 12469  04A8  2D1D               	goto	l5595
 12470                           
 12471                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 12472  04A9  0837               	movf	vfpfcnvrt@fmt,w
 12473  04AA  0086               	movwf	6
 12474  04AB  0187               	clrf	7
 12475  04AC  3001               	movlw	1
 12476  04AD  0781               	addwf	1,f
 12477  04AE  3141               	addfsr 1,1
 12478  04AF  1803               	skipnc
 12479  04B0  0A81               	incf	1,f
 12480                           
 12481                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 12482  04B1  0021               	movlb	1	; select bank1
 12483  04B2  01BA               	clrf	_width^(0+128)
 12484  04B3  01BB               	clrf	(_width+1)^(0+128)
 12485  04B4  01BE               	clrf	_flags^(0+128)
 12486  04B5  01BF               	clrf	(_flags+1)^(0+128)
 12487                           
 12488                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 12489  04B6  30FF               	movlw	255
 12490  04B7  00BC               	movwf	_prec^(0+128)
 12491  04B8  30FF               	movlw	255
 12492  04B9  00BD               	movwf	(_prec^(0+128)+1)
 12493                           
 12494                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
 12495  04BA  0020               	movlb	0	; select bank0
 12496  04BB  0837               	movf	vfpfcnvrt@fmt,w
 12497  04BC  0086               	movwf	6
 12498  04BD  0187               	clrf	7
 12499  04BE  3F40               	moviw [0]fsr1
 12500  04BF  00B9               	movwf	??_vfpfcnvrt
 12501  04C0  3F41               	moviw [1]fsr1
 12502  04C1  00BA               	movwf	??_vfpfcnvrt+1
 12503  04C2  0839               	movf	??_vfpfcnvrt,w
 12504  04C3  0084               	movwf	4
 12505  04C4  083A               	movf	??_vfpfcnvrt+1,w
 12506  04C5  0085               	movwf	5
 12507  04C6  0012               	moviw fsr0++
 12508  04C7  3A63               	xorlw	99
 12509  04C8  1D03               	btfss	3,2
 12510  04C9  2CEB               	goto	l5579
 12511                           
 12512                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
 12513  04CA  0837               	movf	vfpfcnvrt@fmt,w
 12514  04CB  0086               	movwf	6
 12515  04CC  0187               	clrf	7
 12516  04CD  3001               	movlw	1
 12517  04CE  0781               	addwf	1,f
 12518  04CF  3141               	addfsr 1,1
 12519  04D0  1803               	skipnc
 12520  04D1  0A81               	incf	1,f
 12521                           
 12522                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
 12523  04D2  0838               	movf	vfpfcnvrt@ap,w
 12524  04D3  0086               	movwf	6
 12525  04D4  0187               	clrf	7
 12526  04D5  0801               	movf	1,w
 12527  04D6  0084               	movwf	4
 12528  04D7  0185               	clrf	5
 12529  04D8  3002               	movlw	2
 12530  04D9  0781               	addwf	1,f
 12531  04DA  0800               	movf	0,w
 12532  04DB  00B9               	movwf	??_vfpfcnvrt
 12533  04DC  0839               	movf	??_vfpfcnvrt,w
 12534  04DD  00BE               	movwf	vfpfcnvrt@c
 12535                           
 12536                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
 12537  04DE  083E               	movf	vfpfcnvrt@c,w
 12538  04DF  00B9               	movwf	??_vfpfcnvrt
 12539  04E0  0839               	movf	??_vfpfcnvrt,w
 12540  04E1  00B1               	movwf	ctoa@c
 12541  04E2  083F               	movf	vfpfcnvrt@fp,w
 12542  04E3  318A  2247         	fcall	_ctoa
 12543  04E5  0020               	movlb	0	; select bank0
 12544  04E6  0832               	movf	?_ctoa+1,w
 12545  04E7  00B8               	movwf	?_vfpfcnvrt+1
 12546  04E8  0831               	movf	?_ctoa,w
 12547  04E9  00B7               	movwf	?_vfpfcnvrt
 12548  04EA  0008               	return
 12549  04EB                     l5579:	
 12550                           
 12551                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 12552  04EB  0837               	movf	vfpfcnvrt@fmt,w
 12553  04EC  0086               	movwf	6
 12554  04ED  0187               	clrf	7
 12555  04EE  3F40               	moviw [0]fsr1
 12556  04EF  00B9               	movwf	??_vfpfcnvrt
 12557  04F0  3F41               	moviw [1]fsr1
 12558  04F1  00BA               	movwf	??_vfpfcnvrt+1
 12559  04F2  0839               	movf	??_vfpfcnvrt,w
 12560  04F3  0084               	movwf	4
 12561  04F4  083A               	movf	??_vfpfcnvrt+1,w
 12562  04F5  0085               	movwf	5
 12563  04F6  0012               	moviw fsr0++
 12564  04F7  3A25               	xorlw	37
 12565  04F8  1D03               	btfss	3,2
 12566  04F9  2D12               	goto	l5589
 12567                           
 12568                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 12569  04FA  0837               	movf	vfpfcnvrt@fmt,w
 12570  04FB  0086               	movwf	6
 12571  04FC  0187               	clrf	7
 12572  04FD  3001               	movlw	1
 12573  04FE  0781               	addwf	1,f
 12574  04FF  3141               	addfsr 1,1
 12575  0500  1803               	skipnc
 12576  0501  0A81               	incf	1,f
 12577                           
 12578                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 12579  0502  3025               	movlw	37
 12580  0503  00F4               	movwf	fputc@c
 12581  0504  3000               	movlw	0
 12582  0505  00F5               	movwf	fputc@c+1
 12583  0506  083F               	movf	vfpfcnvrt@fp,w
 12584  0507  00B9               	movwf	??_vfpfcnvrt
 12585  0508  0839               	movf	??_vfpfcnvrt,w
 12586  0509  00F6               	movwf	fputc@fp
 12587  050A  318A  22A9         	fcall	_fputc
 12588  050C                     l5585:	
 12589                           
 12590                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 12591  050C  3001               	movlw	1
 12592  050D  0020               	movlb	0	; select bank0
 12593  050E  00B7               	movwf	?_vfpfcnvrt
 12594  050F  3000               	movlw	0
 12595  0510  00B8               	movwf	?_vfpfcnvrt+1
 12596  0511  0008               	return
 12597  0512                     l5589:	
 12598                           
 12599                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 12600  0512  0837               	movf	vfpfcnvrt@fmt,w
 12601  0513  0086               	movwf	6
 12602  0514  0187               	clrf	7
 12603  0515  3001               	movlw	1
 12604  0516  0781               	addwf	1,f
 12605  0517  3141               	addfsr 1,1
 12606  0518  1803               	skipnc
 12607  0519  0A81               	incf	1,f
 12608                           
 12609                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 12610  051A  01B7               	clrf	?_vfpfcnvrt
 12611  051B  01B8               	clrf	?_vfpfcnvrt+1
 12612  051C  0008               	return
 12613  051D                     l5595:	
 12614                           
 12615                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 12616  051D  0837               	movf	vfpfcnvrt@fmt,w
 12617  051E  0086               	movwf	6
 12618  051F  0187               	clrf	7
 12619  0520  3F40               	moviw [0]fsr1
 12620  0521  00B9               	movwf	??_vfpfcnvrt
 12621  0522  3F41               	moviw [1]fsr1
 12622  0523  00BA               	movwf	??_vfpfcnvrt+1
 12623  0524  0839               	movf	??_vfpfcnvrt,w
 12624  0525  0084               	movwf	4
 12625  0526  083A               	movf	??_vfpfcnvrt+1,w
 12626  0527  0085               	movwf	5
 12627  0528  0800               	movf	0,w	;code access
 12628  0529  00BB               	movwf	??_vfpfcnvrt+2
 12629  052A  01BC               	clrf	??_vfpfcnvrt+3
 12630  052B  083B               	movf	??_vfpfcnvrt+2,w
 12631  052C  00F4               	movwf	fputc@c
 12632  052D  083C               	movf	??_vfpfcnvrt+3,w
 12633  052E  00F5               	movwf	fputc@c+1
 12634  052F  083F               	movf	vfpfcnvrt@fp,w
 12635  0530  00BD               	movwf	??_vfpfcnvrt+4
 12636  0531  083D               	movf	??_vfpfcnvrt+4,w
 12637  0532  00F6               	movwf	fputc@fp
 12638  0533  318A  22A9  3184   	fcall	_fputc
 12639                           
 12640                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 12641  0536  0020               	movlb	0	; select bank0
 12642  0537  0837               	movf	vfpfcnvrt@fmt,w
 12643  0538  0086               	movwf	6
 12644  0539  0187               	clrf	7
 12645  053A  3001               	movlw	1
 12646  053B  0781               	addwf	1,f
 12647  053C  3141               	addfsr 1,1
 12648  053D  1803               	skipnc
 12649  053E  0A81               	incf	1,f
 12650  053F  2D0C               	goto	l5585
 12651  0540                     __end_of_vfpfcnvrt:	
 12652                           
 12653                           	psect	text81
 12654  0A47                     __ptext81:	
 12655 ;; *************** function _ctoa *****************
 12656 ;; Defined at:
 12657 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12658 ;; Parameters:    Size  Location     Type
 12659 ;;  fp              1    wreg     PTR struct _IO_FILE
 12660 ;;		 -> NULL(0), 
 12661 ;;  c               1   17[BANK0 ] unsigned char 
 12662 ;; Auto vars:     Size  Location     Type
 12663 ;;  fp              1   22[BANK0 ] PTR struct _IO_FILE
 12664 ;;		 -> NULL(0), 
 12665 ;;  w               2   20[BANK0 ] int 
 12666 ;;  l               2    0        int 
 12667 ;; Return value:  Size  Location     Type
 12668 ;;                  2   17[BANK0 ] int 
 12669 ;; Registers used:
 12670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12671 ;; Tracked objects:
 12672 ;;		On entry : 0/0
 12673 ;;		On exit  : 0/0
 12674 ;;		Unchanged: 0/0
 12675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12676 ;;      Params:         0       2       0       0       0       0       0       0
 12677 ;;      Locals:         0       3       0       0       0       0       0       0
 12678 ;;      Temps:          0       1       0       0       0       0       0       0
 12679 ;;      Totals:         0       6       0       0       0       0       0       0
 12680 ;;Total ram usage:        6 bytes
 12681 ;; Hardware stack levels used:    1
 12682 ;; Hardware stack levels required when called:    9
 12683 ;; This function calls:
 12684 ;;		_pad
 12685 ;; This function is called by:
 12686 ;;		_vfpfcnvrt
 12687 ;; This function uses a non-reentrant model
 12688 ;;
 12689                           
 12690                           
 12691                           ;psect for function _ctoa
 12692  0A47                     _ctoa:	
 12693                           
 12694                           ;incstack = 0
 12695                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12696                           ;ctoa@fp stored from wreg
 12697  0A47  0020               	movlb	0	; select bank0
 12698  0A48  00B6               	movwf	ctoa@fp
 12699                           
 12700                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
 12701  0A49  0021               	movlb	1	; select bank1
 12702  0A4A  083A               	movf	_width^(0+128),w
 12703  0A4B  043B               	iorwf	(_width+1)^(0+128),w
 12704  0A4C  1D03               	btfss	3,2
 12705  0A4D  2A56               	goto	l5551
 12706  0A4E  083B               	movf	(_width+1)^(0+128),w
 12707  0A4F  0020               	movlb	0	; select bank0
 12708  0A50  00B5               	movwf	ctoa@w+1
 12709  0A51  0021               	movlb	1	; select bank1
 12710  0A52  083A               	movf	_width^(0+128),w
 12711  0A53  0020               	movlb	0	; select bank0
 12712  0A54  00B4               	movwf	ctoa@w
 12713  0A55  2A5F               	goto	l5553
 12714  0A56                     l5551:	
 12715  0A56  083A               	movf	_width^(0+128),w
 12716  0A57  3EFF               	addlw	255
 12717  0A58  0020               	movlb	0	; select bank0
 12718  0A59  00B4               	movwf	ctoa@w
 12719  0A5A  30FF               	movlw	255
 12720  0A5B  0021               	movlb	1	; select bank1
 12721  0A5C  3D3B               	addwfc	(_width+1)^(0+128),w
 12722  0A5D  0020               	movlb	0	; select bank0
 12723  0A5E  00B5               	movwf	ctoa@w+1
 12724  0A5F                     l5553:	
 12725                           
 12726                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
 12727  0A5F  0831               	movf	ctoa@c,w
 12728  0A60  00B3               	movwf	??_ctoa
 12729  0A61  0833               	movf	??_ctoa,w
 12730  0A62  0023               	movlb	3	; select bank3
 12731  0A63  00A0               	movwf	_dbuf^(0+384)
 12732                           
 12733                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
 12734  0A64  01A1               	clrf	(_dbuf^(0+384)+1)
 12735                           
 12736                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
 12737  0A65  30A0               	movlw	(low (_dbuf| (0+256)))& (0+255)
 12738  0A66  0020               	movlb	0	; select bank0
 12739  0A67  00B3               	movwf	??_ctoa
 12740  0A68  0833               	movf	??_ctoa,w
 12741  0A69  00A8               	movwf	pad@buf
 12742  0A6A  0835               	movf	ctoa@w+1,w
 12743  0A6B  00AA               	movwf	pad@p+1
 12744  0A6C  0834               	movf	ctoa@w,w
 12745  0A6D  00A9               	movwf	pad@p
 12746  0A6E  0836               	movf	ctoa@fp,w
 12747  0A6F  318C  2428         	fcall	_pad
 12748  0A71  0020               	movlb	0	; select bank0
 12749  0A72  0829               	movf	?_pad+1,w
 12750  0A73  00B2               	movwf	?_ctoa+1
 12751  0A74  0828               	movf	?_pad,w
 12752  0A75  00B1               	movwf	?_ctoa
 12753  0A76  0008               	return
 12754  0A77                     __end_of_ctoa:	
 12755                           
 12756                           	psect	text82
 12757  0C28                     __ptext82:	
 12758 ;; *************** function _pad *****************
 12759 ;; Defined at:
 12760 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;  fp              1    wreg     PTR struct _IO_FILE
 12763 ;;		 -> NULL(0), 
 12764 ;;  buf             1    8[BANK0 ] PTR unsigned char 
 12765 ;;		 -> dbuf(32), 
 12766 ;;  p               2    9[BANK0 ] int 
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
 12769 ;;		 -> NULL(0), 
 12770 ;;  w               2   14[BANK0 ] int 
 12771 ;;  i               2   12[BANK0 ] int 
 12772 ;; Return value:  Size  Location     Type
 12773 ;;                  2    8[BANK0 ] int 
 12774 ;; Registers used:
 12775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12776 ;; Tracked objects:
 12777 ;;		On entry : 0/0
 12778 ;;		On exit  : 0/0
 12779 ;;		Unchanged: 0/0
 12780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12781 ;;      Params:         0       3       0       0       0       0       0       0
 12782 ;;      Locals:         0       5       0       0       0       0       0       0
 12783 ;;      Temps:          0       1       0       0       0       0       0       0
 12784 ;;      Totals:         0       9       0       0       0       0       0       0
 12785 ;;Total ram usage:        9 bytes
 12786 ;; Hardware stack levels used:    1
 12787 ;; Hardware stack levels required when called:    8
 12788 ;; This function calls:
 12789 ;;		_fputc
 12790 ;;		_fputs
 12791 ;;		_strlen
 12792 ;; This function is called by:
 12793 ;;		_ctoa
 12794 ;; This function uses a non-reentrant model
 12795 ;;
 12796                           
 12797                           
 12798                           ;psect for function _pad
 12799  0C28                     _pad:	
 12800                           
 12801                           ;incstack = 0
 12802                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12803                           ;pad@fp stored from wreg
 12804  0C28  0020               	movlb	0	; select bank0
 12805  0C29  00B0               	movwf	pad@fp
 12806                           
 12807                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 12808  0C2A  0021               	movlb	1	; select bank1
 12809  0C2B  1C3E               	btfss	_flags^(0+128),0
 12810  0C2C  2C36               	goto	l5531
 12811                           
 12812                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 12813  0C2D  0020               	movlb	0	; select bank0
 12814  0C2E  0830               	movf	pad@fp,w
 12815  0C2F  00AB               	movwf	??_pad
 12816  0C30  082B               	movf	??_pad,w
 12817  0C31  00A0               	movwf	fputs@fp
 12818  0C32  0828               	movf	pad@buf,w
 12819  0C33  3188  207B  318C   	fcall	_fputs
 12820  0C36                     l5531:	
 12821                           
 12822                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 12823  0C36  0020               	movlb	0	; select bank0
 12824  0C37  1BAA               	btfsc	pad@p+1,7
 12825  0C38  2C3E               	goto	l5535
 12826  0C39  082A               	movf	pad@p+1,w
 12827  0C3A  00AF               	movwf	pad@w+1
 12828  0C3B  0829               	movf	pad@p,w
 12829  0C3C  00AE               	movwf	pad@w
 12830  0C3D  2C40               	goto	l1297
 12831  0C3E                     l5535:	
 12832  0C3E  01AE               	clrf	pad@w
 12833  0C3F  01AF               	clrf	pad@w+1
 12834  0C40                     l1297:	
 12835                           
 12836                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 12837  0C40  01AC               	clrf	pad@i
 12838  0C41  01AD               	clrf	pad@i+1
 12839  0C42                     l5541:	
 12840                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 12841                           
 12842                           
 12843                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 12844  0C42  082D               	movf	pad@i+1,w
 12845  0C43  3A80               	xorlw	128
 12846  0C44  00AB               	movwf	??_pad
 12847  0C45  082F               	movf	pad@w+1,w
 12848  0C46  3A80               	xorlw	128
 12849  0C47  022B               	subwf	??_pad,w
 12850  0C48  1D03               	skipz
 12851  0C49  2C4C               	goto	u4255
 12852  0C4A  082E               	movf	pad@w,w
 12853  0C4B  022C               	subwf	pad@i,w
 12854  0C4C                     u4255:	
 12855  0C4C  1803               	btfsc	3,0
 12856  0C4D  2C60               	goto	l1300
 12857                           
 12858                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 12859  0C4E  3020               	movlw	32
 12860  0C4F  00F4               	movwf	fputc@c
 12861  0C50  3000               	movlw	0
 12862  0C51  00F5               	movwf	fputc@c+1
 12863  0C52  0020               	movlb	0	; select bank0
 12864  0C53  0830               	movf	pad@fp,w
 12865  0C54  00AB               	movwf	??_pad
 12866  0C55  082B               	movf	??_pad,w
 12867  0C56  00F6               	movwf	fputc@fp
 12868  0C57  318A  22A9  318C   	fcall	_fputc
 12869                           
 12870                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 12871  0C5A  3001               	movlw	1
 12872  0C5B  0020               	movlb	0	; select bank0
 12873  0C5C  07AC               	addwf	pad@i,f
 12874  0C5D  3000               	movlw	0
 12875  0C5E  3DAD               	addwfc	pad@i+1,f
 12876  0C5F  2C42               	goto	l5541
 12877  0C60                     l1300:	
 12878                           
 12879                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 12880  0C60  0021               	movlb	1	; select bank1
 12881  0C61  183E               	btfsc	_flags^(0+128),0
 12882  0C62  2C6C               	goto	l1301
 12883                           
 12884                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 12885  0C63  0020               	movlb	0	; select bank0
 12886  0C64  0830               	movf	pad@fp,w
 12887  0C65  00AB               	movwf	??_pad
 12888  0C66  082B               	movf	??_pad,w
 12889  0C67  00A0               	movwf	fputs@fp
 12890  0C68  0828               	movf	pad@buf,w
 12891  0C69  3188  207B  318C   	fcall	_fputs
 12892  0C6C                     l1301:	
 12893                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
 12894                           
 12895                           
 12896                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 12897  0C6C  0020               	movlb	0	; select bank0
 12898  0C6D  0828               	movf	pad@buf,w
 12899  0C6E  3197  275D         	fcall	_strlen
 12900  0C70  0020               	movlb	0	; select bank0
 12901  0C71  082E               	movf	pad@w,w
 12902  0C72  0771               	addwf	?_strlen,w
 12903  0C73  00A8               	movwf	?_pad
 12904  0C74  082F               	movf	pad@w+1,w
 12905  0C75  3D72               	addwfc	?_strlen+1,w
 12906  0C76  00A9               	movwf	?_pad+1
 12907  0C77  0008               	return
 12908  0C78                     __end_of_pad:	
 12909                           
 12910                           	psect	text83
 12911  175D                     __ptext83:	
 12912 ;; *************** function _strlen *****************
 12913 ;; Defined at:
 12914 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 12915 ;; Parameters:    Size  Location     Type
 12916 ;;  s               1    wreg     PTR const unsigned char 
 12917 ;;		 -> dbuf(32), 
 12918 ;; Auto vars:     Size  Location     Type
 12919 ;;  s               1    5[COMMON] PTR const unsigned char 
 12920 ;;		 -> dbuf(32), 
 12921 ;;  a               1    4[COMMON] PTR const unsigned char 
 12922 ;;		 -> dbuf(32), 
 12923 ;; Return value:  Size  Location     Type
 12924 ;;                  2    1[COMMON] unsigned int 
 12925 ;; Registers used:
 12926 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12927 ;; Tracked objects:
 12928 ;;		On entry : 0/0
 12929 ;;		On exit  : 0/0
 12930 ;;		Unchanged: 0/0
 12931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12932 ;;      Params:         2       0       0       0       0       0       0       0
 12933 ;;      Locals:         2       0       0       0       0       0       0       0
 12934 ;;      Temps:          1       0       0       0       0       0       0       0
 12935 ;;      Totals:         5       0       0       0       0       0       0       0
 12936 ;;Total ram usage:        5 bytes
 12937 ;; Hardware stack levels used:    1
 12938 ;; Hardware stack levels required when called:    4
 12939 ;; This function calls:
 12940 ;;		Nothing
 12941 ;; This function is called by:
 12942 ;;		_pad
 12943 ;; This function uses a non-reentrant model
 12944 ;;
 12945                           
 12946                           
 12947                           ;psect for function _strlen
 12948  175D                     _strlen:	
 12949                           
 12950                           ;incstack = 0
 12951                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 12952                           ;strlen@s stored from wreg
 12953  175D  00F5               	movwf	strlen@s
 12954  175E  0875               	movf	strlen@s,w
 12955  175F  00F3               	movwf	??_strlen
 12956  1760  0873               	movf	??_strlen,w
 12957  1761  00F4               	movwf	strlen@a
 12958  1762                     l3737:	
 12959  1762  0875               	movf	strlen@s,w
 12960  1763  0086               	movwf	6
 12961  1764  3001               	movlw	1	; select bank2/3
 12962  1765  0087               	movwf	7
 12963  1766  0801               	movf	1,w
 12964  1767  1903               	btfsc	3,2
 12965  1768  2F6E               	goto	l3739
 12966  1769  3001               	movlw	1
 12967  176A  00F3               	movwf	??_strlen
 12968  176B  0873               	movf	??_strlen,w
 12969  176C  07F5               	addwf	strlen@s,f
 12970  176D  2F62               	goto	l3737
 12971  176E                     l3739:	
 12972  176E  0874               	movf	strlen@a,w
 12973  176F  0275               	subwf	strlen@s,w
 12974  1770  00F1               	movwf	?_strlen
 12975  1771  01F2               	clrf	?_strlen+1
 12976  1772  1BF1               	btfsc	?_strlen,7
 12977  1773  03F2               	decf	?_strlen+1,f
 12978  1774  0008               	return
 12979  1775                     __end_of_strlen:	
 12980                           
 12981                           	psect	text84
 12982  087B                     __ptext84:	
 12983 ;; *************** function _fputs *****************
 12984 ;; Defined at:
 12985 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;  s               1    wreg     PTR const unsigned char 
 12988 ;;		 -> dbuf(32), 
 12989 ;;  fp              1    0[BANK0 ] PTR struct _IO_FILE
 12990 ;;		 -> NULL(0), 
 12991 ;; Auto vars:     Size  Location     Type
 12992 ;;  s               1    7[BANK0 ] PTR const unsigned char 
 12993 ;;		 -> dbuf(32), 
 12994 ;;  i               2    5[BANK0 ] int 
 12995 ;;  c               1    4[BANK0 ] unsigned char 
 12996 ;; Return value:  Size  Location     Type
 12997 ;;                  2    0[BANK0 ] int 
 12998 ;; Registers used:
 12999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13000 ;; Tracked objects:
 13001 ;;		On entry : 0/0
 13002 ;;		On exit  : 0/0
 13003 ;;		Unchanged: 0/0
 13004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13005 ;;      Params:         0       1       0       0       0       0       0       0
 13006 ;;      Locals:         0       4       0       0       0       0       0       0
 13007 ;;      Temps:          0       3       0       0       0       0       0       0
 13008 ;;      Totals:         0       8       0       0       0       0       0       0
 13009 ;;Total ram usage:        8 bytes
 13010 ;; Hardware stack levels used:    1
 13011 ;; Hardware stack levels required when called:    7
 13012 ;; This function calls:
 13013 ;;		_fputc
 13014 ;; This function is called by:
 13015 ;;		_pad
 13016 ;; This function uses a non-reentrant model
 13017 ;;
 13018                           
 13019                           
 13020                           ;psect for function _fputs
 13021  087B                     _fputs:	
 13022                           
 13023                           ;incstack = 0
 13024                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13025                           ;fputs@s stored from wreg
 13026  087B  0020               	movlb	0	; select bank0
 13027  087C  00A7               	movwf	fputs@s
 13028  087D  01A5               	clrf	fputs@i
 13029  087E  01A6               	clrf	fputs@i+1
 13030  087F                     l5525:	
 13031  087F  0825               	movf	fputs@i,w
 13032  0880  0727               	addwf	fputs@s,w
 13033  0881  00A1               	movwf	??_fputs
 13034  0882  0821               	movf	??_fputs,w
 13035  0883  0086               	movwf	6
 13036  0884  3001               	movlw	1	; select bank2/3
 13037  0885  0087               	movwf	7
 13038  0886  0801               	movf	1,w
 13039  0887  00A2               	movwf	??_fputs+1
 13040  0888  0822               	movf	??_fputs+1,w
 13041  0889  00A4               	movwf	fputs@c
 13042  088A  0824               	movf	fputs@c,w
 13043  088B  1903               	btfsc	3,2
 13044  088C  0008               	return
 13045  088D  0824               	movf	fputs@c,w
 13046  088E  00A1               	movwf	??_fputs
 13047  088F  01A2               	clrf	??_fputs+1
 13048  0890  0821               	movf	??_fputs,w
 13049  0891  00F4               	movwf	fputc@c
 13050  0892  0822               	movf	??_fputs+1,w
 13051  0893  00F5               	movwf	fputc@c+1
 13052  0894  0820               	movf	fputs@fp,w
 13053  0895  00A3               	movwf	??_fputs+2
 13054  0896  0823               	movf	??_fputs+2,w
 13055  0897  00F6               	movwf	fputc@fp
 13056  0898  318A  22A9  3188   	fcall	_fputc
 13057  089B  3001               	movlw	1
 13058  089C  0020               	movlb	0	; select bank0
 13059  089D  07A5               	addwf	fputs@i,f
 13060  089E  3000               	movlw	0
 13061  089F  3DA6               	addwfc	fputs@i+1,f
 13062  08A0  287F               	goto	l5525
 13063  08A1                     __end_of_fputs:	
 13064                           
 13065                           	psect	text85
 13066  0AA9                     __ptext85:	
 13067 ;; *************** function _fputc *****************
 13068 ;; Defined at:
 13069 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 13070 ;; Parameters:    Size  Location     Type
 13071 ;;  c               2    4[COMMON] int 
 13072 ;;  fp              1    6[COMMON] PTR struct _IO_FILE
 13073 ;;		 -> NULL(0), 
 13074 ;; Auto vars:     Size  Location     Type
 13075 ;;		None
 13076 ;; Return value:  Size  Location     Type
 13077 ;;                  2    4[COMMON] int 
 13078 ;; Registers used:
 13079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13080 ;; Tracked objects:
 13081 ;;		On entry : 0/0
 13082 ;;		On exit  : 0/0
 13083 ;;		Unchanged: 0/0
 13084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13085 ;;      Params:         3       0       0       0       0       0       0       0
 13086 ;;      Locals:         0       0       0       0       0       0       0       0
 13087 ;;      Temps:          5       0       0       0       0       0       0       0
 13088 ;;      Totals:         8       0       0       0       0       0       0       0
 13089 ;;Total ram usage:        8 bytes
 13090 ;; Hardware stack levels used:    1
 13091 ;; Hardware stack levels required when called:    6
 13092 ;; This function calls:
 13093 ;;		_putch
 13094 ;; This function is called by:
 13095 ;;		_pad
 13096 ;;		_vfpfcnvrt
 13097 ;;		_fputs
 13098 ;; This function uses a non-reentrant model
 13099 ;;
 13100                           
 13101                           
 13102                           ;psect for function _fputc
 13103  0AA9                     _fputc:	
 13104                           
 13105                           ;incstack = 0
 13106                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13107  0AA9  0876               	movf	fputc@fp,w
 13108  0AAA  1D03               	btfss	3,2
 13109  0AAB  0876               	movf	fputc@fp,w
 13110  0AAC  1D03               	btfss	3,2
 13111  0AAD  2AB2               	goto	l3717
 13112  0AAE  0874               	movf	fputc@c,w
 13113  0AAF  3195  254D         	fcall	_putch
 13114  0AB1  0008               	return
 13115  0AB2                     l3717:	
 13116  0AB2  0876               	movf	fputc@fp,w
 13117  0AB3  3E03               	addlw	3
 13118  0AB4  0086               	movwf	6
 13119  0AB5  0187               	clrf	7
 13120  0AB6  0016               	moviw fsr1++
 13121  0AB7  0401               	iorwf	1,w
 13122  0AB8  1903               	btfsc	3,2
 13123  0AB9  2AD5               	goto	l3721
 13124  0ABA  0876               	movf	fputc@fp,w
 13125  0ABB  3E03               	addlw	3
 13126  0ABC  0086               	movwf	6
 13127  0ABD  0187               	clrf	7
 13128  0ABE  3F40               	moviw [0]fsr1
 13129  0ABF  00F7               	movwf	??_fputc
 13130  0AC0  3F41               	moviw [1]fsr1
 13131  0AC1  00F8               	movwf	??_fputc+1
 13132  0AC2  0A76               	incf	fputc@fp,w
 13133  0AC3  0086               	movwf	6
 13134  0AC4  0187               	clrf	7
 13135  0AC5  3F40               	moviw [0]fsr1
 13136  0AC6  00F9               	movwf	??_fputc+2
 13137  0AC7  3F41               	moviw [1]fsr1
 13138  0AC8  00FA               	movwf	??_fputc+3
 13139  0AC9  087A               	movf	??_fputc+3,w
 13140  0ACA  3A80               	xorlw	128
 13141  0ACB  00FB               	movwf	??_fputc+4
 13142  0ACC  0878               	movf	??_fputc+1,w
 13143  0ACD  3A80               	xorlw	128
 13144  0ACE  027B               	subwf	??_fputc+4,w
 13145  0ACF  1D03               	skipz
 13146  0AD0  2AD3               	goto	u2185
 13147  0AD1  0877               	movf	??_fputc,w
 13148  0AD2  0279               	subwf	??_fputc+2,w
 13149  0AD3                     u2185:	
 13150  0AD3  1803               	skipnc
 13151  0AD4  0008               	return
 13152  0AD5                     l3721:	
 13153  0AD5  0A76               	incf	fputc@fp,w
 13154  0AD6  0086               	movwf	6
 13155  0AD7  0187               	clrf	7
 13156  0AD8  3001               	movlw	1
 13157  0AD9  0781               	addwf	1,f
 13158  0ADA  3141               	addfsr 1,1
 13159  0ADB  1803               	skipnc
 13160  0ADC  0A81               	incf	1,f
 13161  0ADD  0008               	return
 13162  0ADE                     __end_of_fputc:	
 13163                           
 13164                           	psect	text86
 13165  154D                     __ptext86:	
 13166 ;; *************** function _putch *****************
 13167 ;; Defined at:
 13168 ;;		line 200 in file "mcc_generated_files/eusart.c"
 13169 ;; Parameters:    Size  Location     Type
 13170 ;;  txData          1    wreg     unsigned char 
 13171 ;; Auto vars:     Size  Location     Type
 13172 ;;  txData          1    3[COMMON] unsigned char 
 13173 ;; Return value:  Size  Location     Type
 13174 ;;                  1    wreg      void 
 13175 ;; Registers used:
 13176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13177 ;; Tracked objects:
 13178 ;;		On entry : 0/0
 13179 ;;		On exit  : 0/0
 13180 ;;		Unchanged: 0/0
 13181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13182 ;;      Params:         0       0       0       0       0       0       0       0
 13183 ;;      Locals:         1       0       0       0       0       0       0       0
 13184 ;;      Temps:          0       0       0       0       0       0       0       0
 13185 ;;      Totals:         1       0       0       0       0       0       0       0
 13186 ;;Total ram usage:        1 bytes
 13187 ;; Hardware stack levels used:    1
 13188 ;; Hardware stack levels required when called:    5
 13189 ;; This function calls:
 13190 ;;		_EUSART_Write
 13191 ;; This function is called by:
 13192 ;;		_fputc
 13193 ;; This function uses a non-reentrant model
 13194 ;;
 13195                           
 13196                           
 13197                           ;psect for function _putch
 13198  154D                     _putch:	
 13199                           
 13200                           ;incstack = 0
 13201                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13202                           ;putch@txData stored from wreg
 13203  154D  00F3               	movwf	putch@txData
 13204                           
 13205                           ;mcc_generated_files/eusart.c: 200: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 201: {;mcc_generated_files/eusart.c: 202:     EUSART_Write(txData);
 13206  154E  0873               	movf	putch@txData,w
 13207  154F  3188  2056         	fcall	_EUSART_Write
 13208  1551  0008               	return
 13209  1552                     __end_of_putch:	
 13210                           
 13211                           	psect	text87
 13212  0856                     __ptext87:	
 13213 ;; *************** function _EUSART_Write *****************
 13214 ;; Defined at:
 13215 ;;		line 171 in file "mcc_generated_files/eusart.c"
 13216 ;; Parameters:    Size  Location     Type
 13217 ;;  txData          1    wreg     unsigned char 
 13218 ;; Auto vars:     Size  Location     Type
 13219 ;;  txData          1    2[COMMON] unsigned char 
 13220 ;; Return value:  Size  Location     Type
 13221 ;;                  1    wreg      void 
 13222 ;; Registers used:
 13223 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13224 ;; Tracked objects:
 13225 ;;		On entry : 0/0
 13226 ;;		On exit  : 0/0
 13227 ;;		Unchanged: 0/0
 13228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13229 ;;      Params:         0       0       0       0       0       0       0       0
 13230 ;;      Locals:         1       0       0       0       0       0       0       0
 13231 ;;      Temps:          1       0       0       0       0       0       0       0
 13232 ;;      Totals:         2       0       0       0       0       0       0       0
 13233 ;;Total ram usage:        2 bytes
 13234 ;; Hardware stack levels used:    1
 13235 ;; Hardware stack levels required when called:    4
 13236 ;; This function calls:
 13237 ;;		Nothing
 13238 ;; This function is called by:
 13239 ;;		_putch
 13240 ;; This function uses a non-reentrant model
 13241 ;;
 13242                           
 13243                           
 13244                           ;psect for function _EUSART_Write
 13245  0856                     _EUSART_Write:	
 13246                           
 13247                           ;incstack = 0
 13248                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 13249                           ;EUSART_Write@txData stored from wreg
 13250  0856  00F2               	movwf	EUSART_Write@txData
 13251  0857                     l3693:	
 13252                           ;mcc_generated_files/eusart.c: 171: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 172: {;mcc_generated_files/eusart.c: 173:     while(0 == eusartTxBufferRemai
      +                          ning)
 13253                           
 13254                           
 13255                           ;mcc_generated_files/eusart.c: 173:     while(0 == eusartTxBufferRemaining)
 13256  0857  0021               	movlb	1	; select bank1
 13257  0858  085F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 13258  0859  1D03               	btfss	3,2
 13259  085A  285D               	goto	l741
 13260  085B  0064               	clrwdt	;# 
 13261  085C  2857               	goto	l3693
 13262  085D                     l741:	
 13263                           
 13264                           ;mcc_generated_files/eusart.c: 178:     if(0 == PIE1bits.TXIE)
 13265  085D  1A11               	btfsc	17,4	;volatile
 13266  085E  2863               	goto	l742
 13267                           
 13268                           ;mcc_generated_files/eusart.c: 179:     {;mcc_generated_files/eusart.c: 180:         TXR
      +                          EG = txData;
 13269  085F  0872               	movf	EUSART_Write@txData,w
 13270  0860  0023               	movlb	3	; select bank3
 13271  0861  009A               	movwf	26	;volatile
 13272                           
 13273                           ;mcc_generated_files/eusart.c: 181:     }
 13274  0862  2878               	goto	l3707
 13275  0863                     l742:	
 13276                           ;mcc_generated_files/eusart.c: 182:     else
 13277                           
 13278                           
 13279                           ;mcc_generated_files/eusart.c: 183:     {;mcc_generated_files/eusart.c: 184:         PIE
      +                          1bits.TXIE = 0;
 13280  0863  1211               	bcf	17,4	;volatile
 13281                           
 13282                           ;mcc_generated_files/eusart.c: 185:         eusartTxBuffer[eusartTxHead++] = txData;
 13283  0864  0872               	movf	EUSART_Write@txData,w
 13284  0865  00F1               	movwf	??_EUSART_Write
 13285  0866  0020               	movlb	0	; select bank0
 13286  0867  086A               	movf	_eusartTxHead,w
 13287  0868  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 13288  0869  0086               	movwf	6
 13289  086A  0187               	clrf	7
 13290  086B  0871               	movf	??_EUSART_Write,w
 13291  086C  0081               	movwf	1
 13292  086D  3001               	movlw	1
 13293  086E  00F1               	movwf	??_EUSART_Write
 13294  086F  0871               	movf	??_EUSART_Write,w
 13295  0870  07EA               	addwf	_eusartTxHead,f	;volatile
 13296                           
 13297                           ;mcc_generated_files/eusart.c: 186:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
 13298  0871  3008               	movlw	8
 13299  0872  026A               	subwf	_eusartTxHead,w	;volatile
 13300  0873  1803               	btfsc	3,0
 13301                           
 13302                           ;mcc_generated_files/eusart.c: 187:         {;mcc_generated_files/eusart.c: 188:        
      +                               eusartTxHead = 0;
 13303  0874  01EA               	clrf	_eusartTxHead	;volatile
 13304                           
 13305                           ;mcc_generated_files/eusart.c: 190:         eusartTxBufferRemaining--;
 13306  0875  3001               	movlw	1
 13307  0876  0021               	movlb	1	; select bank1
 13308  0877  02DF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 13309  0878                     l3707:	
 13310                           
 13311                           ;mcc_generated_files/eusart.c: 192:     PIE1bits.TXIE = 1;
 13312  0878  0021               	movlb	1	; select bank1
 13313  0879  1611               	bsf	17,4	;volatile
 13314  087A  0008               	return
 13315  087B                     __end_of_EUSART_Write:	
 13316                           
 13317                           	psect	text88
 13318  0B8E                     __ptext88:	
 13319 ;; *************** function _RELAY_PROCESS *****************
 13320 ;; Defined at:
 13321 ;;		line 5 in file "relay.c"
 13322 ;; Parameters:    Size  Location     Type
 13323 ;;  x               1    wreg     unsigned char 
 13324 ;; Auto vars:     Size  Location     Type
 13325 ;;  x               1    3[COMMON] unsigned char 
 13326 ;; Return value:  Size  Location     Type
 13327 ;;                  1    wreg      void 
 13328 ;; Registers used:
 13329 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13330 ;; Tracked objects:
 13331 ;;		On entry : 0/0
 13332 ;;		On exit  : 0/0
 13333 ;;		Unchanged: 0/0
 13334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13335 ;;      Params:         0       0       0       0       0       0       0       0
 13336 ;;      Locals:         1       0       0       0       0       0       0       0
 13337 ;;      Temps:          2       0       0       0       0       0       0       0
 13338 ;;      Totals:         3       0       0       0       0       0       0       0
 13339 ;;Total ram usage:        3 bytes
 13340 ;; Hardware stack levels used:    1
 13341 ;; Hardware stack levels required when called:    4
 13342 ;; This function calls:
 13343 ;;		Nothing
 13344 ;; This function is called by:
 13345 ;;		_main
 13346 ;;		_myButtonPressedCallback
 13347 ;;		_DATA_PROCESS
 13348 ;; This function uses a non-reentrant model
 13349 ;;
 13350                           
 13351                           
 13352                           ;psect for function _RELAY_PROCESS
 13353  0B8E                     _RELAY_PROCESS:	
 13354                           
 13355                           ;incstack = 0
 13356                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
 13357                           ;RELAY_PROCESS@x stored from wreg
 13358  0B8E  00F3               	movwf	RELAY_PROCESS@x
 13359                           
 13360                           ;relay.c: 5: void RELAY_PROCESS(uint8_t x);relay.c: 6: {;relay.c: 7:     switch(x)
 13361  0B8F  2BB8               	goto	l4251
 13362  0B90                     l1152:	
 13363                           ;relay.c: 10:         {;relay.c: 11:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13364                           
 13365  0B90  0022               	movlb	2	; select bank2
 13366  0B91  170D               	bsf	13,6	;volatile
 13367  0B92  168C               	bsf	12,5	;volatile
 13368  0B93  160C               	bsf	12,4	;volatile
 13369  0B94  0008               	return
 13370  0B95                     l1160:	
 13371                           ;relay.c: 15:         {;relay.c: 16:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13372                           
 13373  0B95  0022               	movlb	2	; select bank2
 13374  0B96  170D               	bsf	13,6	;volatile
 13375  0B97  168C               	bsf	12,5	;volatile
 13376  0B98  120C               	bcf	12,4	;volatile
 13377  0B99  0008               	return
 13378  0B9A                     l1167:	
 13379                           ;relay.c: 20:         {;relay.c: 21:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13380                           
 13381  0B9A  0022               	movlb	2	; select bank2
 13382  0B9B  170D               	bsf	13,6	;volatile
 13383  0B9C  128C               	bcf	12,5	;volatile
 13384  0B9D  160C               	bsf	12,4	;volatile
 13385  0B9E  0008               	return
 13386  0B9F                     l1174:	
 13387                           ;relay.c: 25:         {;relay.c: 26:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13388                           
 13389  0B9F  0022               	movlb	2	; select bank2
 13390  0BA0  170D               	bsf	13,6	;volatile
 13391  0BA1  128C               	bcf	12,5	;volatile
 13392  0BA2  120C               	bcf	12,4	;volatile
 13393  0BA3  0008               	return
 13394  0BA4                     l1181:	
 13395                           ;relay.c: 30:         {;relay.c: 31:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13396                           
 13397  0BA4  0022               	movlb	2	; select bank2
 13398  0BA5  130D               	bcf	13,6	;volatile
 13399  0BA6  168C               	bsf	12,5	;volatile
 13400  0BA7  160C               	bsf	12,4	;volatile
 13401  0BA8  0008               	return
 13402  0BA9                     l1188:	
 13403                           ;relay.c: 35:         {;relay.c: 36:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13404                           
 13405  0BA9  0022               	movlb	2	; select bank2
 13406  0BAA  130D               	bcf	13,6	;volatile
 13407  0BAB  168C               	bsf	12,5	;volatile
 13408  0BAC  120C               	bcf	12,4	;volatile
 13409  0BAD  0008               	return
 13410  0BAE                     l1195:	
 13411                           ;relay.c: 40:         {;relay.c: 41:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13412                           
 13413  0BAE  0022               	movlb	2	; select bank2
 13414  0BAF  130D               	bcf	13,6	;volatile
 13415  0BB0  128C               	bcf	12,5	;volatile
 13416  0BB1  160C               	bsf	12,4	;volatile
 13417  0BB2  0008               	return
 13418  0BB3                     l1202:	
 13419                           ;relay.c: 45:         {;relay.c: 46:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13420                           
 13421  0BB3  0022               	movlb	2	; select bank2
 13422  0BB4  130D               	bcf	13,6	;volatile
 13423  0BB5  128C               	bcf	12,5	;volatile
 13424  0BB6  120C               	bcf	12,4	;volatile
 13425  0BB7  0008               	return
 13426  0BB8                     l4251:	
 13427  0BB8  0873               	movf	RELAY_PROCESS@x,w
 13428  0BB9  00F1               	movwf	??_RELAY_PROCESS
 13429  0BBA  01F2               	clrf	??_RELAY_PROCESS+1
 13430                           
 13431                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13432                           ; Switch size 1, requested type "simple"
 13433                           ; Number of cases is 1, Range of values is 0 to 0
 13434                           ; switch strategies available:
 13435                           ; Name         Instructions Cycles
 13436                           ; simple_byte            4     3 (average)
 13437                           ; direct_byte            8     6 (fixed)
 13438                           ; jumptable            260     6 (fixed)
 13439                           ;	Chosen strategy is simple_byte
 13440  0BBB  0872               	movf	??_RELAY_PROCESS+1,w
 13441  0BBC  3A00               	xorlw	0	; case 0
 13442  0BBD  1903               	skipnz
 13443  0BBE  2BC0               	goto	l6765
 13444  0BBF  2BDA               	goto	l1208
 13445  0BC0                     l6765:	
 13446                           
 13447                           ; Switch size 1, requested type "simple"
 13448                           ; Number of cases is 8, Range of values is 0 to 7
 13449                           ; switch strategies available:
 13450                           ; Name         Instructions Cycles
 13451                           ; direct_byte           22     6 (fixed)
 13452                           ; simple_byte           25    13 (average)
 13453                           ; jumptable            260     6 (fixed)
 13454                           ;	Chosen strategy is simple_byte
 13455  0BC0  0871               	movf	??_RELAY_PROCESS,w
 13456  0BC1  3A00               	xorlw	0	; case 0
 13457  0BC2  1903               	skipnz
 13458  0BC3  2B90               	goto	l1152
 13459  0BC4  3A01               	xorlw	1	; case 1
 13460  0BC5  1903               	skipnz
 13461  0BC6  2B95               	goto	l1160
 13462  0BC7  3A03               	xorlw	3	; case 2
 13463  0BC8  1903               	skipnz
 13464  0BC9  2B9A               	goto	l1167
 13465  0BCA  3A01               	xorlw	1	; case 3
 13466  0BCB  1903               	skipnz
 13467  0BCC  2B9F               	goto	l1174
 13468  0BCD  3A07               	xorlw	7	; case 4
 13469  0BCE  1903               	skipnz
 13470  0BCF  2BA4               	goto	l1181
 13471  0BD0  3A01               	xorlw	1	; case 5
 13472  0BD1  1903               	skipnz
 13473  0BD2  2BA9               	goto	l1188
 13474  0BD3  3A03               	xorlw	3	; case 6
 13475  0BD4  1903               	skipnz
 13476  0BD5  2BAE               	goto	l1195
 13477  0BD6  3A01               	xorlw	1	; case 7
 13478  0BD7  1903               	skipnz
 13479  0BD8  2BB3               	goto	l1202
 13480  0BD9  2BDA               	goto	l1208
 13481  0BDA                     l1208:	
 13482  0BDA  0008               	return
 13483  0BDB                     __end_of_RELAY_PROCESS:	
 13484                           
 13485                           	psect	text89
 13486  0DF8                     __ptext89:	
 13487 ;; *************** function _LED_PROCESS *****************
 13488 ;; Defined at:
 13489 ;;		line 44 in file "led.c"
 13490 ;; Parameters:    Size  Location     Type
 13491 ;;  x               1    wreg     unsigned char 
 13492 ;; Auto vars:     Size  Location     Type
 13493 ;;  x               1    3[COMMON] unsigned char 
 13494 ;; Return value:  Size  Location     Type
 13495 ;;                  1    wreg      void 
 13496 ;; Registers used:
 13497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13498 ;; Tracked objects:
 13499 ;;		On entry : 0/0
 13500 ;;		On exit  : 0/0
 13501 ;;		Unchanged: 0/0
 13502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13503 ;;      Params:         0       0       0       0       0       0       0       0
 13504 ;;      Locals:         1       0       0       0       0       0       0       0
 13505 ;;      Temps:          2       0       0       0       0       0       0       0
 13506 ;;      Totals:         3       0       0       0       0       0       0       0
 13507 ;;Total ram usage:        3 bytes
 13508 ;; Hardware stack levels used:    1
 13509 ;; Hardware stack levels required when called:    5
 13510 ;; This function calls:
 13511 ;;		_LED_0_SetHigh
 13512 ;;		_LED_0_SetLow
 13513 ;;		_LED_1_SetHigh
 13514 ;;		_LED_1_SetLow
 13515 ;;		_LED_2_SetHigh
 13516 ;;		_LED_2_SetLow
 13517 ;; This function is called by:
 13518 ;;		_main
 13519 ;;		_myButtonPressedCallback
 13520 ;;		_DATA_PROCESS
 13521 ;; This function uses a non-reentrant model
 13522 ;;
 13523                           
 13524                           
 13525                           ;psect for function _LED_PROCESS
 13526  0DF8                     _LED_PROCESS:	
 13527                           
 13528                           ;incstack = 0
 13529                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13530                           ;LED_PROCESS@x stored from wreg
 13531  0DF8  00F3               	movwf	LED_PROCESS@x
 13532                           
 13533                           ;led.c: 44: void LED_PROCESS(uint8_t x);led.c: 45: {;led.c: 46:     switch(x)
 13534  0DF9  2E42               	goto	l4241
 13535  0DFA                     l4223:	
 13536                           
 13537                           ;led.c: 49:         {;led.c: 50:             LED_2_SetHigh();LED_1_SetHigh();LED_0_SetHi
      +                          gh();
 13538  0DFA  3195  2545  318D   	fcall	_LED_2_SetHigh
 13539  0DFD  3195  253D  318D   	fcall	_LED_1_SetHigh
 13540  0E00  3195  2535         	fcall	_LED_0_SetHigh
 13541                           
 13542                           ;led.c: 51:             break;
 13543  0E02  0008               	return
 13544  0E03                     l4225:	
 13545                           
 13546                           ;led.c: 54:         {;led.c: 55:             LED_2_SetHigh();LED_1_SetHigh();LED_0_SetLo
      +                          w();
 13547  0E03  3195  2545  318D   	fcall	_LED_2_SetHigh
 13548  0E06  3195  253D  318D   	fcall	_LED_1_SetHigh
 13549  0E09  3195  2539         	fcall	_LED_0_SetLow
 13550                           
 13551                           ;led.c: 56:             break;
 13552  0E0B  0008               	return
 13553  0E0C                     l4227:	
 13554                           
 13555                           ;led.c: 59:         {;led.c: 60:             LED_2_SetHigh();LED_1_SetLow();LED_0_SetHig
      +                          h();
 13556  0E0C  3195  2545  318D   	fcall	_LED_2_SetHigh
 13557  0E0F  3195  2541  318D   	fcall	_LED_1_SetLow
 13558  0E12  3195  2535         	fcall	_LED_0_SetHigh
 13559                           
 13560                           ;led.c: 61:             break;
 13561  0E14  0008               	return
 13562  0E15                     l4229:	
 13563                           
 13564                           ;led.c: 64:         {;led.c: 65:             LED_2_SetHigh();LED_1_SetLow();LED_0_SetLow
      +                          ();
 13565  0E15  3195  2545  318D   	fcall	_LED_2_SetHigh
 13566  0E18  3195  2541  318D   	fcall	_LED_1_SetLow
 13567  0E1B  3195  2539         	fcall	_LED_0_SetLow
 13568                           
 13569                           ;led.c: 66:             break;
 13570  0E1D  0008               	return
 13571  0E1E                     l4231:	
 13572                           
 13573                           ;led.c: 69:         {;led.c: 70:             LED_2_SetLow();LED_1_SetHigh();LED_0_SetHig
      +                          h();
 13574  0E1E  3195  2549  318D   	fcall	_LED_2_SetLow
 13575  0E21  3195  253D  318D   	fcall	_LED_1_SetHigh
 13576  0E24  3195  2535         	fcall	_LED_0_SetHigh
 13577                           
 13578                           ;led.c: 71:             break;
 13579  0E26  0008               	return
 13580  0E27                     l4233:	
 13581                           
 13582                           ;led.c: 74:         {;led.c: 75:             LED_2_SetLow();LED_1_SetHigh();LED_0_SetLow
      +                          ();
 13583  0E27  3195  2549  318D   	fcall	_LED_2_SetLow
 13584  0E2A  3195  253D  318D   	fcall	_LED_1_SetHigh
 13585  0E2D  3195  2539         	fcall	_LED_0_SetLow
 13586                           
 13587                           ;led.c: 76:             break;
 13588  0E2F  0008               	return
 13589  0E30                     l4235:	
 13590                           
 13591                           ;led.c: 79:         {;led.c: 80:             LED_2_SetLow();LED_1_SetLow();LED_0_SetHigh
      +                          ();
 13592  0E30  3195  2549  318D   	fcall	_LED_2_SetLow
 13593  0E33  3195  2541  318D   	fcall	_LED_1_SetLow
 13594  0E36  3195  2535         	fcall	_LED_0_SetHigh
 13595                           
 13596                           ;led.c: 81:             break;
 13597  0E38  0008               	return
 13598  0E39                     l4237:	
 13599                           
 13600                           ;led.c: 84:         {;led.c: 85:             LED_2_SetLow();LED_1_SetLow();LED_0_SetLow(
      +                          );
 13601  0E39  3195  2549  318D   	fcall	_LED_2_SetLow
 13602  0E3C  3195  2541  318D   	fcall	_LED_1_SetLow
 13603  0E3F  3195  2539         	fcall	_LED_0_SetLow
 13604                           
 13605                           ;led.c: 86:             break;
 13606  0E41  0008               	return
 13607  0E42                     l4241:	
 13608  0E42  0873               	movf	LED_PROCESS@x,w
 13609  0E43  00F1               	movwf	??_LED_PROCESS
 13610  0E44  01F2               	clrf	??_LED_PROCESS+1
 13611                           
 13612                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13613                           ; Switch size 1, requested type "simple"
 13614                           ; Number of cases is 1, Range of values is 0 to 0
 13615                           ; switch strategies available:
 13616                           ; Name         Instructions Cycles
 13617                           ; simple_byte            4     3 (average)
 13618                           ; direct_byte            8     6 (fixed)
 13619                           ; jumptable            260     6 (fixed)
 13620                           ;	Chosen strategy is simple_byte
 13621  0E45  0872               	movf	??_LED_PROCESS+1,w
 13622  0E46  3A00               	xorlw	0	; case 0
 13623  0E47  1903               	skipnz
 13624  0E48  2E4A               	goto	l6767
 13625  0E49  2E64               	goto	l1143
 13626  0E4A                     l6767:	
 13627                           
 13628                           ; Switch size 1, requested type "simple"
 13629                           ; Number of cases is 8, Range of values is 0 to 7
 13630                           ; switch strategies available:
 13631                           ; Name         Instructions Cycles
 13632                           ; direct_byte           22     6 (fixed)
 13633                           ; simple_byte           25    13 (average)
 13634                           ; jumptable            260     6 (fixed)
 13635                           ;	Chosen strategy is simple_byte
 13636  0E4A  0871               	movf	??_LED_PROCESS,w
 13637  0E4B  3A00               	xorlw	0	; case 0
 13638  0E4C  1903               	skipnz
 13639  0E4D  2DFA               	goto	l4223
 13640  0E4E  3A01               	xorlw	1	; case 1
 13641  0E4F  1903               	skipnz
 13642  0E50  2E03               	goto	l4225
 13643  0E51  3A03               	xorlw	3	; case 2
 13644  0E52  1903               	skipnz
 13645  0E53  2E0C               	goto	l4227
 13646  0E54  3A01               	xorlw	1	; case 3
 13647  0E55  1903               	skipnz
 13648  0E56  2E15               	goto	l4229
 13649  0E57  3A07               	xorlw	7	; case 4
 13650  0E58  1903               	skipnz
 13651  0E59  2E1E               	goto	l4231
 13652  0E5A  3A01               	xorlw	1	; case 5
 13653  0E5B  1903               	skipnz
 13654  0E5C  2E27               	goto	l4233
 13655  0E5D  3A03               	xorlw	3	; case 6
 13656  0E5E  1903               	skipnz
 13657  0E5F  2E30               	goto	l4235
 13658  0E60  3A01               	xorlw	1	; case 7
 13659  0E61  1903               	skipnz
 13660  0E62  2E39               	goto	l4237
 13661  0E63  2E64               	goto	l1143
 13662  0E64                     l1143:	
 13663  0E64  0008               	return
 13664  0E65                     __end_of_LED_PROCESS:	
 13665                           
 13666                           	psect	text90
 13667  1549                     __ptext90:	
 13668 ;; *************** function _LED_2_SetLow *****************
 13669 ;; Defined at:
 13670 ;;		line 16 in file "led.c"
 13671 ;; Parameters:    Size  Location     Type
 13672 ;;		None
 13673 ;; Auto vars:     Size  Location     Type
 13674 ;;		None
 13675 ;; Return value:  Size  Location     Type
 13676 ;;                  1    wreg      void 
 13677 ;; Registers used:
 13678 ;;		None
 13679 ;; Tracked objects:
 13680 ;;		On entry : 0/0
 13681 ;;		On exit  : 0/0
 13682 ;;		Unchanged: 0/0
 13683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13684 ;;      Params:         0       0       0       0       0       0       0       0
 13685 ;;      Locals:         0       0       0       0       0       0       0       0
 13686 ;;      Temps:          0       0       0       0       0       0       0       0
 13687 ;;      Totals:         0       0       0       0       0       0       0       0
 13688 ;;Total ram usage:        0 bytes
 13689 ;; Hardware stack levels used:    1
 13690 ;; Hardware stack levels required when called:    4
 13691 ;; This function calls:
 13692 ;;		Nothing
 13693 ;; This function is called by:
 13694 ;;		_LED_PROCESS
 13695 ;; This function uses a non-reentrant model
 13696 ;;
 13697                           
 13698                           
 13699                           ;psect for function _LED_2_SetLow
 13700  1549                     _LED_2_SetLow:	
 13701                           
 13702                           ;incstack = 0
 13703                           ; Regs used in _LED_2_SetLow: []
 13704                           ;led.c: 18:     do { LATCbits.LATC3 = 0; } while(0);
 13705  1549  0022               	movlb	2	; select bank2
 13706  154A  118E               	bcf	14,3	;volatile
 13707                           
 13708                           ;led.c: 19:     do { LATCbits.LATC2 = 1; } while(0);
 13709  154B  150E               	bsf	14,2	;volatile
 13710  154C  0008               	return
 13711  154D                     __end_of_LED_2_SetLow:	
 13712                           
 13713                           	psect	text91
 13714  1545                     __ptext91:	
 13715 ;; *************** function _LED_2_SetHigh *****************
 13716 ;; Defined at:
 13717 ;;		line 11 in file "led.c"
 13718 ;; Parameters:    Size  Location     Type
 13719 ;;		None
 13720 ;; Auto vars:     Size  Location     Type
 13721 ;;		None
 13722 ;; Return value:  Size  Location     Type
 13723 ;;                  1    wreg      void 
 13724 ;; Registers used:
 13725 ;;		None
 13726 ;; Tracked objects:
 13727 ;;		On entry : 0/0
 13728 ;;		On exit  : 0/0
 13729 ;;		Unchanged: 0/0
 13730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13731 ;;      Params:         0       0       0       0       0       0       0       0
 13732 ;;      Locals:         0       0       0       0       0       0       0       0
 13733 ;;      Temps:          0       0       0       0       0       0       0       0
 13734 ;;      Totals:         0       0       0       0       0       0       0       0
 13735 ;;Total ram usage:        0 bytes
 13736 ;; Hardware stack levels used:    1
 13737 ;; Hardware stack levels required when called:    4
 13738 ;; This function calls:
 13739 ;;		Nothing
 13740 ;; This function is called by:
 13741 ;;		_LED_PROCESS
 13742 ;; This function uses a non-reentrant model
 13743 ;;
 13744                           
 13745                           
 13746                           ;psect for function _LED_2_SetHigh
 13747  1545                     _LED_2_SetHigh:	
 13748                           
 13749                           ;incstack = 0
 13750                           ; Regs used in _LED_2_SetHigh: []
 13751                           ;led.c: 13:     do { LATCbits.LATC2 = 0; } while(0);
 13752  1545  0022               	movlb	2	; select bank2
 13753  1546  110E               	bcf	14,2	;volatile
 13754                           
 13755                           ;led.c: 14:     do { LATCbits.LATC3 = 1; } while(0);
 13756  1547  158E               	bsf	14,3	;volatile
 13757  1548  0008               	return
 13758  1549                     __end_of_LED_2_SetHigh:	
 13759                           
 13760                           	psect	text92
 13761  1541                     __ptext92:	
 13762 ;; *************** function _LED_1_SetLow *****************
 13763 ;; Defined at:
 13764 ;;		line 27 in file "led.c"
 13765 ;; Parameters:    Size  Location     Type
 13766 ;;		None
 13767 ;; Auto vars:     Size  Location     Type
 13768 ;;		None
 13769 ;; Return value:  Size  Location     Type
 13770 ;;                  1    wreg      void 
 13771 ;; Registers used:
 13772 ;;		None
 13773 ;; Tracked objects:
 13774 ;;		On entry : 0/0
 13775 ;;		On exit  : 0/0
 13776 ;;		Unchanged: 0/0
 13777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13778 ;;      Params:         0       0       0       0       0       0       0       0
 13779 ;;      Locals:         0       0       0       0       0       0       0       0
 13780 ;;      Temps:          0       0       0       0       0       0       0       0
 13781 ;;      Totals:         0       0       0       0       0       0       0       0
 13782 ;;Total ram usage:        0 bytes
 13783 ;; Hardware stack levels used:    1
 13784 ;; Hardware stack levels required when called:    4
 13785 ;; This function calls:
 13786 ;;		Nothing
 13787 ;; This function is called by:
 13788 ;;		_LED_PROCESS
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           
 13793                           ;psect for function _LED_1_SetLow
 13794  1541                     _LED_1_SetLow:	
 13795                           
 13796                           ;incstack = 0
 13797                           ; Regs used in _LED_1_SetLow: []
 13798                           ;led.c: 29:     do { LATCbits.LATC7 = 0; } while(0);
 13799  1541  0022               	movlb	2	; select bank2
 13800  1542  138E               	bcf	14,7	;volatile
 13801                           
 13802                           ;led.c: 30:     do { LATCbits.LATC5 = 1; } while(0);
 13803  1543  168E               	bsf	14,5	;volatile
 13804  1544  0008               	return
 13805  1545                     __end_of_LED_1_SetLow:	
 13806                           
 13807                           	psect	text93
 13808  153D                     __ptext93:	
 13809 ;; *************** function _LED_1_SetHigh *****************
 13810 ;; Defined at:
 13811 ;;		line 22 in file "led.c"
 13812 ;; Parameters:    Size  Location     Type
 13813 ;;		None
 13814 ;; Auto vars:     Size  Location     Type
 13815 ;;		None
 13816 ;; Return value:  Size  Location     Type
 13817 ;;                  1    wreg      void 
 13818 ;; Registers used:
 13819 ;;		None
 13820 ;; Tracked objects:
 13821 ;;		On entry : 0/0
 13822 ;;		On exit  : 0/0
 13823 ;;		Unchanged: 0/0
 13824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13825 ;;      Params:         0       0       0       0       0       0       0       0
 13826 ;;      Locals:         0       0       0       0       0       0       0       0
 13827 ;;      Temps:          0       0       0       0       0       0       0       0
 13828 ;;      Totals:         0       0       0       0       0       0       0       0
 13829 ;;Total ram usage:        0 bytes
 13830 ;; Hardware stack levels used:    1
 13831 ;; Hardware stack levels required when called:    4
 13832 ;; This function calls:
 13833 ;;		Nothing
 13834 ;; This function is called by:
 13835 ;;		_LED_PROCESS
 13836 ;; This function uses a non-reentrant model
 13837 ;;
 13838                           
 13839                           
 13840                           ;psect for function _LED_1_SetHigh
 13841  153D                     _LED_1_SetHigh:	
 13842                           
 13843                           ;incstack = 0
 13844                           ; Regs used in _LED_1_SetHigh: []
 13845                           ;led.c: 24:     do { LATCbits.LATC5 = 0; } while(0);
 13846  153D  0022               	movlb	2	; select bank2
 13847  153E  128E               	bcf	14,5	;volatile
 13848                           
 13849                           ;led.c: 25:     do { LATCbits.LATC7 = 1; } while(0);
 13850  153F  178E               	bsf	14,7	;volatile
 13851  1540  0008               	return
 13852  1541                     __end_of_LED_1_SetHigh:	
 13853                           
 13854                           	psect	text94
 13855  1539                     __ptext94:	
 13856 ;; *************** function _LED_0_SetLow *****************
 13857 ;; Defined at:
 13858 ;;		line 38 in file "led.c"
 13859 ;; Parameters:    Size  Location     Type
 13860 ;;		None
 13861 ;; Auto vars:     Size  Location     Type
 13862 ;;		None
 13863 ;; Return value:  Size  Location     Type
 13864 ;;                  1    wreg      void 
 13865 ;; Registers used:
 13866 ;;		None
 13867 ;; Tracked objects:
 13868 ;;		On entry : 0/0
 13869 ;;		On exit  : 0/0
 13870 ;;		Unchanged: 0/0
 13871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13872 ;;      Params:         0       0       0       0       0       0       0       0
 13873 ;;      Locals:         0       0       0       0       0       0       0       0
 13874 ;;      Temps:          0       0       0       0       0       0       0       0
 13875 ;;      Totals:         0       0       0       0       0       0       0       0
 13876 ;;Total ram usage:        0 bytes
 13877 ;; Hardware stack levels used:    1
 13878 ;; Hardware stack levels required when called:    4
 13879 ;; This function calls:
 13880 ;;		Nothing
 13881 ;; This function is called by:
 13882 ;;		_LED_PROCESS
 13883 ;; This function uses a non-reentrant model
 13884 ;;
 13885                           
 13886                           
 13887                           ;psect for function _LED_0_SetLow
 13888  1539                     _LED_0_SetLow:	
 13889                           
 13890                           ;incstack = 0
 13891                           ; Regs used in _LED_0_SetLow: []
 13892                           ;led.c: 40:     do { LATAbits.LATA1 = 0; } while(0);
 13893  1539  0022               	movlb	2	; select bank2
 13894  153A  108C               	bcf	12,1	;volatile
 13895                           
 13896                           ;led.c: 41:     do { LATAbits.LATA0 = 1; } while(0);
 13897  153B  140C               	bsf	12,0	;volatile
 13898  153C  0008               	return
 13899  153D                     __end_of_LED_0_SetLow:	
 13900                           
 13901                           	psect	text95
 13902  1535                     __ptext95:	
 13903 ;; *************** function _LED_0_SetHigh *****************
 13904 ;; Defined at:
 13905 ;;		line 33 in file "led.c"
 13906 ;; Parameters:    Size  Location     Type
 13907 ;;		None
 13908 ;; Auto vars:     Size  Location     Type
 13909 ;;		None
 13910 ;; Return value:  Size  Location     Type
 13911 ;;                  1    wreg      void 
 13912 ;; Registers used:
 13913 ;;		None
 13914 ;; Tracked objects:
 13915 ;;		On entry : 0/0
 13916 ;;		On exit  : 0/0
 13917 ;;		Unchanged: 0/0
 13918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13919 ;;      Params:         0       0       0       0       0       0       0       0
 13920 ;;      Locals:         0       0       0       0       0       0       0       0
 13921 ;;      Temps:          0       0       0       0       0       0       0       0
 13922 ;;      Totals:         0       0       0       0       0       0       0       0
 13923 ;;Total ram usage:        0 bytes
 13924 ;; Hardware stack levels used:    1
 13925 ;; Hardware stack levels required when called:    4
 13926 ;; This function calls:
 13927 ;;		Nothing
 13928 ;; This function is called by:
 13929 ;;		_LED_PROCESS
 13930 ;; This function uses a non-reentrant model
 13931 ;;
 13932                           
 13933                           
 13934                           ;psect for function _LED_0_SetHigh
 13935  1535                     _LED_0_SetHigh:	
 13936                           
 13937                           ;incstack = 0
 13938                           ; Regs used in _LED_0_SetHigh: []
 13939                           ;led.c: 35:     do { LATAbits.LATA0 = 0; } while(0);
 13940  1535  0022               	movlb	2	; select bank2
 13941  1536  100C               	bcf	12,0	;volatile
 13942                           
 13943                           ;led.c: 36:     do { LATAbits.LATA1 = 1; } while(0);
 13944  1537  148C               	bsf	12,1	;volatile
 13945  1538  0008               	return
 13946  1539                     __end_of_LED_0_SetHigh:	
 13947                           
 13948                           	psect	intentry
 13949  0004                     __pintentry:	
 13950 ;; *************** function _INTERRUPT_InterruptManager *****************
 13951 ;; Defined at:
 13952 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13953 ;; Parameters:    Size  Location     Type
 13954 ;;		None
 13955 ;; Auto vars:     Size  Location     Type
 13956 ;;		None
 13957 ;; Return value:  Size  Location     Type
 13958 ;;                  1    wreg      void 
 13959 ;; Registers used:
 13960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13961 ;; Tracked objects:
 13962 ;;		On entry : 0/0
 13963 ;;		On exit  : 0/0
 13964 ;;		Unchanged: 0/0
 13965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13966 ;;      Params:         0       0       0       0       0       0       0       0
 13967 ;;      Locals:         0       0       0       0       0       0       0       0
 13968 ;;      Temps:          0       0       0       0       0       0       0       0
 13969 ;;      Totals:         0       0       0       0       0       0       0       0
 13970 ;;Total ram usage:        0 bytes
 13971 ;; Hardware stack levels used:    1
 13972 ;; Hardware stack levels required when called:    3
 13973 ;; This function calls:
 13974 ;;		Absolute function
 13975 ;;		_EUSART_Receive_ISR
 13976 ;;		_EUSART_Transmit_ISR
 13977 ;; This function is called by:
 13978 ;;		Interrupt level 1
 13979 ;; This function uses a non-reentrant model
 13980 ;;
 13981                           
 13982  0004                     _INTERRUPT_InterruptManager:	
 13983                           
 13984                           ;incstack = 0
 13985 ;; hardware stack exceeded
 13986  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13987                           
 13988                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13989  0005  3180               	pagesel	$
 13990                           
 13991                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 13992  0006  1F0B               	btfss	11,6	;volatile
 13993  0007  2821               	goto	i1l845
 13994                           
 13995                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 13996  0008  0021               	movlb	1	; select bank1
 13997  0009  1E11               	btfss	17,4	;volatile
 13998  000A  2815               	goto	i1l840
 13999  000B  0020               	movlb	0	; select bank0
 14000  000C  1E11               	btfss	17,4	;volatile
 14001  000D  2815               	goto	i1l840
 14002                           
 14003                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
 14004  000E  0021               	movlb	1	; select bank1
 14005  000F  085E               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 14006  0010  008A               	movwf	10
 14007  0011  085D               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 14008  0012  000A               	callw
 14009  0013  3180               	pagesel	$
 14010                           
 14011                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 14012  0014  2821               	goto	i1l845
 14013  0015                     i1l840:	
 14014                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 14015                           
 14016  0015  0021               	movlb	1	; select bank1
 14017  0016  1E91               	btfss	17,5	;volatile
 14018  0017  2821               	goto	i1l845
 14019  0018  0020               	movlb	0	; select bank0
 14020  0019  1E91               	btfss	17,5	;volatile
 14021  001A  2821               	goto	i1l845
 14022                           
 14023                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
 14024  001B  0021               	movlb	1	; select bank1
 14025  001C  085C               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 14026  001D  008A               	movwf	10
 14027  001E  085B               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 14028  001F  000A               	callw
 14029  0020  3180               	pagesel	$
 14030  0021                     i1l845:	
 14031                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 14032                           
 14033                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 14034                           
 14035  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14036  0022  0009               	retfie
 14037  0023                     __end_of_INTERRUPT_InterruptManager:	
 14038                           
 14039                           	psect	text97
 14040  0819                     __ptext97:	
 14041 ;; *************** function _EUSART_Transmit_ISR *****************
 14042 ;; Defined at:
 14043 ;;		line 205 in file "mcc_generated_files/eusart.c"
 14044 ;; Parameters:    Size  Location     Type
 14045 ;;		None
 14046 ;; Auto vars:     Size  Location     Type
 14047 ;;		None
 14048 ;; Return value:  Size  Location     Type
 14049 ;;                  1    wreg      void 
 14050 ;; Registers used:
 14051 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14052 ;; Tracked objects:
 14053 ;;		On entry : 0/0
 14054 ;;		On exit  : 0/0
 14055 ;;		Unchanged: 0/0
 14056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14057 ;;      Params:         0       0       0       0       0       0       0       0
 14058 ;;      Locals:         0       0       0       0       0       0       0       0
 14059 ;;      Temps:          1       0       0       0       0       0       0       0
 14060 ;;      Totals:         1       0       0       0       0       0       0       0
 14061 ;;Total ram usage:        1 bytes
 14062 ;; Hardware stack levels used:    1
 14063 ;; This function calls:
 14064 ;;		Nothing
 14065 ;; This function is called by:
 14066 ;;		_EUSART_Initialize
 14067 ;;		_INTERRUPT_InterruptManager
 14068 ;; This function uses a non-reentrant model
 14069 ;;
 14070                           
 14071                           
 14072                           ;psect for function _EUSART_Transmit_ISR
 14073  0819                     _EUSART_Transmit_ISR:	
 14074                           
 14075                           ;mcc_generated_files/eusart.c: 209:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 14076                           
 14077                           ;incstack = 0
 14078 ;; hardware stack exceeded
 14079                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 14080  0819  3008               	movlw	8
 14081  081A  0021               	movlb	1	; select bank1
 14082  081B  025F               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 14083  081C  1803               	skipnc
 14084  081D  2835               	goto	i1l754
 14085                           
 14086                           ;mcc_generated_files/eusart.c: 210:     {;mcc_generated_files/eusart.c: 211:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 14087  081E  0020               	movlb	0	; select bank0
 14088  081F  0869               	movf	_eusartTxTail,w
 14089  0820  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 14090  0821  0086               	movwf	6
 14091  0822  0187               	clrf	7
 14092  0823  0801               	movf	1,w
 14093  0824  0023               	movlb	3	; select bank3
 14094  0825  009A               	movwf	26	;volatile
 14095  0826  3001               	movlw	1
 14096  0827  00F0               	movwf	??_EUSART_Transmit_ISR
 14097  0828  0870               	movf	??_EUSART_Transmit_ISR,w
 14098  0829  0020               	movlb	0	; select bank0
 14099  082A  07E9               	addwf	_eusartTxTail,f	;volatile
 14100                           
 14101                           ;mcc_generated_files/eusart.c: 212:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 14102  082B  3008               	movlw	8
 14103  082C  0269               	subwf	_eusartTxTail,w	;volatile
 14104  082D  1803               	btfsc	3,0
 14105                           
 14106                           ;mcc_generated_files/eusart.c: 213:         {;mcc_generated_files/eusart.c: 214:        
      +                               eusartTxTail = 0;
 14107  082E  01E9               	clrf	_eusartTxTail	;volatile
 14108                           
 14109                           ;mcc_generated_files/eusart.c: 216:         eusartTxBufferRemaining++;
 14110  082F  3001               	movlw	1
 14111  0830  00F0               	movwf	??_EUSART_Transmit_ISR
 14112  0831  0870               	movf	??_EUSART_Transmit_ISR,w
 14113  0832  0021               	movlb	1	; select bank1
 14114  0833  07DF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 14115                           
 14116                           ;mcc_generated_files/eusart.c: 217:     }
 14117  0834  0008               	return
 14118  0835                     i1l754:	
 14119                           ;mcc_generated_files/eusart.c: 218:     else
 14120                           
 14121                           
 14122                           ;mcc_generated_files/eusart.c: 219:     {;mcc_generated_files/eusart.c: 220:         PIE
      +                          1bits.TXIE = 0;
 14123  0835  1211               	bcf	17,4	;volatile
 14124  0836  0008               	return
 14125  0837                     __end_of_EUSART_Transmit_ISR:	
 14126                           
 14127                           	psect	text98
 14128  0A77                     __ptext98:	
 14129 ;; *************** function _EUSART_Receive_ISR *****************
 14130 ;; Defined at:
 14131 ;;		line 224 in file "mcc_generated_files/eusart.c"
 14132 ;; Parameters:    Size  Location     Type
 14133 ;;		None
 14134 ;; Auto vars:     Size  Location     Type
 14135 ;;		None
 14136 ;; Return value:  Size  Location     Type
 14137 ;;                  1    wreg      void 
 14138 ;; Registers used:
 14139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14140 ;; Tracked objects:
 14141 ;;		On entry : 0/0
 14142 ;;		On exit  : 0/0
 14143 ;;		Unchanged: 0/0
 14144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14145 ;;      Params:         0       0       0       0       0       0       0       0
 14146 ;;      Locals:         0       0       0       0       0       0       0       0
 14147 ;;      Temps:          0       0       0       0       0       0       0       0
 14148 ;;      Totals:         0       0       0       0       0       0       0       0
 14149 ;;Total ram usage:        0 bytes
 14150 ;; Hardware stack levels used:    1
 14151 ;; Hardware stack levels required when called:    2
 14152 ;; This function calls:
 14153 ;;		Absolute function
 14154 ;;		_EUSART_DefaultErrorHandler
 14155 ;;		_EUSART_DefaultFramingErrorHandler
 14156 ;;		_EUSART_DefaultOverrunErrorHandler
 14157 ;;		_EUSART_RxDataHandler
 14158 ;; This function is called by:
 14159 ;;		_EUSART_Initialize
 14160 ;;		_INTERRUPT_InterruptManager
 14161 ;; This function uses a non-reentrant model
 14162 ;;
 14163                           
 14164                           
 14165                           ;psect for function _EUSART_Receive_ISR
 14166  0A77                     _EUSART_Receive_ISR:	
 14167                           
 14168                           ;mcc_generated_files/eusart.c: 227:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 14169                           
 14170                           ;incstack = 0
 14171 ;; hardware stack exceeded
 14172                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14173  0A77  087C               	movf	_eusartRxHead,w	;volatile
 14174  0A78  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14175  0A79  0086               	movwf	6
 14176  0A7A  0187               	clrf	7
 14177  0A7B  0181               	clrf	1
 14178                           
 14179                           ;mcc_generated_files/eusart.c: 229:     if(RCSTAbits.FERR){
 14180  0A7C  0023               	movlb	3	; select bank3
 14181  0A7D  1D1D               	btfss	29,2	;volatile
 14182  0A7E  2A8A               	goto	i1l4897
 14183                           
 14184                           ;mcc_generated_files/eusart.c: 230:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 14185  0A7F  087C               	movf	_eusartRxHead,w	;volatile
 14186  0A80  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14187  0A81  0086               	movwf	6
 14188  0A82  0187               	clrf	7
 14189  0A83  1481               	bsf	1,1
 14190                           
 14191                           ;mcc_generated_files/eusart.c: 231:         EUSART_FramingErrorHandler();
 14192  0A84  0021               	movlb	1	; select bank1
 14193  0A85  085A               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 14194  0A86  008A               	movwf	10
 14195  0A87  0859               	movf	_EUSART_FramingErrorHandler^(0+128),w
 14196  0A88  000A               	callw
 14197  0A89  318A               	pagesel	$
 14198  0A8A                     i1l4897:	
 14199                           
 14200                           ;mcc_generated_files/eusart.c: 234:     if(RCSTAbits.OERR){
 14201  0A8A  0023               	movlb	3	; select bank3
 14202  0A8B  1C9D               	btfss	29,1	;volatile
 14203  0A8C  2A98               	goto	i1l4903
 14204                           
 14205                           ;mcc_generated_files/eusart.c: 235:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 14206  0A8D  087C               	movf	_eusartRxHead,w	;volatile
 14207  0A8E  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14208  0A8F  0086               	movwf	6
 14209  0A90  0187               	clrf	7
 14210  0A91  1501               	bsf	1,2
 14211                           
 14212                           ;mcc_generated_files/eusart.c: 236:         EUSART_OverrunErrorHandler();
 14213  0A92  0021               	movlb	1	; select bank1
 14214  0A93  0858               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 14215  0A94  008A               	movwf	10
 14216  0A95  0857               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 14217  0A96  000A               	callw
 14218  0A97  318A               	pagesel	$
 14219  0A98                     i1l4903:	
 14220                           
 14221                           ;mcc_generated_files/eusart.c: 239:     if(eusartRxStatusBuffer[eusartRxHead].status){
 14222  0A98  087C               	movf	_eusartRxHead,w	;volatile
 14223  0A99  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14224  0A9A  0086               	movwf	6
 14225  0A9B  0187               	clrf	7
 14226  0A9C  0801               	movf	1,w
 14227  0A9D  1903               	btfsc	3,2
 14228  0A9E  2AA6               	goto	i1l4907
 14229                           
 14230                           ;mcc_generated_files/eusart.c: 240:         EUSART_ErrorHandler();
 14231  0A9F  0021               	movlb	1	; select bank1
 14232  0AA0  0856               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 14233  0AA1  008A               	movwf	10
 14234  0AA2  0855               	movf	_EUSART_ErrorHandler^(0+128),w
 14235  0AA3  000A               	callw
 14236  0AA4  318A               	pagesel	$
 14237                           
 14238                           ;mcc_generated_files/eusart.c: 241:     } else {
 14239  0AA5  0008               	return
 14240  0AA6                     i1l4907:	
 14241                           
 14242                           ;mcc_generated_files/eusart.c: 242:         EUSART_RxDataHandler();
 14243  0AA6  3197  272F         	fcall	_EUSART_RxDataHandler
 14244  0AA8  0008               	return
 14245  0AA9                     __end_of_EUSART_Receive_ISR:	
 14246                           
 14247                           	psect	text99
 14248  1531                     __ptext99:	
 14249 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 14250 ;; Defined at:
 14251 ;;		line 260 in file "mcc_generated_files/eusart.c"
 14252 ;; Parameters:    Size  Location     Type
 14253 ;;		None
 14254 ;; Auto vars:     Size  Location     Type
 14255 ;;		None
 14256 ;; Return value:  Size  Location     Type
 14257 ;;                  1    wreg      void 
 14258 ;; Registers used:
 14259 ;;		None
 14260 ;; Tracked objects:
 14261 ;;		On entry : 0/0
 14262 ;;		On exit  : 0/0
 14263 ;;		Unchanged: 0/0
 14264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14265 ;;      Params:         0       0       0       0       0       0       0       0
 14266 ;;      Locals:         0       0       0       0       0       0       0       0
 14267 ;;      Temps:          0       0       0       0       0       0       0       0
 14268 ;;      Totals:         0       0       0       0       0       0       0       0
 14269 ;;Total ram usage:        0 bytes
 14270 ;; Hardware stack levels used:    1
 14271 ;; This function calls:
 14272 ;;		Nothing
 14273 ;; This function is called by:
 14274 ;;		_EUSART_Initialize
 14275 ;;		_EUSART_Receive_ISR
 14276 ;; This function uses a non-reentrant model
 14277 ;;
 14278                           
 14279                           
 14280                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 14281  1531                     _EUSART_DefaultOverrunErrorHandler:	
 14282                           
 14283                           ;mcc_generated_files/eusart.c: 263:     RCSTAbits.CREN = 0;
 14284                           
 14285                           ;incstack = 0
 14286 ;; hardware stack exceeded
 14287                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 14288  1531  0023               	movlb	3	; select bank3
 14289  1532  121D               	bcf	29,4	;volatile
 14290                           
 14291                           ;mcc_generated_files/eusart.c: 264:     RCSTAbits.CREN = 1;
 14292  1533  161D               	bsf	29,4	;volatile
 14293  1534  0008               	return
 14294  1535                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 14295                           
 14296                           	psect	text100
 14297  151F                     __ptext100:	
 14298 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 14299 ;; Defined at:
 14300 ;;		line 258 in file "mcc_generated_files/eusart.c"
 14301 ;; Parameters:    Size  Location     Type
 14302 ;;		None
 14303 ;; Auto vars:     Size  Location     Type
 14304 ;;		None
 14305 ;; Return value:  Size  Location     Type
 14306 ;;                  1    wreg      void 
 14307 ;; Registers used:
 14308 ;;		None
 14309 ;; Tracked objects:
 14310 ;;		On entry : 0/0
 14311 ;;		On exit  : 0/0
 14312 ;;		Unchanged: 0/0
 14313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14314 ;;      Params:         0       0       0       0       0       0       0       0
 14315 ;;      Locals:         0       0       0       0       0       0       0       0
 14316 ;;      Temps:          0       0       0       0       0       0       0       0
 14317 ;;      Totals:         0       0       0       0       0       0       0       0
 14318 ;;Total ram usage:        0 bytes
 14319 ;; Hardware stack levels used:    1
 14320 ;; This function calls:
 14321 ;;		Nothing
 14322 ;; This function is called by:
 14323 ;;		_EUSART_Initialize
 14324 ;;		_EUSART_Receive_ISR
 14325 ;; This function uses a non-reentrant model
 14326 ;;
 14327                           
 14328                           
 14329                           ;psect for function _EUSART_DefaultFramingErrorHandler
 14330  151F                     _EUSART_DefaultFramingErrorHandler:	
 14331                           
 14332                           ;incstack = 0
 14333 ;; hardware stack exceeded
 14334                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 14335  151F  0008               	return
 14336  1520                     __end_of_EUSART_DefaultFramingErrorHandler:	
 14337                           
 14338                           	psect	text101
 14339  1522                     __ptext101:	
 14340 ;; *************** function _EUSART_DefaultErrorHandler *****************
 14341 ;; Defined at:
 14342 ;;		line 268 in file "mcc_generated_files/eusart.c"
 14343 ;; Parameters:    Size  Location     Type
 14344 ;;		None
 14345 ;; Auto vars:     Size  Location     Type
 14346 ;;		None
 14347 ;; Return value:  Size  Location     Type
 14348 ;;                  1    wreg      void 
 14349 ;; Registers used:
 14350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14351 ;; Tracked objects:
 14352 ;;		On entry : 0/0
 14353 ;;		On exit  : 0/0
 14354 ;;		Unchanged: 0/0
 14355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14356 ;;      Params:         0       0       0       0       0       0       0       0
 14357 ;;      Locals:         0       0       0       0       0       0       0       0
 14358 ;;      Temps:          0       0       0       0       0       0       0       0
 14359 ;;      Totals:         0       0       0       0       0       0       0       0
 14360 ;;Total ram usage:        0 bytes
 14361 ;; Hardware stack levels used:    1
 14362 ;; Hardware stack levels required when called:    1
 14363 ;; This function calls:
 14364 ;;		_EUSART_RxDataHandler
 14365 ;; This function is called by:
 14366 ;;		_EUSART_Initialize
 14367 ;;		_EUSART_Receive_ISR
 14368 ;; This function uses a non-reentrant model
 14369 ;;
 14370                           
 14371                           
 14372                           ;psect for function _EUSART_DefaultErrorHandler
 14373  1522                     _EUSART_DefaultErrorHandler:	
 14374                           
 14375                           ;mcc_generated_files/eusart.c: 269:     EUSART_RxDataHandler();
 14376                           
 14377                           ;incstack = 0
 14378 ;; hardware stack exceeded
 14379                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14380  1522  3197  272F         	fcall	_EUSART_RxDataHandler
 14381  1524  0008               	return
 14382  1525                     __end_of_EUSART_DefaultErrorHandler:	
 14383                           
 14384                           	psect	text102
 14385  172F                     __ptext102:	
 14386 ;; *************** function _EUSART_RxDataHandler *****************
 14387 ;; Defined at:
 14388 ;;		line 248 in file "mcc_generated_files/eusart.c"
 14389 ;; Parameters:    Size  Location     Type
 14390 ;;		None
 14391 ;; Auto vars:     Size  Location     Type
 14392 ;;		None
 14393 ;; Return value:  Size  Location     Type
 14394 ;;                  1    wreg      void 
 14395 ;; Registers used:
 14396 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14397 ;; Tracked objects:
 14398 ;;		On entry : 0/0
 14399 ;;		On exit  : 0/0
 14400 ;;		Unchanged: 0/0
 14401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14402 ;;      Params:         0       0       0       0       0       0       0       0
 14403 ;;      Locals:         0       0       0       0       0       0       0       0
 14404 ;;      Temps:          1       0       0       0       0       0       0       0
 14405 ;;      Totals:         1       0       0       0       0       0       0       0
 14406 ;;Total ram usage:        1 bytes
 14407 ;; Hardware stack levels used:    1
 14408 ;; This function calls:
 14409 ;;		Nothing
 14410 ;; This function is called by:
 14411 ;;		_EUSART_Receive_ISR
 14412 ;;		_EUSART_DefaultErrorHandler
 14413 ;; This function uses a non-reentrant model
 14414 ;;
 14415                           
 14416                           
 14417                           ;psect for function _EUSART_RxDataHandler
 14418  172F                     _EUSART_RxDataHandler:	
 14419                           
 14420                           ;mcc_generated_files/eusart.c: 250:     eusartRxBuffer[eusartRxHead++] = RCREG;
 14421                           
 14422                           ;incstack = 0
 14423 ;; hardware stack exceeded
 14424                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 14425  172F  0023               	movlb	3	; select bank3
 14426  1730  0819               	movf	25,w	;volatile
 14427  1731  00F0               	movwf	??_EUSART_RxDataHandler
 14428  1732  087C               	movf	_eusartRxHead,w
 14429  1733  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14430  1734  0086               	movwf	6
 14431  1735  0187               	clrf	7
 14432  1736  0870               	movf	??_EUSART_RxDataHandler,w
 14433  1737  0081               	movwf	1
 14434  1738  3001               	movlw	1
 14435  1739  00F0               	movwf	??_EUSART_RxDataHandler
 14436  173A  0870               	movf	??_EUSART_RxDataHandler,w
 14437  173B  07FC               	addwf	_eusartRxHead,f	;volatile
 14438                           
 14439                           ;mcc_generated_files/eusart.c: 251:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14440  173C  3008               	movlw	8
 14441  173D  027C               	subwf	_eusartRxHead,w	;volatile
 14442  173E  1803               	btfsc	3,0
 14443                           
 14444                           ;mcc_generated_files/eusart.c: 252:     {;mcc_generated_files/eusart.c: 253:         eus
      +                          artRxHead = 0;
 14445  173F  01FC               	clrf	_eusartRxHead	;volatile
 14446                           
 14447                           ;mcc_generated_files/eusart.c: 255:     eusartRxCount++;
 14448  1740  3001               	movlw	1
 14449  1741  00F0               	movwf	??_EUSART_RxDataHandler
 14450  1742  0870               	movf	??_EUSART_RxDataHandler,w
 14451  1743  0020               	movlb	0	; select bank0
 14452  1744  07E7               	addwf	_eusartRxCount,f	;volatile
 14453  1745  0008               	return
 14454  1746                     __end_of_EUSART_RxDataHandler:	
 14455  007E                     btemp	set	126	;btemp
 14456  007E                     int$flags	set	126
 14457  007E                     wtemp0	set	126


Data Sizes:
    Strings     52
    Constant    57
    Data        40
    BSS         139
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     61      79
    BANK1            80      2      66
    BANK2            80      0      75
    BANK3            80      0      32
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2601$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service$2601	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_10(CODE[3]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2279_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@s1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_10(CODE[3]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_10(CODE[3]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    sp__memcpy	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    S113$sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    S113$sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _vfpfcnvrt->_fputc
    _pad->_fputc
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_MTOUCH_Service_Mainloop
    _check_message->_printf
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Pressed->_Button_DefaultCallback
    _Button_State_Pressed->_myButtonReleasedCallback
    _Button_State_NotPressed->_Button_DefaultCallback
    _Button_State_NotPressed->_myButtonPressedCallback
    _update_state->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   52301
                                              0 BANK1      2     2      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                      _RELAY_PROCESS
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    5999
                                             48 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4468
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              3 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   29555
                                             60 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14526
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14427
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13171
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5745
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5202
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0   14661
                                             58 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0   14562
                                             54 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    7398
                                             49 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1    6111
                                             48 BANK0      1     0      1
            _MTOUCH_Button_isPressed
                       _update_state
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1831
                                             49 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     163
                                             48 BANK0      1     0      1
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                             48 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                             49 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0    6012
                                             48 BANK0      3     3      0
                        _LED_PROCESS
                      _RELAY_PROCESS
                       _update_state
 ---------------------------------------------------------------------------------
 (6) _update_state                                         0     0      0    5937
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4    5937
                                             40 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3    4956
                                             32 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    38      2    4521
                                             23 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 8     6      2    3015
                                             17 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2771
                                              8 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     123
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1226
                                              0 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     834
                                              4 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      66
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RELAY_PROCESS                                        3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              1 COMMON     3     3      0
                      _LED_0_SetHigh
                       _LED_0_SetLow
                      _LED_1_SetHigh
                       _LED_1_SetLow
                      _LED_2_SetHigh
                       _LED_2_SetLow
 ---------------------------------------------------------------------------------
 (7) _LED_2_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_2_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_0_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_0_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (17) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (17) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (18) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (18) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (18) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (18) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (18) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
       _LED_0_SetHigh
       _LED_0_SetLow
       _LED_1_SetHigh
       _LED_1_SetLow
       _LED_2_SetHigh
       _LED_2_SetLow
     _RELAY_PROCESS
     _update_state
       _printf
         _vfprintf
           _vfpfcnvrt
             _ctoa
               _pad
                 _fputc
                   _putch
                     _EUSART_Write
                 _fputs
                   _fputc
                     _putch
                       _EUSART_Write
                 _strlen
             _fputc
               _putch
                 _EUSART_Write
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_PROCESS
     _LED_0_SetHigh
     _LED_0_SetLow
     _LED_1_SetHigh
     _LED_1_SetLow
     _LED_2_SetHigh
     _LED_2_SetLow
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
               _LED_0_SetHigh
               _LED_0_SetLow
               _LED_1_SetHigh
               _LED_1_SetLow
               _LED_2_SetHigh
               _LED_2_SetLow
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _MTOUCH_Button_isPressed
             _update_state
               _printf
                 _vfprintf
                   _vfpfcnvrt
                     _ctoa
                       _pad
                         _fputc
                           _putch
                             _EUSART_Write
                         _fputs
                           _fputc
                             _putch
                               _EUSART_Write
                         _strlen
                     _fputc
                       _putch
                         _EUSART_Write
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _RELAY_PROCESS
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     109       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3D      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      2      42       8       82.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      20      12       40.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     109      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Jul 17 13:32:41 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                          _update_state 0C78  
                                      ___bmul@product 0073                                          ?_LED_PROCESS 0070  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 15A3                             _Sensor_setCalibratAcqTime 162D  
                                         __CFG_LVP$ON 0000                                                   l303 01D0  
                                                 l305 01E7                                                   l257 03F6  
                                                 l522 05C1                                                   l293 0130  
                                                 l286 012D                                                   l288 0129  
                                                 l741 085D                                                   l742 0863  
                                                 _GIE 005F                                                   _PR2 001B  
                                                 _abs 1746                                ??_EUSART_RxDataHandler 0070  
                                                 _pad 0C28                        ?_EUSART_SetFramingErrorHandler 0071  
                             ?_Sensor_loadADCSettings 0072                                       _TMR2_Initialize 15B3  
                                        __CFG_BORV$LO 0000                                         DATA_PROCESS@x 0052  
                                                 wreg 0009                      ??_MTOUCH_Sensor_Sampled_ResetAll 0072  
                     ?_MTOUCH_Sensor_Sampled_ResetAll 0070                      __size_of_MTOUCH_Sensor_SampleAll 0016  
                      Sensor_getScanGroupIndex@sensor 0073                     __size_of_MTOUCH_Sensor_Initialize 0015  
                           ?_MTOUCH_Sensor_Initialize 0070                                          ?_EUSART_Read 0070  
                                                l1202 0BB3                                                  ?_abs 0071  
                                                l1300 0C60                                                  l1028 0CD1  
                                                l1301 0C6C                                                  l1143 0E64  
                                                l1160 0B95                                                  l1208 0BDA  
                                                l1152 0B90                                                  l1181 0BA4  
                                                l1174 0B9F                                                  l1167 0B9A  
                                                l1195 0BAE                                                  l1188 0BA9  
                                                l1297 0C40                                                  l4301 0B48  
                                                l4231 0E1E                                                  l4223 0DFA  
                                                l4233 0E27                                                  l4225 0E03  
                                                l4241 0E42                                                  l6001 0D23  
                                                l4235 0E30                                                  l4227 0E0C  
                                                l4251 0BB8                                                  l4237 0E39  
                                                l4229 0E15                                                  l6005 0D2C  
                                                l6111 17D5                                                  l3721 0AD5  
                                                l4521 0F67                                                  l6017 1701  
                                                l6121 06AD                                                  l3707 0878  
                                                l4515 0F4B                                                  l4371 0FBB  
                                                l6051 0D44                                                  l6131 06CD  
                                                l6035 096F                                                  l3717 0AB2  
                                                l4517 0F53                                                  l6045 15F0  
                                                l6053 0D48                                                  l6205 163E  
                                                l6221 17B6                                                  ?_pad 0028  
                                                l6311 062B                                                  l3831 09D0  
                                                l3903 1608                                                  l4295 0B3B  
                                                l6127 06BC                                                  l6143 06EF  
                                                l4615 171A                                                  l3737 1762  
                                                l6305 061D                                                  l4393 08B6  
                                                l6073 05B8                                                  l3825 09BF  
                                                l4297 0B3D                                                  l6137 06DD  
                                                l6145 0712                                                  l3739 176E  
                                                l5531 0C36                                                  l5611 0A3E  
                                                l6331 0658                                                  l6323 0647  
                                                l6067 057F                                                  l3827 09CE  
                                                l3915 03F2                                                  l3693 0857  
                                                l5525 087F                                                  l5541 0C42  
                                                l6317 0639                                                  l4397 08BE  
                                                l4389 08AF                                                  l6085 0DB9  
                                                l3837 09E1                                                  l3933 0463  
                                                l4469 092F                                                  l6261 08F1  
                                                l5535 0C3E                                                  l5551 0A56  
                                                l6335 065A                                                  l5623 166F  
                                                l3935 0476                                                  l6191 170E  
                                                l6271 0904                                                  l6511 035E  
                                                l5553 0A5F                                                  l5609 0A21  
                                                l6329 0655                                                  l6281 05E7  
                                                l6169 07E8                                                  l3961 0788  
                                                l3953 0752                                                  l3929 0450  
                                                l6185 1705                                                  l6097 1611  
                                                l6265 08F3                                                  l5627 1675  
                                                l3955 0756                                                  l5715 00F6  
                                                l4915 0993                                                  l6293 0601  
                                                l3893 168D                                                  l5813 01FD  
                                                l5805 01EB                                                  l5741 0123  
                                                l5725 0109                                                  l5661 00A2  
                                                l5653 008B                                                  l6437 0252  
                                                l6287 05F3                                                  l5663 00A9  
                                                l5671 00AB                                                  l4951 0995  
                                                l6535 0396                                                  l6471 02D6  
                                                l5585 050C                                                  l4857 093D  
                                                l5825 0223                                                  l5809 01F4  
                                                l5761 0178                                                  l5665 00BE  
                                                l5913 0EA1                                                  l5905 0E9D  
                                                l6537 039A                                                  l6449 0276  
                                                l5579 04EB                                                  l5595 051D  
                                                l6299 060F                                                  l4859 0943  
                                                l3995 178E                                                  l5819 0211  
                                                l5683 00B1                                                  l5915 0EB4  
                                                l6555 03C3                                                  l6491 0335  
                                                l5589 0512                                                  l5861 0C8E  
                                                l5773 01AD                                                  l5765 0193  
                                                l5749 0133                                                  l4957 0997  
                                                l5863 0C95                                                  l5855 0C79  
                                                l5695 00C0                                                  l5919 0ED4  
                                                l6567 03DB                                                  l6495 033E  
                                                l5865 0C9C                                                  l5857 0C80  
                                                l5873 0CB1                                                  l6761 0662  
                                                l5849 0816                                                  l5777 01C7  
                                                l6753 090C                                                  l6763 0CB7  
                                                l5867 0CA3                                                  l5859 0C87  
                                                l5699 00CA                                                  l6755 099F  
                                                l6499 0343                                                  l6765 0BC0  
                                                l5869 0CAA                                                  l5949 0C17  
                                                l6757 06FC                                                  l6767 0E4A  
                                                l5983 0CE8                                                  l6759 0701  
                                                l5897 0E8A                                                  l5993 0D03  
                                                l5977 0CE0                                                  l5997 0D13  
                                                l5989 0CFB                                                  STR_1 1800  
                                                STR_2 180E                                                  STR_3 1813  
                                                STR_4 1818                                                  STR_5 181D  
                                                STR_6 1822                                                  STR_7 1827  
                                                STR_8 182C                                                  STR_9 1831  
                       ?_Button_Reading_Update_Helper 0070                                                  _LATA 010C  
                                                _LATB 010D                                                  u3015 0F83  
                                                _LATC 010E                                                  u3025 0FC9  
                                                u2325 174F                                                  u2405 048B  
                                                u2510 178C                                                  u2185 0AD3  
                                                u2505 177D                                                  u2425 0735  
                                                u2435 073F                                                  u3270 0F32  
                                                u2455 0779                                                  u3265 0EFA  
                                                u5025 0595                                                  u3275 0F2E  
                                                u5125 07AC                                                  u4255 0C4C  
                                                u3455 171D                                                  u5607 02AE  
                                                u5617 02BB                                                  u4755 0EBE  
                                                u5627 02C8                                                  u5637 02E5  
                                                u4775 0AE2                                                  u5647 02F2  
                                                u4785 0A0D                                                  u5657 02FF  
                                                u5577 0287                                                  u5667 030C  
                                                u5587 0294                                        ??_LED_0_SetLow 0071  
                                                u5677 0319                                                  u5597 02A1  
                                                u5687 0326                                                  u4995 0D71  
                          Button_State_Pressed@button 0051                                                  _TMR2 001A  
                               __end_of_check_message 0915                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01CB  
                                      ??_LED_1_SetLow 0071                              _Sensor_getScanGroupIndex 09BD  
                           ?_Sensor_Acq_ExecutePacket 007B                                          __CFG_WRT$OFF 0000  
                                      ??_LED_2_SetLow 0071                                    _MTOUCH_needReburst 0002  
                                                abs@a 0071                                                  _dbuf 01A0  
                                                _ctoa 0A47                                                  _main 0230  
                __size_of_MTOUCH_Button_InitializeAll 001C                                                  _prec 00BC  
                                                _nout 00B8                                                  pad@i 002C  
                                                pad@p 0029                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  pad@w 002E  
                __size_of_MTOUCH_Sensor_InitializeAll 000E                                                  btemp 007E  
                                                start 0023                                     ___bmul@multiplier 0074  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0070  
                      __end_of_Sensor_autoCalibration 07A7  __end_ofSensor_Scanfrequency_Evaluation@frequency_hop 180E  
        Sensor_Scanfrequency_Evaluation@frequency_hop 1809                              _myButtonReleasedCallback 0837  
                            ?_MTOUCH_Service_Mainloop 0070                      __size_of_MTOUCH_Button_isPressed 001B  
                       __size_of_Button_State_Pressed 0068                                                 ??_abs 0073  
                                               ??_pad 002B                           ?_Button_Baseline_Initialize 0070  
               Sensor_postAcquisitionProcess@adcIndex 0078                         ??_MTOUCH_Sensor_RawSample_Get 0077  
                       Sensor_RawSample_Update@sensor 0077                         myButtonPressedCallback@button 0050  
                           __size_of_Sensor_isEnabled 0011                                         ?_EUSART_Write 0070  
                      __size_of_OSCILLATOR_Initialize 0006                         __end_of_OSCILLATOR_Initialize 1587  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 0036                   __end_of_Sensor_isCalibratingAcqTime 15C4  
                         _Sensor_isCalibratingAcqTime 15BB                                                 ?_ctoa 0031  
                                               ?_main 0070                                                 STR_10 183A  
                      __end_of_Sensor_loadADCSettings 0498                                                 _T2CON 001C  
                             __size_of_Button_Service 0055                                       ??_LED_0_SetHigh 0071  
                                               i1l840 0015                                                 i1l754 0835  
                                               i1l845 0021                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 0037  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                       ??_LED_1_SetHigh 0071  
                                               _TXREG 019A                                                 _TXSTA 019E  
                     __size_of_Button_DefaultCallback 0001                                       ??_LED_2_SetHigh 0071  
                                ??_MTOUCH_needReburst 0071                       __size_of_Sensor_DefaultCallback 0001  
                                               _blink 00C6                                                 _flags 00BE  
                             __size_of_Sensor_Service 0095                 __end_of_MTOUCH_Sensor_Scan_Initialize 165C  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0010                         _MTOUCH_Sensor_Scan_Initialize 164C  
                                      _WDT_Initialize 07FC                               Sensor_setSampled@sensor 0071  
                                               _fputc 0AA9                                                 _fputs 087B  
                                        LED_PROCESS@x 0073                                                 pad@fp 0030  
                                               _width 00BA                                                 ctoa@c 0031  
                                               _putch 154D                                                 ctoa@w 0034  
                    __size_of_Button_State_NotPressed 00A4                                                 pclath 000A  
                                _Sensor_Sampled_Reset 15AB                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 1528  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0008  
                              Sensor_isEnabled@sensor 0072                                       __initialization 0025  
                                        __end_of_ctoa 0A77                                          __end_of_main 03E8  
                                _Sensor_setCalibrated 15F4                                 __size_of_DATA_PROCESS 009C  
                                      ??_EUSART_Write 0071                               __end_of_TMR2_Initialize 15BB  
                                      __CFG_LPBOR$OFF 0000                           ?_INTERRUPT_InterruptManager 0070  
                      ??_EUSART_SetRxInterruptHandler 0073                      __end_of_MTOUCH_Button_Initialize 0B14  
                                              ??_ctoa 0033                                                ??_main 00E0  
                             _MTOUCH_Sensor_Calibrate 168F                             Sensor_Service@sensor_adc1 0044  
                           Sensor_Service@sensor_adc2 0045                               ??_Button_Reading_Update 007C  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0073                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 0800                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 0077             __end_of_EUSART_DefaultFramingErrorHandler 1520  
          __size_of_EUSART_DefaultFramingErrorHandler 0001                   ??_EUSART_DefaultFramingErrorHandler 0070  
                  ?_EUSART_DefaultFramingErrorHandler 0070                     _EUSART_DefaultFramingErrorHandler 151F  
                          _EUSART_OverrunErrorHandler 00D7                  __size_of_MTOUCH_Sensor_RawSample_Get 0018  
                                              ?_fputc 0074                                                ?_fputs 0020  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              ?_putch 0070                                                _ANSELB 018D  
                                              _ANSELC 018E                            __end_of_EUSART_is_rx_ready 1528  
                                              _BORCON 0116                                                i1l4903 0A98  
                                              i1l4907 0AA6                                                i1l4897 0A8A  
                               ?_Sensor_Sampled_Reset 0070                                                _OSCCON 0099  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              _WDTCON 0097                     MTOUCH_Button_InitializeAll@button 0020  
                                        _DATA_PROCESS 05E4                        ??_Button_Reading_Update_Helper 0079  
                              _Button_DefaultCallback 1520                       __end_of_MTOUCH_Service_Mainloop 17C7  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 15C4  
                              _Sensor_DefaultCallback 1521                                          vfprintf@cfmt 0046  
                                       _packet_sample 005D                                                ___bmul 166D  
                               ?_Sensor_setCalibrated 0070                          Sensor_DefaultCallback@sensor 0071  
                                      __CFG_STVREN$ON 0000                      __size_of_myButtonPressedCallback 0026  
                                 _EUSART_Transmit_ISR 0819                                                _memcpy 0966  
                                              _rxData 0066                                  __end_of_LED_0_SetLow 153D  
                    __end_of_MTOUCH_Button_ServiceAll 164C                                  __end_of_LED_1_SetLow 1545  
                                              _printf 165C                                                pad@buf 0028  
                                __size_of_LED_PROCESS 006D                                                ctoa@fp 0036  
                        Sensor_autoCalibration@sensor 007A                                  __end_of_LED_2_SetLow 154D  
                                              _strlen 175D                                                fputc@c 0074  
                                              fputs@c 0024                                                fputs@i 0025  
                                              fputs@s 0027                               _MTOUCH_Sensor_SampleAll 1703  
                        Button_DefaultCallback@button 0050                                  ?_Sensor_isCalibrated 0070  
                                     ?_WDT_Initialize 0070                              ?_Sensor_RawSample_Update 0070  
                          __end_of_Sensor_Acquisition 0D2E                                __size_of_RELAY_PROCESS 004D  
                             ?_Button_Baseline_Update 0070                                      __end_of_vfprintf 0A47  
                 Sensor_postAcquisitionProcess@sensor 0079                               __end_of_TMR2_StartTimer 152B  
                  __size_of_Sensor_setCalibratAcqTime 000F              __end_of_MTOUCH_Button_SetPressedCallback 1563  
           __size_of_MTOUCH_Button_SetPressedCallback 0006                    ??_MTOUCH_Button_SetPressedCallback 0073  
                   ?_MTOUCH_Button_SetPressedCallback 0071                      _MTOUCH_Button_SetPressedCallback 155D  
                            __size_of_Sensor_isActive 000E                                  ?_EUSART_Transmit_ISR 0070  
                     MTOUCH_Sensor_RawSample_Get@name 0078                   Sensor_getScanGroupIndex@sensorGroup 0074  
                                __size_of_EUSART_Read 0029                                     _SYSTEM_Initialize 16B3  
                             __end_of__initialization 0061                   __size_of_Button_Baseline_Initialize 002E  
                      ?_MTOUCH_Sensor_Scan_Initialize 0070                       ??_Sensor_postAcquisitionProcess 0075  
                                  ?_SYSTEM_Initialize 0070                                   _Button_StateMachine 00C9  
                          __end_of_Button_Tick_helper 08EE                         MTOUCH_Sensor_Calibrate@sensor 0076  
                __end_of_EUSART_SetTxInterruptHandler 1581                 __size_of_EUSART_SetTxInterruptHandler 0006  
                        _EUSART_SetTxInterruptHandler 157B           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024  
                                 ___bmul@multiplicand 0071                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 1775                                          __pidataBANK0 0800  
                                        __pidataBANK1 15DA                                          __pidataBANK2 1790  
         __end_of_MTOUCH_Button_SetNotPressedCallback 155D          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0073                  ?_MTOUCH_Button_SetNotPressedCallback 0071  
                 _MTOUCH_Button_SetNotPressedCallback 1557                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 172F                                         __end_of_fputc 0ADE  
                                       __end_of_fputs 08A1                      __end_of_MTOUCH_Sensor_Initialize 16ED  
                                       __end_of_putch 1552                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 167E                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0F71                              Sensor_setInactive@sensor 0071  
                                      _Button_Service 07A7                      __end_of_Sensor_Acq_ExecutePacket 0230  
                          ?_Button_State_Initializing 0051                                  Button_Service@button 0059  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 00A0  
                      __end_of_Button_Baseline_Update 1000                   Sensor_Acq_ExecutePacket@sensor_adc1 002D  
                 Sensor_Acq_ExecutePacket@sensor_adc2 007B                              _MTOUCH_Button_Initialize 0ADE  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 0680  
                             _Button_State_NotPressed 0540                         __size_of_MTOUCH_Sensor_Enable 0012  
                                  _Sensor_setInactive 159B                                     _sensor_scan_group 1836  
                                             ??_fputc 0077                             __end_of_SYSTEM_Initialize 16C5  
                                   _lowpowerActivated 006C                                               ??_fputs 0021  
                               ??_EUSART_Transmit_ISR 0070                      MTOUCH_Sensor_isCalibrated@sensor 0076  
                              ??_Sensor_Sampled_Reset 0071                                               ??_putch 0073  
                                          __pbssBANK0 005D                                            __pbssBANK1 00A0  
                                          __pbssBANK2 0120                                            __pbssBANK3 01A0  
                                          _check_data 0991                                  __end_of_EUSART_Write 087B  
                             _TMR2_LoadPeriodRegister 1552                            ??_myButtonReleasedCallback 007C  
                        Sensor_loadADCSettings@sensor 0079                                   ?_Sensor_setInactive 0070  
                                    _Sensor_setActive 1593                           __size_of_EUSART_Receive_ISR 0032  
                          __end_of_mtouch_button_init 1030                                     _last_touch_status 0061  
         Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025                                ??_Sensor_setCalibrated 0071  
                                          __pmaintext 0230                                         _RELAY_PROCESS 0B8E  
                                             ?___bmul 0071                         ?_EUSART_SetTxInterruptHandler 0071  
                    _EUSART_TxDefaultInterruptHandler 00DD                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                      MTOUCH_Sensor_wasSampled@sensor 0076                                            __pintentry 0004  
                              __end_of_Button_Service 07FC                                               ?_memcpy 0071  
                                             _BAUDCON 019F                                             _AD1ACQCON 0717  
                 __end_of_MTOUCH_Button_InitializeAll 17E3                           _MTOUCH_Button_InitializeAll 17C7  
                                           _AD2ACQCON 0797                          ??_EUSART_DefaultErrorHandler 0071  
                 __end_of_MTOUCH_Sensor_InitializeAll 161E                           _MTOUCH_Sensor_InitializeAll 1610  
                           ??_MTOUCH_Sensor_SampleAll 0046                                               ?_printf 0048  
                     __end_of_Sensor_RawSample_Update 093D                                  ??_Sensor_setInactive 0071  
                                             ?_strlen 0071                     __size_of_MTOUCH_Sensor_wasSampled 000F  
                           ?_MTOUCH_Sensor_wasSampled 0070                                         _eusartRxCount 0067  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0071  
                                           _AD2PRECON 0796                     __end_of_Button_State_Initializing 0D90  
                              __end_of_Sensor_Service 0715                               Sensor_Service@scanGroup 0042  
                            _MTOUCH_Button_ServiceAll 163C                             __end_of_sensor_scan_group 183A  
                                  __size_of_vfpfcnvrt 00A8                         __size_of_EUSART_RxDataHandler 0017  
                    __size_of_MTOUCH_Service_Mainloop 001C                          __end_of_Button_State_Pressed 0DF8  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0073  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 0079  
                     Sensor_setCalibratAcqTime@sensor 0071                                  __size_of_MTOUCH_Tick 0003  
                 Sensor_loadADCSettings@addressOffset 0078                  __size_of_Sensor_isCalibratingAcqTime 0009  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021                             ??_MTOUCH_Button_isPressed 0071  
                                          _count_conf 00C2                                     ??_Sensor_isActive 0071  
                 __size_of_EUSART_DefaultErrorHandler 0003                                        ?_RELAY_PROCESS 0070  
               __end_of_Sensor_postAcquisitionProcess 0B4C                __size_of_Sensor_postAcquisitionProcess 0038  
                       _Sensor_postAcquisitionProcess 0B14                                 __size_of_LED_0_SetLow 0004  
                               __size_of_LED_1_SetLow 0004                               _myButtonPressedCallback 08A1  
                             Sensor_Acquisition@retry 003D                                       __size_of___bmul 0011  
                                         _AD1CON0bits 0711                                 __size_of_LED_2_SetLow 0004  
                      MTOUCH_Button_Initialize@button 007A                                           _AD2CON0bits 0791  
                                           ?_vfprintf 0040                                       ?_Button_Service 0070  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 0031            Sensor_Scanfrequency_Evaluation@sensor_adc2 002E  
                                     __size_of_memcpy 002B                                               __ptext1 08EE  
                                             __ptext2 0991                                               __ptext3 16B3  
                                             __ptext4 07FC                                               __ptext5 15B3  
                                             __ptext6 17E3                                               __ptext7 1581  
                                             __ptext8 15CE                                               __ptext9 1610  
                              __size_of_check_message 0027                                       __size_of_printf 0011  
                         Button_Reading_Update@button 0020                                       __size_of_strlen 0018  
                            _MTOUCH_Sensor_Initialize 16D8                                 _OSCILLATOR_Initialize 1581  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 0052  
                                             _prcData 00C7                                       ?_Sensor_Service 0070  
                               __end_of_LED_0_SetHigh 1539                              ??_PIN_MANAGER_Initialize 0071  
                      __size_of_Button_Reading_Update 000E                           __size_of_MTOUCH_needReburst 0002  
                               __end_of_LED_1_SetHigh 1541                         __end_of_Button_Reading_Update 15F4  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 0065  
                                    _callback_sampled 00D3                                 __end_of_LED_2_SetHigh 1549  
                           ??_TMR2_LoadPeriodRegister 0071                       Sensor_RawSample_Update@adcIndex 0076  
                          __size_of_SYSTEM_Initialize 0012                                               clrloop0 1588  
                                    _callback_pressed 00D1                        MTOUCH_Sensor_Initialize@sensor 0078  
                                end_of_initialization 0061                                           ?_check_data 0070  
                             ?_Button_DefaultCallback 0050                 __end_of_EUSART_SetOverrunErrorHandler 1575  
              __size_of_EUSART_SetOverrunErrorHandler 0006                         _EUSART_SetOverrunErrorHandler 156F  
                                             memcpy@d 007A                                               memcpy@n 0073  
                                             memcpy@s 0077                                               fputc@fp 0076  
                                        _LED_0_SetLow 1539                                               init_ram 158D  
                                             fputs@fp 0020                                          _LED_1_SetLow 1541  
                                             initloop 158E                                          _LED_2_SetLow 1549  
                             ?_Sensor_DefaultCallback 0071                         Sensor_Acquisition@sensor_adc1 003E  
                       Sensor_Acquisition@sensor_adc2 003B                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 0B4C                          ??_MTOUCH_Sensor_isCalibrated 0075  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 0540  
                 __end_of_MTOUCH_Sensor_RawSample_Get 0819                           _MTOUCH_Sensor_RawSample_Get 0801  
                                           _RCSTAbits 019D                                    _EUSART_is_rx_ready 1525  
                                          ??_vfprintf 0043                                               strlen@a 0074  
                                             strlen@s 0075                                   ??_EUSART_Initialize 0073  
                                    ??_WDT_Initialize 0071                        ??_EUSART_SetTxInterruptHandler 0073  
                                 ?_EUSART_is_rx_ready 0070                                Sensor_setActive@sensor 0071  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 0034  
                       Button_Deviation_Update@button 0020                  Sensor_Acq_ExecutePacket@AD1CON2_temp 0022  
                               __size_of_EUSART_Write 0025              MTOUCH_Button_SetPressedCallback@callback 0071  
                          MTOUCH_Sensor_Enable@sensor 0076                  Sensor_Acq_ExecutePacket@AD2CON2_temp 0023  
                                 _callback_notPressed 00CF                   __size_of_MTOUCH_Sensor_isCalibrated 0016  
                      __end_of_Button_DefaultCallback 1521                       __size_of_EUSART_SetErrorHandler 0006  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 0032                                    _sensor_globalFlags 006B  
                            __end_of_Sensor_isEnabled 168F                            Sensor_setCalibrated@sensor 0071  
                      __end_of_Sensor_DefaultCallback 1522                      __end_of_myButtonReleasedCallback 0856  
                           __end_of_EUSART_Initialize 0B8E                                  ??_EUSART_is_rx_ready 0071  
                                       _check_message 08EE                            _Sensor_loadADCSettings$562 0076  
                            ??_Sensor_autoCalibration 0075                                             _TXSTAbits 019E  
                                       _check_request 0064                                       ??_RELAY_PROCESS 0071  
                           ??_myButtonPressedCallback 007C                      __size_of_Sensor_RawSample_Update 0028  
                                  _Sensor_Acquisition 0CD2                              ??_Sensor_loadADCSettings 0073  
                                       ?_update_state 0070                                         ??_LED_PROCESS 0071  
                                _Button_State_Pressed 0D90                                        __end_of___bmul 167E  
                  __end_of_EUSART_DefaultErrorHandler 1525                            _EUSART_DefaultErrorHandler 1522  
                                 ?_Sensor_Acquisition 003B                                           vfpfcnvrt@ap 0038  
                                         vfpfcnvrt@fp 003F                            ??_MTOUCH_Button_Initialize 0077  
         MTOUCH_Button_SetNotPressedCallback@callback 0071                       ??_MTOUCH_Sensor_Scan_Initialize 0071  
                      ?_Sensor_postAcquisitionProcess 0070                                          _EUSART_Write 0856  
                                 __size_of_check_data 002C                                    _Button_Tick_helper 08C7  
                                      __end_of_memcpy 0991                                ?_OSCILLATOR_Initialize 0070  
                                 MTOUCH_Button_Tick@i 0075                              __end_of_Sensor_setActive 159B  
                    TMR2_LoadPeriodRegister@periodVal 0071                                        __end_of_printf 166D  
                         ??_Button_State_Initializing 0052                                        __end_of_strlen 1775  
                                 start_initialization 0025                               _MTOUCH_Service_Mainloop 17AB  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 1719  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 175D  
                                         __end_of_pad 0C78                                        _TMR2_StopTimer 152B  
                                       ??_EUSART_Read 0071          EUSART_SetRxInterruptHandler@interruptHandler 0071  
        EUSART_SetTxInterruptHandler@interruptHandler 0071                                           putch@txData 0073  
                                ??_Sensor_Acquisition 003C                                        ?_check_message 0070  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 0051  
                      Sensor_autoCalibration@adcIndex 0079                        ?_EUSART_SetOverrunErrorHandler 0071  
                    __end_of_MTOUCH_Sensor_wasSampled 162D                                  ??_Button_Tick_helper 0071  
                        __end_of_MTOUCH_Sensor_Enable 16B3                                           vfprintf@fmt 0040  
                                        _packet_noise 00C4                                        ??_update_state 007C  
                          _EUSART_FramingErrorHandler 00D9                                              ??___bmul 0072  
                               ?_Button_State_Pressed 0051                                _EUSART_SetErrorHandler 1563  
                          ??_MTOUCH_Button_ServiceAll 005A                                           __pdataBANK0 006E  
                                         __pdataBANK1 00C9                                           __pdataBANK2 0150  
                                      check_message@x 0052                                              ??_memcpy 0075  
                         __end_of_Sensor_isCalibrated 15CE                          ??_Button_Baseline_Initialize 0020  
                                       _sample_period 006E                                  ??_MTOUCH_Button_Tick 0074  
                                  _mtouch_button_init 1000                            Sensor_Sampled_Reset@sensor 0071  
                                            ??_printf 004C                                              ??_strlen 0073  
                        ?_Sensor_isCalibratingAcqTime 0070                       __end_of_myButtonPressedCallback 08C7  
                                 __end_of_LED_PROCESS 0E65                           __end_of_EUSART_Transmit_ISR 0837  
                              __end_of_TMR2_StopTimer 152E                                           __pbssCOMMON 007C  
                                           ___latbits 0002                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00E0                              __size_of_TMR2_Initialize 0008  
                                     _Sensor_isActive 1602                        MTOUCH_Button_ServiceAll@button 005B  
                                 Sensor_Service@error 0043                            __end_of_EUSART_Receive_ISR 0AA9  
                       __size_of_Sensor_Sampled_Reset 0008                            __size_of_EUSART_Initialize 0042  
                             _Button_Deviation_Update 0EEA                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 00DB                                   __end_of_EUSART_Read 0966  
                           _Button_State_Initializing 0D2E                    __end_of_MTOUCH_Sensor_isCalibrated 1703  
                          _MTOUCH_Sensor_isCalibrated 16ED                                             __pnvBANK1 00D5  
                     __size_of_Sensor_autoCalibration 0092                     __size_of_Sensor_getScanGroupIndex 002D  
                                   _Sensor_setSampled 15A3                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 1746                                _PIN_MANAGER_Initialize 17E3  
                                    ??_Button_Service 0056                              ?_MTOUCH_Sensor_Calibrate 0070  
                                EUSART_Read@readValue 0072                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 007B                            ??_MTOUCH_Sensor_Initialize 0077  
                       __size_of_Sensor_setCalibrated 000E                                             __ptext100 151F  
                                           __ptext101 1522                                             __ptext102 172F  
                     __size_of_Sensor_loadADCSettings 00B0                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 007C  
                                            _AAD2RES0 079A                                          _eusartTxHead 006A  
                                        _eusartRxTail 0068                                          _eusartTxTail 0069  
                                    ??_Sensor_Service 003F                            ??_Sensor_Acq_ExecutePacket 0020  
                        ??_INTERRUPT_InterruptManager 0071                                   ??_Sensor_setSampled 0071  
                   __size_of_myButtonReleasedCallback 001F                                           _blink_count 0063  
                           ?_myButtonReleasedCallback 0050                             ??_MTOUCH_Service_Mainloop 005C  
                                   __size_of_vfprintf 002F                                              _ADCOMCON 0712  
                             _eusartTxBufferRemaining 00DF                           __size_of_Sensor_setInactive 0008  
                      Sensor_Acq_ExecutePacket@last_a 0028                        Sensor_Acq_ExecutePacket@last_b 002A  
                                     ?_TMR2_StopTimer 0070                         ??_Sensor_isCalibratingAcqTime 0071  
                                       ??_MTOUCH_Tick 0076                                      __CFG_WDTE$SWDTEN 0000  
                                     ??_check_message 0050                                        __size_of_fputc 0035  
                                      __size_of_fputs 0026                                        __size_of_putch 0005  
                                        ??_check_data 0071                                        _eusartRxBuffer 00A8  
                                      _eusartTxBuffer 00B0                             __end_of_Sensor_setSampled 15AB  
                                            _LATAbits 010C                EUSART_SetErrorHandler@interruptHandler 0071  
                                            _LATBbits 010D                                              _LATCbits 010E  
                                       ?_DATA_PROCESS 0070                               _Sensor_RawSample_Update 0915  
                   __end_of_Sensor_setCalibratAcqTime 163C                                             clear_ram0 1587  
                                            _PIE1bits 0091                                     _eusartRxLastError 00C8  
                            __size_of_TMR2_StartTimer 0003                   __size_of_INTERRUPT_InterruptManager 001F  
                                            _PIR1bits 0011                       ??_EUSART_SetFramingErrorHandler 0073  
              Sensor_Acq_ExecutePacket@packet_counter 002C                                              _PIR2bits 0012  
                              ??_Button_State_Pressed 0052                __end_of_MTOUCH_Sensor_Sampled_ResetAll 16D8  
             __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013                        _MTOUCH_Sensor_Sampled_ResetAll 16C5  
                            ?_MTOUCH_Sensor_SampleAll 0070             __end_of_EUSART_DefaultOverrunErrorHandler 1535  
          __size_of_EUSART_DefaultOverrunErrorHandler 0004                   ??_EUSART_DefaultOverrunErrorHandler 0070  
                  ?_EUSART_DefaultOverrunErrorHandler 0070                     _EUSART_DefaultOverrunErrorHandler 1531  
                  Sensor_Acq_ExecutePacket@ADxIF_flag 0026                                           _LED_PROCESS 0DF8  
                            _MTOUCH_Sensor_wasSampled 161E                                    _mtouch_time_toScan 006D  
                                           _vfpfcnvrt 0498                              ??_Button_Baseline_Update 0071  
                                  __end_of_check_data 09BD                               __end_of_Sensor_isActive 1610  
                              _Sensor_autoCalibration 0715                            __end_of_MTOUCH_needReburst 0004  
                      myButtonReleasedCallback@button 0050                                _Sensor_loadADCSettings 03E8  
                                _MTOUCH_Sensor_Enable 16A1                                           _EUSART_Read 093D  
                                __end_of_update_state 0CD2                                            vfpfcnvrt@c 003E  
                            Button_Tick_helper@button 0073                             ??_Button_Deviation_Update 0071  
                               _Button_Reading_Update 15E6                              ?_MTOUCH_Button_isPressed 0070  
                                   ?_Sensor_isEnabled 0070                                        ??_DATA_PROCESS 0050  
                                   ??_TMR2_Initialize 0071                                   __end_of_MTOUCH_Tick 1531  
                                   _MTOUCH_Initialize 15CE                       __end_of_MTOUCH_Sensor_Calibrate 16A1  
                                  ??_Sensor_isEnabled 0071                                    ?_MTOUCH_Initialize 0070  
              Sensor_postAcquisitionProcess@deviation 0076                                             memcpy@tmp 0076  
                                          vfprintf@ap 0042                                            vfprintf@fp 0045  
                              __size_of_LED_0_SetHigh 0004                                            _APFCONbits 011D  
                              __size_of_LED_1_SetHigh 0004                               ??_OSCILLATOR_Initialize 0071  
                  __end_of_Button_Baseline_Initialize 0A18                            _Button_Baseline_Initialize 09EA  
                                 _EUSART_ErrorHandler 00D5                                __size_of_LED_2_SetHigh 0004  
                                 ??_MTOUCH_Initialize 007C                           ?_EUSART_DefaultErrorHandler 0070  
                                          ?_vfpfcnvrt 0037                              ?_Button_State_NotPressed 0051  
                                         check_data@x 0073                                    Button_Service@name 0058  
                                   ?_Sensor_setActive 0070                              ?_TMR2_LoadPeriodRegister 0070  
                               Sensor_isActive@sensor 0071                  Sensor_Scanfrequency_Evaluation@retry 0035  
                                  ??_Sensor_setActive 0071                                  _EUSART_RxDataHandler 172F  
                               ?_MTOUCH_Sensor_Enable 0070                                              __ptext10 16D8  
                                            __ptext11 16A1                                              __ptext20 17AB  
                                            __ptext12 17C7                                              __ptext21 0002  
                                            __ptext13 0966                                              __ptext30 0915  
                                            __ptext22 152E                                              __ptext14 0B4C  
                                            __ptext31 1521                                              __ptext23 1719  
                                            __ptext15 157B                                              __ptext40 1552  
                                            __ptext32 0CD2                                              __ptext24 08C7  
                                            __ptext16 1575                                              __ptext41 03E8  
                                            __ptext33 0B14                                              __ptext25 16C5  
                                            __ptext17 156F                                              __ptext50 09BD  
                                            __ptext42 15C4                                              __ptext34 159B  
                                            __ptext26 15AB                                              __ptext18 1569  
                                            __ptext51 164C                                              __ptext43 167E  
                                            __ptext35 1593                                              __ptext27 1703  
                                            __ptext19 1563                                              __ptext60 1520  
                                            __ptext52 163C                                              __ptext44 1602  
                                            __ptext36 0E65                                              __ptext28 0680  
                                            __ptext61 0837                                              __ptext53 07A7  
                                            __ptext45 0715                                              __ptext37 0065  
                                            __ptext29 15A3                                              __ptext70 166D  
                                            __ptext62 1775                                              __ptext54 161E  
                                            __ptext46 1746                                              __ptext38 152B  
                                            __ptext71 0EEA                                              __ptext63 0ADE  
                                            __ptext55 16ED                                              __ptext47 15F4  
                                            __ptext39 1528                                              __ptext80 0498  
                                            __ptext72 155D                                              __ptext64 168F  
                                            __ptext56 0540                                              __ptext48 162D  
                                            __ptext81 0A47                                              __ptext73 1557  
                                            __ptext65 0F71                                              __ptext57 0D2E  
                                            __ptext49 15BB                                              __ptext90 1549  
                                            __ptext82 0C28                                              __ptext74 1525  
                                            __ptext66 09EA                                              __ptext58 0D90  
                                            __ptext91 1545                                              __ptext83 175D  
                                            __ptext75 093D                                              __ptext67 15E6  
                                            __ptext59 08A1                                              __ptext92 1541  
                                            __ptext84 087B                                              __ptext76 05E4  
                                            __ptext68 0BDB                                              __ptext93 153D  
                                            __ptext85 0AA9                                              __ptext77 0C78  
                                            __ptext69 0801                                              __ptext94 1539  
                                            __ptext86 154D                                              __ptext78 165C  
                                            __ptext95 1535                                              __ptext87 0856  
                                            __ptext79 0A18                                              __ptext88 0B8E  
                                            __ptext97 0819                                              __ptext89 0DF8  
                                            __ptext98 0A77                                              __ptext99 1531  
                           __end_of_MTOUCH_Initialize 15DA                             ??_Sensor_RawSample_Update 0075  
                          __size_of_Sensor_setSampled 0008                           __size_of_EUSART_is_rx_ready 0003  
                                       __size_of_ctoa 0030                                         __size_of_main 01B8  
                     __end_of_MTOUCH_Sensor_SampleAll 1719                      Sensor_Scanfrequency_Evaluation@i 003A  
                             ?_EUSART_SetErrorHandler 0071                                 __end_of_RELAY_PROCESS 0BDB  
       EUSART_SetOverrunErrorHandler@interruptHandler 0071                                              int$flags 007E  
                                            _vfprintf 0A18                    __size_of_Button_State_Initializing 0062  
                                   ??_TMR2_StartTimer 0071                    __end_of_INTERRUPT_InterruptManager 0023  
                          _INTERRUPT_InterruptManager 0004                                             printf@fmt 0048  
               __end_of_EUSART_SetFramingErrorHandler 156F                __size_of_EUSART_SetFramingErrorHandler 0006  
                       _EUSART_SetFramingErrorHandler 1569                                        RELAY_PROCESS@x 0073  
                     __size_of_Button_Baseline_Update 008F                          ?_MTOUCH_Button_InitializeAll 0070  
                        MTOUCH_Sensor_SampleAll@group 0047                          ?_MTOUCH_Sensor_InitializeAll 0070  
                                    ?_Sensor_isActive 0070                                         _mtouch_button 0120  
                                          _INTCONbits 000B                                 ?_EUSART_RxDataHandler 0070  
                                       _mtouch_sensor 0150                                              memcpy@d1 0079  
                                            memcpy@s1 0071                       __end_of_MTOUCH_Button_isPressed 1790  
                                       _LED_0_SetHigh 1535                      __end_of_Sensor_getScanGroupIndex 09EA  
                                   __CFG_BOREN$NSLEEP 0000                                        __pstringtext10 1827  
                                      __pstringtext11 182C                                        __pstringtext12 1831  
                                      __pstringtext13 183A                                        __pstringtext14 0000  
                                         _MTOUCH_Tick 152E                                ?_Button_Reading_Update 0070  
                                       _LED_1_SetHigh 153D                      Button_Deviation_Update@deviation 0021  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0079  
                                       _LED_2_SetHigh 1545                     __size_of_MTOUCH_Button_Initialize 0036  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 005C                              ?_myButtonPressedCallback 0050  
             __end_of_Sensor_Scanfrequency_Evaluation 0EEA              __size_of_Sensor_Scanfrequency_Evaluation 0085  
                   ??_Sensor_Scanfrequency_Evaluation 002F                      ?_Sensor_Scanfrequency_Evaluation 002E  
                     _Sensor_Scanfrequency_Evaluation 0E65                               ?_PIN_MANAGER_Initialize 0070  
                                       _timeout_count 00C0                           ??_Sensor_setCalibratAcqTime 0071  
                      __end_of_EUSART_SetErrorHandler 1569                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                  __end_of_EUSART_SetRxInterruptHandler 157B  
               __size_of_EUSART_SetRxInterruptHandler 0006                          _EUSART_SetRxInterruptHandler 1575  
                                       _config_status 0065                           __size_of_Button_Tick_helper 0027  
                     __end_of_Button_State_NotPressed 05E4                                              printf@ap 004F  
                                  _EUSART_Receive_ISR 0A77         EUSART_SetFramingErrorHandler@interruptHandler 0071  
                        __end_of_Sensor_Sampled_Reset 15B3                                           ??_vfpfcnvrt 0039  
                                    ??_TMR2_StopTimer 0071                       __end_of_TMR2_LoadPeriodRegister 1557  
                         __size_of_MTOUCH_Button_Tick 0016                                         __pstringtext1 1809  
                                       __pstringtext2 1836                                         __pstringtext3 1000  
                                       __pstringtext4 1800                                         __pstringtext5 180E  
                                       __pstringtext6 1813                                         __pstringtext7 1818  
                                       __pstringtext8 181D                                         __pstringtext9 1822  
                                __end_of_DATA_PROCESS 0680                                   ?_EUSART_Receive_ISR 0070  
                               __size_of_update_state 005A                         ??_MTOUCH_Button_InitializeAll 007B  
                            ??_Button_DefaultCallback 007C                         ??_MTOUCH_Sensor_InitializeAll 0079  
                Sensor_Acq_ExecutePacket@activeSensor 0027                      __size_of_MTOUCH_Sensor_Calibrate 0012  
                              ??_MTOUCH_Sensor_Enable 0075                                        ?_LED_0_SetHigh 0070  
                   Sensor_isCalibratingAcqTime@sensor 0071                          __size_of_Sensor_isCalibrated 000A  
                            ??_Sensor_DefaultCallback 0072                          __end_of_Sensor_setCalibrated 1602  
                                      ?_LED_1_SetHigh 0070                  __end_of_Button_Reading_Update_Helper 0C28  
               __size_of_Button_Reading_Update_Helper 004D                          _Button_Reading_Update_Helper 0BDB  
                                      ?_LED_2_SetHigh 0070                     __size_of_MTOUCH_Button_ServiceAll 0010  
                           ?_MTOUCH_Button_ServiceAll 0070                         Button_State_NotPressed@button 0051  
                                  EUSART_Write@txData 0072                          __size_of_EUSART_Transmit_ISR 001E  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 1800  
                              _Button_Baseline_Update 0F71                                         ?_LED_0_SetLow 0070  
                                       ?_LED_1_SetLow 0070                                         ?_LED_2_SetLow 0070  
                         MTOUCH_Button_isPressed@name 0072                                  ??_EUSART_Receive_ISR 0071  
                          ??_MTOUCH_Sensor_wasSampled 0075  
