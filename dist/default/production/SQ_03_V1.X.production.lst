

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Jul 30 10:37:30 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	cinit,global,class=CODE,merge=1,delta=2
    24                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    30                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    31                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    32                           	psect	inittext,global,class=CODE,delta=2
    33                           	psect	clrtext,global,class=CODE,delta=2
    34                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    36                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    37                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    38                           	psect	text1,local,class=CODE,merge=1,delta=2
    39                           	psect	text2,local,class=CODE,merge=1,delta=2
    40                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text4,local,class=CODE,merge=1,delta=2
    42                           	psect	text5,local,class=CODE,merge=1,delta=2
    43                           	psect	text6,local,class=CODE,merge=1,delta=2
    44                           	psect	text7,local,class=CODE,merge=1,delta=2
    45                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text11,local,class=CODE,merge=1,delta=2
    49                           	psect	text12,local,class=CODE,merge=1,delta=2
    50                           	psect	text13,local,class=CODE,merge=1,delta=2
    51                           	psect	text14,local,class=CODE,merge=1,delta=2
    52                           	psect	text15,local,class=CODE,merge=1,delta=2
    53                           	psect	text16,local,class=CODE,merge=1,delta=2
    54                           	psect	text17,local,class=CODE,merge=1,delta=2
    55                           	psect	text18,local,class=CODE,merge=1,delta=2
    56                           	psect	text19,local,class=CODE,merge=1,delta=2
    57                           	psect	text20,local,class=CODE,merge=1,delta=2
    58                           	psect	text21,local,class=CODE,merge=1,delta=2
    59                           	psect	text22,local,class=CODE,merge=1,delta=2
    60                           	psect	text23,local,class=CODE,merge=1,delta=2
    61                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text25,local,class=CODE,merge=1,delta=2
    63                           	psect	text26,local,class=CODE,merge=1,delta=2
    64                           	psect	text27,local,class=CODE,merge=1,delta=2
    65                           	psect	text28,local,class=CODE,merge=1,delta=2
    66                           	psect	text29,local,class=CODE,merge=1,delta=2
    67                           	psect	text30,local,class=CODE,merge=1,delta=2
    68                           	psect	text31,local,class=CODE,merge=1,delta=2
    69                           	psect	text32,local,class=CODE,merge=1,delta=2
    70                           	psect	text33,local,class=CODE,merge=1,delta=2
    71                           	psect	text34,local,class=CODE,merge=1,delta=2
    72                           	psect	text35,local,class=CODE,merge=1,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	psect	text39,local,class=CODE,merge=1,delta=2
    77                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text41,local,class=CODE,merge=1,delta=2
    79                           	psect	text42,local,class=CODE,merge=1,delta=2
    80                           	psect	text43,local,class=CODE,merge=1,delta=2
    81                           	psect	text44,local,class=CODE,merge=1,delta=2
    82                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text47,local,class=CODE,merge=1,delta=2
    85                           	psect	text48,local,class=CODE,merge=1,delta=2
    86                           	psect	text49,local,class=CODE,merge=1,delta=2
    87                           	psect	text50,local,class=CODE,merge=1,delta=2
    88                           	psect	text51,local,class=CODE,merge=1,delta=2
    89                           	psect	text52,local,class=CODE,merge=1,delta=2
    90                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text54,local,class=CODE,merge=1,delta=2
    92                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text56,local,class=CODE,merge=1,delta=2
    94                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    95                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text61,local,class=CODE,merge=1,delta=2
    99                           	psect	text62,local,class=CODE,merge=1,delta=2
   100                           	psect	text63,local,class=CODE,merge=1,delta=2
   101                           	psect	text64,local,class=CODE,merge=1,delta=2
   102                           	psect	text65,local,class=CODE,merge=1,delta=2
   103                           	psect	text66,local,class=CODE,merge=1,delta=2
   104                           	psect	text67,local,class=CODE,merge=1,delta=2
   105                           	psect	text68,local,class=CODE,merge=1,delta=2
   106                           	psect	text69,local,class=CODE,merge=1,delta=2
   107                           	psect	text70,local,class=CODE,merge=1,delta=2
   108                           	psect	text71,local,class=CODE,merge=1,delta=2
   109                           	psect	text72,local,class=CODE,merge=1,delta=2
   110                           	psect	text73,local,class=CODE,merge=1,delta=2
   111                           	psect	text74,local,class=CODE,merge=1,delta=2
   112                           	psect	text75,local,class=CODE,merge=1,delta=2
   113                           	psect	text76,local,class=CODE,merge=1,delta=2
   114                           	psect	text77,local,class=CODE,merge=1,delta=2
   115                           	psect	text78,local,class=CODE,merge=1,delta=2
   116                           	psect	text79,local,class=CODE,merge=1,delta=2
   117                           	psect	text80,local,class=CODE,merge=1,delta=2
   118                           	psect	text81,local,class=CODE,merge=1,delta=2,group=1
   119                           	psect	text82,local,class=CODE,merge=1,delta=2
   120                           	psect	text83,local,class=CODE,merge=1,delta=2
   121                           	psect	text84,local,class=CODE,merge=1,delta=2
   122                           	psect	text85,local,class=CODE,merge=1,delta=2
   123                           	psect	text86,local,class=CODE,merge=1,delta=2
   124                           	psect	text87,local,class=CODE,merge=1,delta=2
   125                           	psect	text88,local,class=CODE,merge=1,delta=2
   126                           	psect	text89,local,class=CODE,merge=1,delta=2
   127                           	psect	text90,local,class=CODE,merge=1,delta=2
   128                           	psect	text91,local,class=CODE,merge=1,delta=2
   129                           	psect	text92,local,class=CODE,merge=1,delta=2
   130                           	psect	text93,local,class=CODE,merge=1,delta=2
   131                           	psect	text94,local,class=CODE,merge=1,delta=2
   132                           	psect	text95,local,class=CODE,merge=1,delta=2
   133                           	psect	intentry,global,class=CODE,delta=2
   134                           	psect	text97,local,class=CODE,merge=1,delta=2
   135                           	psect	text98,local,class=CODE,merge=1,delta=2
   136                           	psect	text99,local,class=CODE,merge=1,delta=2
   137                           	psect	text100,local,class=CODE,merge=1,delta=2
   138                           	psect	text101,local,class=CODE,merge=1,delta=2
   139                           	psect	text102,local,class=CODE,merge=1,delta=2
   140                           	dabs	1,0x7E,2
   141  0000                     
   142                           ; Version 2.05
   143                           ; Generated 20/12/2018 GMT
   144                           ; 
   145                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   146                           ; All rights reserved.
   147                           ; 
   148                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   149                           ; 
   150                           ; Redistribution and use in source and binary forms, with or without modification, are
   151                           ; permitted provided that the following conditions are met:
   152                           ; 
   153                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   154                           ;        conditions and the following disclaimer.
   155                           ; 
   156                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   157                           ;        of conditions and the following disclaimer in the documentation and/or other
   158                           ;        materials provided with the distribution.
   159                           ; 
   160                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   161                           ;        software without specific prior written permission.
   162                           ; 
   163                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   164                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   165                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   166                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   167                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   168                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   169                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   170                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   171                           ; 
   172                           ; 
   173                           ; Code-generator required, PIC16LF1559 Definitions
   174                           ; 
   175                           ; SFR Addresses
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  000E                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0015                     	;# 
   194  0016                     	;# 
   195  0016                     	;# 
   196  0017                     	;# 
   197  0018                     	;# 
   198  0019                     	;# 
   199  001A                     	;# 
   200  001B                     	;# 
   201  001C                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  0091                     	;# 
   206  0092                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0099                     	;# 
   211  009A                     	;# 
   212  009B                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  011D                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0194                     	;# 
   233  0195                     	;# 
   234  0196                     	;# 
   235  0199                     	;# 
   236  019A                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019C                     	;# 
   240  019D                     	;# 
   241  019E                     	;# 
   242  019F                     	;# 
   243  020C                     	;# 
   244  020D                     	;# 
   245  0211                     	;# 
   246  0211                     	;# 
   247  0212                     	;# 
   248  0212                     	;# 
   249  0213                     	;# 
   250  0213                     	;# 
   251  0214                     	;# 
   252  0214                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0216                     	;# 
   257  0216                     	;# 
   258  0217                     	;# 
   259  0217                     	;# 
   260  0391                     	;# 
   261  0392                     	;# 
   262  0393                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0611                     	;# 
   267  0612                     	;# 
   268  0613                     	;# 
   269  0613                     	;# 
   270  0614                     	;# 
   271  0615                     	;# 
   272  0616                     	;# 
   273  0616                     	;# 
   274  0711                     	;# 
   275  0711                     	;# 
   276  0711                     	;# 
   277  0712                     	;# 
   278  0712                     	;# 
   279  0713                     	;# 
   280  0713                     	;# 
   281  0713                     	;# 
   282  0714                     	;# 
   283  0714                     	;# 
   284  0714                     	;# 
   285  0715                     	;# 
   286  0715                     	;# 
   287  0716                     	;# 
   288  0716                     	;# 
   289  0716                     	;# 
   290  0716                     	;# 
   291  0717                     	;# 
   292  0717                     	;# 
   293  0717                     	;# 
   294  0717                     	;# 
   295  0718                     	;# 
   296  0718                     	;# 
   297  0718                     	;# 
   298  0719                     	;# 
   299  0719                     	;# 
   300  0719                     	;# 
   301  0719                     	;# 
   302  071A                     	;# 
   303  071A                     	;# 
   304  071A                     	;# 
   305  071A                     	;# 
   306  071A                     	;# 
   307  071B                     	;# 
   308  071B                     	;# 
   309  071C                     	;# 
   310  071C                     	;# 
   311  071C                     	;# 
   312  071C                     	;# 
   313  071C                     	;# 
   314  071D                     	;# 
   315  071D                     	;# 
   316  071E                     	;# 
   317  071E                     	;# 
   318  0791                     	;# 
   319  0791                     	;# 
   320  0793                     	;# 
   321  0793                     	;# 
   322  0794                     	;# 
   323  0794                     	;# 
   324  0796                     	;# 
   325  0796                     	;# 
   326  0796                     	;# 
   327  0797                     	;# 
   328  0797                     	;# 
   329  0797                     	;# 
   330  0798                     	;# 
   331  0798                     	;# 
   332  0799                     	;# 
   333  0799                     	;# 
   334  0799                     	;# 
   335  079A                     	;# 
   336  079A                     	;# 
   337  079A                     	;# 
   338  079B                     	;# 
   339  079C                     	;# 
   340  079C                     	;# 
   341  079C                     	;# 
   342  079D                     	;# 
   343  079E                     	;# 
   344  079E                     	;# 
   345  0F8C                     	;# 
   346  0F8D                     	;# 
   347  0F91                     	;# 
   348  0F96                     	;# 
   349  0F97                     	;# 
   350  0F9C                     	;# 
   351  0F9D                     	;# 
   352  0F9E                     	;# 
   353  0FE3                     	;# 
   354  0FE4                     	;# 
   355  0FE5                     	;# 
   356  0FE6                     	;# 
   357  0FE7                     	;# 
   358  0FE8                     	;# 
   359  0FE9                     	;# 
   360  0FEA                     	;# 
   361  0FEB                     	;# 
   362  0FED                     	;# 
   363  0FEE                     	;# 
   364  0FEF                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  0011                     	;# 
   381  0012                     	;# 
   382  0015                     	;# 
   383  0016                     	;# 
   384  0016                     	;# 
   385  0017                     	;# 
   386  0018                     	;# 
   387  0019                     	;# 
   388  001A                     	;# 
   389  001B                     	;# 
   390  001C                     	;# 
   391  008C                     	;# 
   392  008D                     	;# 
   393  008E                     	;# 
   394  0091                     	;# 
   395  0092                     	;# 
   396  0095                     	;# 
   397  0096                     	;# 
   398  0097                     	;# 
   399  0099                     	;# 
   400  009A                     	;# 
   401  009B                     	;# 
   402  009B                     	;# 
   403  009C                     	;# 
   404  009D                     	;# 
   405  009E                     	;# 
   406  009F                     	;# 
   407  010C                     	;# 
   408  010D                     	;# 
   409  010E                     	;# 
   410  0116                     	;# 
   411  0117                     	;# 
   412  011D                     	;# 
   413  018C                     	;# 
   414  018D                     	;# 
   415  018E                     	;# 
   416  0191                     	;# 
   417  0191                     	;# 
   418  0192                     	;# 
   419  0193                     	;# 
   420  0193                     	;# 
   421  0194                     	;# 
   422  0195                     	;# 
   423  0196                     	;# 
   424  0199                     	;# 
   425  019A                     	;# 
   426  019B                     	;# 
   427  019B                     	;# 
   428  019C                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019F                     	;# 
   432  020C                     	;# 
   433  020D                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0391                     	;# 
   450  0392                     	;# 
   451  0393                     	;# 
   452  0394                     	;# 
   453  0395                     	;# 
   454  0396                     	;# 
   455  0611                     	;# 
   456  0612                     	;# 
   457  0613                     	;# 
   458  0613                     	;# 
   459  0614                     	;# 
   460  0615                     	;# 
   461  0616                     	;# 
   462  0616                     	;# 
   463  0711                     	;# 
   464  0711                     	;# 
   465  0711                     	;# 
   466  0712                     	;# 
   467  0712                     	;# 
   468  0713                     	;# 
   469  0713                     	;# 
   470  0713                     	;# 
   471  0714                     	;# 
   472  0714                     	;# 
   473  0714                     	;# 
   474  0715                     	;# 
   475  0715                     	;# 
   476  0716                     	;# 
   477  0716                     	;# 
   478  0716                     	;# 
   479  0716                     	;# 
   480  0717                     	;# 
   481  0717                     	;# 
   482  0717                     	;# 
   483  0717                     	;# 
   484  0718                     	;# 
   485  0718                     	;# 
   486  0718                     	;# 
   487  0719                     	;# 
   488  0719                     	;# 
   489  0719                     	;# 
   490  0719                     	;# 
   491  071A                     	;# 
   492  071A                     	;# 
   493  071A                     	;# 
   494  071A                     	;# 
   495  071A                     	;# 
   496  071B                     	;# 
   497  071B                     	;# 
   498  071C                     	;# 
   499  071C                     	;# 
   500  071C                     	;# 
   501  071C                     	;# 
   502  071C                     	;# 
   503  071D                     	;# 
   504  071D                     	;# 
   505  071E                     	;# 
   506  071E                     	;# 
   507  0791                     	;# 
   508  0791                     	;# 
   509  0793                     	;# 
   510  0793                     	;# 
   511  0794                     	;# 
   512  0794                     	;# 
   513  0796                     	;# 
   514  0796                     	;# 
   515  0796                     	;# 
   516  0797                     	;# 
   517  0797                     	;# 
   518  0797                     	;# 
   519  0798                     	;# 
   520  0798                     	;# 
   521  0799                     	;# 
   522  0799                     	;# 
   523  0799                     	;# 
   524  079A                     	;# 
   525  079A                     	;# 
   526  079A                     	;# 
   527  079B                     	;# 
   528  079C                     	;# 
   529  079C                     	;# 
   530  079C                     	;# 
   531  079D                     	;# 
   532  079E                     	;# 
   533  079E                     	;# 
   534  0F8C                     	;# 
   535  0F8D                     	;# 
   536  0F91                     	;# 
   537  0F96                     	;# 
   538  0F97                     	;# 
   539  0F9C                     	;# 
   540  0F9D                     	;# 
   541  0F9E                     	;# 
   542  0FE3                     	;# 
   543  0FE4                     	;# 
   544  0FE5                     	;# 
   545  0FE6                     	;# 
   546  0FE7                     	;# 
   547  0FE8                     	;# 
   548  0FE9                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEF                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000D                     	;# 
   568  000E                     	;# 
   569  0011                     	;# 
   570  0012                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0016                     	;# 
   574  0017                     	;# 
   575  0018                     	;# 
   576  0019                     	;# 
   577  001A                     	;# 
   578  001B                     	;# 
   579  001C                     	;# 
   580  008C                     	;# 
   581  008D                     	;# 
   582  008E                     	;# 
   583  0091                     	;# 
   584  0092                     	;# 
   585  0095                     	;# 
   586  0096                     	;# 
   587  0097                     	;# 
   588  0099                     	;# 
   589  009A                     	;# 
   590  009B                     	;# 
   591  009B                     	;# 
   592  009C                     	;# 
   593  009D                     	;# 
   594  009E                     	;# 
   595  009F                     	;# 
   596  010C                     	;# 
   597  010D                     	;# 
   598  010E                     	;# 
   599  0116                     	;# 
   600  0117                     	;# 
   601  011D                     	;# 
   602  018C                     	;# 
   603  018D                     	;# 
   604  018E                     	;# 
   605  0191                     	;# 
   606  0191                     	;# 
   607  0192                     	;# 
   608  0193                     	;# 
   609  0193                     	;# 
   610  0194                     	;# 
   611  0195                     	;# 
   612  0196                     	;# 
   613  0199                     	;# 
   614  019A                     	;# 
   615  019B                     	;# 
   616  019B                     	;# 
   617  019C                     	;# 
   618  019D                     	;# 
   619  019E                     	;# 
   620  019F                     	;# 
   621  020C                     	;# 
   622  020D                     	;# 
   623  0211                     	;# 
   624  0211                     	;# 
   625  0212                     	;# 
   626  0212                     	;# 
   627  0213                     	;# 
   628  0213                     	;# 
   629  0214                     	;# 
   630  0214                     	;# 
   631  0215                     	;# 
   632  0215                     	;# 
   633  0215                     	;# 
   634  0216                     	;# 
   635  0216                     	;# 
   636  0217                     	;# 
   637  0217                     	;# 
   638  0391                     	;# 
   639  0392                     	;# 
   640  0393                     	;# 
   641  0394                     	;# 
   642  0395                     	;# 
   643  0396                     	;# 
   644  0611                     	;# 
   645  0612                     	;# 
   646  0613                     	;# 
   647  0613                     	;# 
   648  0614                     	;# 
   649  0615                     	;# 
   650  0616                     	;# 
   651  0616                     	;# 
   652  0711                     	;# 
   653  0711                     	;# 
   654  0711                     	;# 
   655  0712                     	;# 
   656  0712                     	;# 
   657  0713                     	;# 
   658  0713                     	;# 
   659  0713                     	;# 
   660  0714                     	;# 
   661  0714                     	;# 
   662  0714                     	;# 
   663  0715                     	;# 
   664  0715                     	;# 
   665  0716                     	;# 
   666  0716                     	;# 
   667  0716                     	;# 
   668  0716                     	;# 
   669  0717                     	;# 
   670  0717                     	;# 
   671  0717                     	;# 
   672  0717                     	;# 
   673  0718                     	;# 
   674  0718                     	;# 
   675  0718                     	;# 
   676  0719                     	;# 
   677  0719                     	;# 
   678  0719                     	;# 
   679  0719                     	;# 
   680  071A                     	;# 
   681  071A                     	;# 
   682  071A                     	;# 
   683  071A                     	;# 
   684  071A                     	;# 
   685  071B                     	;# 
   686  071B                     	;# 
   687  071C                     	;# 
   688  071C                     	;# 
   689  071C                     	;# 
   690  071C                     	;# 
   691  071C                     	;# 
   692  071D                     	;# 
   693  071D                     	;# 
   694  071E                     	;# 
   695  071E                     	;# 
   696  0791                     	;# 
   697  0791                     	;# 
   698  0793                     	;# 
   699  0793                     	;# 
   700  0794                     	;# 
   701  0794                     	;# 
   702  0796                     	;# 
   703  0796                     	;# 
   704  0796                     	;# 
   705  0797                     	;# 
   706  0797                     	;# 
   707  0797                     	;# 
   708  0798                     	;# 
   709  0798                     	;# 
   710  0799                     	;# 
   711  0799                     	;# 
   712  0799                     	;# 
   713  079A                     	;# 
   714  079A                     	;# 
   715  079A                     	;# 
   716  079B                     	;# 
   717  079C                     	;# 
   718  079C                     	;# 
   719  079C                     	;# 
   720  079D                     	;# 
   721  079E                     	;# 
   722  079E                     	;# 
   723  0F8C                     	;# 
   724  0F8D                     	;# 
   725  0F91                     	;# 
   726  0F96                     	;# 
   727  0F97                     	;# 
   728  0F9C                     	;# 
   729  0F9D                     	;# 
   730  0F9E                     	;# 
   731  0FE3                     	;# 
   732  0FE4                     	;# 
   733  0FE5                     	;# 
   734  0FE6                     	;# 
   735  0FE7                     	;# 
   736  0FE8                     	;# 
   737  0FE9                     	;# 
   738  0FEA                     	;# 
   739  0FEB                     	;# 
   740  0FED                     	;# 
   741  0FEE                     	;# 
   742  0FEF                     	;# 
   743  0000                     	;# 
   744  0001                     	;# 
   745  0002                     	;# 
   746  0003                     	;# 
   747  0004                     	;# 
   748  0005                     	;# 
   749  0006                     	;# 
   750  0007                     	;# 
   751  0008                     	;# 
   752  0009                     	;# 
   753  000A                     	;# 
   754  000B                     	;# 
   755  000C                     	;# 
   756  000D                     	;# 
   757  000E                     	;# 
   758  0011                     	;# 
   759  0012                     	;# 
   760  0015                     	;# 
   761  0016                     	;# 
   762  0016                     	;# 
   763  0017                     	;# 
   764  0018                     	;# 
   765  0019                     	;# 
   766  001A                     	;# 
   767  001B                     	;# 
   768  001C                     	;# 
   769  008C                     	;# 
   770  008D                     	;# 
   771  008E                     	;# 
   772  0091                     	;# 
   773  0092                     	;# 
   774  0095                     	;# 
   775  0096                     	;# 
   776  0097                     	;# 
   777  0099                     	;# 
   778  009A                     	;# 
   779  009B                     	;# 
   780  009B                     	;# 
   781  009C                     	;# 
   782  009D                     	;# 
   783  009E                     	;# 
   784  009F                     	;# 
   785  010C                     	;# 
   786  010D                     	;# 
   787  010E                     	;# 
   788  0116                     	;# 
   789  0117                     	;# 
   790  011D                     	;# 
   791  018C                     	;# 
   792  018D                     	;# 
   793  018E                     	;# 
   794  0191                     	;# 
   795  0191                     	;# 
   796  0192                     	;# 
   797  0193                     	;# 
   798  0193                     	;# 
   799  0194                     	;# 
   800  0195                     	;# 
   801  0196                     	;# 
   802  0199                     	;# 
   803  019A                     	;# 
   804  019B                     	;# 
   805  019B                     	;# 
   806  019C                     	;# 
   807  019D                     	;# 
   808  019E                     	;# 
   809  019F                     	;# 
   810  020C                     	;# 
   811  020D                     	;# 
   812  0211                     	;# 
   813  0211                     	;# 
   814  0212                     	;# 
   815  0212                     	;# 
   816  0213                     	;# 
   817  0213                     	;# 
   818  0214                     	;# 
   819  0214                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0391                     	;# 
   828  0392                     	;# 
   829  0393                     	;# 
   830  0394                     	;# 
   831  0395                     	;# 
   832  0396                     	;# 
   833  0611                     	;# 
   834  0612                     	;# 
   835  0613                     	;# 
   836  0613                     	;# 
   837  0614                     	;# 
   838  0615                     	;# 
   839  0616                     	;# 
   840  0616                     	;# 
   841  0711                     	;# 
   842  0711                     	;# 
   843  0711                     	;# 
   844  0712                     	;# 
   845  0712                     	;# 
   846  0713                     	;# 
   847  0713                     	;# 
   848  0713                     	;# 
   849  0714                     	;# 
   850  0714                     	;# 
   851  0714                     	;# 
   852  0715                     	;# 
   853  0715                     	;# 
   854  0716                     	;# 
   855  0716                     	;# 
   856  0716                     	;# 
   857  0716                     	;# 
   858  0717                     	;# 
   859  0717                     	;# 
   860  0717                     	;# 
   861  0717                     	;# 
   862  0718                     	;# 
   863  0718                     	;# 
   864  0718                     	;# 
   865  0719                     	;# 
   866  0719                     	;# 
   867  0719                     	;# 
   868  0719                     	;# 
   869  071A                     	;# 
   870  071A                     	;# 
   871  071A                     	;# 
   872  071A                     	;# 
   873  071A                     	;# 
   874  071B                     	;# 
   875  071B                     	;# 
   876  071C                     	;# 
   877  071C                     	;# 
   878  071C                     	;# 
   879  071C                     	;# 
   880  071C                     	;# 
   881  071D                     	;# 
   882  071D                     	;# 
   883  071E                     	;# 
   884  071E                     	;# 
   885  0791                     	;# 
   886  0791                     	;# 
   887  0793                     	;# 
   888  0793                     	;# 
   889  0794                     	;# 
   890  0794                     	;# 
   891  0796                     	;# 
   892  0796                     	;# 
   893  0796                     	;# 
   894  0797                     	;# 
   895  0797                     	;# 
   896  0797                     	;# 
   897  0798                     	;# 
   898  0798                     	;# 
   899  0799                     	;# 
   900  0799                     	;# 
   901  0799                     	;# 
   902  079A                     	;# 
   903  079A                     	;# 
   904  079A                     	;# 
   905  079B                     	;# 
   906  079C                     	;# 
   907  079C                     	;# 
   908  079C                     	;# 
   909  079D                     	;# 
   910  079E                     	;# 
   911  079E                     	;# 
   912  0F8C                     	;# 
   913  0F8D                     	;# 
   914  0F91                     	;# 
   915  0F96                     	;# 
   916  0F97                     	;# 
   917  0F9C                     	;# 
   918  0F9D                     	;# 
   919  0F9E                     	;# 
   920  0FE3                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0015                     	;# 
   950  0016                     	;# 
   951  0016                     	;# 
   952  0017                     	;# 
   953  0018                     	;# 
   954  0019                     	;# 
   955  001A                     	;# 
   956  001B                     	;# 
   957  001C                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  009F                     	;# 
   974  010C                     	;# 
   975  010D                     	;# 
   976  010E                     	;# 
   977  0116                     	;# 
   978  0117                     	;# 
   979  011D                     	;# 
   980  018C                     	;# 
   981  018D                     	;# 
   982  018E                     	;# 
   983  0191                     	;# 
   984  0191                     	;# 
   985  0192                     	;# 
   986  0193                     	;# 
   987  0193                     	;# 
   988  0194                     	;# 
   989  0195                     	;# 
   990  0196                     	;# 
   991  0199                     	;# 
   992  019A                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019C                     	;# 
   996  019D                     	;# 
   997  019E                     	;# 
   998  019F                     	;# 
   999  020C                     	;# 
  1000  020D                     	;# 
  1001  0211                     	;# 
  1002  0211                     	;# 
  1003  0212                     	;# 
  1004  0212                     	;# 
  1005  0213                     	;# 
  1006  0213                     	;# 
  1007  0214                     	;# 
  1008  0214                     	;# 
  1009  0215                     	;# 
  1010  0215                     	;# 
  1011  0215                     	;# 
  1012  0216                     	;# 
  1013  0216                     	;# 
  1014  0217                     	;# 
  1015  0217                     	;# 
  1016  0391                     	;# 
  1017  0392                     	;# 
  1018  0393                     	;# 
  1019  0394                     	;# 
  1020  0395                     	;# 
  1021  0396                     	;# 
  1022  0611                     	;# 
  1023  0612                     	;# 
  1024  0613                     	;# 
  1025  0613                     	;# 
  1026  0614                     	;# 
  1027  0615                     	;# 
  1028  0616                     	;# 
  1029  0616                     	;# 
  1030  0711                     	;# 
  1031  0711                     	;# 
  1032  0711                     	;# 
  1033  0712                     	;# 
  1034  0712                     	;# 
  1035  0713                     	;# 
  1036  0713                     	;# 
  1037  0713                     	;# 
  1038  0714                     	;# 
  1039  0714                     	;# 
  1040  0714                     	;# 
  1041  0715                     	;# 
  1042  0715                     	;# 
  1043  0716                     	;# 
  1044  0716                     	;# 
  1045  0716                     	;# 
  1046  0716                     	;# 
  1047  0717                     	;# 
  1048  0717                     	;# 
  1049  0717                     	;# 
  1050  0717                     	;# 
  1051  0718                     	;# 
  1052  0718                     	;# 
  1053  0718                     	;# 
  1054  0719                     	;# 
  1055  0719                     	;# 
  1056  0719                     	;# 
  1057  0719                     	;# 
  1058  071A                     	;# 
  1059  071A                     	;# 
  1060  071A                     	;# 
  1061  071A                     	;# 
  1062  071A                     	;# 
  1063  071B                     	;# 
  1064  071B                     	;# 
  1065  071C                     	;# 
  1066  071C                     	;# 
  1067  071C                     	;# 
  1068  071C                     	;# 
  1069  071C                     	;# 
  1070  071D                     	;# 
  1071  071D                     	;# 
  1072  071E                     	;# 
  1073  071E                     	;# 
  1074  0791                     	;# 
  1075  0791                     	;# 
  1076  0793                     	;# 
  1077  0793                     	;# 
  1078  0794                     	;# 
  1079  0794                     	;# 
  1080  0796                     	;# 
  1081  0796                     	;# 
  1082  0796                     	;# 
  1083  0797                     	;# 
  1084  0797                     	;# 
  1085  0797                     	;# 
  1086  0798                     	;# 
  1087  0798                     	;# 
  1088  0799                     	;# 
  1089  0799                     	;# 
  1090  0799                     	;# 
  1091  079A                     	;# 
  1092  079A                     	;# 
  1093  079A                     	;# 
  1094  079B                     	;# 
  1095  079C                     	;# 
  1096  079C                     	;# 
  1097  079C                     	;# 
  1098  079D                     	;# 
  1099  079E                     	;# 
  1100  079E                     	;# 
  1101  0F8C                     	;# 
  1102  0F8D                     	;# 
  1103  0F91                     	;# 
  1104  0F96                     	;# 
  1105  0F97                     	;# 
  1106  0F9C                     	;# 
  1107  0F9D                     	;# 
  1108  0F9E                     	;# 
  1109  0FE3                     	;# 
  1110  0FE4                     	;# 
  1111  0FE5                     	;# 
  1112  0FE6                     	;# 
  1113  0FE7                     	;# 
  1114  0FE8                     	;# 
  1115  0FE9                     	;# 
  1116  0FEA                     	;# 
  1117  0FEB                     	;# 
  1118  0FED                     	;# 
  1119  0FEE                     	;# 
  1120  0FEF                     	;# 
  1121  0000                     	;# 
  1122  0001                     	;# 
  1123  0002                     	;# 
  1124  0003                     	;# 
  1125  0004                     	;# 
  1126  0005                     	;# 
  1127  0006                     	;# 
  1128  0007                     	;# 
  1129  0008                     	;# 
  1130  0009                     	;# 
  1131  000A                     	;# 
  1132  000B                     	;# 
  1133  000C                     	;# 
  1134  000D                     	;# 
  1135  000E                     	;# 
  1136  0011                     	;# 
  1137  0012                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  008C                     	;# 
  1148  008D                     	;# 
  1149  008E                     	;# 
  1150  0091                     	;# 
  1151  0092                     	;# 
  1152  0095                     	;# 
  1153  0096                     	;# 
  1154  0097                     	;# 
  1155  0099                     	;# 
  1156  009A                     	;# 
  1157  009B                     	;# 
  1158  009B                     	;# 
  1159  009C                     	;# 
  1160  009D                     	;# 
  1161  009E                     	;# 
  1162  009F                     	;# 
  1163  010C                     	;# 
  1164  010D                     	;# 
  1165  010E                     	;# 
  1166  0116                     	;# 
  1167  0117                     	;# 
  1168  011D                     	;# 
  1169  018C                     	;# 
  1170  018D                     	;# 
  1171  018E                     	;# 
  1172  0191                     	;# 
  1173  0191                     	;# 
  1174  0192                     	;# 
  1175  0193                     	;# 
  1176  0193                     	;# 
  1177  0194                     	;# 
  1178  0195                     	;# 
  1179  0196                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019C                     	;# 
  1185  019D                     	;# 
  1186  019E                     	;# 
  1187  019F                     	;# 
  1188  020C                     	;# 
  1189  020D                     	;# 
  1190  0211                     	;# 
  1191  0211                     	;# 
  1192  0212                     	;# 
  1193  0212                     	;# 
  1194  0213                     	;# 
  1195  0213                     	;# 
  1196  0214                     	;# 
  1197  0214                     	;# 
  1198  0215                     	;# 
  1199  0215                     	;# 
  1200  0215                     	;# 
  1201  0216                     	;# 
  1202  0216                     	;# 
  1203  0217                     	;# 
  1204  0217                     	;# 
  1205  0391                     	;# 
  1206  0392                     	;# 
  1207  0393                     	;# 
  1208  0394                     	;# 
  1209  0395                     	;# 
  1210  0396                     	;# 
  1211  0611                     	;# 
  1212  0612                     	;# 
  1213  0613                     	;# 
  1214  0613                     	;# 
  1215  0614                     	;# 
  1216  0615                     	;# 
  1217  0616                     	;# 
  1218  0616                     	;# 
  1219  0711                     	;# 
  1220  0711                     	;# 
  1221  0711                     	;# 
  1222  0712                     	;# 
  1223  0712                     	;# 
  1224  0713                     	;# 
  1225  0713                     	;# 
  1226  0713                     	;# 
  1227  0714                     	;# 
  1228  0714                     	;# 
  1229  0714                     	;# 
  1230  0715                     	;# 
  1231  0715                     	;# 
  1232  0716                     	;# 
  1233  0716                     	;# 
  1234  0716                     	;# 
  1235  0716                     	;# 
  1236  0717                     	;# 
  1237  0717                     	;# 
  1238  0717                     	;# 
  1239  0717                     	;# 
  1240  0718                     	;# 
  1241  0718                     	;# 
  1242  0718                     	;# 
  1243  0719                     	;# 
  1244  0719                     	;# 
  1245  0719                     	;# 
  1246  0719                     	;# 
  1247  071A                     	;# 
  1248  071A                     	;# 
  1249  071A                     	;# 
  1250  071A                     	;# 
  1251  071A                     	;# 
  1252  071B                     	;# 
  1253  071B                     	;# 
  1254  071C                     	;# 
  1255  071C                     	;# 
  1256  071C                     	;# 
  1257  071C                     	;# 
  1258  071C                     	;# 
  1259  071D                     	;# 
  1260  071D                     	;# 
  1261  071E                     	;# 
  1262  071E                     	;# 
  1263  0791                     	;# 
  1264  0791                     	;# 
  1265  0793                     	;# 
  1266  0793                     	;# 
  1267  0794                     	;# 
  1268  0794                     	;# 
  1269  0796                     	;# 
  1270  0796                     	;# 
  1271  0796                     	;# 
  1272  0797                     	;# 
  1273  0797                     	;# 
  1274  0797                     	;# 
  1275  0798                     	;# 
  1276  0798                     	;# 
  1277  0799                     	;# 
  1278  0799                     	;# 
  1279  0799                     	;# 
  1280  079A                     	;# 
  1281  079A                     	;# 
  1282  079A                     	;# 
  1283  079B                     	;# 
  1284  079C                     	;# 
  1285  079C                     	;# 
  1286  079C                     	;# 
  1287  079D                     	;# 
  1288  079E                     	;# 
  1289  079E                     	;# 
  1290  0F8C                     	;# 
  1291  0F8D                     	;# 
  1292  0F91                     	;# 
  1293  0F96                     	;# 
  1294  0F97                     	;# 
  1295  0F9C                     	;# 
  1296  0F9D                     	;# 
  1297  0F9E                     	;# 
  1298  0FE3                     	;# 
  1299  0FE4                     	;# 
  1300  0FE5                     	;# 
  1301  0FE6                     	;# 
  1302  0FE7                     	;# 
  1303  0FE8                     	;# 
  1304  0FE9                     	;# 
  1305  0FEA                     	;# 
  1306  0FEB                     	;# 
  1307  0FED                     	;# 
  1308  0FEE                     	;# 
  1309  0FEF                     	;# 
  1310  0000                     	;# 
  1311  0001                     	;# 
  1312  0002                     	;# 
  1313  0003                     	;# 
  1314  0004                     	;# 
  1315  0005                     	;# 
  1316  0006                     	;# 
  1317  0007                     	;# 
  1318  0008                     	;# 
  1319  0009                     	;# 
  1320  000A                     	;# 
  1321  000B                     	;# 
  1322  000C                     	;# 
  1323  000D                     	;# 
  1324  000E                     	;# 
  1325  0011                     	;# 
  1326  0012                     	;# 
  1327  0015                     	;# 
  1328  0016                     	;# 
  1329  0016                     	;# 
  1330  0017                     	;# 
  1331  0018                     	;# 
  1332  0019                     	;# 
  1333  001A                     	;# 
  1334  001B                     	;# 
  1335  001C                     	;# 
  1336  008C                     	;# 
  1337  008D                     	;# 
  1338  008E                     	;# 
  1339  0091                     	;# 
  1340  0092                     	;# 
  1341  0095                     	;# 
  1342  0096                     	;# 
  1343  0097                     	;# 
  1344  0099                     	;# 
  1345  009A                     	;# 
  1346  009B                     	;# 
  1347  009B                     	;# 
  1348  009C                     	;# 
  1349  009D                     	;# 
  1350  009E                     	;# 
  1351  009F                     	;# 
  1352  010C                     	;# 
  1353  010D                     	;# 
  1354  010E                     	;# 
  1355  0116                     	;# 
  1356  0117                     	;# 
  1357  011D                     	;# 
  1358  018C                     	;# 
  1359  018D                     	;# 
  1360  018E                     	;# 
  1361  0191                     	;# 
  1362  0191                     	;# 
  1363  0192                     	;# 
  1364  0193                     	;# 
  1365  0193                     	;# 
  1366  0194                     	;# 
  1367  0195                     	;# 
  1368  0196                     	;# 
  1369  0199                     	;# 
  1370  019A                     	;# 
  1371  019B                     	;# 
  1372  019B                     	;# 
  1373  019C                     	;# 
  1374  019D                     	;# 
  1375  019E                     	;# 
  1376  019F                     	;# 
  1377  020C                     	;# 
  1378  020D                     	;# 
  1379  0211                     	;# 
  1380  0211                     	;# 
  1381  0212                     	;# 
  1382  0212                     	;# 
  1383  0213                     	;# 
  1384  0213                     	;# 
  1385  0214                     	;# 
  1386  0214                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0215                     	;# 
  1390  0216                     	;# 
  1391  0216                     	;# 
  1392  0217                     	;# 
  1393  0217                     	;# 
  1394  0391                     	;# 
  1395  0392                     	;# 
  1396  0393                     	;# 
  1397  0394                     	;# 
  1398  0395                     	;# 
  1399  0396                     	;# 
  1400  0611                     	;# 
  1401  0612                     	;# 
  1402  0613                     	;# 
  1403  0613                     	;# 
  1404  0614                     	;# 
  1405  0615                     	;# 
  1406  0616                     	;# 
  1407  0616                     	;# 
  1408  0711                     	;# 
  1409  0711                     	;# 
  1410  0711                     	;# 
  1411  0712                     	;# 
  1412  0712                     	;# 
  1413  0713                     	;# 
  1414  0713                     	;# 
  1415  0713                     	;# 
  1416  0714                     	;# 
  1417  0714                     	;# 
  1418  0714                     	;# 
  1419  0715                     	;# 
  1420  0715                     	;# 
  1421  0716                     	;# 
  1422  0716                     	;# 
  1423  0716                     	;# 
  1424  0716                     	;# 
  1425  0717                     	;# 
  1426  0717                     	;# 
  1427  0717                     	;# 
  1428  0717                     	;# 
  1429  0718                     	;# 
  1430  0718                     	;# 
  1431  0718                     	;# 
  1432  0719                     	;# 
  1433  0719                     	;# 
  1434  0719                     	;# 
  1435  0719                     	;# 
  1436  071A                     	;# 
  1437  071A                     	;# 
  1438  071A                     	;# 
  1439  071A                     	;# 
  1440  071A                     	;# 
  1441  071B                     	;# 
  1442  071B                     	;# 
  1443  071C                     	;# 
  1444  071C                     	;# 
  1445  071C                     	;# 
  1446  071C                     	;# 
  1447  071C                     	;# 
  1448  071D                     	;# 
  1449  071D                     	;# 
  1450  071E                     	;# 
  1451  071E                     	;# 
  1452  0791                     	;# 
  1453  0791                     	;# 
  1454  0793                     	;# 
  1455  0793                     	;# 
  1456  0794                     	;# 
  1457  0794                     	;# 
  1458  0796                     	;# 
  1459  0796                     	;# 
  1460  0796                     	;# 
  1461  0797                     	;# 
  1462  0797                     	;# 
  1463  0797                     	;# 
  1464  0798                     	;# 
  1465  0798                     	;# 
  1466  0799                     	;# 
  1467  0799                     	;# 
  1468  0799                     	;# 
  1469  079A                     	;# 
  1470  079A                     	;# 
  1471  079A                     	;# 
  1472  079B                     	;# 
  1473  079C                     	;# 
  1474  079C                     	;# 
  1475  079C                     	;# 
  1476  079D                     	;# 
  1477  079E                     	;# 
  1478  079E                     	;# 
  1479  0F8C                     	;# 
  1480  0F8D                     	;# 
  1481  0F91                     	;# 
  1482  0F96                     	;# 
  1483  0F97                     	;# 
  1484  0F9C                     	;# 
  1485  0F9D                     	;# 
  1486  0F9E                     	;# 
  1487  0FE3                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0091                     	;# 
  1529  0092                     	;# 
  1530  0095                     	;# 
  1531  0096                     	;# 
  1532  0097                     	;# 
  1533  0099                     	;# 
  1534  009A                     	;# 
  1535  009B                     	;# 
  1536  009B                     	;# 
  1537  009C                     	;# 
  1538  009D                     	;# 
  1539  009E                     	;# 
  1540  009F                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0199                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019D                     	;# 
  1564  019E                     	;# 
  1565  019F                     	;# 
  1566  020C                     	;# 
  1567  020D                     	;# 
  1568  0211                     	;# 
  1569  0211                     	;# 
  1570  0212                     	;# 
  1571  0212                     	;# 
  1572  0213                     	;# 
  1573  0213                     	;# 
  1574  0214                     	;# 
  1575  0214                     	;# 
  1576  0215                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0216                     	;# 
  1580  0216                     	;# 
  1581  0217                     	;# 
  1582  0217                     	;# 
  1583  0391                     	;# 
  1584  0392                     	;# 
  1585  0393                     	;# 
  1586  0394                     	;# 
  1587  0395                     	;# 
  1588  0396                     	;# 
  1589  0611                     	;# 
  1590  0612                     	;# 
  1591  0613                     	;# 
  1592  0613                     	;# 
  1593  0614                     	;# 
  1594  0615                     	;# 
  1595  0616                     	;# 
  1596  0616                     	;# 
  1597  0711                     	;# 
  1598  0711                     	;# 
  1599  0711                     	;# 
  1600  0712                     	;# 
  1601  0712                     	;# 
  1602  0713                     	;# 
  1603  0713                     	;# 
  1604  0713                     	;# 
  1605  0714                     	;# 
  1606  0714                     	;# 
  1607  0714                     	;# 
  1608  0715                     	;# 
  1609  0715                     	;# 
  1610  0716                     	;# 
  1611  0716                     	;# 
  1612  0716                     	;# 
  1613  0716                     	;# 
  1614  0717                     	;# 
  1615  0717                     	;# 
  1616  0717                     	;# 
  1617  0717                     	;# 
  1618  0718                     	;# 
  1619  0718                     	;# 
  1620  0718                     	;# 
  1621  0719                     	;# 
  1622  0719                     	;# 
  1623  0719                     	;# 
  1624  0719                     	;# 
  1625  071A                     	;# 
  1626  071A                     	;# 
  1627  071A                     	;# 
  1628  071A                     	;# 
  1629  071A                     	;# 
  1630  071B                     	;# 
  1631  071B                     	;# 
  1632  071C                     	;# 
  1633  071C                     	;# 
  1634  071C                     	;# 
  1635  071C                     	;# 
  1636  071C                     	;# 
  1637  071D                     	;# 
  1638  071D                     	;# 
  1639  071E                     	;# 
  1640  071E                     	;# 
  1641  0791                     	;# 
  1642  0791                     	;# 
  1643  0793                     	;# 
  1644  0793                     	;# 
  1645  0794                     	;# 
  1646  0794                     	;# 
  1647  0796                     	;# 
  1648  0796                     	;# 
  1649  0796                     	;# 
  1650  0797                     	;# 
  1651  0797                     	;# 
  1652  0797                     	;# 
  1653  0798                     	;# 
  1654  0798                     	;# 
  1655  0799                     	;# 
  1656  0799                     	;# 
  1657  0799                     	;# 
  1658  079A                     	;# 
  1659  079A                     	;# 
  1660  079A                     	;# 
  1661  079B                     	;# 
  1662  079C                     	;# 
  1663  079C                     	;# 
  1664  079C                     	;# 
  1665  079D                     	;# 
  1666  079E                     	;# 
  1667  079E                     	;# 
  1668  0F8C                     	;# 
  1669  0F8D                     	;# 
  1670  0F91                     	;# 
  1671  0F96                     	;# 
  1672  0F97                     	;# 
  1673  0F9C                     	;# 
  1674  0F9D                     	;# 
  1675  0F9E                     	;# 
  1676  0FE3                     	;# 
  1677  0FE4                     	;# 
  1678  0FE5                     	;# 
  1679  0FE6                     	;# 
  1680  0FE7                     	;# 
  1681  0FE8                     	;# 
  1682  0FE9                     	;# 
  1683  0FEA                     	;# 
  1684  0FEB                     	;# 
  1685  0FED                     	;# 
  1686  0FEE                     	;# 
  1687  0FEF                     	;# 
  1688  0000                     	;# 
  1689  0001                     	;# 
  1690  0002                     	;# 
  1691  0003                     	;# 
  1692  0004                     	;# 
  1693  0005                     	;# 
  1694  0006                     	;# 
  1695  0007                     	;# 
  1696  0008                     	;# 
  1697  0009                     	;# 
  1698  000A                     	;# 
  1699  000B                     	;# 
  1700  000C                     	;# 
  1701  000D                     	;# 
  1702  000E                     	;# 
  1703  0011                     	;# 
  1704  0012                     	;# 
  1705  0015                     	;# 
  1706  0016                     	;# 
  1707  0016                     	;# 
  1708  0017                     	;# 
  1709  0018                     	;# 
  1710  0019                     	;# 
  1711  001A                     	;# 
  1712  001B                     	;# 
  1713  001C                     	;# 
  1714  008C                     	;# 
  1715  008D                     	;# 
  1716  008E                     	;# 
  1717  0091                     	;# 
  1718  0092                     	;# 
  1719  0095                     	;# 
  1720  0096                     	;# 
  1721  0097                     	;# 
  1722  0099                     	;# 
  1723  009A                     	;# 
  1724  009B                     	;# 
  1725  009B                     	;# 
  1726  009C                     	;# 
  1727  009D                     	;# 
  1728  009E                     	;# 
  1729  009F                     	;# 
  1730  010C                     	;# 
  1731  010D                     	;# 
  1732  010E                     	;# 
  1733  0116                     	;# 
  1734  0117                     	;# 
  1735  011D                     	;# 
  1736  018C                     	;# 
  1737  018D                     	;# 
  1738  018E                     	;# 
  1739  0191                     	;# 
  1740  0191                     	;# 
  1741  0192                     	;# 
  1742  0193                     	;# 
  1743  0193                     	;# 
  1744  0194                     	;# 
  1745  0195                     	;# 
  1746  0196                     	;# 
  1747  0199                     	;# 
  1748  019A                     	;# 
  1749  019B                     	;# 
  1750  019B                     	;# 
  1751  019C                     	;# 
  1752  019D                     	;# 
  1753  019E                     	;# 
  1754  019F                     	;# 
  1755  020C                     	;# 
  1756  020D                     	;# 
  1757  0211                     	;# 
  1758  0211                     	;# 
  1759  0212                     	;# 
  1760  0212                     	;# 
  1761  0213                     	;# 
  1762  0213                     	;# 
  1763  0214                     	;# 
  1764  0214                     	;# 
  1765  0215                     	;# 
  1766  0215                     	;# 
  1767  0215                     	;# 
  1768  0216                     	;# 
  1769  0216                     	;# 
  1770  0217                     	;# 
  1771  0217                     	;# 
  1772  0391                     	;# 
  1773  0392                     	;# 
  1774  0393                     	;# 
  1775  0394                     	;# 
  1776  0395                     	;# 
  1777  0396                     	;# 
  1778  0611                     	;# 
  1779  0612                     	;# 
  1780  0613                     	;# 
  1781  0613                     	;# 
  1782  0614                     	;# 
  1783  0615                     	;# 
  1784  0616                     	;# 
  1785  0616                     	;# 
  1786  0711                     	;# 
  1787  0711                     	;# 
  1788  0711                     	;# 
  1789  0712                     	;# 
  1790  0712                     	;# 
  1791  0713                     	;# 
  1792  0713                     	;# 
  1793  0713                     	;# 
  1794  0714                     	;# 
  1795  0714                     	;# 
  1796  0714                     	;# 
  1797  0715                     	;# 
  1798  0715                     	;# 
  1799  0716                     	;# 
  1800  0716                     	;# 
  1801  0716                     	;# 
  1802  0716                     	;# 
  1803  0717                     	;# 
  1804  0717                     	;# 
  1805  0717                     	;# 
  1806  0717                     	;# 
  1807  0718                     	;# 
  1808  0718                     	;# 
  1809  0718                     	;# 
  1810  0719                     	;# 
  1811  0719                     	;# 
  1812  0719                     	;# 
  1813  0719                     	;# 
  1814  071A                     	;# 
  1815  071A                     	;# 
  1816  071A                     	;# 
  1817  071A                     	;# 
  1818  071A                     	;# 
  1819  071B                     	;# 
  1820  071B                     	;# 
  1821  071C                     	;# 
  1822  071C                     	;# 
  1823  071C                     	;# 
  1824  071C                     	;# 
  1825  071C                     	;# 
  1826  071D                     	;# 
  1827  071D                     	;# 
  1828  071E                     	;# 
  1829  071E                     	;# 
  1830  0791                     	;# 
  1831  0791                     	;# 
  1832  0793                     	;# 
  1833  0793                     	;# 
  1834  0794                     	;# 
  1835  0794                     	;# 
  1836  0796                     	;# 
  1837  0796                     	;# 
  1838  0796                     	;# 
  1839  0797                     	;# 
  1840  0797                     	;# 
  1841  0797                     	;# 
  1842  0798                     	;# 
  1843  0798                     	;# 
  1844  0799                     	;# 
  1845  0799                     	;# 
  1846  0799                     	;# 
  1847  079A                     	;# 
  1848  079A                     	;# 
  1849  079A                     	;# 
  1850  079B                     	;# 
  1851  079C                     	;# 
  1852  079C                     	;# 
  1853  079C                     	;# 
  1854  079D                     	;# 
  1855  079E                     	;# 
  1856  079E                     	;# 
  1857  0F8C                     	;# 
  1858  0F8D                     	;# 
  1859  0F91                     	;# 
  1860  0F96                     	;# 
  1861  0F97                     	;# 
  1862  0F9C                     	;# 
  1863  0F9D                     	;# 
  1864  0F9E                     	;# 
  1865  0FE3                     	;# 
  1866  0FE4                     	;# 
  1867  0FE5                     	;# 
  1868  0FE6                     	;# 
  1869  0FE7                     	;# 
  1870  0FE8                     	;# 
  1871  0FE9                     	;# 
  1872  0FEA                     	;# 
  1873  0FEB                     	;# 
  1874  0FED                     	;# 
  1875  0FEE                     	;# 
  1876  0FEF                     	;# 
  1877  0000                     	;# 
  1878  0001                     	;# 
  1879  0002                     	;# 
  1880  0003                     	;# 
  1881  0004                     	;# 
  1882  0005                     	;# 
  1883  0006                     	;# 
  1884  0007                     	;# 
  1885  0008                     	;# 
  1886  0009                     	;# 
  1887  000A                     	;# 
  1888  000B                     	;# 
  1889  000C                     	;# 
  1890  000D                     	;# 
  1891  000E                     	;# 
  1892  0011                     	;# 
  1893  0012                     	;# 
  1894  0015                     	;# 
  1895  0016                     	;# 
  1896  0016                     	;# 
  1897  0017                     	;# 
  1898  0018                     	;# 
  1899  0019                     	;# 
  1900  001A                     	;# 
  1901  001B                     	;# 
  1902  001C                     	;# 
  1903  008C                     	;# 
  1904  008D                     	;# 
  1905  008E                     	;# 
  1906  0091                     	;# 
  1907  0092                     	;# 
  1908  0095                     	;# 
  1909  0096                     	;# 
  1910  0097                     	;# 
  1911  0099                     	;# 
  1912  009A                     	;# 
  1913  009B                     	;# 
  1914  009B                     	;# 
  1915  009C                     	;# 
  1916  009D                     	;# 
  1917  009E                     	;# 
  1918  009F                     	;# 
  1919  010C                     	;# 
  1920  010D                     	;# 
  1921  010E                     	;# 
  1922  0116                     	;# 
  1923  0117                     	;# 
  1924  011D                     	;# 
  1925  018C                     	;# 
  1926  018D                     	;# 
  1927  018E                     	;# 
  1928  0191                     	;# 
  1929  0191                     	;# 
  1930  0192                     	;# 
  1931  0193                     	;# 
  1932  0193                     	;# 
  1933  0194                     	;# 
  1934  0195                     	;# 
  1935  0196                     	;# 
  1936  0199                     	;# 
  1937  019A                     	;# 
  1938  019B                     	;# 
  1939  019B                     	;# 
  1940  019C                     	;# 
  1941  019D                     	;# 
  1942  019E                     	;# 
  1943  019F                     	;# 
  1944  020C                     	;# 
  1945  020D                     	;# 
  1946  0211                     	;# 
  1947  0211                     	;# 
  1948  0212                     	;# 
  1949  0212                     	;# 
  1950  0213                     	;# 
  1951  0213                     	;# 
  1952  0214                     	;# 
  1953  0214                     	;# 
  1954  0215                     	;# 
  1955  0215                     	;# 
  1956  0215                     	;# 
  1957  0216                     	;# 
  1958  0216                     	;# 
  1959  0217                     	;# 
  1960  0217                     	;# 
  1961  0391                     	;# 
  1962  0392                     	;# 
  1963  0393                     	;# 
  1964  0394                     	;# 
  1965  0395                     	;# 
  1966  0396                     	;# 
  1967  0611                     	;# 
  1968  0612                     	;# 
  1969  0613                     	;# 
  1970  0613                     	;# 
  1971  0614                     	;# 
  1972  0615                     	;# 
  1973  0616                     	;# 
  1974  0616                     	;# 
  1975  0711                     	;# 
  1976  0711                     	;# 
  1977  0711                     	;# 
  1978  0712                     	;# 
  1979  0712                     	;# 
  1980  0713                     	;# 
  1981  0713                     	;# 
  1982  0713                     	;# 
  1983  0714                     	;# 
  1984  0714                     	;# 
  1985  0714                     	;# 
  1986  0715                     	;# 
  1987  0715                     	;# 
  1988  0716                     	;# 
  1989  0716                     	;# 
  1990  0716                     	;# 
  1991  0716                     	;# 
  1992  0717                     	;# 
  1993  0717                     	;# 
  1994  0717                     	;# 
  1995  0717                     	;# 
  1996  0718                     	;# 
  1997  0718                     	;# 
  1998  0718                     	;# 
  1999  0719                     	;# 
  2000  0719                     	;# 
  2001  0719                     	;# 
  2002  0719                     	;# 
  2003  071A                     	;# 
  2004  071A                     	;# 
  2005  071A                     	;# 
  2006  071A                     	;# 
  2007  071A                     	;# 
  2008  071B                     	;# 
  2009  071B                     	;# 
  2010  071C                     	;# 
  2011  071C                     	;# 
  2012  071C                     	;# 
  2013  071C                     	;# 
  2014  071C                     	;# 
  2015  071D                     	;# 
  2016  071D                     	;# 
  2017  071E                     	;# 
  2018  071E                     	;# 
  2019  0791                     	;# 
  2020  0791                     	;# 
  2021  0793                     	;# 
  2022  0793                     	;# 
  2023  0794                     	;# 
  2024  0794                     	;# 
  2025  0796                     	;# 
  2026  0796                     	;# 
  2027  0796                     	;# 
  2028  0797                     	;# 
  2029  0797                     	;# 
  2030  0797                     	;# 
  2031  0798                     	;# 
  2032  0798                     	;# 
  2033  0799                     	;# 
  2034  0799                     	;# 
  2035  0799                     	;# 
  2036  079A                     	;# 
  2037  079A                     	;# 
  2038  079A                     	;# 
  2039  079B                     	;# 
  2040  079C                     	;# 
  2041  079C                     	;# 
  2042  079C                     	;# 
  2043  079D                     	;# 
  2044  079E                     	;# 
  2045  079E                     	;# 
  2046  0F8C                     	;# 
  2047  0F8D                     	;# 
  2048  0F91                     	;# 
  2049  0F96                     	;# 
  2050  0F97                     	;# 
  2051  0F9C                     	;# 
  2052  0F9D                     	;# 
  2053  0F9E                     	;# 
  2054  0FE3                     	;# 
  2055  0FE4                     	;# 
  2056  0FE5                     	;# 
  2057  0FE6                     	;# 
  2058  0FE7                     	;# 
  2059  0FE8                     	;# 
  2060  0FE9                     	;# 
  2061  0FEA                     	;# 
  2062  0FEB                     	;# 
  2063  0FED                     	;# 
  2064  0FEE                     	;# 
  2065  0FEF                     	;# 
  2066  0000                     	;# 
  2067  0001                     	;# 
  2068  0002                     	;# 
  2069  0003                     	;# 
  2070  0004                     	;# 
  2071  0005                     	;# 
  2072  0006                     	;# 
  2073  0007                     	;# 
  2074  0008                     	;# 
  2075  0009                     	;# 
  2076  000A                     	;# 
  2077  000B                     	;# 
  2078  000C                     	;# 
  2079  000D                     	;# 
  2080  000E                     	;# 
  2081  0011                     	;# 
  2082  0012                     	;# 
  2083  0015                     	;# 
  2084  0016                     	;# 
  2085  0016                     	;# 
  2086  0017                     	;# 
  2087  0018                     	;# 
  2088  0019                     	;# 
  2089  001A                     	;# 
  2090  001B                     	;# 
  2091  001C                     	;# 
  2092  008C                     	;# 
  2093  008D                     	;# 
  2094  008E                     	;# 
  2095  0091                     	;# 
  2096  0092                     	;# 
  2097  0095                     	;# 
  2098  0096                     	;# 
  2099  0097                     	;# 
  2100  0099                     	;# 
  2101  009A                     	;# 
  2102  009B                     	;# 
  2103  009B                     	;# 
  2104  009C                     	;# 
  2105  009D                     	;# 
  2106  009E                     	;# 
  2107  009F                     	;# 
  2108  010C                     	;# 
  2109  010D                     	;# 
  2110  010E                     	;# 
  2111  0116                     	;# 
  2112  0117                     	;# 
  2113  011D                     	;# 
  2114  018C                     	;# 
  2115  018D                     	;# 
  2116  018E                     	;# 
  2117  0191                     	;# 
  2118  0191                     	;# 
  2119  0192                     	;# 
  2120  0193                     	;# 
  2121  0193                     	;# 
  2122  0194                     	;# 
  2123  0195                     	;# 
  2124  0196                     	;# 
  2125  0199                     	;# 
  2126  019A                     	;# 
  2127  019B                     	;# 
  2128  019B                     	;# 
  2129  019C                     	;# 
  2130  019D                     	;# 
  2131  019E                     	;# 
  2132  019F                     	;# 
  2133  020C                     	;# 
  2134  020D                     	;# 
  2135  0211                     	;# 
  2136  0211                     	;# 
  2137  0212                     	;# 
  2138  0212                     	;# 
  2139  0213                     	;# 
  2140  0213                     	;# 
  2141  0214                     	;# 
  2142  0214                     	;# 
  2143  0215                     	;# 
  2144  0215                     	;# 
  2145  0215                     	;# 
  2146  0216                     	;# 
  2147  0216                     	;# 
  2148  0217                     	;# 
  2149  0217                     	;# 
  2150  0391                     	;# 
  2151  0392                     	;# 
  2152  0393                     	;# 
  2153  0394                     	;# 
  2154  0395                     	;# 
  2155  0396                     	;# 
  2156  0611                     	;# 
  2157  0612                     	;# 
  2158  0613                     	;# 
  2159  0613                     	;# 
  2160  0614                     	;# 
  2161  0615                     	;# 
  2162  0616                     	;# 
  2163  0616                     	;# 
  2164  0711                     	;# 
  2165  0711                     	;# 
  2166  0711                     	;# 
  2167  0712                     	;# 
  2168  0712                     	;# 
  2169  0713                     	;# 
  2170  0713                     	;# 
  2171  0713                     	;# 
  2172  0714                     	;# 
  2173  0714                     	;# 
  2174  0714                     	;# 
  2175  0715                     	;# 
  2176  0715                     	;# 
  2177  0716                     	;# 
  2178  0716                     	;# 
  2179  0716                     	;# 
  2180  0716                     	;# 
  2181  0717                     	;# 
  2182  0717                     	;# 
  2183  0717                     	;# 
  2184  0717                     	;# 
  2185  0718                     	;# 
  2186  0718                     	;# 
  2187  0718                     	;# 
  2188  0719                     	;# 
  2189  0719                     	;# 
  2190  0719                     	;# 
  2191  0719                     	;# 
  2192  071A                     	;# 
  2193  071A                     	;# 
  2194  071A                     	;# 
  2195  071A                     	;# 
  2196  071A                     	;# 
  2197  071B                     	;# 
  2198  071B                     	;# 
  2199  071C                     	;# 
  2200  071C                     	;# 
  2201  071C                     	;# 
  2202  071C                     	;# 
  2203  071C                     	;# 
  2204  071D                     	;# 
  2205  071D                     	;# 
  2206  071E                     	;# 
  2207  071E                     	;# 
  2208  0791                     	;# 
  2209  0791                     	;# 
  2210  0793                     	;# 
  2211  0793                     	;# 
  2212  0794                     	;# 
  2213  0794                     	;# 
  2214  0796                     	;# 
  2215  0796                     	;# 
  2216  0796                     	;# 
  2217  0797                     	;# 
  2218  0797                     	;# 
  2219  0797                     	;# 
  2220  0798                     	;# 
  2221  0798                     	;# 
  2222  0799                     	;# 
  2223  0799                     	;# 
  2224  0799                     	;# 
  2225  079A                     	;# 
  2226  079A                     	;# 
  2227  079A                     	;# 
  2228  079B                     	;# 
  2229  079C                     	;# 
  2230  079C                     	;# 
  2231  079C                     	;# 
  2232  079D                     	;# 
  2233  079E                     	;# 
  2234  079E                     	;# 
  2235  0F8C                     	;# 
  2236  0F8D                     	;# 
  2237  0F91                     	;# 
  2238  0F96                     	;# 
  2239  0F97                     	;# 
  2240  0F9C                     	;# 
  2241  0F9D                     	;# 
  2242  0F9E                     	;# 
  2243  0FE3                     	;# 
  2244  0FE4                     	;# 
  2245  0FE5                     	;# 
  2246  0FE6                     	;# 
  2247  0FE7                     	;# 
  2248  0FE8                     	;# 
  2249  0FE9                     	;# 
  2250  0FEA                     	;# 
  2251  0FEB                     	;# 
  2252  0FED                     	;# 
  2253  0FEE                     	;# 
  2254  0FEF                     	;# 
  2255                           
  2256                           	psect	idataBANK0
  2257  1485                     __pidataBANK0:	
  2258                           
  2259                           ;initializer for _callback_notPressed
  2260  1485  3474               	retlw	low _Button_DefaultCallback
  2261  1486  3414               	retlw	high _Button_DefaultCallback
  2262                           
  2263                           ;initializer for _sample_period
  2264  1487  34AE               	retlw	174
  2265                           
  2266                           	psect	idataBANK1
  2267  1529                     __pidataBANK1:	
  2268                           
  2269                           ;initializer for _Button_StateMachine
  2270  1529  34AD               	retlw	low _Button_State_Initializing
  2271  152A  340C               	retlw	high _Button_State_Initializing
  2272  152B  34A0               	retlw	low _Button_State_NotPressed
  2273  152C  3406               	retlw	high _Button_State_NotPressed
  2274  152D  340F               	retlw	low _Button_State_Pressed
  2275  152E  340D               	retlw	high _Button_State_Pressed
  2276                           
  2277                           ;initializer for _callback_pressed
  2278  152F  3474               	retlw	low _Button_DefaultCallback
  2279  1530  3414               	retlw	high _Button_DefaultCallback
  2280                           
  2281                           ;initializer for _callback_sampled
  2282  1531  3475               	retlw	low _Sensor_DefaultCallback
  2283  1532  3414               	retlw	high _Sensor_DefaultCallback
  2284                           
  2285                           	psect	idataBANK2
  2286  1701                     __pidataBANK2:	
  2287                           
  2288                           ;initializer for _mtouch_sensor
  2289  1701  3400               	retlw	0
  2290  1702  3469               	retlw	105
  2291  1703  3430               	retlw	48
  2292  1704  3410               	retlw	16
  2293  1705  3420               	retlw	32
  2294  1706  3400               	retlw	0
  2295  1707  3400               	retlw	0
  2296  1708  3400               	retlw	0
  2297  1709  3400               	retlw	0
  2298  170A  3401               	retlw	1
  2299  170B  345D               	retlw	93
  2300  170C  3430               	retlw	48
  2301  170D  3410               	retlw	16
  2302  170E  3420               	retlw	32
  2303  170F  3400               	retlw	0
  2304  1710  3400               	retlw	0
  2305  1711  3400               	retlw	0
  2306  1712  3400               	retlw	0
  2307  1713  3402               	retlw	2
  2308  1714  3435               	retlw	53
  2309  1715  3430               	retlw	48
  2310  1716  3410               	retlw	16
  2311  1717  3420               	retlw	32
  2312  1718  3400               	retlw	0
  2313  1719  3400               	retlw	0
  2314  171A  3400               	retlw	0
  2315  171B  3400               	retlw	0
  2316                           
  2317                           	psect	stringtext1
  2318  180F                     __pstringtext1:	
  2319  180F                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2320  180F  3400               	retlw	0
  2321  1810  340D               	retlw	13
  2322  1811  341C               	retlw	28
  2323  1812  341E               	retlw	30
  2324  1813  3417               	retlw	23
  2325  1814                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2326                           
  2327                           	psect	stringtext2
  2328  183C                     __pstringtext2:	
  2329  183C                     _sensor_scan_group:	
  2330  183C  3462               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2331  183D  3450               	retlw	low (_mtouch_sensor| (0+256))
  2332  183E  3400               	retlw	0
  2333  183F  3459               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2334  1840                     __end_of_sensor_scan_group:	
  2335                           
  2336                           	psect	stringtext3
  2337  1000                     __pstringtext3:	
  2338  1000                     _mtouch_button_init:	
  2339  1000  3400               	retlw	0
  2340  1001  3402               	retlw	2
  2341  1002  3400               	retlw	0
  2342  1003  3400               	retlw	0
  2343  1004  3400               	retlw	0
  2344  1005  3400               	retlw	0
  2345  1006  3400               	retlw	0
  2346  1007  3400               	retlw	0
  2347  1008  3400               	retlw	0
  2348  1009  3400               	retlw	0
  2349  100A  3400               	retlw	0
  2350  100B  3400               	retlw	0
  2351  100C  3400               	retlw	0
  2352  100D  3400               	retlw	0
  2353  100E  3464               	retlw	100
  2354  100F  3401               	retlw	1
  2355  1010  3401               	retlw	1
  2356  1011  3401               	retlw	1
  2357  1012  3400               	retlw	0
  2358  1013  3400               	retlw	0
  2359  1014  3400               	retlw	0
  2360  1015  3400               	retlw	0
  2361  1016  3400               	retlw	0
  2362  1017  3400               	retlw	0
  2363  1018  3400               	retlw	0
  2364  1019  3400               	retlw	0
  2365  101A  3400               	retlw	0
  2366  101B  3400               	retlw	0
  2367  101C  3400               	retlw	0
  2368  101D  3400               	retlw	0
  2369  101E  3464               	retlw	100
  2370  101F  3401               	retlw	1
  2371  1020  3402               	retlw	2
  2372  1021  3400               	retlw	0
  2373  1022  3400               	retlw	0
  2374  1023  3400               	retlw	0
  2375  1024  3400               	retlw	0
  2376  1025  3400               	retlw	0
  2377  1026  3400               	retlw	0
  2378  1027  3400               	retlw	0
  2379  1028  3400               	retlw	0
  2380  1029  3400               	retlw	0
  2381  102A  3400               	retlw	0
  2382  102B  3400               	retlw	0
  2383  102C  3400               	retlw	0
  2384  102D  3400               	retlw	0
  2385  102E  3464               	retlw	100
  2386  102F  3401               	retlw	1
  2387  1030                     __end_of_mtouch_button_init:	
  2388                           
  2389                           	psect	nvBANK1
  2390  00C4                     __pnvBANK1:	
  2391  00C4                     _EUSART_ErrorHandler:	
  2392  00C4                     	ds	2
  2393  00C6                     _EUSART_OverrunErrorHandler:	
  2394  00C6                     	ds	2
  2395  00C8                     _EUSART_FramingErrorHandler:	
  2396  00C8                     	ds	2
  2397  00CA                     _EUSART_RxDefaultInterruptHandler:	
  2398  00CA                     	ds	2
  2399  00CC                     _EUSART_TxDefaultInterruptHandler:	
  2400  00CC                     	ds	2
  2401  00CE                     _eusartTxBufferRemaining:	
  2402  00CE                     	ds	1
  2403  001C                     _T2CON	set	28
  2404  001A                     _TMR2	set	26
  2405  001B                     _PR2	set	27
  2406  000B                     _INTCONbits	set	11
  2407  0012                     _PIR2bits	set	18
  2408  0011                     _PIR1bits	set	17
  2409  001C                     _T2CONbits	set	28
  2410  005F                     _GIE	set	95
  2411  0095                     _OPTION_REGbits	set	149
  2412  008E                     _TRISC	set	142
  2413  008D                     _TRISB	set	141
  2414  008C                     _TRISA	set	140
  2415  0097                     _WDTCON	set	151
  2416  0099                     _OSCCON	set	153
  2417  0091                     _PIE1bits	set	145
  2418  010D                     _LATBbits	set	269
  2419  010E                     _LATCbits	set	270
  2420  010C                     _LATAbits	set	268
  2421  011D                     _APFCON	set	285
  2422  010E                     _LATC	set	270
  2423  010D                     _LATB	set	269
  2424  010C                     _LATA	set	268
  2425  0116                     _BORCON	set	278
  2426  011D                     _APFCONbits	set	285
  2427  018C                     _ANSELA	set	396
  2428  018D                     _ANSELB	set	397
  2429  018E                     _ANSELC	set	398
  2430  0199                     _RCREG	set	409
  2431  019D                     _RCSTAbits	set	413
  2432  019A                     _TXREG	set	410
  2433  019E                     _TXSTAbits	set	414
  2434  019C                     _SPBRGH	set	412
  2435  019B                     _SPBRGL	set	411
  2436  019E                     _TXSTA	set	414
  2437  019D                     _RCSTA	set	413
  2438  019F                     _BAUDCON	set	415
  2439  020C                     _WPUA	set	524
  2440  020D                     _WPUB	set	525
  2441  071A                     _AAD1RES0	set	1818
  2442  0711                     _AD1CON0bits	set	1809
  2443  0714                     _AAD1CON3	set	1812
  2444  0713                     _AD1CON2	set	1811
  2445  0717                     _AD1ACQCON	set	1815
  2446  0716                     _AD1PRECON	set	1814
  2447  0718                     _AAD1GRD	set	1816
  2448  0713                     _AAD1CON2	set	1811
  2449  0719                     _AAD1CAP	set	1817
  2450  0714                     _AD1CON3	set	1812
  2451  0712                     _ADCOMCON	set	1810
  2452  0711                     _AD1CON0	set	1809
  2453  079A                     _AAD2RES0	set	1946
  2454  0791                     _AD2CON0bits	set	1937
  2455  0797                     _AD2ACQCON	set	1943
  2456  0796                     _AD2PRECON	set	1942
  2457  0794                     _AAD2CON3	set	1940
  2458  0798                     _AAD2GRD	set	1944
  2459  0793                     _AD2CON2	set	1939
  2460  0794                     _AD2CON3	set	1940
  2461  0791                     _AD2CON0	set	1937
  2462                           
  2463                           	psect	stringtext4
  2464  1800                     __pstringtext4:	
  2465  1800                     STR_1:	
  2466  1800  3450               	retlw	80	;'P'
  2467  1801  3449               	retlw	73	;'I'
  2468  1802  3443               	retlw	67	;'C'
  2469  1803  3453               	retlw	83	;'S'
  2470  1804  344D               	retlw	77	;'M'
  2471  1805  3441               	retlw	65	;'A'
  2472  1806  3452               	retlw	82	;'R'
  2473  1807  3454               	retlw	84	;'T'
  2474  1808  3400               	retlw	0
  2475                           
  2476                           	psect	stringtext5
  2477  1809                     __pstringtext5:	
  2478  1809                     STR_2:	
  2479  1809  3452               	retlw	82	;'R'
  2480  180A  3455               	retlw	85	;'U'
  2481  180B  344E               	retlw	78	;'N'
  2482  180C  340D               	retlw	13
  2483  180D  340A               	retlw	10
  2484  180E  3400               	retlw	0
  2485                           
  2486                           	psect	stringtext6
  2487  1814                     __pstringtext6:	
  2488  1814                     STR_3:	
  2489  1814  3450               	retlw	80	;'P'
  2490  1815  3449               	retlw	73	;'I'
  2491  1816  3443               	retlw	67	;'C'
  2492  1817  3430               	retlw	48	;'0'
  2493  1818  3400               	retlw	0
  2494                           
  2495                           	psect	stringtext7
  2496  1819                     __pstringtext7:	
  2497  1819                     STR_4:	
  2498  1819  3450               	retlw	80	;'P'
  2499  181A  3449               	retlw	73	;'I'
  2500  181B  3443               	retlw	67	;'C'
  2501  181C  3431               	retlw	49	;'1'
  2502  181D  3400               	retlw	0
  2503                           
  2504                           	psect	stringtext8
  2505  181E                     __pstringtext8:	
  2506  181E                     STR_5:	
  2507  181E  3450               	retlw	80	;'P'
  2508  181F  3449               	retlw	73	;'I'
  2509  1820  3443               	retlw	67	;'C'
  2510  1821  3432               	retlw	50	;'2'
  2511  1822  3400               	retlw	0
  2512                           
  2513                           	psect	stringtext9
  2514  1823                     __pstringtext9:	
  2515  1823                     STR_6:	
  2516  1823  3450               	retlw	80	;'P'
  2517  1824  3449               	retlw	73	;'I'
  2518  1825  3443               	retlw	67	;'C'
  2519  1826  3433               	retlw	51	;'3'
  2520  1827  3400               	retlw	0
  2521                           
  2522                           	psect	stringtext10
  2523  1828                     __pstringtext10:	
  2524  1828                     STR_7:	
  2525  1828  3450               	retlw	80	;'P'
  2526  1829  3449               	retlw	73	;'I'
  2527  182A  3443               	retlw	67	;'C'
  2528  182B  3434               	retlw	52	;'4'
  2529  182C  3400               	retlw	0
  2530                           
  2531                           	psect	stringtext11
  2532  182D                     __pstringtext11:	
  2533  182D                     STR_8:	
  2534  182D  3450               	retlw	80	;'P'
  2535  182E  3449               	retlw	73	;'I'
  2536  182F  3443               	retlw	67	;'C'
  2537  1830  3435               	retlw	53	;'5'
  2538  1831  3400               	retlw	0
  2539                           
  2540                           	psect	stringtext12
  2541  1832                     __pstringtext12:	
  2542  1832                     STR_9:	
  2543  1832  3450               	retlw	80	;'P'
  2544  1833  3449               	retlw	73	;'I'
  2545  1834  3443               	retlw	67	;'C'
  2546  1835  3436               	retlw	54	;'6'
  2547  1836  3400               	retlw	0
  2548                           
  2549                           	psect	stringtext13
  2550  1837                     __pstringtext13:	
  2551  1837                     STR_10:	
  2552  1837  3450               	retlw	80	;'P'
  2553  1838  3449               	retlw	73	;'I'
  2554  1839  3443               	retlw	67	;'C'
  2555  183A  3437               	retlw	55	;'7'
  2556  183B  3400               	retlw	0
  2557                           
  2558                           	psect	stringtext14
  2559  1840                     __pstringtext14:	
  2560  1840                     STR_11:	
  2561  1840  3425               	retlw	37	;'%'
  2562  1841  3463               	retlw	99	;'c'
  2563  1842  3400               	retlw	0
  2564                           
  2565                           	psect	stringtext15
  2566  0000                     __pstringtext15:	
  2567                           
  2568                           ; #config settings
  2569  0000                     
  2570                           	psect	cinit
  2571  0025                     start_initialization:	
  2572  0025                     __initialization:	
  2573                           
  2574                           ; Initialize objects allocated to BANK0
  2575  0025  3085               	movlw	low __pidataBANK0
  2576  0026  0084               	movwf	4
  2577  0027  3094               	movlw	(high __pidataBANK0)| (0+128)
  2578  0028  0085               	movwf	5
  2579  0029  306C               	movlw	low __pdataBANK0
  2580  002A  0086               	movwf	6
  2581  002B  3000               	movlw	high __pdataBANK0
  2582  002C  0087               	movwf	7
  2583  002D  3003               	movlw	3
  2584  002E  3194  24E8  3180   	fcall	init_ram
  2585                           
  2586                           ; Initialize objects allocated to BANK1
  2587  0031  3029               	movlw	low __pidataBANK1
  2588  0032  0084               	movwf	4
  2589  0033  3095               	movlw	(high __pidataBANK1)| (0+128)
  2590  0034  0085               	movwf	5
  2591  0035  30CF               	movlw	low __pdataBANK1
  2592  0036  0086               	movwf	6
  2593  0037  3000               	movlw	high __pdataBANK1
  2594  0038  0087               	movwf	7
  2595  0039  300A               	movlw	10
  2596  003A  3194  24E8  3180   	fcall	init_ram
  2597                           
  2598                           ; Initialize objects allocated to BANK2
  2599  003D  3001               	movlw	low __pidataBANK2
  2600  003E  0084               	movwf	4
  2601  003F  3097               	movlw	(high __pidataBANK2)| (0+128)
  2602  0040  0085               	movwf	5
  2603  0041  3050               	movlw	low __pdataBANK2
  2604  0042  0086               	movwf	6
  2605  0043  3001               	movlw	high __pdataBANK2
  2606  0044  0087               	movwf	7
  2607  0045  301B               	movlw	27
  2608  0046  3194  24E8  3180   	fcall	init_ram
  2609                           
  2610                           ; Clear objects allocated to COMMON
  2611  0049  01FC               	clrf	__pbssCOMMON& (0+127)
  2612                           
  2613                           ; Clear objects allocated to BANK0
  2614  004A  3053               	movlw	low __pbssBANK0
  2615  004B  0084               	movwf	4
  2616  004C  3000               	movlw	high __pbssBANK0
  2617  004D  0085               	movwf	5
  2618  004E  3019               	movlw	25
  2619  004F  3194  24E2  3180   	fcall	clear_ram0
  2620                           
  2621                           ; Clear objects allocated to BANK1
  2622  0052  30A0               	movlw	low __pbssBANK1
  2623  0053  0084               	movwf	4
  2624  0054  3000               	movlw	high __pbssBANK1
  2625  0055  0085               	movwf	5
  2626  0056  3024               	movlw	36
  2627  0057  3194  24E2  3180   	fcall	clear_ram0
  2628                           
  2629                           ; Clear objects allocated to BANK2
  2630  005A  3020               	movlw	low __pbssBANK2
  2631  005B  0084               	movwf	4
  2632  005C  3001               	movlw	high __pbssBANK2
  2633  005D  0085               	movwf	5
  2634  005E  3030               	movlw	48
  2635  005F  3194  24E2  3180   	fcall	clear_ram0
  2636                           
  2637                           ; Clear objects allocated to BANK3
  2638  0062  30A0               	movlw	low __pbssBANK3
  2639  0063  0084               	movwf	4
  2640  0064  3001               	movlw	high __pbssBANK3
  2641  0065  0085               	movwf	5
  2642  0066  3020               	movlw	32
  2643  0067  3194  24E2         	fcall	clear_ram0
  2644  0069                     end_of_initialization:	
  2645                           ;End of C runtime variable initialization code
  2646                           
  2647  0069                     __end_of__initialization:	
  2648  0069  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2649  006A  0020               	movlb	0
  2650  006B  3180  286D         	ljmp	_main	;jump to C main() function
  2651                           
  2652                           	psect	bssCOMMON
  2653  007C                     __pbssCOMMON:	
  2654  007C                     _eusartRxHead:	
  2655  007C                     	ds	1
  2656                           
  2657                           	psect	bssBANK0
  2658  0053                     __pbssBANK0:	
  2659  0053                     _packet_sample:	
  2660  0053                     	ds	4
  2661  0057                     _width:	
  2662  0057                     	ds	2
  2663  0059                     _last_touch_status:	
  2664  0059                     	ds	2
  2665  005B                     _packet_noise:	
  2666  005B                     	ds	2
  2667  005D                     _update_state_flag:	
  2668  005D                     	ds	1
  2669  005E                     _blink_count:	
  2670  005E                     	ds	1
  2671  005F                     _blink:	
  2672  005F                     	ds	1
  2673  0060                     _check_request:	
  2674  0060                     	ds	1
  2675  0061                     _config_status:	
  2676  0061                     	ds	1
  2677  0062                     _prcData:	
  2678  0062                     	ds	1
  2679  0063                     _rxData:	
  2680  0063                     	ds	1
  2681  0064                     _eusartRxLastError:	
  2682  0064                     	ds	1
  2683  0065                     _eusartRxCount:	
  2684  0065                     	ds	1
  2685  0066                     _eusartRxTail:	
  2686  0066                     	ds	1
  2687  0067                     _eusartTxTail:	
  2688  0067                     	ds	1
  2689  0068                     _eusartTxHead:	
  2690  0068                     	ds	1
  2691  0069                     _sensor_globalFlags:	
  2692  0069                     	ds	1
  2693  006A                     _lowpowerActivated:	
  2694  006A                     	ds	1
  2695  006B                     _mtouch_time_toScan:	
  2696  006B                     	ds	1
  2697                           
  2698                           	psect	dataBANK0
  2699  006C                     __pdataBANK0:	
  2700  006C                     _callback_notPressed:	
  2701  006C                     	ds	2
  2702  006E                     _sample_period:	
  2703  006E                     	ds	1
  2704                           
  2705                           	psect	bssBANK1
  2706  00A0                     __pbssBANK1:	
  2707  00A0                     _eusartRxStatusBuffer:	
  2708  00A0                     	ds	8
  2709  00A8                     _eusartRxBuffer:	
  2710  00A8                     	ds	8
  2711  00B0                     _eusartTxBuffer:	
  2712  00B0                     	ds	8
  2713  00B8                     _timeout_count:	
  2714  00B8                     	ds	4
  2715  00BC                     _nout:	
  2716  00BC                     	ds	2
  2717  00BE                     _prec:	
  2718  00BE                     	ds	2
  2719  00C0                     _flags:	
  2720  00C0                     	ds	2
  2721  00C2                     _count_conf:	
  2722  00C2                     	ds	2
  2723                           
  2724                           	psect	dataBANK1
  2725  00CF                     __pdataBANK1:	
  2726  00CF                     _Button_StateMachine:	
  2727  00CF                     	ds	6
  2728  00D5                     _callback_pressed:	
  2729  00D5                     	ds	2
  2730  00D7                     _callback_sampled:	
  2731  00D7                     	ds	2
  2732                           
  2733                           	psect	bssBANK2
  2734  0120                     __pbssBANK2:	
  2735  0120                     _mtouch_button:	
  2736  0120                     	ds	48
  2737                           
  2738                           	psect	dataBANK2
  2739  0150                     __pdataBANK2:	
  2740  0150                     _mtouch_sensor:	
  2741  0150                     	ds	27
  2742                           
  2743                           	psect	bssBANK3
  2744  01A0                     __pbssBANK3:	
  2745  01A0                     _dbuf:	
  2746  01A0                     	ds	32
  2747                           
  2748                           	psect	inittext
  2749  14E8                     init_ram:	
  2750  14E8  00FE               	movwf	126
  2751  14E9                     initloop:	
  2752  14E9  0012               	moviw fsr0++
  2753  14EA  001E               	movwi fsr1++
  2754  14EB  0BFE               	decfsz	126,f
  2755  14EC  2CE9               	goto	initloop
  2756  14ED  3400               	retlw	0
  2757                           
  2758                           	psect	clrtext
  2759  14E2                     clear_ram0:	
  2760                           ;	Called with FSR0 containing the base address, and
  2761                           ;	WREG with the size to clear
  2762                           
  2763  14E2  0064               	clrwdt	;clear the watchdog before getting into this loop
  2764  14E3                     clrloop0:	
  2765  14E3  0180               	clrf	0	;clear RAM location pointed to by FSR
  2766  14E4  3101               	addfsr 0,1
  2767  14E5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2768  14E6  2CE3               	goto	clrloop0	;have we reached the end yet?
  2769  14E7  3400               	retlw	0	;all done for this memory range, return
  2770                           
  2771                           	psect	cstackBANK1
  2772  00D9                     __pcstackBANK1:	
  2773  00D9                     ??_main:	
  2774                           
  2775                           ; 1 bytes @ 0x0
  2776  00D9                     	ds	2
  2777                           
  2778                           	psect	cstackCOMMON
  2779  0070                     __pcstackCOMMON:	
  2780  0070                     ?_MTOUCH_Service_Mainloop:	
  2781  0070                     ?_MTOUCH_Button_isPressed:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ?_MTOUCH_Button_InitializeAll:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0070                     ?_MTOUCH_Button_ServiceAll:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802  0070                     ?_MTOUCH_needReburst:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805  0070                     ?_MTOUCH_Tick:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     ?_MTOUCH_Button_Tick:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_MTOUCH_Sensor_Enable:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ?_Sensor_Sampled_Reset:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0070                     ?_Sensor_Service:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0070                     ?_Sensor_isEnabled:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0070                     ?_Sensor_RawSample_Update:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829  0070                     ?_Sensor_setSampled:	
  2830                           ; 1 bytes @ 0x0
  2831                           
  2832  0070                     ?_Sensor_postAcquisitionProcess:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0070                     ?_Sensor_isActive:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0070                     ?_Sensor_isCalibrated:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0070                     ?_Sensor_setActive:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0070                     ?_Sensor_setInactive:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0070                     ?_Sensor_isCalibratingAcqTime:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0070                     ?_TMR2_LoadPeriodRegister:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0070                     ?_TMR2_StartTimer:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0070                     ?_TMR2_StopTimer:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0070                     ?_Sensor_autoCalibration:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0070                     ?_Sensor_setCalibratAcqTime:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ?_Sensor_setCalibrated:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?_Button_Service:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ?_Button_Reading_Update:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ?_Button_Deviation_Update:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ?_Button_Baseline_Initialize:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ?_Button_Baseline_Update:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?_Button_Tick_helper:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ?_Button_Reading_Update_Helper:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_EUSART_Receive_ISR:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_EUSART_Transmit_ISR:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ??_EUSART_Transmit_ISR:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_EUSART_DefaultErrorHandler:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_EUSART_RxDataHandler:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ??_EUSART_RxDataHandler:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_PIN_MANAGER_Initialize:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_OSCILLATOR_Initialize:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_WDT_Initialize:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_LED_PROCESS:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_RELAY_PROCESS:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_update_state:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_check_data:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_check_message:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_DATA_PROCESS:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_MTOUCH_Initialize:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_MTOUCH_Sensor_Initialize:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_Sensor_getScanGroupIndex:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_MTOUCH_Button_Initialize:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_EUSART_Initialize:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_EUSART_is_rx_ready:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_EUSART_Read:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_EUSART_Write:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0070                     ?_putch:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0070                     ?_TMR2_Initialize:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0070                     ?_INTERRUPT_InterruptManager:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0070                     ?_SYSTEM_Initialize:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0070                     ?_main:	
  2989                           ; 1 bytes @ 0x0
  2990                           
  2991  0070                     ?_LED_2_SetHigh:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994  0070                     ?_LED_2_SetLow:	
  2995                           ; 1 bytes @ 0x0
  2996                           
  2997  0070                     ?_LED_1_SetHigh:	
  2998                           ; 1 bytes @ 0x0
  2999                           
  3000  0070                     ?_LED_1_SetLow:	
  3001                           ; 1 bytes @ 0x0
  3002                           
  3003  0070                     ?_LED_0_SetHigh:	
  3004                           ; 1 bytes @ 0x0
  3005                           
  3006  0070                     ?_LED_0_SetLow:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009                           
  3010                           ; 1 bytes @ 0x0
  3011  0070                     	ds	1
  3012  0071                     ??_MTOUCH_Button_isPressed:	
  3013  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3014                           ; 1 bytes @ 0x1
  3015                           
  3016  0071                     ??_MTOUCH_needReburst:	
  3017                           ; 1 bytes @ 0x1
  3018                           
  3019  0071                     ?_Sensor_DefaultCallback:	
  3020                           ; 1 bytes @ 0x1
  3021                           
  3022  0071                     ??_Sensor_Sampled_Reset:	
  3023                           ; 1 bytes @ 0x1
  3024                           
  3025  0071                     ??_Sensor_isEnabled:	
  3026                           ; 1 bytes @ 0x1
  3027                           
  3028  0071                     ??_Sensor_setSampled:	
  3029                           ; 1 bytes @ 0x1
  3030                           
  3031  0071                     ??_Sensor_isActive:	
  3032                           ; 1 bytes @ 0x1
  3033                           
  3034  0071                     ??_Sensor_isCalibrated:	
  3035                           ; 1 bytes @ 0x1
  3036                           
  3037  0071                     ??_Sensor_setActive:	
  3038                           ; 1 bytes @ 0x1
  3039                           
  3040  0071                     ??_Sensor_setInactive:	
  3041                           ; 1 bytes @ 0x1
  3042                           
  3043  0071                     ??_Sensor_isCalibratingAcqTime:	
  3044                           ; 1 bytes @ 0x1
  3045                           
  3046  0071                     ??_TMR2_LoadPeriodRegister:	
  3047                           ; 1 bytes @ 0x1
  3048                           
  3049  0071                     ??_TMR2_StartTimer:	
  3050                           ; 1 bytes @ 0x1
  3051                           
  3052  0071                     ??_TMR2_StopTimer:	
  3053                           ; 1 bytes @ 0x1
  3054                           
  3055  0071                     ??_Sensor_setCalibratAcqTime:	
  3056                           ; 1 bytes @ 0x1
  3057                           
  3058  0071                     ??_Sensor_setCalibrated:	
  3059                           ; 1 bytes @ 0x1
  3060                           
  3061  0071                     ?_memcpy:	
  3062                           ; 1 bytes @ 0x1
  3063                           
  3064  0071                     ??_Button_Deviation_Update:	
  3065                           ; 1 bytes @ 0x1
  3066                           
  3067  0071                     ??_Button_Baseline_Update:	
  3068                           ; 1 bytes @ 0x1
  3069                           
  3070  0071                     ??_Button_Tick_helper:	
  3071                           ; 1 bytes @ 0x1
  3072                           
  3073  0071                     ?_EUSART_SetRxInterruptHandler:	
  3074                           ; 1 bytes @ 0x1
  3075                           
  3076  0071                     ??_EUSART_Receive_ISR:	
  3077                           ; 1 bytes @ 0x1
  3078                           
  3079  0071                     ?_EUSART_SetTxInterruptHandler:	
  3080                           ; 1 bytes @ 0x1
  3081                           
  3082  0071                     ?_EUSART_SetFramingErrorHandler:	
  3083                           ; 1 bytes @ 0x1
  3084                           
  3085  0071                     ?_EUSART_SetOverrunErrorHandler:	
  3086                           ; 1 bytes @ 0x1
  3087                           
  3088  0071                     ?_EUSART_SetErrorHandler:	
  3089                           ; 1 bytes @ 0x1
  3090                           
  3091  0071                     ??_EUSART_DefaultErrorHandler:	
  3092                           ; 1 bytes @ 0x1
  3093                           
  3094  0071                     ??_PIN_MANAGER_Initialize:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0071                     ??_OSCILLATOR_Initialize:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0071                     ??_WDT_Initialize:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103  0071                     ??_LED_PROCESS:	
  3104                           ; 1 bytes @ 0x1
  3105                           
  3106  0071                     ??_RELAY_PROCESS:	
  3107                           ; 1 bytes @ 0x1
  3108                           
  3109  0071                     ??_check_data:	
  3110                           ; 1 bytes @ 0x1
  3111                           
  3112  0071                     ??_Sensor_getScanGroupIndex:	
  3113                           ; 1 bytes @ 0x1
  3114                           
  3115  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0071                     ??_EUSART_is_rx_ready:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0071                     ??_EUSART_Read:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0071                     ??_EUSART_Write:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0071                     ??_TMR2_Initialize:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133  0071                     ??_INTERRUPT_InterruptManager:	
  3134                           ; 1 bytes @ 0x1
  3135                           
  3136  0071                     ??_LED_2_SetHigh:	
  3137                           ; 1 bytes @ 0x1
  3138                           
  3139  0071                     ??_LED_2_SetLow:	
  3140                           ; 1 bytes @ 0x1
  3141                           
  3142  0071                     ??_LED_1_SetHigh:	
  3143                           ; 1 bytes @ 0x1
  3144                           
  3145  0071                     ??_LED_1_SetLow:	
  3146                           ; 1 bytes @ 0x1
  3147                           
  3148  0071                     ??_LED_0_SetHigh:	
  3149                           ; 1 bytes @ 0x1
  3150                           
  3151  0071                     ??_LED_0_SetLow:	
  3152                           ; 1 bytes @ 0x1
  3153                           
  3154  0071                     ?___bmul:	
  3155                           ; 1 bytes @ 0x1
  3156                           
  3157  0071                     ?_abs:	
  3158                           ; 1 bytes @ 0x1
  3159                           
  3160  0071                     ?_strlen:	
  3161                           ; 2 bytes @ 0x1
  3162                           
  3163  0071                     Sensor_DefaultCallback@sensor:	
  3164                           ; 2 bytes @ 0x1
  3165                           
  3166  0071                     Sensor_setActive@sensor:	
  3167                           ; 1 bytes @ 0x1
  3168                           
  3169  0071                     Sensor_setInactive@sensor:	
  3170                           ; 1 bytes @ 0x1
  3171                           
  3172  0071                     Sensor_isActive@sensor:	
  3173                           ; 1 bytes @ 0x1
  3174                           
  3175  0071                     Sensor_isCalibrated@sensor:	
  3176                           ; 1 bytes @ 0x1
  3177                           
  3178  0071                     Sensor_setCalibrated@sensor:	
  3179                           ; 1 bytes @ 0x1
  3180                           
  3181  0071                     Sensor_setCalibratAcqTime@sensor:	
  3182                           ; 1 bytes @ 0x1
  3183                           
  3184  0071                     Sensor_isCalibratingAcqTime@sensor:	
  3185                           ; 1 bytes @ 0x1
  3186                           
  3187  0071                     Sensor_Sampled_Reset@sensor:	
  3188                           ; 1 bytes @ 0x1
  3189                           
  3190  0071                     Sensor_setSampled@sensor:	
  3191                           ; 1 bytes @ 0x1
  3192                           
  3193  0071                     TMR2_LoadPeriodRegister@periodVal:	
  3194                           ; 1 bytes @ 0x1
  3195                           
  3196  0071                     ___bmul@multiplicand:	
  3197                           ; 1 bytes @ 0x1
  3198                           
  3199  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  3200                           ; 1 bytes @ 0x1
  3201                           
  3202  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3203                           ; 2 bytes @ 0x1
  3204                           
  3205  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3206                           ; 2 bytes @ 0x1
  3207                           
  3208  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3209                           ; 2 bytes @ 0x1
  3210                           
  3211  0071                     EUSART_SetErrorHandler@interruptHandler:	
  3212                           ; 2 bytes @ 0x1
  3213                           
  3214  0071                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3215                           ; 2 bytes @ 0x1
  3216                           
  3217  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3218                           ; 2 bytes @ 0x1
  3219                           
  3220  0071                     abs@a:	
  3221                           ; 2 bytes @ 0x1
  3222                           
  3223  0071                     memcpy@s1:	
  3224                           ; 2 bytes @ 0x1
  3225                           
  3226                           
  3227                           ; 2 bytes @ 0x1
  3228  0071                     	ds	1
  3229  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3230  0072                     ??_Sensor_DefaultCallback:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0072                     ?_Sensor_loadADCSettings:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0072                     ??___bmul:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0072                     Sensor_loadADCSettings@adc_index:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242  0072                     Sensor_isEnabled@sensor:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245  0072                     MTOUCH_Button_isPressed@name:	
  3246                           ; 1 bytes @ 0x2
  3247                           
  3248  0072                     EUSART_Read@readValue:	
  3249                           ; 1 bytes @ 0x2
  3250                           
  3251  0072                     EUSART_Write@txData:	
  3252                           ; 1 bytes @ 0x2
  3253                           
  3254                           
  3255                           ; 1 bytes @ 0x2
  3256  0072                     	ds	1
  3257  0073                     ??_abs:	
  3258  0073                     ??_EUSART_SetRxInterruptHandler:	
  3259                           ; 1 bytes @ 0x3
  3260                           
  3261  0073                     ??_EUSART_SetTxInterruptHandler:	
  3262                           ; 1 bytes @ 0x3
  3263                           
  3264  0073                     ??_EUSART_SetFramingErrorHandler:	
  3265                           ; 1 bytes @ 0x3
  3266                           
  3267  0073                     ??_EUSART_SetOverrunErrorHandler:	
  3268                           ; 1 bytes @ 0x3
  3269                           
  3270  0073                     ??_EUSART_SetErrorHandler:	
  3271                           ; 1 bytes @ 0x3
  3272                           
  3273  0073                     ??_strlen:	
  3274                           ; 1 bytes @ 0x3
  3275                           
  3276  0073                     ??_Sensor_loadADCSettings:	
  3277                           ; 1 bytes @ 0x3
  3278                           
  3279  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  3280                           ; 1 bytes @ 0x3
  3281                           
  3282  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3283                           ; 1 bytes @ 0x3
  3284                           
  3285  0073                     ??_EUSART_Initialize:	
  3286                           ; 1 bytes @ 0x3
  3287                           
  3288  0073                     ??_putch:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291  0073                     Sensor_getScanGroupIndex@sensor:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297  0073                     Button_Tick_helper@button:	
  3298                           ; 1 bytes @ 0x3
  3299                           
  3300  0073                     putch@txData:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0073                     check_data@x:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306  0073                     LED_PROCESS@x:	
  3307                           ; 1 bytes @ 0x3
  3308                           
  3309  0073                     RELAY_PROCESS@x:	
  3310                           ; 1 bytes @ 0x3
  3311                           
  3312  0073                     ___bmul@product:	
  3313                           ; 1 bytes @ 0x3
  3314                           
  3315  0073                     memcpy@n:	
  3316                           ; 1 bytes @ 0x3
  3317                           
  3318                           
  3319                           ; 2 bytes @ 0x3
  3320  0073                     	ds	1
  3321  0074                     ??_MTOUCH_Button_Tick:	
  3322  0074                     ?_Button_DefaultCallback:	
  3323                           ; 1 bytes @ 0x4
  3324                           
  3325  0074                     ?_myButtonPressedCallback:	
  3326                           ; 1 bytes @ 0x4
  3327                           
  3328  0074                     ?_myButtonReleasedCallback:	
  3329                           ; 1 bytes @ 0x4
  3330                           
  3331  0074                     ??_DATA_PROCESS:	
  3332                           ; 1 bytes @ 0x4
  3333                           
  3334  0074                     ?_fputc:	
  3335                           ; 1 bytes @ 0x4
  3336                           
  3337  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3338                           ; 2 bytes @ 0x4
  3339                           
  3340  0074                     Button_DefaultCallback@button:	
  3341                           ; 1 bytes @ 0x4
  3342                           
  3343  0074                     myButtonPressedCallback@button:	
  3344                           ; 1 bytes @ 0x4
  3345                           
  3346  0074                     myButtonReleasedCallback@button:	
  3347                           ; 1 bytes @ 0x4
  3348                           
  3349  0074                     ___bmul@multiplier:	
  3350                           ; 1 bytes @ 0x4
  3351                           
  3352  0074                     strlen@a:	
  3353                           ; 1 bytes @ 0x4
  3354                           
  3355  0074                     fputc@c:	
  3356                           ; 1 bytes @ 0x4
  3357                           
  3358                           
  3359                           ; 2 bytes @ 0x4
  3360  0074                     	ds	1
  3361  0075                     ??_MTOUCH_Sensor_Enable:	
  3362  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3363                           ; 1 bytes @ 0x5
  3364                           
  3365  0075                     ??_Sensor_RawSample_Update:	
  3366                           ; 1 bytes @ 0x5
  3367                           
  3368  0075                     ??_Sensor_postAcquisitionProcess:	
  3369                           ; 1 bytes @ 0x5
  3370                           
  3371  0075                     ??_Sensor_autoCalibration:	
  3372                           ; 1 bytes @ 0x5
  3373                           
  3374  0075                     ??_Button_DefaultCallback:	
  3375                           ; 1 bytes @ 0x5
  3376                           
  3377  0075                     ??_memcpy:	
  3378                           ; 1 bytes @ 0x5
  3379                           
  3380  0075                     ??_myButtonPressedCallback:	
  3381                           ; 1 bytes @ 0x5
  3382                           
  3383  0075                     ??_myButtonReleasedCallback:	
  3384                           ; 1 bytes @ 0x5
  3385                           
  3386  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3387                           ; 1 bytes @ 0x5
  3388                           
  3389  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3390                           ; 1 bytes @ 0x5
  3391                           
  3392  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3393                           ; 1 bytes @ 0x5
  3394                           
  3395  0075                     MTOUCH_Button_Tick@i:	
  3396                           ; 2 bytes @ 0x5
  3397                           
  3398  0075                     strlen@s:	
  3399                           ; 1 bytes @ 0x5
  3400                           
  3401                           
  3402                           ; 1 bytes @ 0x5
  3403  0075                     	ds	1
  3404  0076                     ??_MTOUCH_Tick:	
  3405  0076                     Sensor_RawSample_Update@adcIndex:	
  3406                           ; 1 bytes @ 0x6
  3407                           
  3408  0076                     MTOUCH_Sensor_Enable@sensor:	
  3409                           ; 1 bytes @ 0x6
  3410                           
  3411  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3412                           ; 1 bytes @ 0x6
  3413                           
  3414  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3415                           ; 1 bytes @ 0x6
  3416                           
  3417  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3418                           ; 1 bytes @ 0x6
  3419                           
  3420  0076                     DATA_PROCESS@x:	
  3421                           ; 1 bytes @ 0x6
  3422                           
  3423  0076                     memcpy@tmp:	
  3424                           ; 1 bytes @ 0x6
  3425                           
  3426  0076                     fputc@fp:	
  3427                           ; 1 bytes @ 0x6
  3428                           
  3429  0076                     Sensor_postAcquisitionProcess@deviation:	
  3430                           ; 1 bytes @ 0x6
  3431                           
  3432  0076                     _Sensor_loadADCSettings$562:	
  3433                           ; 2 bytes @ 0x6
  3434                           
  3435                           
  3436                           ; 2 bytes @ 0x6
  3437  0076                     	ds	1
  3438  0077                     ??_fputc:	
  3439  0077                     ??_MTOUCH_Sensor_Initialize:	
  3440                           ; 1 bytes @ 0x7
  3441                           
  3442  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3443                           ; 1 bytes @ 0x7
  3444                           
  3445  0077                     ??_MTOUCH_Button_Initialize:	
  3446                           ; 1 bytes @ 0x7
  3447                           
  3448  0077                     Sensor_RawSample_Update@sensor:	
  3449                           ; 1 bytes @ 0x7
  3450                           
  3451  0077                     Button_Baseline_Update@button:	
  3452                           ; 1 bytes @ 0x7
  3453                           
  3454  0077                     memcpy@s:	
  3455                           ; 1 bytes @ 0x7
  3456                           
  3457                           
  3458                           ; 2 bytes @ 0x7
  3459  0077                     	ds	1
  3460  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3461  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  3462                           ; 1 bytes @ 0x8
  3463                           
  3464  0078                     Sensor_loadADCSettings@addressOffset:	
  3465                           ; 1 bytes @ 0x8
  3466                           
  3467  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3468                           ; 1 bytes @ 0x8
  3469                           
  3470                           
  3471                           ; 1 bytes @ 0x8
  3472  0078                     	ds	1
  3473  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3474  0079                     ??_Button_Reading_Update_Helper:	
  3475                           ; 1 bytes @ 0x9
  3476                           
  3477  0079                     Sensor_postAcquisitionProcess@sensor:	
  3478                           ; 1 bytes @ 0x9
  3479                           
  3480  0079                     Sensor_loadADCSettings@sensor:	
  3481                           ; 1 bytes @ 0x9
  3482                           
  3483  0079                     Sensor_autoCalibration@adcIndex:	
  3484                           ; 1 bytes @ 0x9
  3485                           
  3486  0079                     MTOUCH_Button_Initialize@name:	
  3487                           ; 1 bytes @ 0x9
  3488                           
  3489  0079                     Button_Baseline_Initialize@button:	
  3490                           ; 1 bytes @ 0x9
  3491                           
  3492  0079                     memcpy@d1:	
  3493                           ; 1 bytes @ 0x9
  3494                           
  3495                           
  3496                           ; 1 bytes @ 0x9
  3497  0079                     	ds	1
  3498  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3499  007A                     Sensor_autoCalibration@sensor:	
  3500                           ; 1 bytes @ 0xA
  3501                           
  3502  007A                     MTOUCH_Button_Initialize@button:	
  3503                           ; 1 bytes @ 0xA
  3504                           
  3505  007A                     memcpy@d:	
  3506                           ; 1 bytes @ 0xA
  3507                           
  3508                           
  3509                           ; 1 bytes @ 0xA
  3510  007A                     	ds	1
  3511  007B                     ??_MTOUCH_Button_InitializeAll:	
  3512  007B                     ?_Sensor_Acq_ExecutePacket:	
  3513                           ; 1 bytes @ 0xB
  3514                           
  3515  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3516                           ; 1 bytes @ 0xB
  3517                           
  3518  007B                     Button_Reading_Update_Helper@button:	
  3519                           ; 1 bytes @ 0xB
  3520                           
  3521                           
  3522                           ; 1 bytes @ 0xB
  3523  007B                     	ds	1
  3524  007C                     ??_Button_Reading_Update:	
  3525  007C                     ??_update_state:	
  3526                           ; 1 bytes @ 0xC
  3527                           
  3528  007C                     ??_MTOUCH_Initialize:	
  3529                           ; 1 bytes @ 0xC
  3530                           
  3531  007C                     ??_SYSTEM_Initialize:	
  3532                           ; 1 bytes @ 0xC
  3533                           
  3534                           
  3535                           	psect	cstackBANK0
  3536  0020                     __pcstackBANK0:	
  3537                           ; 1 bytes @ 0xC
  3538                           
  3539  0020                     ??_Sensor_Acq_ExecutePacket:	
  3540  0020                     ??_Button_Baseline_Initialize:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543  0020                     ?_fputs:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  0020                     MTOUCH_Button_InitializeAll@button:	
  3547                           ; 2 bytes @ 0x0
  3548                           
  3549  0020                     Button_Deviation_Update@button:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552  0020                     Button_Reading_Update@button:	
  3553                           ; 1 bytes @ 0x0
  3554                           
  3555  0020                     fputs@fp:	
  3556                           ; 1 bytes @ 0x0
  3557                           
  3558                           
  3559                           ; 1 bytes @ 0x0
  3560  0020                     	ds	1
  3561  0021                     ??_fputs:	
  3562  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3563                           ; 1 bytes @ 0x1
  3564                           
  3565  0021                     Button_Deviation_Update@deviation:	
  3566                           ; 1 bytes @ 0x1
  3567                           
  3568                           
  3569                           ; 4 bytes @ 0x1
  3570  0021                     	ds	1
  3571  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3572                           
  3573                           ; 1 bytes @ 0x2
  3574  0022                     	ds	1
  3575  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3576                           
  3577                           ; 1 bytes @ 0x3
  3578  0023                     	ds	1
  3579  0024                     ?_Button_State_Initializing:	
  3580  0024                     ?_Button_State_NotPressed:	
  3581                           ; 1 bytes @ 0x4
  3582                           
  3583  0024                     ?_Button_State_Pressed:	
  3584                           ; 1 bytes @ 0x4
  3585                           
  3586  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3587                           ; 1 bytes @ 0x4
  3588                           
  3589  0024                     Button_State_Initializing@button:	
  3590                           ; 1 bytes @ 0x4
  3591                           
  3592  0024                     Button_State_NotPressed@button:	
  3593                           ; 1 bytes @ 0x4
  3594                           
  3595  0024                     Button_State_Pressed@button:	
  3596                           ; 1 bytes @ 0x4
  3597                           
  3598  0024                     fputs@c:	
  3599                           ; 1 bytes @ 0x4
  3600                           
  3601                           
  3602                           ; 1 bytes @ 0x4
  3603  0024                     	ds	1
  3604  0025                     ??_Button_State_Initializing:	
  3605  0025                     ??_Button_State_NotPressed:	
  3606                           ; 1 bytes @ 0x5
  3607                           
  3608  0025                     ??_Button_State_Pressed:	
  3609                           ; 1 bytes @ 0x5
  3610                           
  3611  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3612                           ; 1 bytes @ 0x5
  3613                           
  3614  0025                     fputs@i:	
  3615                           ; 1 bytes @ 0x5
  3616                           
  3617                           
  3618                           ; 2 bytes @ 0x5
  3619  0025                     	ds	1
  3620  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3621                           
  3622                           ; 1 bytes @ 0x6
  3623  0026                     	ds	1
  3624  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3625  0027                     fputs@s:	
  3626                           ; 1 bytes @ 0x7
  3627                           
  3628                           
  3629                           ; 1 bytes @ 0x7
  3630  0027                     	ds	1
  3631  0028                     ?_pad:	
  3632  0028                     pad@buf:	
  3633                           ; 2 bytes @ 0x8
  3634                           
  3635  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3636                           ; 1 bytes @ 0x8
  3637                           
  3638                           
  3639                           ; 2 bytes @ 0x8
  3640  0028                     	ds	1
  3641  0029                     ??_Button_Service:	
  3642  0029                     pad@p:	
  3643                           ; 1 bytes @ 0x9
  3644                           
  3645                           
  3646                           ; 2 bytes @ 0x9
  3647  0029                     	ds	1
  3648  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3649                           
  3650                           ; 2 bytes @ 0xA
  3651  002A                     	ds	1
  3652  002B                     ??_pad:	
  3653  002B                     Button_Service@name:	
  3654                           ; 1 bytes @ 0xB
  3655                           
  3656                           
  3657                           ; 1 bytes @ 0xB
  3658  002B                     	ds	1
  3659  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3660  002C                     Button_Service@button:	
  3661                           ; 1 bytes @ 0xC
  3662                           
  3663  002C                     pad@i:	
  3664                           ; 1 bytes @ 0xC
  3665                           
  3666                           
  3667                           ; 2 bytes @ 0xC
  3668  002C                     	ds	1
  3669  002D                     ??_MTOUCH_Button_ServiceAll:	
  3670  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3671                           ; 1 bytes @ 0xD
  3672                           
  3673                           
  3674                           ; 1 bytes @ 0xD
  3675  002D                     	ds	1
  3676  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3677  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3678                           ; 1 bytes @ 0xE
  3679                           
  3680  002E                     MTOUCH_Button_ServiceAll@button:	
  3681                           ; 1 bytes @ 0xE
  3682                           
  3683  002E                     pad@w:	
  3684                           ; 1 bytes @ 0xE
  3685                           
  3686                           
  3687                           ; 2 bytes @ 0xE
  3688  002E                     	ds	1
  3689  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3690                           
  3691                           ; 1 bytes @ 0xF
  3692  002F                     	ds	1
  3693  0030                     pad@fp:	
  3694                           
  3695                           ; 1 bytes @ 0x10
  3696  0030                     	ds	1
  3697  0031                     ?_ctoa:	
  3698  0031                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3699                           ; 2 bytes @ 0x11
  3700                           
  3701  0031                     ctoa@c:	
  3702                           ; 1 bytes @ 0x11
  3703                           
  3704                           
  3705                           ; 1 bytes @ 0x11
  3706  0031                     	ds	1
  3707  0032                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3708                           
  3709                           ; 2 bytes @ 0x12
  3710  0032                     	ds	1
  3711  0033                     ??_ctoa:	
  3712                           
  3713                           ; 1 bytes @ 0x13
  3714  0033                     	ds	1
  3715  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3716  0034                     ctoa@w:	
  3717                           ; 1 bytes @ 0x14
  3718                           
  3719                           
  3720                           ; 2 bytes @ 0x14
  3721  0034                     	ds	1
  3722  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3723                           
  3724                           ; 1 bytes @ 0x15
  3725  0035                     	ds	1
  3726  0036                     ctoa@fp:	
  3727  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3728                           ; 1 bytes @ 0x16
  3729                           
  3730                           
  3731                           ; 4 bytes @ 0x16
  3732  0036                     	ds	1
  3733  0037                     ?_vfpfcnvrt:	
  3734  0037                     vfpfcnvrt@fmt:	
  3735                           ; 2 bytes @ 0x17
  3736                           
  3737                           
  3738                           ; 1 bytes @ 0x17
  3739  0037                     	ds	1
  3740  0038                     vfpfcnvrt@ap:	
  3741                           
  3742                           ; 1 bytes @ 0x18
  3743  0038                     	ds	1
  3744  0039                     ??_vfpfcnvrt:	
  3745                           
  3746                           ; 1 bytes @ 0x19
  3747  0039                     	ds	1
  3748  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3749                           
  3750                           ; 1 bytes @ 0x1A
  3751  003A                     	ds	1
  3752  003B                     ?_Sensor_Acquisition:	
  3753  003B                     Sensor_Acquisition@sensor_adc2:	
  3754                           ; 1 bytes @ 0x1B
  3755                           
  3756                           
  3757                           ; 1 bytes @ 0x1B
  3758  003B                     	ds	1
  3759  003C                     ??_Sensor_Acquisition:	
  3760                           
  3761                           ; 1 bytes @ 0x1C
  3762  003C                     	ds	1
  3763  003D                     Sensor_Acquisition@retry:	
  3764                           
  3765                           ; 1 bytes @ 0x1D
  3766  003D                     	ds	1
  3767  003E                     Sensor_Acquisition@sensor_adc1:	
  3768  003E                     vfpfcnvrt@c:	
  3769                           ; 1 bytes @ 0x1E
  3770                           
  3771                           
  3772                           ; 1 bytes @ 0x1E
  3773  003E                     	ds	1
  3774  003F                     ??_Sensor_Service:	
  3775  003F                     vfpfcnvrt@fp:	
  3776                           ; 1 bytes @ 0x1F
  3777                           
  3778                           
  3779                           ; 1 bytes @ 0x1F
  3780  003F                     	ds	1
  3781  0040                     ?_vfprintf:	
  3782  0040                     vfprintf@fmt:	
  3783                           ; 2 bytes @ 0x20
  3784                           
  3785                           
  3786                           ; 2 bytes @ 0x20
  3787  0040                     	ds	2
  3788  0042                     Sensor_Service@scanGroup:	
  3789  0042                     vfprintf@ap:	
  3790                           ; 1 bytes @ 0x22
  3791                           
  3792                           
  3793                           ; 1 bytes @ 0x22
  3794  0042                     	ds	1
  3795  0043                     ??_vfprintf:	
  3796  0043                     Sensor_Service@error:	
  3797                           ; 1 bytes @ 0x23
  3798                           
  3799                           
  3800                           ; 1 bytes @ 0x23
  3801  0043                     	ds	1
  3802  0044                     Sensor_Service@sensor_adc1:	
  3803                           
  3804                           ; 1 bytes @ 0x24
  3805  0044                     	ds	1
  3806  0045                     Sensor_Service@sensor_adc2:	
  3807  0045                     vfprintf@fp:	
  3808                           ; 1 bytes @ 0x25
  3809                           
  3810                           
  3811                           ; 1 bytes @ 0x25
  3812  0045                     	ds	1
  3813  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3814  0046                     vfprintf@cfmt:	
  3815                           ; 1 bytes @ 0x26
  3816                           
  3817                           
  3818                           ; 2 bytes @ 0x26
  3819  0046                     	ds	1
  3820  0047                     MTOUCH_Sensor_SampleAll@group:	
  3821                           
  3822                           ; 1 bytes @ 0x27
  3823  0047                     	ds	1
  3824  0048                     ??_MTOUCH_Service_Mainloop:	
  3825  0048                     ?_printf:	
  3826                           ; 1 bytes @ 0x28
  3827                           
  3828  0048                     printf@fmt:	
  3829                           ; 2 bytes @ 0x28
  3830                           
  3831                           
  3832                           ; 2 bytes @ 0x28
  3833  0048                     	ds	4
  3834  004C                     ??_printf:	
  3835                           
  3836                           ; 1 bytes @ 0x2C
  3837  004C                     	ds	3
  3838  004F                     printf@ap:	
  3839                           
  3840                           ; 1 bytes @ 0x2F
  3841  004F                     	ds	1
  3842  0050                     ??_check_message:	
  3843                           
  3844                           ; 1 bytes @ 0x30
  3845  0050                     	ds	2
  3846  0052                     check_message@x:	
  3847                           
  3848                           ; 1 bytes @ 0x32
  3849  0052                     	ds	1
  3850                           
  3851                           	psect	maintext
  3852  006D                     __pmaintext:	
  3853 ;;
  3854 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3855 ;;
  3856 ;; *************** function _main *****************
  3857 ;; Defined at:
  3858 ;;		line 17 in file "main.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;		None
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : B1F/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3872 ;;      Params:         0       0       0       0       0       0       0       0
  3873 ;;      Locals:         0       0       0       0       0       0       0       0
  3874 ;;      Temps:          0       0       2       0       0       0       0       0
  3875 ;;      Totals:         0       0       2       0       0       0       0       0
  3876 ;;Total ram usage:        2 bytes
  3877 ;; Hardware stack levels required when called:   14
  3878 ;; This function calls:
  3879 ;;		_DATA_PROCESS
  3880 ;;		_EUSART_Read
  3881 ;;		_EUSART_is_rx_ready
  3882 ;;		_LED_PROCESS
  3883 ;;		_MTOUCH_Button_SetNotPressedCallback
  3884 ;;		_MTOUCH_Button_SetPressedCallback
  3885 ;;		_MTOUCH_Button_isPressed
  3886 ;;		_MTOUCH_Service_Mainloop
  3887 ;;		_RELAY_PROCESS
  3888 ;;		_SYSTEM_Initialize
  3889 ;;		_check_data
  3890 ;;		_check_message
  3891 ;;		_printf
  3892 ;;		_update_state
  3893 ;; This function is called by:
  3894 ;;		Startup code after reset
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           
  3899                           ;psect for function _main
  3900  006D                     _main:	
  3901                           
  3902                           ;main.c: 20:     SYSTEM_Initialize();
  3903                           
  3904                           ;incstack = 0
  3905                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3906  006D  3196  260C  3180   	fcall	_SYSTEM_Initialize
  3907                           
  3908                           ;main.c: 21:     (INTCONbits.GIE = 1);
  3909  0070  178B               	bsf	11,7	;volatile
  3910                           
  3911                           ;main.c: 22:     (INTCONbits.PEIE = 1);
  3912  0071  170B               	bsf	11,6	;volatile
  3913                           
  3914                           ;main.c: 23:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3915  0072  30DA               	movlw	low _myButtonPressedCallback
  3916  0073  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3917  0074  3017               	movlw	high _myButtonPressedCallback
  3918  0075  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3919  0076  3194  24B8  3180   	fcall	_MTOUCH_Button_SetPressedCallback
  3920                           
  3921                           ;main.c: 24:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3922  0079  3072               	movlw	low _myButtonReleasedCallback
  3923  007A  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3924  007B  3017               	movlw	high _myButtonReleasedCallback
  3925  007C  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3926  007D  3194  24B2  3180   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3927  0080  0022               	movlb	2	; select bank2
  3928  0081  110C               	bcf	12,2	;volatile
  3929                           
  3930                           ;main.c: 26:     config_status = 0;
  3931  0082  0020               	movlb	0	; select bank0
  3932  0083  01E1               	clrf	_config_status
  3933                           
  3934                           ;main.c: 27:     last_touch_status.full_status = 0x00;
  3935  0084  01D9               	clrf	_last_touch_status
  3936  0085  01DA               	clrf	_last_touch_status+1
  3937                           
  3938                           ;main.c: 28:     LED_PROCESS(last_touch_status.full_status);
  3939  0086  0859               	movf	_last_touch_status,w
  3940  0087  318D  2575  3180   	fcall	_LED_PROCESS
  3941                           
  3942                           ;main.c: 29:     RELAY_PROCESS(last_touch_status.full_status);
  3943  008A  0020               	movlb	0	; select bank0
  3944  008B  0859               	movf	_last_touch_status,w
  3945  008C  318A  22B8  3180   	fcall	_RELAY_PROCESS
  3946                           
  3947                           ;main.c: 30:     timeout_count = 0;
  3948  008F  3000               	movlw	0
  3949  0090  0021               	movlb	1	; select bank1
  3950  0091  00BB               	movwf	(_timeout_count+3)^(0+128)
  3951  0092  3000               	movlw	0
  3952  0093  00BA               	movwf	(_timeout_count+2)^(0+128)
  3953  0094  3000               	movlw	0
  3954  0095  00B9               	movwf	(_timeout_count+1)^(0+128)
  3955  0096  3000               	movlw	0
  3956  0097  00B8               	movwf	_timeout_count^(0+128)
  3957  0098                     l6453:	
  3958                           
  3959                           ;main.c: 32:     {;main.c: 33:         if(update_state_flag == 1)
  3960  0098  0020               	movlb	0	; select bank0
  3961  0099  035D               	decf	_update_state_flag,w
  3962  009A  1D03               	btfss	3,2
  3963  009B  28A0               	goto	l6459
  3964                           
  3965                           ;main.c: 34:         {;main.c: 35:             update_state_flag = 0;
  3966  009C  01DD               	clrf	_update_state_flag
  3967                           
  3968                           ;main.c: 36:             update_state();
  3969  009D  318B  23F7  3180   	fcall	_update_state
  3970  00A0                     l6459:	
  3971                           
  3972                           ;main.c: 38:         if(EUSART_is_rx_ready())
  3973  00A0  3194  2479  3180   	fcall	_EUSART_is_rx_ready
  3974  00A3  3A00               	xorlw	0
  3975  00A4  1903               	skipnz
  3976  00A5  29A4               	goto	l6529
  3977                           
  3978                           ;main.c: 39:         {;main.c: 40:             rxData = EUSART_Read();
  3979  00A6  3197  27B5  3180   	fcall	_EUSART_Read
  3980  00A9  0021               	movlb	1	; select bank1
  3981  00AA  00D9               	movwf	??_main^(0+128)
  3982  00AB  0859               	movf	??_main^(0+128),w
  3983  00AC  0020               	movlb	0	; select bank0
  3984  00AD  00E3               	movwf	_rxData
  3985                           
  3986                           ;main.c: 41:             if(check_data(rxData))
  3987  00AE  0863               	movf	_rxData,w
  3988  00AF  3189  21A2  3180   	fcall	_check_data
  3989  00B2  3A00               	xorlw	0
  3990  00B3  1903               	skipnz
  3991  00B4  29A4               	goto	l6529
  3992                           
  3993                           ;main.c: 42:             {;main.c: 43:                 if(check_request == 0)
  3994  00B5  0020               	movlb	0	; select bank0
  3995  00B6  0860               	movf	_check_request,w
  3996  00B7  1D03               	btfss	3,2
  3997  00B8  28C4               	goto	l6471
  3998                           
  3999                           ;main.c: 44:                 {;main.c: 45:                     prcData = rxData;
  4000  00B9  0863               	movf	_rxData,w
  4001  00BA  0021               	movlb	1	; select bank1
  4002  00BB  00D9               	movwf	??_main^(0+128)
  4003  00BC  0859               	movf	??_main^(0+128),w
  4004  00BD  0020               	movlb	0	; select bank0
  4005  00BE  00E2               	movwf	_prcData
  4006                           
  4007                           ;main.c: 46:                     check_message(rxData);
  4008  00BF  0863               	movf	_rxData,w
  4009  00C0  3187  27D9  3180   	fcall	_check_message
  4010                           
  4011                           ;main.c: 47:                 }
  4012  00C3  29A4               	goto	l6529
  4013  00C4                     l6471:	
  4014                           
  4015                           ;main.c: 49:                 {;main.c: 50:                     if(config_status == 1)
  4016  00C4  0361               	decf	_config_status,w
  4017  00C5  1D03               	btfss	3,2
  4018  00C6  2997               	goto	l6521
  4019                           
  4020                           ;main.c: 51:                     {;main.c: 52:                         if(rxData == 'T')
  4021  00C7  3054               	movlw	84
  4022  00C8  0663               	xorwf	_rxData,w
  4023  00C9  1D03               	btfss	3,2
  4024  00CA  292E               	goto	l6497
  4025                           
  4026                           ;main.c: 53:                         {;main.c: 54:                             LED_PROCE
      +                          SS(7);
  4027  00CB  3007               	movlw	7
  4028  00CC  318D  2575  3180   	fcall	_LED_PROCESS
  4029                           
  4030                           ;main.c: 55:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4031  00CF  3015               	movlw	21
  4032  00D0  0021               	movlb	1	; select bank1
  4033  00D1  00DA               	movwf	(??_main^(0+128)+1)
  4034  00D2  304B               	movlw	75
  4035  00D3  00D9               	movwf	??_main^(0+128)
  4036  00D4  30BE               	movlw	190
  4037  00D5                     u5567:	
  4038  00D5  0B89               	decfsz	9,f
  4039  00D6  28D5               	goto	u5567
  4040  00D7  0BD9               	decfsz	??_main^(0+128),f
  4041  00D8  28D5               	goto	u5567
  4042  00D9  0BDA               	decfsz	(??_main^(0+128)+1),f
  4043  00DA  28D5               	goto	u5567
  4044  00DB  0000               	nop
  4045                           
  4046                           ;main.c: 56:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4047  00DC  3015               	movlw	21
  4048  00DD  0021               	movlb	1	; select bank1
  4049  00DE  00DA               	movwf	(??_main^(0+128)+1)
  4050  00DF  304B               	movlw	75
  4051  00E0  00D9               	movwf	??_main^(0+128)
  4052  00E1  30BE               	movlw	190
  4053  00E2                     u5577:	
  4054  00E2  0B89               	decfsz	9,f
  4055  00E3  28E2               	goto	u5577
  4056  00E4  0BD9               	decfsz	??_main^(0+128),f
  4057  00E5  28E2               	goto	u5577
  4058  00E6  0BDA               	decfsz	(??_main^(0+128)+1),f
  4059  00E7  28E2               	goto	u5577
  4060  00E8  0000               	nop
  4061                           
  4062                           ;main.c: 57:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4063  00E9  3015               	movlw	21
  4064  00EA  0021               	movlb	1	; select bank1
  4065  00EB  00DA               	movwf	(??_main^(0+128)+1)
  4066  00EC  304B               	movlw	75
  4067  00ED  00D9               	movwf	??_main^(0+128)
  4068  00EE  30BE               	movlw	190
  4069  00EF                     u5587:	
  4070  00EF  0B89               	decfsz	9,f
  4071  00F0  28EF               	goto	u5587
  4072  00F1  0BD9               	decfsz	??_main^(0+128),f
  4073  00F2  28EF               	goto	u5587
  4074  00F3  0BDA               	decfsz	(??_main^(0+128)+1),f
  4075  00F4  28EF               	goto	u5587
  4076  00F5  0000               	nop
  4077                           
  4078                           ;main.c: 58:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4079  00F6  3015               	movlw	21
  4080  00F7  0021               	movlb	1	; select bank1
  4081  00F8  00DA               	movwf	(??_main^(0+128)+1)
  4082  00F9  304B               	movlw	75
  4083  00FA  00D9               	movwf	??_main^(0+128)
  4084  00FB  30BE               	movlw	190
  4085  00FC                     u5597:	
  4086  00FC  0B89               	decfsz	9,f
  4087  00FD  28FC               	goto	u5597
  4088  00FE  0BD9               	decfsz	??_main^(0+128),f
  4089  00FF  28FC               	goto	u5597
  4090  0100  0BDA               	decfsz	(??_main^(0+128)+1),f
  4091  0101  28FC               	goto	u5597
  4092  0102  0000               	nop
  4093                           
  4094                           ;main.c: 59:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4095  0103  3015               	movlw	21
  4096  0104  0021               	movlb	1	; select bank1
  4097  0105  00DA               	movwf	(??_main^(0+128)+1)
  4098  0106  304B               	movlw	75
  4099  0107  00D9               	movwf	??_main^(0+128)
  4100  0108  30BE               	movlw	190
  4101  0109                     u5607:	
  4102  0109  0B89               	decfsz	9,f
  4103  010A  2909               	goto	u5607
  4104  010B  0BD9               	decfsz	??_main^(0+128),f
  4105  010C  2909               	goto	u5607
  4106  010D  0BDA               	decfsz	(??_main^(0+128)+1),f
  4107  010E  2909               	goto	u5607
  4108  010F  0000               	nop
  4109                           
  4110                           ;main.c: 60:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4111  0110  3015               	movlw	21
  4112  0111  0021               	movlb	1	; select bank1
  4113  0112  00DA               	movwf	(??_main^(0+128)+1)
  4114  0113  304B               	movlw	75
  4115  0114  00D9               	movwf	??_main^(0+128)
  4116  0115  30BE               	movlw	190
  4117  0116                     u5617:	
  4118  0116  0B89               	decfsz	9,f
  4119  0117  2916               	goto	u5617
  4120  0118  0BD9               	decfsz	??_main^(0+128),f
  4121  0119  2916               	goto	u5617
  4122  011A  0BDA               	decfsz	(??_main^(0+128)+1),f
  4123  011B  2916               	goto	u5617
  4124  011C  0000               	nop
  4125                           
  4126                           ;main.c: 61:                             config_status = 0;
  4127  011D  0020               	movlb	0	; select bank0
  4128  011E  01E1               	clrf	_config_status
  4129                           
  4130                           ;main.c: 62:                             check_request = 0;
  4131  011F  01E0               	clrf	_check_request
  4132                           
  4133                           ;main.c: 63:                             timeout_count = 0;
  4134  0120  3000               	movlw	0
  4135  0121  0021               	movlb	1	; select bank1
  4136  0122  00BB               	movwf	(_timeout_count+3)^(0+128)
  4137  0123  3000               	movlw	0
  4138  0124  00BA               	movwf	(_timeout_count+2)^(0+128)
  4139  0125  3000               	movlw	0
  4140  0126  00B9               	movwf	(_timeout_count+1)^(0+128)
  4141  0127  3000               	movlw	0
  4142  0128  00B8               	movwf	_timeout_count^(0+128)
  4143                           
  4144                           ;main.c: 64:                             LED_PROCESS(last_touch_status.full_status);
  4145  0129  0020               	movlb	0	; select bank0
  4146  012A  0859               	movf	_last_touch_status,w
  4147  012B  318D  2575  3180   	fcall	_LED_PROCESS
  4148  012E                     l6497:	
  4149                           
  4150                           ;main.c: 66:                         if(rxData == 'F')
  4151  012E  3046               	movlw	70
  4152  012F  0020               	movlb	0	; select bank0
  4153  0130  0663               	xorwf	_rxData,w
  4154  0131  1D03               	btfss	3,2
  4155  0132  29A4               	goto	l6529
  4156                           
  4157                           ;main.c: 67:                         {;main.c: 68:                             LED_PROCE
      +                          SS(0);
  4158  0133  3000               	movlw	0
  4159  0134  318D  2575  3180   	fcall	_LED_PROCESS
  4160                           
  4161                           ;main.c: 69:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4162  0137  3015               	movlw	21
  4163  0138  0021               	movlb	1	; select bank1
  4164  0139  00DA               	movwf	(??_main^(0+128)+1)
  4165  013A  304B               	movlw	75
  4166  013B  00D9               	movwf	??_main^(0+128)
  4167  013C  30BE               	movlw	190
  4168  013D                     u5627:	
  4169  013D  0B89               	decfsz	9,f
  4170  013E  293D               	goto	u5627
  4171  013F  0BD9               	decfsz	??_main^(0+128),f
  4172  0140  293D               	goto	u5627
  4173  0141  0BDA               	decfsz	(??_main^(0+128)+1),f
  4174  0142  293D               	goto	u5627
  4175  0143  0000               	nop
  4176                           
  4177                           ;main.c: 70:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4178  0144  3015               	movlw	21
  4179  0145  0021               	movlb	1	; select bank1
  4180  0146  00DA               	movwf	(??_main^(0+128)+1)
  4181  0147  304B               	movlw	75
  4182  0148  00D9               	movwf	??_main^(0+128)
  4183  0149  30BE               	movlw	190
  4184  014A                     u5637:	
  4185  014A  0B89               	decfsz	9,f
  4186  014B  294A               	goto	u5637
  4187  014C  0BD9               	decfsz	??_main^(0+128),f
  4188  014D  294A               	goto	u5637
  4189  014E  0BDA               	decfsz	(??_main^(0+128)+1),f
  4190  014F  294A               	goto	u5637
  4191  0150  0000               	nop
  4192                           
  4193                           ;main.c: 71:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4194  0151  3015               	movlw	21
  4195  0152  0021               	movlb	1	; select bank1
  4196  0153  00DA               	movwf	(??_main^(0+128)+1)
  4197  0154  304B               	movlw	75
  4198  0155  00D9               	movwf	??_main^(0+128)
  4199  0156  30BE               	movlw	190
  4200  0157                     u5647:	
  4201  0157  0B89               	decfsz	9,f
  4202  0158  2957               	goto	u5647
  4203  0159  0BD9               	decfsz	??_main^(0+128),f
  4204  015A  2957               	goto	u5647
  4205  015B  0BDA               	decfsz	(??_main^(0+128)+1),f
  4206  015C  2957               	goto	u5647
  4207  015D  0000               	nop
  4208                           
  4209                           ;main.c: 72:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4210  015E  3015               	movlw	21
  4211  015F  0021               	movlb	1	; select bank1
  4212  0160  00DA               	movwf	(??_main^(0+128)+1)
  4213  0161  304B               	movlw	75
  4214  0162  00D9               	movwf	??_main^(0+128)
  4215  0163  30BE               	movlw	190
  4216  0164                     u5657:	
  4217  0164  0B89               	decfsz	9,f
  4218  0165  2964               	goto	u5657
  4219  0166  0BD9               	decfsz	??_main^(0+128),f
  4220  0167  2964               	goto	u5657
  4221  0168  0BDA               	decfsz	(??_main^(0+128)+1),f
  4222  0169  2964               	goto	u5657
  4223  016A  0000               	nop
  4224                           
  4225                           ;main.c: 73:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4226  016B  3015               	movlw	21
  4227  016C  0021               	movlb	1	; select bank1
  4228  016D  00DA               	movwf	(??_main^(0+128)+1)
  4229  016E  304B               	movlw	75
  4230  016F  00D9               	movwf	??_main^(0+128)
  4231  0170  30BE               	movlw	190
  4232  0171                     u5667:	
  4233  0171  0B89               	decfsz	9,f
  4234  0172  2971               	goto	u5667
  4235  0173  0BD9               	decfsz	??_main^(0+128),f
  4236  0174  2971               	goto	u5667
  4237  0175  0BDA               	decfsz	(??_main^(0+128)+1),f
  4238  0176  2971               	goto	u5667
  4239  0177  0000               	nop
  4240                           
  4241                           ;main.c: 74:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4242  0178  3015               	movlw	21
  4243  0179  0021               	movlb	1	; select bank1
  4244  017A  00DA               	movwf	(??_main^(0+128)+1)
  4245  017B  304B               	movlw	75
  4246  017C  00D9               	movwf	??_main^(0+128)
  4247  017D  30BE               	movlw	190
  4248  017E                     u5677:	
  4249  017E  0B89               	decfsz	9,f
  4250  017F  297E               	goto	u5677
  4251  0180  0BD9               	decfsz	??_main^(0+128),f
  4252  0181  297E               	goto	u5677
  4253  0182  0BDA               	decfsz	(??_main^(0+128)+1),f
  4254  0183  297E               	goto	u5677
  4255  0184  0000               	nop
  4256                           
  4257                           ;main.c: 75:                             config_status = 0;
  4258  0185  0020               	movlb	0	; select bank0
  4259  0186  01E1               	clrf	_config_status
  4260                           
  4261                           ;main.c: 76:                             check_request = 0;
  4262  0187  01E0               	clrf	_check_request
  4263                           
  4264                           ;main.c: 77:                             timeout_count = 0;
  4265  0188  3000               	movlw	0
  4266  0189  0021               	movlb	1	; select bank1
  4267  018A  00BB               	movwf	(_timeout_count+3)^(0+128)
  4268  018B  3000               	movlw	0
  4269  018C  00BA               	movwf	(_timeout_count+2)^(0+128)
  4270  018D  3000               	movlw	0
  4271  018E  00B9               	movwf	(_timeout_count+1)^(0+128)
  4272  018F  3000               	movlw	0
  4273  0190  00B8               	movwf	_timeout_count^(0+128)
  4274                           
  4275                           ;main.c: 78:                             LED_PROCESS(last_touch_status.full_status);
  4276  0191  0020               	movlb	0	; select bank0
  4277  0192  0859               	movf	_last_touch_status,w
  4278  0193  318D  2575  3180   	fcall	_LED_PROCESS
  4279  0196  29A4               	goto	l6529
  4280  0197                     l6521:	
  4281                           
  4282                           ;main.c: 82:                     {;main.c: 83:                         if(rxData == 'T')
  4283  0197  3054               	movlw	84
  4284  0198  0663               	xorwf	_rxData,w
  4285  0199  1D03               	btfss	3,2
  4286  019A  299F               	goto	l6525
  4287                           
  4288                           ;main.c: 84:                         {;main.c: 85:                             DATA_PROC
      +                          ESS(prcData);
  4289  019B  0862               	movf	_prcData,w
  4290  019C  3185  25F9  3180   	fcall	_DATA_PROCESS
  4291  019F                     l6525:	
  4292                           
  4293                           ;main.c: 87:                         if(rxData == 'F')
  4294  019F  3046               	movlw	70
  4295  01A0  0020               	movlb	0	; select bank0
  4296  01A1  0663               	xorwf	_rxData,w
  4297  01A2  1903               	btfsc	3,2
  4298                           
  4299                           ;main.c: 88:                         {;main.c: 89:                             check_req
      +                          uest = 0;
  4300  01A3  01E0               	clrf	_check_request
  4301  01A4                     l6529:	
  4302                           ;main.c: 93:             }
  4303                           
  4304                           
  4305                           ;main.c: 95:         if(MTOUCH_Service_Mainloop())
  4306  01A4  3197  271C  3180   	fcall	_MTOUCH_Service_Mainloop
  4307  01A7  3A00               	xorlw	0
  4308  01A8  1903               	skipnz
  4309  01A9  2898               	goto	l6453
  4310                           
  4311                           ;main.c: 96:         {;main.c: 97:             if(config_status == 0)
  4312  01AA  0020               	movlb	0	; select bank0
  4313  01AB  0861               	movf	_config_status,w
  4314  01AC  1D03               	btfss	3,2
  4315  01AD  2A7E               	goto	l6587
  4316                           
  4317                           ;main.c: 98:             {;main.c: 99:                 if(check_request == 1)
  4318  01AE  0360               	decf	_check_request,w
  4319  01AF  1D03               	btfss	3,2
  4320  01B0  29CB               	goto	l6543
  4321                           
  4322                           ;main.c: 100:                 {;main.c: 101:                     timeout_count++;
  4323  01B1  3001               	movlw	1
  4324  01B2  0021               	movlb	1	; select bank1
  4325  01B3  07B8               	addwf	_timeout_count^(0+128),f
  4326  01B4  3000               	movlw	0
  4327  01B5  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4328  01B6  3000               	movlw	0
  4329  01B7  3DBA               	addwfc	(_timeout_count+2)^(0+128),f
  4330  01B8  3000               	movlw	0
  4331  01B9  3DBB               	addwfc	(_timeout_count+3)^(0+128),f
  4332                           
  4333                           ;main.c: 102:                     if(timeout_count == 30)
  4334  01BA  301E               	movlw	30
  4335  01BB  0638               	xorwf	_timeout_count^(0+128),w
  4336  01BC  0439               	iorwf	(_timeout_count+1)^(0+128),w
  4337  01BD  043A               	iorwf	(_timeout_count+2)^(0+128),w
  4338  01BE  043B               	iorwf	(_timeout_count+3)^(0+128),w
  4339  01BF  1D03               	btfss	3,2
  4340  01C0  29CB               	goto	l6543
  4341                           
  4342                           ;main.c: 103:                     {;main.c: 104:                         timeout_count =
      +                           0;
  4343  01C1  3000               	movlw	0
  4344  01C2  00BB               	movwf	(_timeout_count+3)^(0+128)
  4345  01C3  3000               	movlw	0
  4346  01C4  00BA               	movwf	(_timeout_count+2)^(0+128)
  4347  01C5  3000               	movlw	0
  4348  01C6  00B9               	movwf	(_timeout_count+1)^(0+128)
  4349  01C7  3000               	movlw	0
  4350  01C8  00B8               	movwf	_timeout_count^(0+128)
  4351                           
  4352                           ;main.c: 105:                         check_request = 0;
  4353  01C9  0020               	movlb	0	; select bank0
  4354  01CA  01E0               	clrf	_check_request
  4355  01CB                     l6543:	
  4356                           
  4357                           ;main.c: 108:                 if(MTOUCH_Button_isPressed(0) == 0 && MTOUCH_Button_isPres
      +                          sed(1) == 1 && MTOUCH_Button_isPressed(2) == 1)
  4358  01CB  3000               	movlw	0
  4359  01CC  3196  26E6  3180   	fcall	_MTOUCH_Button_isPressed
  4360  01CF  3A00               	xorlw	0
  4361  01D0  1D03               	skipz
  4362  01D1  2A7A               	goto	l6585
  4363  01D2  3001               	movlw	1
  4364  01D3  3196  26E6  3180   	fcall	_MTOUCH_Button_isPressed
  4365  01D6  3A01               	xorlw	1
  4366  01D7  1D03               	skipz
  4367  01D8  2A7A               	goto	l6585
  4368  01D9  3002               	movlw	2
  4369  01DA  3196  26E6  3180   	fcall	_MTOUCH_Button_isPressed
  4370  01DD  3A01               	xorlw	1
  4371  01DE  1D03               	skipz
  4372  01DF  2A7A               	goto	l6585
  4373                           
  4374                           ;main.c: 109:                 {;main.c: 110:                     count_conf++;
  4375  01E0  3001               	movlw	1
  4376  01E1  0021               	movlb	1	; select bank1
  4377  01E2  07C2               	addwf	_count_conf^(0+128),f
  4378  01E3  3000               	movlw	0
  4379  01E4  3DC3               	addwfc	(_count_conf+1)^(0+128),f
  4380                           
  4381                           ;main.c: 111:                     if(count_conf == 1800)
  4382  01E5  3008               	movlw	8
  4383  01E6  0642               	xorwf	_count_conf^(0+128),w
  4384  01E7  3007               	movlw	7
  4385  01E8  1903               	skipnz
  4386  01E9  0643               	xorwf	(_count_conf+1)^(0+128),w
  4387  01EA  1D03               	btfss	3,2
  4388  01EB  2898               	goto	l6453
  4389                           
  4390                           ;main.c: 112:                     {;main.c: 113:                         count_conf = 0;
  4391  01EC  01C2               	clrf	_count_conf^(0+128)
  4392  01ED  01C3               	clrf	(_count_conf+1)^(0+128)
  4393                           
  4394                           ;main.c: 114:                         printf("PICSMART");
  4395  01EE  3000               	movlw	low (STR_1| (0+32768))
  4396  01EF  0020               	movlb	0	; select bank0
  4397  01F0  00C8               	movwf	printf@fmt
  4398  01F1  3098               	movlw	high (STR_1| (0+32768))
  4399  01F2  00C9               	movwf	printf@fmt+1
  4400  01F3  3195  25D7  3180   	fcall	_printf
  4401                           
  4402                           ;main.c: 115:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4403  01F6  3015               	movlw	21
  4404  01F7  0021               	movlb	1	; select bank1
  4405  01F8  00DA               	movwf	(??_main^(0+128)+1)
  4406  01F9  304B               	movlw	75
  4407  01FA  00D9               	movwf	??_main^(0+128)
  4408  01FB  30BE               	movlw	190
  4409  01FC                     u5687:	
  4410  01FC  0B89               	decfsz	9,f
  4411  01FD  29FC               	goto	u5687
  4412  01FE  0BD9               	decfsz	??_main^(0+128),f
  4413  01FF  29FC               	goto	u5687
  4414  0200  0BDA               	decfsz	(??_main^(0+128)+1),f
  4415  0201  29FC               	goto	u5687
  4416  0202  0000               	nop
  4417                           
  4418                           ;main.c: 116:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4419  0203  3015               	movlw	21
  4420  0204  0021               	movlb	1	; select bank1
  4421  0205  00DA               	movwf	(??_main^(0+128)+1)
  4422  0206  304B               	movlw	75
  4423  0207  00D9               	movwf	??_main^(0+128)
  4424  0208  30BE               	movlw	190
  4425  0209                     u5697:	
  4426  0209  0B89               	decfsz	9,f
  4427  020A  2A09               	goto	u5697
  4428  020B  0BD9               	decfsz	??_main^(0+128),f
  4429  020C  2A09               	goto	u5697
  4430  020D  0BDA               	decfsz	(??_main^(0+128)+1),f
  4431  020E  2A09               	goto	u5697
  4432  020F  0000               	nop
  4433                           
  4434                           ;main.c: 117:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4435  0210  3015               	movlw	21
  4436  0211  0021               	movlb	1	; select bank1
  4437  0212  00DA               	movwf	(??_main^(0+128)+1)
  4438  0213  304B               	movlw	75
  4439  0214  00D9               	movwf	??_main^(0+128)
  4440  0215  30BE               	movlw	190
  4441  0216                     u5707:	
  4442  0216  0B89               	decfsz	9,f
  4443  0217  2A16               	goto	u5707
  4444  0218  0BD9               	decfsz	??_main^(0+128),f
  4445  0219  2A16               	goto	u5707
  4446  021A  0BDA               	decfsz	(??_main^(0+128)+1),f
  4447  021B  2A16               	goto	u5707
  4448  021C  0000               	nop
  4449                           
  4450                           ;main.c: 118:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4451  021D  3015               	movlw	21
  4452  021E  0021               	movlb	1	; select bank1
  4453  021F  00DA               	movwf	(??_main^(0+128)+1)
  4454  0220  304B               	movlw	75
  4455  0221  00D9               	movwf	??_main^(0+128)
  4456  0222  30BE               	movlw	190
  4457  0223                     u5717:	
  4458  0223  0B89               	decfsz	9,f
  4459  0224  2A23               	goto	u5717
  4460  0225  0BD9               	decfsz	??_main^(0+128),f
  4461  0226  2A23               	goto	u5717
  4462  0227  0BDA               	decfsz	(??_main^(0+128)+1),f
  4463  0228  2A23               	goto	u5717
  4464  0229  0000               	nop
  4465                           
  4466                           ;main.c: 119:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4467  022A  3015               	movlw	21
  4468  022B  0021               	movlb	1	; select bank1
  4469  022C  00DA               	movwf	(??_main^(0+128)+1)
  4470  022D  304B               	movlw	75
  4471  022E  00D9               	movwf	??_main^(0+128)
  4472  022F  30BE               	movlw	190
  4473  0230                     u5727:	
  4474  0230  0B89               	decfsz	9,f
  4475  0231  2A30               	goto	u5727
  4476  0232  0BD9               	decfsz	??_main^(0+128),f
  4477  0233  2A30               	goto	u5727
  4478  0234  0BDA               	decfsz	(??_main^(0+128)+1),f
  4479  0235  2A30               	goto	u5727
  4480  0236  0000               	nop
  4481                           
  4482                           ;main.c: 120:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4483  0237  3015               	movlw	21
  4484  0238  0021               	movlb	1	; select bank1
  4485  0239  00DA               	movwf	(??_main^(0+128)+1)
  4486  023A  304B               	movlw	75
  4487  023B  00D9               	movwf	??_main^(0+128)
  4488  023C  30BE               	movlw	190
  4489  023D                     u5737:	
  4490  023D  0B89               	decfsz	9,f
  4491  023E  2A3D               	goto	u5737
  4492  023F  0BD9               	decfsz	??_main^(0+128),f
  4493  0240  2A3D               	goto	u5737
  4494  0241  0BDA               	decfsz	(??_main^(0+128)+1),f
  4495  0242  2A3D               	goto	u5737
  4496  0243  0000               	nop
  4497                           
  4498                           ;main.c: 121:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4499  0244  3015               	movlw	21
  4500  0245  0021               	movlb	1	; select bank1
  4501  0246  00DA               	movwf	(??_main^(0+128)+1)
  4502  0247  304B               	movlw	75
  4503  0248  00D9               	movwf	??_main^(0+128)
  4504  0249  30BE               	movlw	190
  4505  024A                     u5747:	
  4506  024A  0B89               	decfsz	9,f
  4507  024B  2A4A               	goto	u5747
  4508  024C  0BD9               	decfsz	??_main^(0+128),f
  4509  024D  2A4A               	goto	u5747
  4510  024E  0BDA               	decfsz	(??_main^(0+128)+1),f
  4511  024F  2A4A               	goto	u5747
  4512  0250  0000               	nop
  4513                           
  4514                           ;main.c: 122:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4515  0251  3015               	movlw	21
  4516  0252  0021               	movlb	1	; select bank1
  4517  0253  00DA               	movwf	(??_main^(0+128)+1)
  4518  0254  304B               	movlw	75
  4519  0255  00D9               	movwf	??_main^(0+128)
  4520  0256  30BE               	movlw	190
  4521  0257                     u5757:	
  4522  0257  0B89               	decfsz	9,f
  4523  0258  2A57               	goto	u5757
  4524  0259  0BD9               	decfsz	??_main^(0+128),f
  4525  025A  2A57               	goto	u5757
  4526  025B  0BDA               	decfsz	(??_main^(0+128)+1),f
  4527  025C  2A57               	goto	u5757
  4528  025D  0000               	nop
  4529                           
  4530                           ;main.c: 123:                         printf("RUN\r\n");
  4531  025E  3009               	movlw	low (STR_2| (0+32768))
  4532  025F  0020               	movlb	0	; select bank0
  4533  0260  00C8               	movwf	printf@fmt
  4534  0261  3098               	movlw	high (STR_2| (0+32768))
  4535  0262  00C9               	movwf	printf@fmt+1
  4536  0263  3195  25D7  3180   	fcall	_printf
  4537                           
  4538                           ;main.c: 124:                         config_status = 1;
  4539  0266  0020               	movlb	0	; select bank0
  4540  0267  01E1               	clrf	_config_status
  4541  0268  0AE1               	incf	_config_status,f
  4542                           
  4543                           ;main.c: 125:                         check_request = 1;
  4544  0269  01E0               	clrf	_check_request
  4545  026A  0AE0               	incf	_check_request,f
  4546                           
  4547                           ;main.c: 126:                         timeout_count = 0;
  4548  026B  3000               	movlw	0
  4549  026C  0021               	movlb	1	; select bank1
  4550  026D  00BB               	movwf	(_timeout_count+3)^(0+128)
  4551  026E  3000               	movlw	0
  4552  026F  00BA               	movwf	(_timeout_count+2)^(0+128)
  4553  0270  3000               	movlw	0
  4554  0271  00B9               	movwf	(_timeout_count+1)^(0+128)
  4555  0272  3000               	movlw	0
  4556  0273  00B8               	movwf	_timeout_count^(0+128)
  4557                           
  4558                           ;main.c: 127:                         LED_PROCESS(0);
  4559  0274  3000               	movlw	0
  4560  0275  318D  2575  3180   	fcall	_LED_PROCESS
  4561                           
  4562                           ;main.c: 128:                         blink = 0;
  4563  0278  0020               	movlb	0	; select bank0
  4564  0279  2AD5               	goto	L1
  4565  027A                     l6585:	
  4566                           
  4567                           ;main.c: 132:                 {;main.c: 133:                     count_conf = 0;
  4568  027A  0021               	movlb	1	; select bank1
  4569  027B  01C2               	clrf	_count_conf^(0+128)
  4570  027C  01C3               	clrf	(_count_conf+1)^(0+128)
  4571                           
  4572                           ;main.c: 135:             }
  4573                           
  4574                           ;main.c: 134:                 }
  4575  027D  2898               	goto	l6453
  4576  027E                     l6587:	
  4577                           
  4578                           ;main.c: 137:             {;main.c: 138:                 if(check_request == 1)
  4579  027E  0360               	decf	_check_request,w
  4580  027F  1D03               	btfss	3,2
  4581  0280  2898               	goto	l6453
  4582                           
  4583                           ;main.c: 139:                 {;main.c: 140:                     timeout_count++;
  4584  0281  3001               	movlw	1
  4585  0282  0021               	movlb	1	; select bank1
  4586  0283  07B8               	addwf	_timeout_count^(0+128),f
  4587  0284  3000               	movlw	0
  4588  0285  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4589  0286  3000               	movlw	0
  4590  0287  3DBA               	addwfc	(_timeout_count+2)^(0+128),f
  4591  0288  3000               	movlw	0
  4592  0289  3DBB               	addwfc	(_timeout_count+3)^(0+128),f
  4593                           
  4594                           ;main.c: 141:                     if(timeout_count >= 30000)
  4595  028A  083B               	movf	(_timeout_count+3)^(0+128),w
  4596  028B  1D03               	btfss	3,2
  4597  028C  2A96               	goto	l6593
  4598  028D  083A               	movf	(_timeout_count+2)^(0+128),w
  4599  028E  1D03               	btfss	3,2
  4600  028F  2A96               	goto	l6593
  4601  0290  3030               	movlw	48
  4602  0291  0238               	subwf	_timeout_count^(0+128),w
  4603  0292  3075               	movlw	117
  4604  0293  3B39               	subwfb	(_timeout_count+1)^(0+128),w
  4605  0294  1C03               	btfss	3,0
  4606  0295  2AB6               	goto	l6605
  4607  0296                     l6593:	
  4608                           
  4609                           ;main.c: 142:                     {;main.c: 144:                         LED_PROCESS(0);
  4610  0296  3000               	movlw	0
  4611  0297  318D  2575  3180   	fcall	_LED_PROCESS
  4612                           
  4613                           ;main.c: 146:                         if(timeout_count >= 32000)
  4614  029A  0021               	movlb	1	; select bank1
  4615  029B  083B               	movf	(_timeout_count+3)^(0+128),w
  4616  029C  1D03               	btfss	3,2
  4617  029D  2AA5               	goto	l6597
  4618  029E  083A               	movf	(_timeout_count+2)^(0+128),w
  4619  029F  1D03               	btfss	3,2
  4620  02A0  2AA5               	goto	l6597
  4621  02A1  307D               	movlw	125
  4622  02A2  0239               	subwf	(_timeout_count+1)^(0+128),w
  4623  02A3  1C03               	btfss	3,0
  4624  02A4  2898               	goto	l6453
  4625  02A5                     l6597:	
  4626                           
  4627                           ;main.c: 147:                         {;main.c: 148:                             timeout
      +                          _count = 0;
  4628  02A5  3000               	movlw	0
  4629  02A6  00BB               	movwf	(_timeout_count+3)^(0+128)
  4630  02A7  3000               	movlw	0
  4631  02A8  00BA               	movwf	(_timeout_count+2)^(0+128)
  4632  02A9  3000               	movlw	0
  4633  02AA  00B9               	movwf	(_timeout_count+1)^(0+128)
  4634  02AB  3000               	movlw	0
  4635  02AC  00B8               	movwf	_timeout_count^(0+128)
  4636                           
  4637                           ;main.c: 149:                             LED_PROCESS(last_touch_status.full_status);
  4638  02AD  0020               	movlb	0	; select bank0
  4639  02AE  0859               	movf	_last_touch_status,w
  4640  02AF  318D  2575  3180   	fcall	_LED_PROCESS
  4641                           
  4642                           ;main.c: 150:                             check_request = 0;
  4643  02B2  0020               	movlb	0	; select bank0
  4644  02B3  01E0               	clrf	_check_request
  4645                           
  4646                           ;main.c: 151:                             config_status = 0;
  4647  02B4  01E1               	clrf	_config_status
  4648  02B5  2898               	goto	l6453
  4649  02B6                     l6605:	
  4650                           
  4651                           ;main.c: 155:                     {;main.c: 156:                         blink_count++;
  4652  02B6  3001               	movlw	1
  4653  02B7  00D9               	movwf	??_main^(0+128)
  4654  02B8  0859               	movf	??_main^(0+128),w
  4655  02B9  0020               	movlb	0	; select bank0
  4656  02BA  07DE               	addwf	_blink_count,f
  4657                           
  4658                           ;main.c: 157:                         if(blink == 0)
  4659  02BB  085F               	movf	_blink,w
  4660  02BC  1D03               	btfss	3,2
  4661  02BD  2ACB               	goto	l6615
  4662                           
  4663                           ;main.c: 158:                         {;main.c: 159:                             LED_PRO
      +                          CESS(0);
  4664  02BE  3000               	movlw	0
  4665  02BF  318D  2575  3180   	fcall	_LED_PROCESS
  4666                           
  4667                           ;main.c: 160:                             if(blink_count == 200)
  4668  02C2  30C8               	movlw	200
  4669  02C3  0020               	movlb	0	; select bank0
  4670  02C4  065E               	xorwf	_blink_count,w
  4671  02C5  1D03               	btfss	3,2
  4672  02C6  2898               	goto	l6453
  4673                           
  4674                           ;main.c: 161:                             {;main.c: 162:                                
      +                           blink_count = 0;
  4675  02C7  01DE               	clrf	_blink_count
  4676                           
  4677                           ;main.c: 163:                                 blink = 1;
  4678  02C8  01DF               	clrf	_blink
  4679  02C9  0ADF               	incf	_blink,f
  4680  02CA  2898               	goto	l6453
  4681  02CB                     l6615:	
  4682                           
  4683                           ;main.c: 167:                         {;main.c: 168:                             LED_PRO
      +                          CESS(7);
  4684  02CB  3007               	movlw	7
  4685  02CC  318D  2575  3180   	fcall	_LED_PROCESS
  4686                           
  4687                           ;main.c: 169:                             if(blink_count == 200)
  4688  02CF  30C8               	movlw	200
  4689  02D0  0020               	movlb	0	; select bank0
  4690  02D1  065E               	xorwf	_blink_count,w
  4691  02D2  1D03               	btfss	3,2
  4692  02D3  2898               	goto	l6453
  4693                           
  4694                           ;main.c: 170:                             {;main.c: 171:                                
      +                           blink_count = 0;
  4695  02D4  01DE               	clrf	_blink_count
  4696  02D5                     L1:	
  4697                           
  4698                           ;main.c: 172:                                 blink = 0;
  4699  02D5  01DF               	clrf	_blink
  4700  02D6  2898               	goto	l6453
  4701  02D7                     __end_of_main:	
  4702                           
  4703                           	psect	text1
  4704  0BF7                     __ptext1:	
  4705 ;; *************** function _update_state *****************
  4706 ;; Defined at:
  4707 ;;		line 209 in file "main.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;		None
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;		None
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4721 ;;      Params:         0       0       0       0       0       0       0       0
  4722 ;;      Locals:         0       0       0       0       0       0       0       0
  4723 ;;      Temps:          0       0       0       0       0       0       0       0
  4724 ;;      Totals:         0       0       0       0       0       0       0       0
  4725 ;;Total ram usage:        0 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:   13
  4728 ;; This function calls:
  4729 ;;		_printf
  4730 ;; This function is called by:
  4731 ;;		_main
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           
  4736                           ;psect for function _update_state
  4737  0BF7                     _update_state:	
  4738                           
  4739                           ;main.c: 211:     switch(last_touch_status.full_status)
  4740                           
  4741                           ;incstack = 0
  4742                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4743  0BF7  2C30               	goto	l6331
  4744  0BF8                     l6313:	
  4745  0BF8  3014               	movlw	low (STR_3| (0+32768))
  4746  0BF9  00C8               	movwf	printf@fmt
  4747  0BFA  3098               	movlw	high (STR_3| (0+32768))
  4748  0BFB  00C9               	movwf	printf@fmt+1
  4749  0BFC  3195  25D7         	fcall	_printf
  4750  0BFE  0008               	return
  4751  0BFF                     l6315:	
  4752  0BFF  3019               	movlw	low (STR_4| (0+32768))
  4753  0C00  00C8               	movwf	printf@fmt
  4754  0C01  3098               	movlw	high (STR_4| (0+32768))
  4755  0C02  00C9               	movwf	printf@fmt+1
  4756  0C03  3195  25D7         	fcall	_printf
  4757  0C05  0008               	return
  4758  0C06                     l6317:	
  4759  0C06  301E               	movlw	low (STR_5| (0+32768))
  4760  0C07  00C8               	movwf	printf@fmt
  4761  0C08  3098               	movlw	high (STR_5| (0+32768))
  4762  0C09  00C9               	movwf	printf@fmt+1
  4763  0C0A  3195  25D7         	fcall	_printf
  4764  0C0C  0008               	return
  4765  0C0D                     l6319:	
  4766  0C0D  3023               	movlw	low (STR_6| (0+32768))
  4767  0C0E  00C8               	movwf	printf@fmt
  4768  0C0F  3098               	movlw	high (STR_6| (0+32768))
  4769  0C10  00C9               	movwf	printf@fmt+1
  4770  0C11  3195  25D7         	fcall	_printf
  4771  0C13  0008               	return
  4772  0C14                     l6321:	
  4773  0C14  3028               	movlw	low (STR_7| (0+32768))
  4774  0C15  00C8               	movwf	printf@fmt
  4775  0C16  3098               	movlw	high (STR_7| (0+32768))
  4776  0C17  00C9               	movwf	printf@fmt+1
  4777  0C18  3195  25D7         	fcall	_printf
  4778  0C1A  0008               	return
  4779  0C1B                     l6323:	
  4780  0C1B  302D               	movlw	low (STR_8| (0+32768))
  4781  0C1C  00C8               	movwf	printf@fmt
  4782  0C1D  3098               	movlw	high (STR_8| (0+32768))
  4783  0C1E  00C9               	movwf	printf@fmt+1
  4784  0C1F  3195  25D7         	fcall	_printf
  4785  0C21  0008               	return
  4786  0C22                     l6325:	
  4787  0C22  3032               	movlw	low (STR_9| (0+32768))
  4788  0C23  00C8               	movwf	printf@fmt
  4789  0C24  3098               	movlw	high (STR_9| (0+32768))
  4790  0C25  00C9               	movwf	printf@fmt+1
  4791  0C26  3195  25D7         	fcall	_printf
  4792  0C28  0008               	return
  4793  0C29                     l6327:	
  4794  0C29  3037               	movlw	low (STR_10| (0+32768))
  4795  0C2A  00C8               	movwf	printf@fmt
  4796  0C2B  3098               	movlw	high (STR_10| (0+32768))
  4797  0C2C  00C9               	movwf	printf@fmt+1
  4798  0C2D  3195  25D7         	fcall	_printf
  4799  0C2F  0008               	return
  4800  0C30                     l6331:	
  4801                           
  4802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4803                           ; Switch size 1, requested type "simple"
  4804                           ; Number of cases is 1, Range of values is 0 to 0
  4805                           ; switch strategies available:
  4806                           ; Name         Instructions Cycles
  4807                           ; simple_byte            4     3 (average)
  4808                           ; direct_byte            8     6 (fixed)
  4809                           ; jumptable            260     6 (fixed)
  4810                           ;	Chosen strategy is simple_byte
  4811  0C30  0020               	movlb	0	; select bank0
  4812  0C31  085A               	movf	_last_touch_status+1,w
  4813  0C32  3A00               	xorlw	0	; case 0
  4814  0C33  1903               	skipnz
  4815  0C34  2C36               	goto	l6801
  4816  0C35  2C50               	goto	l1032
  4817  0C36                     l6801:	
  4818                           
  4819                           ; Switch size 1, requested type "simple"
  4820                           ; Number of cases is 8, Range of values is 0 to 7
  4821                           ; switch strategies available:
  4822                           ; Name         Instructions Cycles
  4823                           ; direct_byte           22     6 (fixed)
  4824                           ; simple_byte           25    13 (average)
  4825                           ; jumptable            260     6 (fixed)
  4826                           ;	Chosen strategy is simple_byte
  4827  0C36  0859               	movf	_last_touch_status,w
  4828  0C37  3A00               	xorlw	0	; case 0
  4829  0C38  1903               	skipnz
  4830  0C39  2BF8               	goto	l6313
  4831  0C3A  3A01               	xorlw	1	; case 1
  4832  0C3B  1903               	skipnz
  4833  0C3C  2BFF               	goto	l6315
  4834  0C3D  3A03               	xorlw	3	; case 2
  4835  0C3E  1903               	skipnz
  4836  0C3F  2C06               	goto	l6317
  4837  0C40  3A01               	xorlw	1	; case 3
  4838  0C41  1903               	skipnz
  4839  0C42  2C0D               	goto	l6319
  4840  0C43  3A07               	xorlw	7	; case 4
  4841  0C44  1903               	skipnz
  4842  0C45  2C14               	goto	l6321
  4843  0C46  3A01               	xorlw	1	; case 5
  4844  0C47  1903               	skipnz
  4845  0C48  2C1B               	goto	l6323
  4846  0C49  3A03               	xorlw	3	; case 6
  4847  0C4A  1903               	skipnz
  4848  0C4B  2C22               	goto	l6325
  4849  0C4C  3A01               	xorlw	1	; case 7
  4850  0C4D  1903               	skipnz
  4851  0C4E  2C29               	goto	l6327
  4852  0C4F  2C50               	goto	l1032
  4853  0C50                     l1032:	
  4854  0C50  0008               	return
  4855  0C51                     __end_of_update_state:	
  4856                           
  4857                           	psect	text2
  4858  07D9                     __ptext2:	
  4859 ;; *************** function _check_message *****************
  4860 ;; Defined at:
  4861 ;;		line 305 in file "main.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  x               1    wreg     unsigned char 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;  x               1   50[BANK0 ] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      void 
  4868 ;; Registers used:
  4869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4875 ;;      Params:         0       0       0       0       0       0       0       0
  4876 ;;      Locals:         0       1       0       0       0       0       0       0
  4877 ;;      Temps:          0       2       0       0       0       0       0       0
  4878 ;;      Totals:         0       3       0       0       0       0       0       0
  4879 ;;Total ram usage:        3 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:   13
  4882 ;; This function calls:
  4883 ;;		_printf
  4884 ;; This function is called by:
  4885 ;;		_main
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           
  4890                           ;psect for function _check_message
  4891  07D9                     _check_message:	
  4892                           
  4893                           ;incstack = 0
  4894                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4895                           ;check_message@x stored from wreg
  4896  07D9  0020               	movlb	0	; select bank0
  4897  07DA  00D2               	movwf	check_message@x
  4898                           
  4899                           ;main.c: 305: void check_message(uint8_t x);main.c: 306: {;main.c: 307:     switch (x)
  4900  07DB  2FEF               	goto	l6349
  4901  07DC                     l6339:	
  4902                           
  4903                           ;main.c: 310:         {;main.c: 311:             check_request = 0;
  4904  07DC  01E0               	clrf	_check_request
  4905                           
  4906                           ;main.c: 312:             break;
  4907  07DD  0008               	return
  4908  07DE                     l6343:	
  4909                           
  4910                           ;main.c: 320:         {;main.c: 321:             printf("%c",x);
  4911  07DE  3040               	movlw	low (STR_11| (0+32768))
  4912  07DF  00C8               	movwf	printf@fmt
  4913  07E0  3098               	movlw	high (STR_11| (0+32768))
  4914  07E1  00C9               	movwf	printf@fmt+1
  4915  07E2  0852               	movf	check_message@x,w
  4916  07E3  00D0               	movwf	??_check_message
  4917  07E4  01D1               	clrf	??_check_message+1
  4918  07E5  0850               	movf	??_check_message,w
  4919  07E6  00CA               	movwf	?_printf+2
  4920  07E7  0851               	movf	??_check_message+1,w
  4921  07E8  00CB               	movwf	?_printf+3
  4922  07E9  3195  25D7         	fcall	_printf
  4923                           
  4924                           ;main.c: 322:             check_request = 1;
  4925  07EB  0020               	movlb	0	; select bank0
  4926  07EC  01E0               	clrf	_check_request
  4927  07ED  0AE0               	incf	_check_request,f
  4928                           
  4929                           ;main.c: 323:             break;
  4930  07EE  0008               	return
  4931  07EF                     l6349:	
  4932  07EF  0852               	movf	check_message@x,w
  4933  07F0  00D0               	movwf	??_check_message
  4934  07F1  01D1               	clrf	??_check_message+1
  4935                           
  4936                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4937                           ; Switch size 1, requested type "simple"
  4938                           ; Number of cases is 1, Range of values is 0 to 0
  4939                           ; switch strategies available:
  4940                           ; Name         Instructions Cycles
  4941                           ; simple_byte            4     3 (average)
  4942                           ; direct_byte            8     6 (fixed)
  4943                           ; jumptable            260     6 (fixed)
  4944                           ;	Chosen strategy is simple_byte
  4945  07F2  0851               	movf	??_check_message+1,w
  4946  07F3  3A00               	xorlw	0	; case 0
  4947  07F4  1903               	skipnz
  4948  07F5  2FF7               	goto	l6803
  4949  07F6  2FDE               	goto	l6343
  4950  07F7                     l6803:	
  4951                           
  4952                           ; Switch size 1, requested type "simple"
  4953                           ; Number of cases is 2, Range of values is 70 to 84
  4954                           ; switch strategies available:
  4955                           ; Name         Instructions Cycles
  4956                           ; simple_byte            7     4 (average)
  4957                           ; direct_byte           39     9 (fixed)
  4958                           ; jumptable            263     9 (fixed)
  4959                           ;	Chosen strategy is simple_byte
  4960  07F7  0850               	movf	??_check_message,w
  4961  07F8  3A46               	xorlw	70	; case 70
  4962  07F9  1903               	skipnz
  4963  07FA  2FDC               	goto	l6339
  4964  07FB  3A12               	xorlw	18	; case 84
  4965  07FC  1903               	skipnz
  4966  07FD  2FDC               	goto	l6339
  4967  07FE  2FDE               	goto	l6343
  4968  07FF  0008               	return
  4969  0800                     __end_of_check_message:	
  4970                           
  4971                           	psect	text3
  4972  15D7                     __ptext3:	
  4973 ;; *************** function _printf *****************
  4974 ;; Defined at:
  4975 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;  fmt             2   40[BANK0 ] PTR const unsigned char 
  4978 ;;		 -> STR_11(3), STR_10(5), STR_9(5), STR_8(5), 
  4979 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  4980 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  ret             2    0        int 
  4983 ;;  ap              1   47[BANK0 ] PTR void [1]
  4984 ;;		 -> ?_printf(2), 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  2   40[BANK0 ] int 
  4987 ;; Registers used:
  4988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4994 ;;      Params:         0       4       0       0       0       0       0       0
  4995 ;;      Locals:         0       3       0       0       0       0       0       0
  4996 ;;      Temps:          0       1       0       0       0       0       0       0
  4997 ;;      Totals:         0       8       0       0       0       0       0       0
  4998 ;;Total ram usage:        8 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:   12
  5001 ;; This function calls:
  5002 ;;		_vfprintf
  5003 ;; This function is called by:
  5004 ;;		_main
  5005 ;;		_update_state
  5006 ;;		_check_message
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           
  5011                           ;psect for function _printf
  5012  15D7                     _printf:	
  5013                           
  5014                           ;incstack = 0
  5015                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5016  15D7  304A               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5017  15D8  0020               	movlb	0	; select bank0
  5018  15D9  00CC               	movwf	??_printf
  5019  15DA  084C               	movf	??_printf,w
  5020  15DB  00CF               	movwf	printf@ap
  5021  15DC  0849               	movf	printf@fmt+1,w
  5022  15DD  00C1               	movwf	vfprintf@fmt+1
  5023  15DE  0848               	movf	printf@fmt,w
  5024  15DF  00C0               	movwf	vfprintf@fmt
  5025  15E0  304F               	movlw	(low (printf@ap| 0))& (0+255)
  5026  15E1  00CC               	movwf	??_printf
  5027  15E2  084C               	movf	??_printf,w
  5028  15E3  00C2               	movwf	vfprintf@ap
  5029  15E4  3000               	movlw	0
  5030  15E5  3189  2141         	fcall	_vfprintf
  5031  15E7  0008               	return
  5032  15E8                     __end_of_printf:	
  5033                           
  5034                           	psect	text4
  5035  0941                     __ptext4:	
  5036 ;; *************** function _vfprintf *****************
  5037 ;; Defined at:
  5038 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;  fp              1    wreg     PTR struct _IO_FILE
  5041 ;;		 -> NULL(0), 
  5042 ;;  fmt             2   32[BANK0 ] PTR const unsigned char 
  5043 ;;		 -> STR_11(3), STR_10(5), STR_9(5), STR_8(5), 
  5044 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5045 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5046 ;;  ap              1   34[BANK0 ] PTR PTR void 
  5047 ;;		 -> printf@ap(1), 
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;  fp              1   37[BANK0 ] PTR struct _IO_FILE
  5050 ;;		 -> NULL(0), 
  5051 ;;  cfmt            2   38[BANK0 ] PTR unsigned char 
  5052 ;;		 -> STR_11(3), STR_10(5), STR_9(5), STR_8(5), 
  5053 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5054 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  2   32[BANK0 ] int 
  5057 ;; Registers used:
  5058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5064 ;;      Params:         0       3       0       0       0       0       0       0
  5065 ;;      Locals:         0       3       0       0       0       0       0       0
  5066 ;;      Temps:          0       2       0       0       0       0       0       0
  5067 ;;      Totals:         0       8       0       0       0       0       0       0
  5068 ;;Total ram usage:        8 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:   11
  5071 ;; This function calls:
  5072 ;;		_vfpfcnvrt
  5073 ;; This function is called by:
  5074 ;;		_printf
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           
  5079                           ;psect for function _vfprintf
  5080  0941                     _vfprintf:	
  5081                           
  5082                           ;incstack = 0
  5083                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5084                           ;vfprintf@fp stored from wreg
  5085  0941  0020               	movlb	0	; select bank0
  5086  0942  00C5               	movwf	vfprintf@fp
  5087                           
  5088                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  5089  0943  0841               	movf	vfprintf@fmt+1,w
  5090  0944  00C7               	movwf	vfprintf@cfmt+1
  5091  0945  0840               	movf	vfprintf@fmt,w
  5092  0946  00C6               	movwf	vfprintf@cfmt
  5093                           
  5094                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  5095  0947  0021               	movlb	1	; select bank1
  5096  0948  01BC               	clrf	_nout^(0+128)
  5097  0949  01BD               	clrf	(_nout+1)^(0+128)
  5098  094A                     l6211:	
  5099                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5100                           
  5101                           
  5102                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5103  094A  0020               	movlb	0	; select bank0
  5104  094B  0846               	movf	vfprintf@cfmt,w
  5105  094C  0084               	movwf	4
  5106  094D  0847               	movf	vfprintf@cfmt+1,w
  5107  094E  0085               	movwf	5
  5108  094F  0012               	moviw fsr0++
  5109  0950  1903               	btfsc	3,2
  5110  0951  2967               	goto	l6213
  5111                           
  5112                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  5113  0952  3046               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  5114  0953  00C3               	movwf	??_vfprintf
  5115  0954  0843               	movf	??_vfprintf,w
  5116  0955  00B7               	movwf	vfpfcnvrt@fmt
  5117  0956  0842               	movf	vfprintf@ap,w
  5118  0957  00C4               	movwf	??_vfprintf+1
  5119  0958  0844               	movf	??_vfprintf+1,w
  5120  0959  00B8               	movwf	vfpfcnvrt@ap
  5121  095A  0845               	movf	vfprintf@fp,w
  5122  095B  3185  2551  3189   	fcall	_vfpfcnvrt
  5123  095E  0020               	movlb	0	; select bank0
  5124  095F  0837               	movf	?_vfpfcnvrt,w
  5125  0960  0021               	movlb	1	; select bank1
  5126  0961  07BC               	addwf	_nout^(0+128),f
  5127  0962  0020               	movlb	0	; select bank0
  5128  0963  0838               	movf	?_vfpfcnvrt+1,w
  5129  0964  0021               	movlb	1	; select bank1
  5130  0965  3DBD               	addwfc	(_nout+1)^(0+128),f
  5131  0966  294A               	goto	l6211
  5132  0967                     l6213:	
  5133                           
  5134                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  5135  0967  0021               	movlb	1	; select bank1
  5136  0968  083D               	movf	(_nout+1)^(0+128),w
  5137  0969  0020               	movlb	0	; select bank0
  5138  096A  00C1               	movwf	?_vfprintf+1
  5139  096B  0021               	movlb	1	; select bank1
  5140  096C  083C               	movf	_nout^(0+128),w
  5141  096D  0020               	movlb	0	; select bank0
  5142  096E  00C0               	movwf	?_vfprintf
  5143  096F  0008               	return
  5144  0970                     __end_of_vfprintf:	
  5145                           
  5146                           	psect	text5
  5147  0551                     __ptext5:	
  5148 ;; *************** function _vfpfcnvrt *****************
  5149 ;; Defined at:
  5150 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;  fp              1    wreg     PTR struct _IO_FILE
  5153 ;;		 -> NULL(0), 
  5154 ;;  fmt             1   23[BANK0 ] PTR PTR unsigned char 
  5155 ;;		 -> vfprintf@cfmt(2), 
  5156 ;;  ap              1   24[BANK0 ] PTR PTR void 
  5157 ;;		 -> printf@ap(1), 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  fp              1   31[BANK0 ] PTR struct _IO_FILE
  5160 ;;		 -> NULL(0), 
  5161 ;;  llu             8    0        unsigned long long 
  5162 ;;  ll              8    0        long long 
  5163 ;;  f               4    0        long long 
  5164 ;;  ct              3    0        unsigned char [3]
  5165 ;;  vp              2    0        PTR void 
  5166 ;;  i               2    0        int 
  5167 ;;  done            2    0        int 
  5168 ;;  cp              2    0        PTR unsigned char 
  5169 ;;  c               1   30[BANK0 ] unsigned char 
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  2   23[BANK0 ] int 
  5172 ;; Registers used:
  5173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5179 ;;      Params:         0       2       0       0       0       0       0       0
  5180 ;;      Locals:         0       2       0       0       0       0       0       0
  5181 ;;      Temps:          0       5       0       0       0       0       0       0
  5182 ;;      Totals:         0       9       0       0       0       0       0       0
  5183 ;;Total ram usage:        9 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:   10
  5186 ;; This function calls:
  5187 ;;		_ctoa
  5188 ;;		_fputc
  5189 ;; This function is called by:
  5190 ;;		_vfprintf
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           
  5195                           ;psect for function _vfpfcnvrt
  5196  0551                     _vfpfcnvrt:	
  5197                           
  5198                           ;incstack = 0
  5199                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5200                           ;vfpfcnvrt@fp stored from wreg
  5201  0551  0020               	movlb	0	; select bank0
  5202  0552  00BF               	movwf	vfpfcnvrt@fp
  5203                           
  5204                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  5205  0553  0837               	movf	vfpfcnvrt@fmt,w
  5206  0554  0086               	movwf	6
  5207  0555  0187               	clrf	7
  5208  0556  3F40               	moviw [0]fsr1
  5209  0557  00B9               	movwf	??_vfpfcnvrt
  5210  0558  3F41               	moviw [1]fsr1
  5211  0559  00BA               	movwf	??_vfpfcnvrt+1
  5212  055A  0839               	movf	??_vfpfcnvrt,w
  5213  055B  0084               	movwf	4
  5214  055C  083A               	movf	??_vfpfcnvrt+1,w
  5215  055D  0085               	movwf	5
  5216  055E  0012               	moviw fsr0++
  5217  055F  3A25               	xorlw	37
  5218  0560  1D03               	btfss	3,2
  5219  0561  2DD6               	goto	l6117
  5220                           
  5221                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  5222  0562  0837               	movf	vfpfcnvrt@fmt,w
  5223  0563  0086               	movwf	6
  5224  0564  0187               	clrf	7
  5225  0565  3001               	movlw	1
  5226  0566  0781               	addwf	1,f
  5227  0567  3141               	addfsr 1,1
  5228  0568  1803               	skipnc
  5229  0569  0A81               	incf	1,f
  5230                           
  5231                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  5232  056A  01D7               	clrf	_width
  5233  056B  01D8               	clrf	_width+1
  5234  056C  0021               	movlb	1	; select bank1
  5235  056D  01C0               	clrf	_flags^(0+128)
  5236  056E  01C1               	clrf	(_flags+1)^(0+128)
  5237                           
  5238                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  5239  056F  30FF               	movlw	255
  5240  0570  00BE               	movwf	_prec^(0+128)
  5241  0571  30FF               	movlw	255
  5242  0572  00BF               	movwf	(_prec^(0+128)+1)
  5243                           
  5244                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  5245  0573  0020               	movlb	0	; select bank0
  5246  0574  0837               	movf	vfpfcnvrt@fmt,w
  5247  0575  0086               	movwf	6
  5248  0576  0187               	clrf	7
  5249  0577  3F40               	moviw [0]fsr1
  5250  0578  00B9               	movwf	??_vfpfcnvrt
  5251  0579  3F41               	moviw [1]fsr1
  5252  057A  00BA               	movwf	??_vfpfcnvrt+1
  5253  057B  0839               	movf	??_vfpfcnvrt,w
  5254  057C  0084               	movwf	4
  5255  057D  083A               	movf	??_vfpfcnvrt+1,w
  5256  057E  0085               	movwf	5
  5257  057F  0012               	moviw fsr0++
  5258  0580  3A63               	xorlw	99
  5259  0581  1D03               	btfss	3,2
  5260  0582  2DA4               	goto	l6101
  5261                           
  5262                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  5263  0583  0837               	movf	vfpfcnvrt@fmt,w
  5264  0584  0086               	movwf	6
  5265  0585  0187               	clrf	7
  5266  0586  3001               	movlw	1
  5267  0587  0781               	addwf	1,f
  5268  0588  3141               	addfsr 1,1
  5269  0589  1803               	skipnc
  5270  058A  0A81               	incf	1,f
  5271                           
  5272                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5273  058B  0838               	movf	vfpfcnvrt@ap,w
  5274  058C  0086               	movwf	6
  5275  058D  0187               	clrf	7
  5276  058E  0801               	movf	1,w
  5277  058F  0084               	movwf	4
  5278  0590  0185               	clrf	5
  5279  0591  3002               	movlw	2
  5280  0592  0781               	addwf	1,f
  5281  0593  0800               	movf	0,w
  5282  0594  00B9               	movwf	??_vfpfcnvrt
  5283  0595  0839               	movf	??_vfpfcnvrt,w
  5284  0596  00BE               	movwf	vfpfcnvrt@c
  5285                           
  5286                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  5287  0597  083E               	movf	vfpfcnvrt@c,w
  5288  0598  00B9               	movwf	??_vfpfcnvrt
  5289  0599  0839               	movf	??_vfpfcnvrt,w
  5290  059A  00B1               	movwf	ctoa@c
  5291  059B  083F               	movf	vfpfcnvrt@fp,w
  5292  059C  3188  2092         	fcall	_ctoa
  5293  059E  0020               	movlb	0	; select bank0
  5294  059F  0832               	movf	?_ctoa+1,w
  5295  05A0  00B8               	movwf	?_vfpfcnvrt+1
  5296  05A1  0831               	movf	?_ctoa,w
  5297  05A2  00B7               	movwf	?_vfpfcnvrt
  5298  05A3  0008               	return
  5299  05A4                     l6101:	
  5300                           
  5301                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  5302  05A4  0837               	movf	vfpfcnvrt@fmt,w
  5303  05A5  0086               	movwf	6
  5304  05A6  0187               	clrf	7
  5305  05A7  3F40               	moviw [0]fsr1
  5306  05A8  00B9               	movwf	??_vfpfcnvrt
  5307  05A9  3F41               	moviw [1]fsr1
  5308  05AA  00BA               	movwf	??_vfpfcnvrt+1
  5309  05AB  0839               	movf	??_vfpfcnvrt,w
  5310  05AC  0084               	movwf	4
  5311  05AD  083A               	movf	??_vfpfcnvrt+1,w
  5312  05AE  0085               	movwf	5
  5313  05AF  0012               	moviw fsr0++
  5314  05B0  3A25               	xorlw	37
  5315  05B1  1D03               	btfss	3,2
  5316  05B2  2DCB               	goto	l6111
  5317                           
  5318                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  5319  05B3  0837               	movf	vfpfcnvrt@fmt,w
  5320  05B4  0086               	movwf	6
  5321  05B5  0187               	clrf	7
  5322  05B6  3001               	movlw	1
  5323  05B7  0781               	addwf	1,f
  5324  05B8  3141               	addfsr 1,1
  5325  05B9  1803               	skipnc
  5326  05BA  0A81               	incf	1,f
  5327                           
  5328                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  5329  05BB  3025               	movlw	37
  5330  05BC  00F4               	movwf	fputc@c
  5331  05BD  3000               	movlw	0
  5332  05BE  00F5               	movwf	fputc@c+1
  5333  05BF  083F               	movf	vfpfcnvrt@fp,w
  5334  05C0  00B9               	movwf	??_vfpfcnvrt
  5335  05C1  0839               	movf	??_vfpfcnvrt,w
  5336  05C2  00F6               	movwf	fputc@fp
  5337  05C3  3189  21D4         	fcall	_fputc
  5338  05C5                     l6107:	
  5339                           
  5340                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  5341  05C5  3001               	movlw	1
  5342  05C6  0020               	movlb	0	; select bank0
  5343  05C7  00B7               	movwf	?_vfpfcnvrt
  5344  05C8  3000               	movlw	0
  5345  05C9  00B8               	movwf	?_vfpfcnvrt+1
  5346  05CA  0008               	return
  5347  05CB                     l6111:	
  5348                           
  5349                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  5350  05CB  0837               	movf	vfpfcnvrt@fmt,w
  5351  05CC  0086               	movwf	6
  5352  05CD  0187               	clrf	7
  5353  05CE  3001               	movlw	1
  5354  05CF  0781               	addwf	1,f
  5355  05D0  3141               	addfsr 1,1
  5356  05D1  1803               	skipnc
  5357  05D2  0A81               	incf	1,f
  5358                           
  5359                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  5360  05D3  01B7               	clrf	?_vfpfcnvrt
  5361  05D4  01B8               	clrf	?_vfpfcnvrt+1
  5362  05D5  0008               	return
  5363  05D6                     l6117:	
  5364                           
  5365                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  5366  05D6  0837               	movf	vfpfcnvrt@fmt,w
  5367  05D7  0086               	movwf	6
  5368  05D8  0187               	clrf	7
  5369  05D9  3F40               	moviw [0]fsr1
  5370  05DA  00B9               	movwf	??_vfpfcnvrt
  5371  05DB  3F41               	moviw [1]fsr1
  5372  05DC  00BA               	movwf	??_vfpfcnvrt+1
  5373  05DD  0839               	movf	??_vfpfcnvrt,w
  5374  05DE  0084               	movwf	4
  5375  05DF  083A               	movf	??_vfpfcnvrt+1,w
  5376  05E0  0085               	movwf	5
  5377  05E1  0800               	movf	0,w	;code access
  5378  05E2  00BB               	movwf	??_vfpfcnvrt+2
  5379  05E3  01BC               	clrf	??_vfpfcnvrt+3
  5380  05E4  083B               	movf	??_vfpfcnvrt+2,w
  5381  05E5  00F4               	movwf	fputc@c
  5382  05E6  083C               	movf	??_vfpfcnvrt+3,w
  5383  05E7  00F5               	movwf	fputc@c+1
  5384  05E8  083F               	movf	vfpfcnvrt@fp,w
  5385  05E9  00BD               	movwf	??_vfpfcnvrt+4
  5386  05EA  083D               	movf	??_vfpfcnvrt+4,w
  5387  05EB  00F6               	movwf	fputc@fp
  5388  05EC  3189  21D4  3185   	fcall	_fputc
  5389                           
  5390                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  5391  05EF  0020               	movlb	0	; select bank0
  5392  05F0  0837               	movf	vfpfcnvrt@fmt,w
  5393  05F1  0086               	movwf	6
  5394  05F2  0187               	clrf	7
  5395  05F3  3001               	movlw	1
  5396  05F4  0781               	addwf	1,f
  5397  05F5  3141               	addfsr 1,1
  5398  05F6  1803               	skipnc
  5399  05F7  0A81               	incf	1,f
  5400  05F8  2DC5               	goto	l6107
  5401  05F9                     __end_of_vfpfcnvrt:	
  5402                           
  5403                           	psect	text6
  5404  0892                     __ptext6:	
  5405 ;; *************** function _ctoa *****************
  5406 ;; Defined at:
  5407 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  fp              1    wreg     PTR struct _IO_FILE
  5410 ;;		 -> NULL(0), 
  5411 ;;  c               1   17[BANK0 ] unsigned char 
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;  fp              1   22[BANK0 ] PTR struct _IO_FILE
  5414 ;;		 -> NULL(0), 
  5415 ;;  w               2   20[BANK0 ] int 
  5416 ;;  l               2    0        int 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  2   17[BANK0 ] int 
  5419 ;; Registers used:
  5420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5426 ;;      Params:         0       2       0       0       0       0       0       0
  5427 ;;      Locals:         0       3       0       0       0       0       0       0
  5428 ;;      Temps:          0       1       0       0       0       0       0       0
  5429 ;;      Totals:         0       6       0       0       0       0       0       0
  5430 ;;Total ram usage:        6 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:    9
  5433 ;; This function calls:
  5434 ;;		_pad
  5435 ;; This function is called by:
  5436 ;;		_vfpfcnvrt
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           
  5441                           ;psect for function _ctoa
  5442  0892                     _ctoa:	
  5443                           
  5444                           ;incstack = 0
  5445                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5446                           ;ctoa@fp stored from wreg
  5447  0892  0020               	movlb	0	; select bank0
  5448  0893  00B6               	movwf	ctoa@fp
  5449                           
  5450                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  5451  0894  0857               	movf	_width,w
  5452  0895  0458               	iorwf	_width+1,w
  5453  0896  1D03               	btfss	3,2
  5454  0897  289D               	goto	l5947
  5455  0898  0858               	movf	_width+1,w
  5456  0899  00B5               	movwf	ctoa@w+1
  5457  089A  0857               	movf	_width,w
  5458  089B  00B4               	movwf	ctoa@w
  5459  089C  28A3               	goto	l5949
  5460  089D                     l5947:	
  5461  089D  0857               	movf	_width,w
  5462  089E  3EFF               	addlw	255
  5463  089F  00B4               	movwf	ctoa@w
  5464  08A0  30FF               	movlw	255
  5465  08A1  3D58               	addwfc	_width+1,w
  5466  08A2  00B5               	movwf	ctoa@w+1
  5467  08A3                     l5949:	
  5468                           
  5469                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  5470  08A3  0831               	movf	ctoa@c,w
  5471  08A4  00B3               	movwf	??_ctoa
  5472  08A5  0833               	movf	??_ctoa,w
  5473  08A6  0023               	movlb	3	; select bank3
  5474  08A7  00A0               	movwf	_dbuf^(0+384)
  5475                           
  5476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  5477  08A8  01A1               	clrf	(_dbuf^(0+384)+1)
  5478                           
  5479                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  5480  08A9  30A0               	movlw	(low (_dbuf| (0+256)))& (0+255)
  5481  08AA  0020               	movlb	0	; select bank0
  5482  08AB  00B3               	movwf	??_ctoa
  5483  08AC  0833               	movf	??_ctoa,w
  5484  08AD  00A8               	movwf	pad@buf
  5485  08AE  0835               	movf	ctoa@w+1,w
  5486  08AF  00AA               	movwf	pad@p+1
  5487  08B0  0834               	movf	ctoa@w,w
  5488  08B1  00A9               	movwf	pad@p
  5489  08B2  0836               	movf	ctoa@fp,w
  5490  08B3  318B  2352         	fcall	_pad
  5491  08B5  0020               	movlb	0	; select bank0
  5492  08B6  0829               	movf	?_pad+1,w
  5493  08B7  00B2               	movwf	?_ctoa+1
  5494  08B8  0828               	movf	?_pad,w
  5495  08B9  00B1               	movwf	?_ctoa
  5496  08BA  0008               	return
  5497  08BB                     __end_of_ctoa:	
  5498                           
  5499                           	psect	text7
  5500  0B52                     __ptext7:	
  5501 ;; *************** function _pad *****************
  5502 ;; Defined at:
  5503 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  fp              1    wreg     PTR struct _IO_FILE
  5506 ;;		 -> NULL(0), 
  5507 ;;  buf             1    8[BANK0 ] PTR unsigned char 
  5508 ;;		 -> dbuf(32), 
  5509 ;;  p               2    9[BANK0 ] int 
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
  5512 ;;		 -> NULL(0), 
  5513 ;;  w               2   14[BANK0 ] int 
  5514 ;;  i               2   12[BANK0 ] int 
  5515 ;; Return value:  Size  Location     Type
  5516 ;;                  2    8[BANK0 ] int 
  5517 ;; Registers used:
  5518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5519 ;; Tracked objects:
  5520 ;;		On entry : 0/0
  5521 ;;		On exit  : 0/0
  5522 ;;		Unchanged: 0/0
  5523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5524 ;;      Params:         0       3       0       0       0       0       0       0
  5525 ;;      Locals:         0       5       0       0       0       0       0       0
  5526 ;;      Temps:          0       1       0       0       0       0       0       0
  5527 ;;      Totals:         0       9       0       0       0       0       0       0
  5528 ;;Total ram usage:        9 bytes
  5529 ;; Hardware stack levels used:    1
  5530 ;; Hardware stack levels required when called:    8
  5531 ;; This function calls:
  5532 ;;		_fputc
  5533 ;;		_fputs
  5534 ;;		_strlen
  5535 ;; This function is called by:
  5536 ;;		_ctoa
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           
  5541                           ;psect for function _pad
  5542  0B52                     _pad:	
  5543                           
  5544                           ;incstack = 0
  5545                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5546                           ;pad@fp stored from wreg
  5547  0B52  0020               	movlb	0	; select bank0
  5548  0B53  00B0               	movwf	pad@fp
  5549                           
  5550                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  5551  0B54  0021               	movlb	1	; select bank1
  5552  0B55  1C40               	btfss	_flags^(0+128),0
  5553  0B56  2B60               	goto	l5855
  5554                           
  5555                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  5556  0B57  0020               	movlb	0	; select bank0
  5557  0B58  0830               	movf	pad@fp,w
  5558  0B59  00AB               	movwf	??_pad
  5559  0B5A  082B               	movf	??_pad,w
  5560  0B5B  00A0               	movwf	fputs@fp
  5561  0B5C  0828               	movf	pad@buf,w
  5562  0B5D  3188  201D  318B   	fcall	_fputs
  5563  0B60                     l5855:	
  5564                           
  5565                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  5566  0B60  0020               	movlb	0	; select bank0
  5567  0B61  1BAA               	btfsc	pad@p+1,7
  5568  0B62  2B68               	goto	l5859
  5569  0B63  082A               	movf	pad@p+1,w
  5570  0B64  00AF               	movwf	pad@w+1
  5571  0B65  0829               	movf	pad@p,w
  5572  0B66  00AE               	movwf	pad@w
  5573  0B67  2B6A               	goto	l1305
  5574  0B68                     l5859:	
  5575  0B68  01AE               	clrf	pad@w
  5576  0B69  01AF               	clrf	pad@w+1
  5577  0B6A                     l1305:	
  5578                           
  5579                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  5580  0B6A  01AC               	clrf	pad@i
  5581  0B6B  01AD               	clrf	pad@i+1
  5582  0B6C                     l5865:	
  5583                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5584                           
  5585                           
  5586                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5587  0B6C  082D               	movf	pad@i+1,w
  5588  0B6D  3A80               	xorlw	128
  5589  0B6E  00AB               	movwf	??_pad
  5590  0B6F  082F               	movf	pad@w+1,w
  5591  0B70  3A80               	xorlw	128
  5592  0B71  022B               	subwf	??_pad,w
  5593  0B72  1D03               	skipz
  5594  0B73  2B76               	goto	u4665
  5595  0B74  082E               	movf	pad@w,w
  5596  0B75  022C               	subwf	pad@i,w
  5597  0B76                     u4665:	
  5598  0B76  1803               	btfsc	3,0
  5599  0B77  2B8A               	goto	l1308
  5600                           
  5601                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  5602  0B78  3020               	movlw	32
  5603  0B79  00F4               	movwf	fputc@c
  5604  0B7A  3000               	movlw	0
  5605  0B7B  00F5               	movwf	fputc@c+1
  5606  0B7C  0020               	movlb	0	; select bank0
  5607  0B7D  0830               	movf	pad@fp,w
  5608  0B7E  00AB               	movwf	??_pad
  5609  0B7F  082B               	movf	??_pad,w
  5610  0B80  00F6               	movwf	fputc@fp
  5611  0B81  3189  21D4  318B   	fcall	_fputc
  5612                           
  5613                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  5614  0B84  3001               	movlw	1
  5615  0B85  0020               	movlb	0	; select bank0
  5616  0B86  07AC               	addwf	pad@i,f
  5617  0B87  3000               	movlw	0
  5618  0B88  3DAD               	addwfc	pad@i+1,f
  5619  0B89  2B6C               	goto	l5865
  5620  0B8A                     l1308:	
  5621                           
  5622                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  5623  0B8A  0021               	movlb	1	; select bank1
  5624  0B8B  1840               	btfsc	_flags^(0+128),0
  5625  0B8C  2B96               	goto	l1309
  5626                           
  5627                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  5628  0B8D  0020               	movlb	0	; select bank0
  5629  0B8E  0830               	movf	pad@fp,w
  5630  0B8F  00AB               	movwf	??_pad
  5631  0B90  082B               	movf	??_pad,w
  5632  0B91  00A0               	movwf	fputs@fp
  5633  0B92  0828               	movf	pad@buf,w
  5634  0B93  3188  201D  318B   	fcall	_fputs
  5635  0B96                     l1309:	
  5636                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
  5637                           
  5638                           
  5639                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  5640  0B96  0020               	movlb	0	; select bank0
  5641  0B97  0828               	movf	pad@buf,w
  5642  0B98  3196  26CE         	fcall	_strlen
  5643  0B9A  0020               	movlb	0	; select bank0
  5644  0B9B  082E               	movf	pad@w,w
  5645  0B9C  0771               	addwf	?_strlen,w
  5646  0B9D  00A8               	movwf	?_pad
  5647  0B9E  082F               	movf	pad@w+1,w
  5648  0B9F  3D72               	addwfc	?_strlen+1,w
  5649  0BA0  00A9               	movwf	?_pad+1
  5650  0BA1  0008               	return
  5651  0BA2                     __end_of_pad:	
  5652                           
  5653                           	psect	text8
  5654  16CE                     __ptext8:	
  5655 ;; *************** function _strlen *****************
  5656 ;; Defined at:
  5657 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  s               1    wreg     PTR const unsigned char 
  5660 ;;		 -> dbuf(32), 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  s               1    5[COMMON] PTR const unsigned char 
  5663 ;;		 -> dbuf(32), 
  5664 ;;  a               1    4[COMMON] PTR const unsigned char 
  5665 ;;		 -> dbuf(32), 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  2    1[COMMON] unsigned int 
  5668 ;; Registers used:
  5669 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5675 ;;      Params:         2       0       0       0       0       0       0       0
  5676 ;;      Locals:         2       0       0       0       0       0       0       0
  5677 ;;      Temps:          1       0       0       0       0       0       0       0
  5678 ;;      Totals:         5       0       0       0       0       0       0       0
  5679 ;;Total ram usage:        5 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    4
  5682 ;; This function calls:
  5683 ;;		Nothing
  5684 ;; This function is called by:
  5685 ;;		_pad
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _strlen
  5691  16CE                     _strlen:	
  5692                           
  5693                           ;incstack = 0
  5694                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5695                           ;strlen@s stored from wreg
  5696  16CE  00F5               	movwf	strlen@s
  5697  16CF  0875               	movf	strlen@s,w
  5698  16D0  00F3               	movwf	??_strlen
  5699  16D1  0873               	movf	??_strlen,w
  5700  16D2  00F4               	movwf	strlen@a
  5701  16D3                     l3923:	
  5702  16D3  0875               	movf	strlen@s,w
  5703  16D4  0086               	movwf	6
  5704  16D5  3001               	movlw	1	; select bank2/3
  5705  16D6  0087               	movwf	7
  5706  16D7  0801               	movf	1,w
  5707  16D8  1903               	btfsc	3,2
  5708  16D9  2EDF               	goto	l3925
  5709  16DA  3001               	movlw	1
  5710  16DB  00F3               	movwf	??_strlen
  5711  16DC  0873               	movf	??_strlen,w
  5712  16DD  07F5               	addwf	strlen@s,f
  5713  16DE  2ED3               	goto	l3923
  5714  16DF                     l3925:	
  5715  16DF  0874               	movf	strlen@a,w
  5716  16E0  0275               	subwf	strlen@s,w
  5717  16E1  00F1               	movwf	?_strlen
  5718  16E2  01F2               	clrf	?_strlen+1
  5719  16E3  1BF1               	btfsc	?_strlen,7
  5720  16E4  03F2               	decf	?_strlen+1,f
  5721  16E5  0008               	return
  5722  16E6                     __end_of_strlen:	
  5723                           
  5724                           	psect	text9
  5725  081D                     __ptext9:	
  5726 ;; *************** function _fputs *****************
  5727 ;; Defined at:
  5728 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;  s               1    wreg     PTR const unsigned char 
  5731 ;;		 -> dbuf(32), 
  5732 ;;  fp              1    0[BANK0 ] PTR struct _IO_FILE
  5733 ;;		 -> NULL(0), 
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  5736 ;;		 -> dbuf(32), 
  5737 ;;  i               2    5[BANK0 ] int 
  5738 ;;  c               1    4[BANK0 ] unsigned char 
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  2    0[BANK0 ] int 
  5741 ;; Registers used:
  5742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5748 ;;      Params:         0       1       0       0       0       0       0       0
  5749 ;;      Locals:         0       4       0       0       0       0       0       0
  5750 ;;      Temps:          0       3       0       0       0       0       0       0
  5751 ;;      Totals:         0       8       0       0       0       0       0       0
  5752 ;;Total ram usage:        8 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    7
  5755 ;; This function calls:
  5756 ;;		_fputc
  5757 ;; This function is called by:
  5758 ;;		_pad
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           
  5763                           ;psect for function _fputs
  5764  081D                     _fputs:	
  5765                           
  5766                           ;incstack = 0
  5767                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5768                           ;fputs@s stored from wreg
  5769  081D  0020               	movlb	0	; select bank0
  5770  081E  00A7               	movwf	fputs@s
  5771  081F  01A5               	clrf	fputs@i
  5772  0820  01A6               	clrf	fputs@i+1
  5773  0821                     l5617:	
  5774  0821  0825               	movf	fputs@i,w
  5775  0822  0727               	addwf	fputs@s,w
  5776  0823  00A1               	movwf	??_fputs
  5777  0824  0821               	movf	??_fputs,w
  5778  0825  0086               	movwf	6
  5779  0826  3001               	movlw	1	; select bank2/3
  5780  0827  0087               	movwf	7
  5781  0828  0801               	movf	1,w
  5782  0829  00A2               	movwf	??_fputs+1
  5783  082A  0822               	movf	??_fputs+1,w
  5784  082B  00A4               	movwf	fputs@c
  5785  082C  0824               	movf	fputs@c,w
  5786  082D  1903               	btfsc	3,2
  5787  082E  0008               	return
  5788  082F  0824               	movf	fputs@c,w
  5789  0830  00A1               	movwf	??_fputs
  5790  0831  01A2               	clrf	??_fputs+1
  5791  0832  0821               	movf	??_fputs,w
  5792  0833  00F4               	movwf	fputc@c
  5793  0834  0822               	movf	??_fputs+1,w
  5794  0835  00F5               	movwf	fputc@c+1
  5795  0836  0820               	movf	fputs@fp,w
  5796  0837  00A3               	movwf	??_fputs+2
  5797  0838  0823               	movf	??_fputs+2,w
  5798  0839  00F6               	movwf	fputc@fp
  5799  083A  3189  21D4  3188   	fcall	_fputc
  5800  083D  3001               	movlw	1
  5801  083E  0020               	movlb	0	; select bank0
  5802  083F  07A5               	addwf	fputs@i,f
  5803  0840  3000               	movlw	0
  5804  0841  3DA6               	addwfc	fputs@i+1,f
  5805  0842  2821               	goto	l5617
  5806  0843                     __end_of_fputs:	
  5807                           
  5808                           	psect	text10
  5809  09D4                     __ptext10:	
  5810 ;; *************** function _fputc *****************
  5811 ;; Defined at:
  5812 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;  c               2    4[COMMON] int 
  5815 ;;  fp              1    6[COMMON] PTR struct _IO_FILE
  5816 ;;		 -> NULL(0), 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;		None
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  2    4[COMMON] int 
  5821 ;; Registers used:
  5822 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5828 ;;      Params:         3       0       0       0       0       0       0       0
  5829 ;;      Locals:         0       0       0       0       0       0       0       0
  5830 ;;      Temps:          5       0       0       0       0       0       0       0
  5831 ;;      Totals:         8       0       0       0       0       0       0       0
  5832 ;;Total ram usage:        8 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    6
  5835 ;; This function calls:
  5836 ;;		_putch
  5837 ;; This function is called by:
  5838 ;;		_pad
  5839 ;;		_vfpfcnvrt
  5840 ;;		_fputs
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _fputc
  5846  09D4                     _fputc:	
  5847                           
  5848                           ;incstack = 0
  5849                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5850  09D4  0876               	movf	fputc@fp,w
  5851  09D5  1D03               	btfss	3,2
  5852  09D6  0876               	movf	fputc@fp,w
  5853  09D7  1D03               	btfss	3,2
  5854  09D8  29DD               	goto	l3809
  5855  09D9  0874               	movf	fputc@c,w
  5856  09DA  3194  24AD         	fcall	_putch
  5857  09DC  0008               	return
  5858  09DD                     l3809:	
  5859  09DD  0876               	movf	fputc@fp,w
  5860  09DE  3E03               	addlw	3
  5861  09DF  0086               	movwf	6
  5862  09E0  0187               	clrf	7
  5863  09E1  0016               	moviw fsr1++
  5864  09E2  0401               	iorwf	1,w
  5865  09E3  1903               	btfsc	3,2
  5866  09E4  2A00               	goto	l3813
  5867  09E5  0876               	movf	fputc@fp,w
  5868  09E6  3E03               	addlw	3
  5869  09E7  0086               	movwf	6
  5870  09E8  0187               	clrf	7
  5871  09E9  3F40               	moviw [0]fsr1
  5872  09EA  00F7               	movwf	??_fputc
  5873  09EB  3F41               	moviw [1]fsr1
  5874  09EC  00F8               	movwf	??_fputc+1
  5875  09ED  0A76               	incf	fputc@fp,w
  5876  09EE  0086               	movwf	6
  5877  09EF  0187               	clrf	7
  5878  09F0  3F40               	moviw [0]fsr1
  5879  09F1  00F9               	movwf	??_fputc+2
  5880  09F2  3F41               	moviw [1]fsr1
  5881  09F3  00FA               	movwf	??_fputc+3
  5882  09F4  087A               	movf	??_fputc+3,w
  5883  09F5  3A80               	xorlw	128
  5884  09F6  00FB               	movwf	??_fputc+4
  5885  09F7  0878               	movf	??_fputc+1,w
  5886  09F8  3A80               	xorlw	128
  5887  09F9  027B               	subwf	??_fputc+4,w
  5888  09FA  1D03               	skipz
  5889  09FB  29FE               	goto	u2235
  5890  09FC  0877               	movf	??_fputc,w
  5891  09FD  0279               	subwf	??_fputc+2,w
  5892  09FE                     u2235:	
  5893  09FE  1803               	skipnc
  5894  09FF  0008               	return
  5895  0A00                     l3813:	
  5896  0A00  0A76               	incf	fputc@fp,w
  5897  0A01  0086               	movwf	6
  5898  0A02  0187               	clrf	7
  5899  0A03  3001               	movlw	1
  5900  0A04  0781               	addwf	1,f
  5901  0A05  3141               	addfsr 1,1
  5902  0A06  1803               	skipnc
  5903  0A07  0A81               	incf	1,f
  5904  0A08  0008               	return
  5905  0A09                     __end_of_fputc:	
  5906                           
  5907                           	psect	text11
  5908  14AD                     __ptext11:	
  5909 ;; *************** function _putch *****************
  5910 ;; Defined at:
  5911 ;;		line 198 in file "mcc_generated_files/eusart.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;  txData          1    wreg     unsigned char 
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;  txData          1    3[COMMON] unsigned char 
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      void 
  5918 ;; Registers used:
  5919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5925 ;;      Params:         0       0       0       0       0       0       0       0
  5926 ;;      Locals:         1       0       0       0       0       0       0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0       0
  5928 ;;      Totals:         1       0       0       0       0       0       0       0
  5929 ;;Total ram usage:        1 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    5
  5932 ;; This function calls:
  5933 ;;		_EUSART_Write
  5934 ;; This function is called by:
  5935 ;;		_fputc
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           
  5940                           ;psect for function _putch
  5941  14AD                     _putch:	
  5942                           
  5943                           ;incstack = 0
  5944                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5945                           ;putch@txData stored from wreg
  5946  14AD  00F3               	movwf	putch@txData
  5947                           
  5948                           ;mcc_generated_files/eusart.c: 198: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 199: {;mcc_generated_files/eusart.c: 200:     EUSART_Write(txData);
  5949  14AE  0873               	movf	putch@txData,w
  5950  14AF  3197  2792         	fcall	_EUSART_Write
  5951  14B1  0008               	return
  5952  14B2                     __end_of_putch:	
  5953                           
  5954                           	psect	text12
  5955  1792                     __ptext12:	
  5956 ;; *************** function _EUSART_Write *****************
  5957 ;; Defined at:
  5958 ;;		line 170 in file "mcc_generated_files/eusart.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;  txData          1    wreg     unsigned char 
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  txData          1    2[COMMON] unsigned char 
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  1    wreg      void 
  5965 ;; Registers used:
  5966 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5972 ;;      Params:         0       0       0       0       0       0       0       0
  5973 ;;      Locals:         1       0       0       0       0       0       0       0
  5974 ;;      Temps:          1       0       0       0       0       0       0       0
  5975 ;;      Totals:         2       0       0       0       0       0       0       0
  5976 ;;Total ram usage:        2 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:    4
  5979 ;; This function calls:
  5980 ;;		Nothing
  5981 ;; This function is called by:
  5982 ;;		_putch
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           
  5987                           ;psect for function _EUSART_Write
  5988  1792                     _EUSART_Write:	
  5989                           
  5990                           ;incstack = 0
  5991                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5992                           ;EUSART_Write@txData stored from wreg
  5993  1792  00F2               	movwf	EUSART_Write@txData
  5994  1793                     l3743:	
  5995                           ;mcc_generated_files/eusart.c: 170: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 171: {;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemai
      +                          ning)
  5996                           
  5997                           
  5998                           ;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemaining)
  5999  1793  0021               	movlb	1	; select bank1
  6000  1794  084E               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6001  1795  1903               	btfsc	3,2
  6002  1796  2F93               	goto	l3743
  6003                           
  6004                           ;mcc_generated_files/eusart.c: 176:     if(0 == PIE1bits.TXIE)
  6005  1797  1A11               	btfsc	17,4	;volatile
  6006  1798  2F9D               	goto	l742
  6007                           
  6008                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = txData;
  6009  1799  0872               	movf	EUSART_Write@txData,w
  6010  179A  0023               	movlb	3	; select bank3
  6011  179B  009A               	movwf	26	;volatile
  6012                           
  6013                           ;mcc_generated_files/eusart.c: 179:     }
  6014  179C  2FB2               	goto	l3757
  6015  179D                     l742:	
  6016                           ;mcc_generated_files/eusart.c: 180:     else
  6017                           
  6018                           
  6019                           ;mcc_generated_files/eusart.c: 181:     {;mcc_generated_files/eusart.c: 182:         PIE
      +                          1bits.TXIE = 0;
  6020  179D  1211               	bcf	17,4	;volatile
  6021                           
  6022                           ;mcc_generated_files/eusart.c: 183:         eusartTxBuffer[eusartTxHead++] = txData;
  6023  179E  0872               	movf	EUSART_Write@txData,w
  6024  179F  00F1               	movwf	??_EUSART_Write
  6025  17A0  0020               	movlb	0	; select bank0
  6026  17A1  0868               	movf	_eusartTxHead,w
  6027  17A2  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6028  17A3  0086               	movwf	6
  6029  17A4  0187               	clrf	7
  6030  17A5  0871               	movf	??_EUSART_Write,w
  6031  17A6  0081               	movwf	1
  6032  17A7  3001               	movlw	1
  6033  17A8  00F1               	movwf	??_EUSART_Write
  6034  17A9  0871               	movf	??_EUSART_Write,w
  6035  17AA  07E8               	addwf	_eusartTxHead,f	;volatile
  6036                           
  6037                           ;mcc_generated_files/eusart.c: 184:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6038  17AB  3008               	movlw	8
  6039  17AC  0268               	subwf	_eusartTxHead,w	;volatile
  6040  17AD  1803               	btfsc	3,0
  6041                           
  6042                           ;mcc_generated_files/eusart.c: 185:         {;mcc_generated_files/eusart.c: 186:        
      +                               eusartTxHead = 0;
  6043  17AE  01E8               	clrf	_eusartTxHead	;volatile
  6044                           
  6045                           ;mcc_generated_files/eusart.c: 188:         eusartTxBufferRemaining--;
  6046  17AF  3001               	movlw	1
  6047  17B0  0021               	movlb	1	; select bank1
  6048  17B1  02CE               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  6049  17B2                     l3757:	
  6050                           
  6051                           ;mcc_generated_files/eusart.c: 190:     PIE1bits.TXIE = 1;
  6052  17B2  0021               	movlb	1	; select bank1
  6053  17B3  1611               	bsf	17,4	;volatile
  6054  17B4  0008               	return
  6055  17B5                     __end_of_EUSART_Write:	
  6056                           
  6057                           	psect	text13
  6058  09A2                     __ptext13:	
  6059 ;; *************** function _check_data *****************
  6060 ;; Defined at:
  6061 ;;		line 327 in file "main.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;  x               1    wreg     unsigned char 
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  x               1    3[COMMON] unsigned char 
  6066 ;; Return value:  Size  Location     Type
  6067 ;;                  1    wreg      _Bool 
  6068 ;; Registers used:
  6069 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6075 ;;      Params:         0       0       0       0       0       0       0       0
  6076 ;;      Locals:         1       0       0       0       0       0       0       0
  6077 ;;      Temps:          2       0       0       0       0       0       0       0
  6078 ;;      Totals:         3       0       0       0       0       0       0       0
  6079 ;;Total ram usage:        3 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:    4
  6082 ;; This function calls:
  6083 ;;		Nothing
  6084 ;; This function is called by:
  6085 ;;		_main
  6086 ;; This function uses a non-reentrant model
  6087 ;;
  6088                           
  6089                           
  6090                           ;psect for function _check_data
  6091  09A2                     _check_data:	
  6092                           
  6093                           ;incstack = 0
  6094                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  6095                           ;check_data@x stored from wreg
  6096  09A2  00F3               	movwf	check_data@x
  6097                           
  6098                           ;main.c: 327: _Bool check_data(uint8_t x);main.c: 328: {;main.c: 329:     switch(x)
  6099  09A3  29A8               	goto	l5013
  6100  09A4                     l4963:	
  6101  09A4  3001               	movlw	1
  6102  09A5  0008               	return
  6103  09A6                     l5007:	
  6104  09A6  3000               	movlw	0
  6105  09A7  0008               	return
  6106  09A8                     l5013:	
  6107  09A8  0873               	movf	check_data@x,w
  6108  09A9  00F1               	movwf	??_check_data
  6109  09AA  01F2               	clrf	??_check_data+1
  6110                           
  6111                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6112                           ; Switch size 1, requested type "simple"
  6113                           ; Number of cases is 1, Range of values is 0 to 0
  6114                           ; switch strategies available:
  6115                           ; Name         Instructions Cycles
  6116                           ; simple_byte            4     3 (average)
  6117                           ; direct_byte            8     6 (fixed)
  6118                           ; jumptable            260     6 (fixed)
  6119                           ;	Chosen strategy is simple_byte
  6120  09AB  0872               	movf	??_check_data+1,w
  6121  09AC  3A00               	xorlw	0	; case 0
  6122  09AD  1903               	skipnz
  6123  09AE  29B0               	goto	l6805
  6124  09AF  29A6               	goto	l5007
  6125  09B0                     l6805:	
  6126                           
  6127                           ; Switch size 1, requested type "simple"
  6128                           ; Number of cases is 11, Range of values is 48 to 85
  6129                           ; switch strategies available:
  6130                           ; Name         Instructions Cycles
  6131                           ; simple_byte           34    18 (average)
  6132                           ; direct_byte           85     9 (fixed)
  6133                           ; jumptable            263     9 (fixed)
  6134                           ;	Chosen strategy is simple_byte
  6135  09B0  0871               	movf	??_check_data,w
  6136  09B1  3A30               	xorlw	48	; case 48
  6137  09B2  1903               	skipnz
  6138  09B3  29A4               	goto	l4963
  6139  09B4  3A01               	xorlw	1	; case 49
  6140  09B5  1903               	skipnz
  6141  09B6  29A4               	goto	l4963
  6142  09B7  3A03               	xorlw	3	; case 50
  6143  09B8  1903               	skipnz
  6144  09B9  29A4               	goto	l4963
  6145  09BA  3A01               	xorlw	1	; case 51
  6146  09BB  1903               	skipnz
  6147  09BC  29A4               	goto	l4963
  6148  09BD  3A07               	xorlw	7	; case 52
  6149  09BE  1903               	skipnz
  6150  09BF  29A4               	goto	l4963
  6151  09C0  3A01               	xorlw	1	; case 53
  6152  09C1  1903               	skipnz
  6153  09C2  29A4               	goto	l4963
  6154  09C3  3A03               	xorlw	3	; case 54
  6155  09C4  1903               	skipnz
  6156  09C5  29A4               	goto	l4963
  6157  09C6  3A01               	xorlw	1	; case 55
  6158  09C7  1903               	skipnz
  6159  09C8  29A4               	goto	l4963
  6160  09C9  3A71               	xorlw	113	; case 70
  6161  09CA  1903               	skipnz
  6162  09CB  29A4               	goto	l4963
  6163  09CC  3A12               	xorlw	18	; case 84
  6164  09CD  1903               	skipnz
  6165  09CE  29A4               	goto	l4963
  6166  09CF  3A01               	xorlw	1	; case 85
  6167  09D0  1903               	skipnz
  6168  09D1  29A4               	goto	l4963
  6169  09D2  29A6               	goto	l5007
  6170  09D3  0008               	return
  6171  09D4                     __end_of_check_data:	
  6172                           
  6173                           	psect	text14
  6174  160C                     __ptext14:	
  6175 ;; *************** function _SYSTEM_Initialize *****************
  6176 ;; Defined at:
  6177 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;		None
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;		None
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  1    wreg      void 
  6184 ;; Registers used:
  6185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6191 ;;      Params:         0       0       0       0       0       0       0       0
  6192 ;;      Locals:         0       0       0       0       0       0       0       0
  6193 ;;      Temps:          0       0       0       0       0       0       0       0
  6194 ;;      Totals:         0       0       0       0       0       0       0       0
  6195 ;;Total ram usage:        0 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; Hardware stack levels required when called:    9
  6198 ;; This function calls:
  6199 ;;		_EUSART_Initialize
  6200 ;;		_MTOUCH_Initialize
  6201 ;;		_OSCILLATOR_Initialize
  6202 ;;		_PIN_MANAGER_Initialize
  6203 ;;		_TMR2_Initialize
  6204 ;;		_WDT_Initialize
  6205 ;; This function is called by:
  6206 ;;		_main
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           
  6211                           ;psect for function _SYSTEM_Initialize
  6212  160C                     _SYSTEM_Initialize:	
  6213                           
  6214                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  6215                           
  6216                           ;incstack = 0
  6217                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6218  160C  3188  2000  3196   	fcall	_PIN_MANAGER_Initialize
  6219                           
  6220                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  6221  160F  3194  24DC  3196   	fcall	_OSCILLATOR_Initialize
  6222                           
  6223                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  6224  1612  3194  24A4  3196   	fcall	_WDT_Initialize
  6225                           
  6226                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  6227  1615  3195  250E  3196   	fcall	_TMR2_Initialize
  6228                           
  6229                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  6230  1618  318A  2277  3196   	fcall	_EUSART_Initialize
  6231                           
  6232                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  6233  161B  3195  2533         	fcall	_MTOUCH_Initialize
  6234  161D  0008               	return
  6235  161E                     __end_of_SYSTEM_Initialize:	
  6236                           
  6237                           	psect	text15
  6238  14A4                     __ptext15:	
  6239 ;; *************** function _WDT_Initialize *****************
  6240 ;; Defined at:
  6241 ;;		line 69 in file "mcc_generated_files/mcc.c"
  6242 ;; Parameters:    Size  Location     Type
  6243 ;;		None
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;		None
  6246 ;; Return value:  Size  Location     Type
  6247 ;;                  1    wreg      void 
  6248 ;; Registers used:
  6249 ;;		wreg
  6250 ;; Tracked objects:
  6251 ;;		On entry : 0/0
  6252 ;;		On exit  : 0/0
  6253 ;;		Unchanged: 0/0
  6254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6255 ;;      Params:         0       0       0       0       0       0       0       0
  6256 ;;      Locals:         0       0       0       0       0       0       0       0
  6257 ;;      Temps:          0       0       0       0       0       0       0       0
  6258 ;;      Totals:         0       0       0       0       0       0       0       0
  6259 ;;Total ram usage:        0 bytes
  6260 ;; Hardware stack levels used:    1
  6261 ;; Hardware stack levels required when called:    4
  6262 ;; This function calls:
  6263 ;;		Nothing
  6264 ;; This function is called by:
  6265 ;;		_SYSTEM_Initialize
  6266 ;; This function uses a non-reentrant model
  6267 ;;
  6268                           
  6269                           
  6270                           ;psect for function _WDT_Initialize
  6271  14A4                     _WDT_Initialize:	
  6272                           
  6273                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  6274                           
  6275                           ;incstack = 0
  6276                           ; Regs used in _WDT_Initialize: [wreg]
  6277  14A4  3016               	movlw	22
  6278  14A5  0021               	movlb	1	; select bank1
  6279  14A6  0097               	movwf	23	;volatile
  6280  14A7  0008               	return
  6281  14A8                     __end_of_WDT_Initialize:	
  6282                           
  6283                           	psect	text16
  6284  150E                     __ptext16:	
  6285 ;; *************** function _TMR2_Initialize *****************
  6286 ;; Defined at:
  6287 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;		None
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;		None
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  1    wreg      void 
  6294 ;; Registers used:
  6295 ;;		wreg, status,2
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6301 ;;      Params:         0       0       0       0       0       0       0       0
  6302 ;;      Locals:         0       0       0       0       0       0       0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0       0
  6304 ;;      Totals:         0       0       0       0       0       0       0       0
  6305 ;;Total ram usage:        0 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    4
  6308 ;; This function calls:
  6309 ;;		Nothing
  6310 ;; This function is called by:
  6311 ;;		_SYSTEM_Initialize
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           
  6316                           ;psect for function _TMR2_Initialize
  6317  150E                     _TMR2_Initialize:	
  6318                           
  6319                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  6320                           
  6321                           ;incstack = 0
  6322                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6323  150E  30FF               	movlw	255
  6324  150F  0020               	movlb	0	; select bank0
  6325  1510  009B               	movwf	27	;volatile
  6326                           
  6327                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  6328  1511  019A               	clrf	26	;volatile
  6329                           
  6330                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  6331  1512  1091               	bcf	17,1	;volatile
  6332                           
  6333                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  6334  1513  3004               	movlw	4
  6335  1514  009C               	movwf	28	;volatile
  6336  1515  0008               	return
  6337  1516                     __end_of_TMR2_Initialize:	
  6338                           
  6339                           	psect	text17
  6340  0800                     __ptext17:	
  6341 ;; *************** function _PIN_MANAGER_Initialize *****************
  6342 ;; Defined at:
  6343 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;		None
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;		None
  6348 ;; Return value:  Size  Location     Type
  6349 ;;                  1    wreg      void 
  6350 ;; Registers used:
  6351 ;;		wreg, status,2
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6357 ;;      Params:         0       0       0       0       0       0       0       0
  6358 ;;      Locals:         0       0       0       0       0       0       0       0
  6359 ;;      Temps:          0       0       0       0       0       0       0       0
  6360 ;;      Totals:         0       0       0       0       0       0       0       0
  6361 ;;Total ram usage:        0 bytes
  6362 ;; Hardware stack levels used:    1
  6363 ;; Hardware stack levels required when called:    4
  6364 ;; This function calls:
  6365 ;;		Nothing
  6366 ;; This function is called by:
  6367 ;;		_SYSTEM_Initialize
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           
  6372                           ;psect for function _PIN_MANAGER_Initialize
  6373  0800                     _PIN_MANAGER_Initialize:	
  6374                           
  6375                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  6376                           
  6377                           ;incstack = 0
  6378                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6379  0800  3037               	movlw	55
  6380  0801  0022               	movlb	2	; select bank2
  6381  0802  008C               	movwf	12	;volatile
  6382                           
  6383                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x60;
  6384  0803  3060               	movlw	96
  6385  0804  008D               	movwf	13	;volatile
  6386                           
  6387                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xAC;
  6388  0805  30AC               	movlw	172
  6389  0806  008E               	movwf	14	;volatile
  6390                           
  6391                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  6392  0807  3008               	movlw	8
  6393  0808  0021               	movlb	1	; select bank1
  6394  0809  008C               	movwf	12	;volatile
  6395                           
  6396                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x20;
  6397  080A  3020               	movlw	32
  6398  080B  008D               	movwf	13	;volatile
  6399                           
  6400                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x40;
  6401  080C  3040               	movlw	64
  6402  080D  008E               	movwf	14	;volatile
  6403                           
  6404                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xEC;
  6405  080E  30EC               	movlw	236
  6406  080F  0023               	movlb	3	; select bank3
  6407  0810  008E               	movwf	14	;volatile
  6408                           
  6409                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  6410  0811  3040               	movlw	64
  6411  0812  008D               	movwf	13	;volatile
  6412                           
  6413                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  6414  0813  3037               	movlw	55
  6415  0814  008C               	movwf	12	;volatile
  6416                           
  6417                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  6418  0815  0024               	movlb	4	; select bank4
  6419  0816  018D               	clrf	13	;volatile
  6420                           
  6421                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  6422  0817  018C               	clrf	12	;volatile
  6423                           
  6424                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  6425  0818  0021               	movlb	1	; select bank1
  6426  0819  1795               	bsf	21,7	;volatile
  6427                           
  6428                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  6429  081A  0022               	movlb	2	; select bank2
  6430  081B  019D               	clrf	29	;volatile
  6431  081C  0008               	return
  6432  081D                     __end_of_PIN_MANAGER_Initialize:	
  6433                           
  6434                           	psect	text18
  6435  14DC                     __ptext18:	
  6436 ;; *************** function _OSCILLATOR_Initialize *****************
  6437 ;; Defined at:
  6438 ;;		line 61 in file "mcc_generated_files/mcc.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  1    wreg      void 
  6445 ;; Registers used:
  6446 ;;		wreg, status,2
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6452 ;;      Params:         0       0       0       0       0       0       0       0
  6453 ;;      Locals:         0       0       0       0       0       0       0       0
  6454 ;;      Temps:          0       0       0       0       0       0       0       0
  6455 ;;      Totals:         0       0       0       0       0       0       0       0
  6456 ;;Total ram usage:        0 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    4
  6459 ;; This function calls:
  6460 ;;		Nothing
  6461 ;; This function is called by:
  6462 ;;		_SYSTEM_Initialize
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _OSCILLATOR_Initialize
  6468  14DC                     _OSCILLATOR_Initialize:	
  6469                           
  6470                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  6471                           
  6472                           ;incstack = 0
  6473                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6474  14DC  30F0               	movlw	240
  6475  14DD  0021               	movlb	1	; select bank1
  6476  14DE  0099               	movwf	25	;volatile
  6477                           
  6478                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  6479  14DF  0022               	movlb	2	; select bank2
  6480  14E0  0196               	clrf	22	;volatile
  6481  14E1  0008               	return
  6482  14E2                     __end_of_OSCILLATOR_Initialize:	
  6483                           
  6484                           	psect	text19
  6485  1533                     __ptext19:	
  6486 ;; *************** function _MTOUCH_Initialize *****************
  6487 ;; Defined at:
  6488 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;		None
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;		None
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  1    wreg      void 
  6495 ;; Registers used:
  6496 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6502 ;;      Params:         0       0       0       0       0       0       0       0
  6503 ;;      Locals:         0       0       0       0       0       0       0       0
  6504 ;;      Temps:          0       0       0       0       0       0       0       0
  6505 ;;      Totals:         0       0       0       0       0       0       0       0
  6506 ;;Total ram usage:        0 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    8
  6509 ;; This function calls:
  6510 ;;		_MTOUCH_Button_InitializeAll
  6511 ;;		_MTOUCH_Sensor_InitializeAll
  6512 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6513 ;;		_MTOUCH_Sensor_Scan_Initialize
  6514 ;; This function is called by:
  6515 ;;		_SYSTEM_Initialize
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           
  6520                           ;psect for function _MTOUCH_Initialize
  6521  1533                     _MTOUCH_Initialize:	
  6522                           
  6523                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  6524                           
  6525                           ;incstack = 0
  6526                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6527  1533  3195  2569  3195   	fcall	_MTOUCH_Sensor_InitializeAll
  6528                           
  6529                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  6530  1536  3197  2738  3195   	fcall	_MTOUCH_Button_InitializeAll
  6531                           
  6532                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  6533  1539  3196  261E  3195   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6534                           
  6535                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  6536  153C  3195  25A5         	fcall	_MTOUCH_Sensor_Scan_Initialize
  6537  153E  0008               	return
  6538  153F                     __end_of_MTOUCH_Initialize:	
  6539                           
  6540                           	psect	text20
  6541  1569                     __ptext20:	
  6542 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  6543 ;; Defined at:
  6544 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;		None
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;  sensor          1   10[COMMON] enum E2854
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  1    wreg      void 
  6551 ;; Registers used:
  6552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6558 ;;      Params:         0       0       0       0       0       0       0       0
  6559 ;;      Locals:         1       0       0       0       0       0       0       0
  6560 ;;      Temps:          1       0       0       0       0       0       0       0
  6561 ;;      Totals:         2       0       0       0       0       0       0       0
  6562 ;;Total ram usage:        2 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    7
  6565 ;; This function calls:
  6566 ;;		_MTOUCH_Sensor_Initialize
  6567 ;; This function is called by:
  6568 ;;		_MTOUCH_Initialize
  6569 ;; This function uses a non-reentrant model
  6570 ;;
  6571                           
  6572                           
  6573                           ;psect for function _MTOUCH_Sensor_InitializeAll
  6574  1569                     _MTOUCH_Sensor_InitializeAll:	
  6575                           
  6576                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 225:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 227:     for (sensor = 0; sensor < 3u; sensor
      +                          ++)
  6577                           
  6578                           ;incstack = 0
  6579                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6580  1569  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  6581  156A                     l6131:	
  6582                           
  6583                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 229:         MTOUCH_Sensor_Initialize(sensor);
  6584  156A  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  6585  156B  3196  2631  3195   	fcall	_MTOUCH_Sensor_Initialize
  6586                           
  6587                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     }
  6588  156E  3001               	movlw	1
  6589  156F  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  6590  1570  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  6591  1571  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  6592  1572  3003               	movlw	3
  6593  1573  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  6594  1574  1803               	btfsc	3,0
  6595  1575  0008               	return
  6596  1576  2D6A               	goto	l6131
  6597  1577                     __end_of_MTOUCH_Sensor_InitializeAll:	
  6598                           
  6599                           	psect	text21
  6600  1631                     __ptext21:	
  6601 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  6602 ;; Defined at:
  6603 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;  sensor          1    wreg     enum E2854
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;  sensor          1    8[COMMON] enum E2854
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  1    wreg      enum E2858
  6610 ;; Registers used:
  6611 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6617 ;;      Params:         0       0       0       0       0       0       0       0
  6618 ;;      Locals:         1       0       0       0       0       0       0       0
  6619 ;;      Temps:          1       0       0       0       0       0       0       0
  6620 ;;      Totals:         2       0       0       0       0       0       0       0
  6621 ;;Total ram usage:        2 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:    6
  6624 ;; This function calls:
  6625 ;;		_MTOUCH_Sensor_Calibrate
  6626 ;;		_MTOUCH_Sensor_Enable
  6627 ;;		_Sensor_Sampled_Reset
  6628 ;;		___bmul
  6629 ;; This function is called by:
  6630 ;;		_MTOUCH_Sensor_InitializeAll
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _MTOUCH_Sensor_Initialize
  6636  1631                     _MTOUCH_Sensor_Initialize:	
  6637                           
  6638                           ;incstack = 0
  6639                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6640                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  6641  1631  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  6642                           
  6643                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           209: {;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     MTOUCH_Sensor_Enable(sensor
      +                          );
  6644  1632  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6645  1633  3195  25FA  3196   	fcall	_MTOUCH_Sensor_Enable
  6646                           
  6647                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 212:     MTOUCH_Sensor_Calibrate(sensor);
  6648  1636  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6649  1637  3195  25E8  3196   	fcall	_MTOUCH_Sensor_Calibrate
  6650                           
  6651                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  6652  163A  3009               	movlw	9
  6653  163B  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  6654  163C  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  6655  163D  00F1               	movwf	___bmul@multiplicand
  6656  163E  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6657  163F  3195  25B5  3196   	fcall	___bmul
  6658  1642  3E50               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  6659  1643  3195  2506         	fcall	_Sensor_Sampled_Reset
  6660  1645  0008               	return
  6661  1646                     __end_of_MTOUCH_Sensor_Initialize:	
  6662                           
  6663                           	psect	text22
  6664  15FA                     __ptext22:	
  6665 ;; *************** function _MTOUCH_Sensor_Enable *****************
  6666 ;; Defined at:
  6667 ;;		line 841 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;  sensor          1    wreg     enum E2854
  6670 ;; Auto vars:     Size  Location     Type
  6671 ;;  sensor          1    6[COMMON] enum E2854
  6672 ;; Return value:  Size  Location     Type
  6673 ;;                  1    wreg      void 
  6674 ;; Registers used:
  6675 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6676 ;; Tracked objects:
  6677 ;;		On entry : 0/0
  6678 ;;		On exit  : 0/0
  6679 ;;		Unchanged: 0/0
  6680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6681 ;;      Params:         0       0       0       0       0       0       0       0
  6682 ;;      Locals:         1       0       0       0       0       0       0       0
  6683 ;;      Temps:          1       0       0       0       0       0       0       0
  6684 ;;      Totals:         2       0       0       0       0       0       0       0
  6685 ;;Total ram usage:        2 bytes
  6686 ;; Hardware stack levels used:    1
  6687 ;; Hardware stack levels required when called:    5
  6688 ;; This function calls:
  6689 ;;		___bmul
  6690 ;; This function is called by:
  6691 ;;		_MTOUCH_Sensor_Initialize
  6692 ;; This function uses a non-reentrant model
  6693 ;;
  6694                           
  6695                           
  6696                           ;psect for function _MTOUCH_Sensor_Enable
  6697  15FA                     _MTOUCH_Sensor_Enable:	
  6698                           
  6699                           ;incstack = 0
  6700                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6701                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  6702  15FA  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  6703                           
  6704                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 842: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 843:     if(sensor < 3u)
  6705  15FB  3003               	movlw	3
  6706  15FC  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  6707  15FD  1803               	skipnc
  6708  15FE  0008               	return
  6709                           
  6710                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 844:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  6711  15FF  3009               	movlw	9
  6712  1600  00F5               	movwf	??_MTOUCH_Sensor_Enable
  6713  1601  0875               	movf	??_MTOUCH_Sensor_Enable,w
  6714  1602  00F1               	movwf	___bmul@multiplicand
  6715  1603  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  6716  1604  3195  25B5         	fcall	___bmul
  6717  1606  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  6718  1607  0086               	movwf	6
  6719  1608  3001               	movlw	1	; select bank2/3
  6720  1609  0087               	movwf	7
  6721  160A  1581               	bsf	1,3
  6722  160B  0008               	return
  6723  160C                     __end_of_MTOUCH_Sensor_Enable:	
  6724                           
  6725                           	psect	text23
  6726  1738                     __ptext23:	
  6727 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  6728 ;; Defined at:
  6729 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;		None
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;  button          1    0[BANK0 ] enum E3069
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      void 
  6736 ;; Registers used:
  6737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6743 ;;      Params:         0       0       0       0       0       0       0       0
  6744 ;;      Locals:         0       1       0       0       0       0       0       0
  6745 ;;      Temps:          1       0       0       0       0       0       0       0
  6746 ;;      Totals:         1       1       0       0       0       0       0       0
  6747 ;;Total ram usage:        2 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:    7
  6750 ;; This function calls:
  6751 ;;		_MTOUCH_Button_Initialize
  6752 ;;		_memcpy
  6753 ;; This function is called by:
  6754 ;;		_MTOUCH_Initialize
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           
  6759                           ;psect for function _MTOUCH_Button_InitializeAll
  6760  1738                     _MTOUCH_Button_InitializeAll:	
  6761                           
  6762                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 175:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  6763                           
  6764                           ;incstack = 0
  6765                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6766  1738  3000               	movlw	low (_mtouch_button_init| (0+32768))
  6767  1739  00F1               	movwf	memcpy@s1
  6768  173A  3090               	movlw	high (_mtouch_button_init| (0+32768))
  6769  173B  00F2               	movwf	memcpy@s1+1
  6770  173C  3030               	movlw	48
  6771  173D  00F3               	movwf	memcpy@n
  6772  173E  3000               	movlw	0
  6773  173F  00F4               	movwf	memcpy@n+1
  6774  1740  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  6775  1741  3188  20BB  3197   	fcall	_memcpy
  6776                           
  6777                           ;mcc_generated_files/mtouch/mtouch_button.c: 177:     for (button = 0; button < 3u; butt
      +                          on++)
  6778  1744  0020               	movlb	0	; select bank0
  6779  1745  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  6780  1746                     l6145:	
  6781                           
  6782                           ;mcc_generated_files/mtouch/mtouch_button.c: 178:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 179:         MTOUCH_Button_Initialize(button);
  6783  1746  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  6784  1747  318A  2209  3197   	fcall	_MTOUCH_Button_Initialize
  6785                           
  6786                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     }
  6787  174A  3001               	movlw	1
  6788  174B  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  6789  174C  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  6790  174D  0020               	movlb	0	; select bank0
  6791  174E  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  6792  174F  3003               	movlw	3
  6793  1750  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  6794  1751  1803               	btfsc	3,0
  6795  1752  0008               	return
  6796  1753  2F46               	goto	l6145
  6797  1754                     __end_of_MTOUCH_Button_InitializeAll:	
  6798                           
  6799                           	psect	text24
  6800  08BB                     __ptext24:	
  6801 ;; *************** function _memcpy *****************
  6802 ;; Defined at:
  6803 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;  d1              1    wreg     PTR void 
  6806 ;;		 -> mtouch_button(48), 
  6807 ;;  s1              2    1[COMMON] PTR const void 
  6808 ;;		 -> mtouch_button_init(48), 
  6809 ;;  n               2    3[COMMON] unsigned int 
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;  d1              1    9[COMMON] PTR void 
  6812 ;;		 -> mtouch_button(48), 
  6813 ;;  s               2    7[COMMON] PTR const unsigned char 
  6814 ;;		 -> mtouch_button_init(48), 
  6815 ;;  d               1   10[COMMON] PTR unsigned char 
  6816 ;;		 -> mtouch_button(48), 
  6817 ;;  tmp             1    6[COMMON] unsigned char 
  6818 ;; Return value:  Size  Location     Type
  6819 ;;                  1    wreg      PTR void 
  6820 ;; Registers used:
  6821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6822 ;; Tracked objects:
  6823 ;;		On entry : 0/0
  6824 ;;		On exit  : 0/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6827 ;;      Params:         4       0       0       0       0       0       0       0
  6828 ;;      Locals:         5       0       0       0       0       0       0       0
  6829 ;;      Temps:          1       0       0       0       0       0       0       0
  6830 ;;      Totals:        10       0       0       0       0       0       0       0
  6831 ;;Total ram usage:       10 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; Hardware stack levels required when called:    4
  6834 ;; This function calls:
  6835 ;;		Nothing
  6836 ;; This function is called by:
  6837 ;;		_MTOUCH_Button_InitializeAll
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           
  6842                           ;psect for function _memcpy
  6843  08BB                     _memcpy:	
  6844                           
  6845                           ;incstack = 0
  6846                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  6847                           ;memcpy@d1 stored from wreg
  6848  08BB  00F9               	movwf	memcpy@d1
  6849  08BC  0872               	movf	memcpy@s1+1,w
  6850  08BD  00F8               	movwf	memcpy@s+1
  6851  08BE  0871               	movf	memcpy@s1,w
  6852  08BF  00F7               	movwf	memcpy@s
  6853  08C0  0879               	movf	memcpy@d1,w
  6854  08C1  00F5               	movwf	??_memcpy
  6855  08C2  0875               	movf	??_memcpy,w
  6856  08C3  00FA               	movwf	memcpy@d
  6857  08C4                     l6029:	
  6858  08C4  3001               	movlw	1
  6859  08C5  02F3               	subwf	memcpy@n,f
  6860  08C6  3000               	movlw	0
  6861  08C7  3BF4               	subwfb	memcpy@n+1,f
  6862  08C8  0A73               	incf	memcpy@n,w
  6863  08C9  1903               	btfsc	3,2
  6864  08CA  0A74               	incf	memcpy@n+1,w
  6865  08CB  1903               	btfsc	3,2
  6866  08CC  0008               	return
  6867  08CD  0877               	movf	memcpy@s,w
  6868  08CE  0084               	movwf	4
  6869  08CF  0878               	movf	memcpy@s+1,w
  6870  08D0  0085               	movwf	5
  6871  08D1  0800               	movf	0,w	;code access
  6872  08D2  00F5               	movwf	??_memcpy
  6873  08D3  0875               	movf	??_memcpy,w
  6874  08D4  00F6               	movwf	memcpy@tmp
  6875  08D5  3001               	movlw	1
  6876  08D6  07F7               	addwf	memcpy@s,f
  6877  08D7  3000               	movlw	0
  6878  08D8  3DF8               	addwfc	memcpy@s+1,f
  6879  08D9  0876               	movf	memcpy@tmp,w
  6880  08DA  00F5               	movwf	??_memcpy
  6881  08DB  087A               	movf	memcpy@d,w
  6882  08DC  0086               	movwf	6
  6883  08DD  3001               	movlw	1	; select bank2/3
  6884  08DE  0087               	movwf	7
  6885  08DF  0875               	movf	??_memcpy,w
  6886  08E0  0081               	movwf	1
  6887  08E1  3001               	movlw	1
  6888  08E2  00F5               	movwf	??_memcpy
  6889  08E3  0875               	movf	??_memcpy,w
  6890  08E4  07FA               	addwf	memcpy@d,f
  6891  08E5  28C4               	goto	l6029
  6892  08E6                     __end_of_memcpy:	
  6893                           
  6894                           	psect	text25
  6895  0A77                     __ptext25:	
  6896 ;; *************** function _EUSART_Initialize *****************
  6897 ;; Defined at:
  6898 ;;		line 85 in file "mcc_generated_files/eusart.c"
  6899 ;; Parameters:    Size  Location     Type
  6900 ;;		None
  6901 ;; Auto vars:     Size  Location     Type
  6902 ;;		None
  6903 ;; Return value:  Size  Location     Type
  6904 ;;                  1    wreg      void 
  6905 ;; Registers used:
  6906 ;;		wreg, status,2, status,0, pclath, cstack
  6907 ;; Tracked objects:
  6908 ;;		On entry : 0/0
  6909 ;;		On exit  : 0/0
  6910 ;;		Unchanged: 0/0
  6911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6912 ;;      Params:         0       0       0       0       0       0       0       0
  6913 ;;      Locals:         0       0       0       0       0       0       0       0
  6914 ;;      Temps:          1       0       0       0       0       0       0       0
  6915 ;;      Totals:         1       0       0       0       0       0       0       0
  6916 ;;Total ram usage:        1 bytes
  6917 ;; Hardware stack levels used:    1
  6918 ;; Hardware stack levels required when called:    5
  6919 ;; This function calls:
  6920 ;;		_EUSART_SetErrorHandler
  6921 ;;		_EUSART_SetFramingErrorHandler
  6922 ;;		_EUSART_SetOverrunErrorHandler
  6923 ;;		_EUSART_SetRxInterruptHandler
  6924 ;;		_EUSART_SetTxInterruptHandler
  6925 ;; This function is called by:
  6926 ;;		_SYSTEM_Initialize
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           
  6931                           ;psect for function _EUSART_Initialize
  6932  0A77                     _EUSART_Initialize:	
  6933                           
  6934                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
  6935                           
  6936                           ;incstack = 0
  6937                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6938  0A77  0021               	movlb	1	; select bank1
  6939  0A78  1291               	bcf	17,5	;volatile
  6940                           
  6941                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  6942  0A79  3070               	movlw	low _EUSART_Receive_ISR
  6943  0A7A  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  6944  0A7B  3009               	movlw	high _EUSART_Receive_ISR
  6945  0A7C  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  6946  0A7D  3194  24D0  318A   	fcall	_EUSART_SetRxInterruptHandler
  6947                           
  6948                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
  6949  0A80  0021               	movlb	1	; select bank1
  6950  0A81  1211               	bcf	17,4	;volatile
  6951                           
  6952                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  6953  0A82  3054               	movlw	low _EUSART_Transmit_ISR
  6954  0A83  00F1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  6955  0A84  3017               	movlw	high _EUSART_Transmit_ISR
  6956  0A85  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  6957  0A86  3194  24D6  318A   	fcall	_EUSART_SetTxInterruptHandler
  6958                           
  6959                           ;mcc_generated_files/eusart.c: 95:     BAUDCON = 0x0A;
  6960  0A89  300A               	movlw	10
  6961  0A8A  0023               	movlb	3	; select bank3
  6962  0A8B  009F               	movwf	31	;volatile
  6963                           
  6964                           ;mcc_generated_files/eusart.c: 98:     RCSTA = 0x90;
  6965  0A8C  3090               	movlw	144
  6966  0A8D  009D               	movwf	29	;volatile
  6967                           
  6968                           ;mcc_generated_files/eusart.c: 101:     TXSTA = 0x24;
  6969  0A8E  3024               	movlw	36
  6970  0A8F  009E               	movwf	30	;volatile
  6971                           
  6972                           ;mcc_generated_files/eusart.c: 104:     SPBRGL = 0x40;
  6973  0A90  3040               	movlw	64
  6974  0A91  009B               	movwf	27	;volatile
  6975                           
  6976                           ;mcc_generated_files/eusart.c: 107:     SPBRGH = 0x03;
  6977  0A92  3003               	movlw	3
  6978  0A93  009C               	movwf	28	;volatile
  6979                           
  6980                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  6981  0A94  3073               	movlw	low _EUSART_DefaultFramingErrorHandler
  6982  0A95  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6983  0A96  3014               	movlw	high _EUSART_DefaultFramingErrorHandler
  6984  0A97  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6985  0A98  3194  24C4  318A   	fcall	_EUSART_SetFramingErrorHandler
  6986                           
  6987                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  6988  0A9B  3088               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6989  0A9C  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6990  0A9D  3014               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6991  0A9E  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6992  0A9F  3194  24CA  318A   	fcall	_EUSART_SetOverrunErrorHandler
  6993                           
  6994                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  6995  0AA2  3076               	movlw	low _EUSART_DefaultErrorHandler
  6996  0AA3  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  6997  0AA4  3014               	movlw	high _EUSART_DefaultErrorHandler
  6998  0AA5  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6999  0AA6  3194  24BE         	fcall	_EUSART_SetErrorHandler
  7000                           
  7001                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
  7002  0AA8  0020               	movlb	0	; select bank0
  7003  0AA9  01E4               	clrf	_eusartRxLastError	;volatile
  7004                           
  7005                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
  7006  0AAA  01E8               	clrf	_eusartTxHead	;volatile
  7007                           
  7008                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
  7009  0AAB  01E7               	clrf	_eusartTxTail	;volatile
  7010                           
  7011                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  7012  0AAC  3008               	movlw	8
  7013  0AAD  00F3               	movwf	??_EUSART_Initialize
  7014  0AAE  0873               	movf	??_EUSART_Initialize,w
  7015  0AAF  0021               	movlb	1	; select bank1
  7016  0AB0  00CE               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  7017                           
  7018                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
  7019  0AB1  01FC               	clrf	_eusartRxHead	;volatile
  7020                           
  7021                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
  7022  0AB2  0020               	movlb	0	; select bank0
  7023  0AB3  01E6               	clrf	_eusartRxTail	;volatile
  7024                           
  7025                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
  7026  0AB4  01E5               	clrf	_eusartRxCount	;volatile
  7027                           
  7028                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
  7029  0AB5  0021               	movlb	1	; select bank1
  7030  0AB6  1691               	bsf	17,5	;volatile
  7031  0AB7  0008               	return
  7032  0AB8                     __end_of_EUSART_Initialize:	
  7033                           
  7034                           	psect	text26
  7035  14D6                     __ptext26:	
  7036 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  7037 ;; Defined at:
  7038 ;;		line 282 in file "mcc_generated_files/eusart.c"
  7039 ;; Parameters:    Size  Location     Type
  7040 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7041 ;;		 -> EUSART_Transmit_ISR(1), 
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;		None
  7044 ;; Return value:  Size  Location     Type
  7045 ;;                  1    wreg      void 
  7046 ;; Registers used:
  7047 ;;		wreg
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7053 ;;      Params:         2       0       0       0       0       0       0       0
  7054 ;;      Locals:         0       0       0       0       0       0       0       0
  7055 ;;      Temps:          0       0       0       0       0       0       0       0
  7056 ;;      Totals:         2       0       0       0       0       0       0       0
  7057 ;;Total ram usage:        2 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    4
  7060 ;; This function calls:
  7061 ;;		Nothing
  7062 ;; This function is called by:
  7063 ;;		_EUSART_Initialize
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           
  7068                           ;psect for function _EUSART_SetTxInterruptHandler
  7069  14D6                     _EUSART_SetTxInterruptHandler:	
  7070                           
  7071                           ;mcc_generated_files/eusart.c: 283:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  7072                           
  7073                           ;incstack = 0
  7074                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  7075  14D6  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  7076  14D7  0021               	movlb	1	; select bank1
  7077  14D8  00CD               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  7078  14D9  0871               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  7079  14DA  00CC               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  7080  14DB  0008               	return
  7081  14DC                     __end_of_EUSART_SetTxInterruptHandler:	
  7082                           
  7083                           	psect	text27
  7084  14D0                     __ptext27:	
  7085 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  7086 ;; Defined at:
  7087 ;;		line 286 in file "mcc_generated_files/eusart.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7090 ;;		 -> EUSART_Receive_ISR(1), 
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;		None
  7093 ;; Return value:  Size  Location     Type
  7094 ;;                  1    wreg      void 
  7095 ;; Registers used:
  7096 ;;		wreg
  7097 ;; Tracked objects:
  7098 ;;		On entry : 0/0
  7099 ;;		On exit  : 0/0
  7100 ;;		Unchanged: 0/0
  7101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7102 ;;      Params:         2       0       0       0       0       0       0       0
  7103 ;;      Locals:         0       0       0       0       0       0       0       0
  7104 ;;      Temps:          0       0       0       0       0       0       0       0
  7105 ;;      Totals:         2       0       0       0       0       0       0       0
  7106 ;;Total ram usage:        2 bytes
  7107 ;; Hardware stack levels used:    1
  7108 ;; Hardware stack levels required when called:    4
  7109 ;; This function calls:
  7110 ;;		Nothing
  7111 ;; This function is called by:
  7112 ;;		_EUSART_Initialize
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           
  7117                           ;psect for function _EUSART_SetRxInterruptHandler
  7118  14D0                     _EUSART_SetRxInterruptHandler:	
  7119                           
  7120                           ;mcc_generated_files/eusart.c: 287:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  7121                           
  7122                           ;incstack = 0
  7123                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  7124  14D0  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  7125  14D1  0021               	movlb	1	; select bank1
  7126  14D2  00CB               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  7127  14D3  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  7128  14D4  00CA               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  7129  14D5  0008               	return
  7130  14D6                     __end_of_EUSART_SetRxInterruptHandler:	
  7131                           
  7132                           	psect	text28
  7133  14CA                     __ptext28:	
  7134 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7135 ;; Defined at:
  7136 ;;		line 274 in file "mcc_generated_files/eusart.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7139 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;		None
  7142 ;; Return value:  Size  Location     Type
  7143 ;;                  1    wreg      void 
  7144 ;; Registers used:
  7145 ;;		wreg
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/0
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7151 ;;      Params:         2       0       0       0       0       0       0       0
  7152 ;;      Locals:         0       0       0       0       0       0       0       0
  7153 ;;      Temps:          0       0       0       0       0       0       0       0
  7154 ;;      Totals:         2       0       0       0       0       0       0       0
  7155 ;;Total ram usage:        2 bytes
  7156 ;; Hardware stack levels used:    1
  7157 ;; Hardware stack levels required when called:    4
  7158 ;; This function calls:
  7159 ;;		Nothing
  7160 ;; This function is called by:
  7161 ;;		_EUSART_Initialize
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           
  7166                           ;psect for function _EUSART_SetOverrunErrorHandler
  7167  14CA                     _EUSART_SetOverrunErrorHandler:	
  7168                           
  7169                           ;mcc_generated_files/eusart.c: 275:     EUSART_OverrunErrorHandler = interruptHandler;
  7170                           
  7171                           ;incstack = 0
  7172                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7173  14CA  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  7174  14CB  0021               	movlb	1	; select bank1
  7175  14CC  00C7               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  7176  14CD  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  7177  14CE  00C6               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  7178  14CF  0008               	return
  7179  14D0                     __end_of_EUSART_SetOverrunErrorHandler:	
  7180                           
  7181                           	psect	text29
  7182  14C4                     __ptext29:	
  7183 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7184 ;; Defined at:
  7185 ;;		line 270 in file "mcc_generated_files/eusart.c"
  7186 ;; Parameters:    Size  Location     Type
  7187 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7188 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;		None
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  1    wreg      void 
  7193 ;; Registers used:
  7194 ;;		wreg
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7200 ;;      Params:         2       0       0       0       0       0       0       0
  7201 ;;      Locals:         0       0       0       0       0       0       0       0
  7202 ;;      Temps:          0       0       0       0       0       0       0       0
  7203 ;;      Totals:         2       0       0       0       0       0       0       0
  7204 ;;Total ram usage:        2 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; Hardware stack levels required when called:    4
  7207 ;; This function calls:
  7208 ;;		Nothing
  7209 ;; This function is called by:
  7210 ;;		_EUSART_Initialize
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           
  7215                           ;psect for function _EUSART_SetFramingErrorHandler
  7216  14C4                     _EUSART_SetFramingErrorHandler:	
  7217                           
  7218                           ;mcc_generated_files/eusart.c: 271:     EUSART_FramingErrorHandler = interruptHandler;
  7219                           
  7220                           ;incstack = 0
  7221                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7222  14C4  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  7223  14C5  0021               	movlb	1	; select bank1
  7224  14C6  00C9               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  7225  14C7  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  7226  14C8  00C8               	movwf	_EUSART_FramingErrorHandler^(0+128)
  7227  14C9  0008               	return
  7228  14CA                     __end_of_EUSART_SetFramingErrorHandler:	
  7229                           
  7230                           	psect	text30
  7231  14BE                     __ptext30:	
  7232 ;; *************** function _EUSART_SetErrorHandler *****************
  7233 ;; Defined at:
  7234 ;;		line 278 in file "mcc_generated_files/eusart.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7237 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      void 
  7242 ;; Registers used:
  7243 ;;		wreg
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7249 ;;      Params:         2       0       0       0       0       0       0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0
  7251 ;;      Temps:          0       0       0       0       0       0       0       0
  7252 ;;      Totals:         2       0       0       0       0       0       0       0
  7253 ;;Total ram usage:        2 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    4
  7256 ;; This function calls:
  7257 ;;		Nothing
  7258 ;; This function is called by:
  7259 ;;		_EUSART_Initialize
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function _EUSART_SetErrorHandler
  7265  14BE                     _EUSART_SetErrorHandler:	
  7266                           
  7267                           ;mcc_generated_files/eusart.c: 279:     EUSART_ErrorHandler = interruptHandler;
  7268                           
  7269                           ;incstack = 0
  7270                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7271  14BE  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7272  14BF  0021               	movlb	1	; select bank1
  7273  14C0  00C5               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  7274  14C1  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7275  14C2  00C4               	movwf	_EUSART_ErrorHandler^(0+128)
  7276  14C3  0008               	return
  7277  14C4                     __end_of_EUSART_SetErrorHandler:	
  7278                           
  7279                           	psect	text31
  7280  171C                     __ptext31:	
  7281 ;; *************** function _MTOUCH_Service_Mainloop *****************
  7282 ;; Defined at:
  7283 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;		None
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;		None
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  1    wreg      _Bool 
  7290 ;; Registers used:
  7291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7297 ;;      Params:         0       0       0       0       0       0       0       0
  7298 ;;      Locals:         0       0       0       0       0       0       0       0
  7299 ;;      Temps:          0       1       0       0       0       0       0       0
  7300 ;;      Totals:         0       1       0       0       0       0       0       0
  7301 ;;Total ram usage:        1 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; Hardware stack levels required when called:   11
  7304 ;; This function calls:
  7305 ;;		_MTOUCH_Button_ServiceAll
  7306 ;;		_MTOUCH_Sensor_SampleAll
  7307 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7308 ;;		_MTOUCH_Tick
  7309 ;;		_MTOUCH_needReburst
  7310 ;; This function is called by:
  7311 ;;		_main
  7312 ;;		_touch_example
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           
  7317                           ;psect for function _MTOUCH_Service_Mainloop
  7318  171C                     _MTOUCH_Service_Mainloop:	
  7319                           
  7320                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  7321                           
  7322                           ;incstack = 0
  7323                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7324  171C  0020               	movlb	0	; select bank0
  7325  171D  01EB               	clrf	_mtouch_time_toScan
  7326  171E  0AEB               	incf	_mtouch_time_toScan,f
  7327                           
  7328                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  7329                           
  7330                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  7331  171F  3196  265C  3197   	fcall	_MTOUCH_Sensor_SampleAll
  7332  1722  3A00               	xorlw	0
  7333  1723  1D03               	skipz
  7334  1724  2F27               	goto	l6273
  7335                           
  7336                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  7337  1725  3000               	movlw	0
  7338  1726  0008               	return
  7339  1727                     l6273:	
  7340                           
  7341                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  7342  1727  3195  2595  3197   	fcall	_MTOUCH_Button_ServiceAll
  7343                           
  7344                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  7345  172A  3180  2002  3197   	fcall	_MTOUCH_needReburst
  7346  172D  0020               	movlb	0	; select bank0
  7347  172E  00C8               	movwf	??_MTOUCH_Service_Mainloop
  7348  172F  0848               	movf	??_MTOUCH_Service_Mainloop,w
  7349  1730  00EB               	movwf	_mtouch_time_toScan
  7350                           
  7351                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  7352  1731  3196  261E  3197   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  7353                           
  7354                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  7355  1734  3194  2482         	fcall	_MTOUCH_Tick
  7356                           
  7357                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  7358  1736  3001               	movlw	1
  7359  1737  0008               	return
  7360  1738                     __end_of_MTOUCH_Service_Mainloop:	
  7361                           
  7362                           	psect	text32
  7363  0002                     __ptext32:	
  7364 ;; *************** function _MTOUCH_needReburst *****************
  7365 ;; Defined at:
  7366 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;		None
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;  needReburst     1    0        _Bool 
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  1    wreg      _Bool 
  7373 ;; Registers used:
  7374 ;;		wreg, status,2
  7375 ;; Tracked objects:
  7376 ;;		On entry : 0/0
  7377 ;;		On exit  : 0/0
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7380 ;;      Params:         0       0       0       0       0       0       0       0
  7381 ;;      Locals:         1       0       0       0       0       0       0       0
  7382 ;;      Temps:          0       0       0       0       0       0       0       0
  7383 ;;      Totals:         1       0       0       0       0       0       0       0
  7384 ;;Total ram usage:        1 bytes
  7385 ;; Hardware stack levels used:    1
  7386 ;; Hardware stack levels required when called:    4
  7387 ;; This function calls:
  7388 ;;		Nothing
  7389 ;; This function is called by:
  7390 ;;		_MTOUCH_Service_Mainloop
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           
  7395                           ;psect for function _MTOUCH_needReburst
  7396  0002                     _MTOUCH_needReburst:	
  7397                           
  7398                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  7399                           
  7400                           ;incstack = 0
  7401                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  7402  0002  3000               	movlw	0
  7403  0003  0008               	return
  7404  0004                     __end_of_MTOUCH_needReburst:	
  7405                           
  7406                           	psect	text33
  7407  1482                     __ptext33:	
  7408 ;; *************** function _MTOUCH_Tick *****************
  7409 ;; Defined at:
  7410 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;		None
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;		None
  7415 ;; Return value:  Size  Location     Type
  7416 ;;                  1    wreg      void 
  7417 ;; Registers used:
  7418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7424 ;;      Params:         0       0       0       0       0       0       0       0
  7425 ;;      Locals:         0       0       0       0       0       0       0       0
  7426 ;;      Temps:          0       0       0       0       0       0       0       0
  7427 ;;      Totals:         0       0       0       0       0       0       0       0
  7428 ;;Total ram usage:        0 bytes
  7429 ;; Hardware stack levels used:    1
  7430 ;; Hardware stack levels required when called:    6
  7431 ;; This function calls:
  7432 ;;		_MTOUCH_Button_Tick
  7433 ;; This function is called by:
  7434 ;;		_MTOUCH_Service_Mainloop
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           
  7439                           ;psect for function _MTOUCH_Tick
  7440  1482                     _MTOUCH_Tick:	
  7441                           
  7442                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  7443                           
  7444                           ;incstack = 0
  7445                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7446  1482  3196  2672         	fcall	_MTOUCH_Button_Tick
  7447  1484  0008               	return
  7448  1485                     __end_of_MTOUCH_Tick:	
  7449                           
  7450                           	psect	text34
  7451  1672                     __ptext34:	
  7452 ;; *************** function _MTOUCH_Button_Tick *****************
  7453 ;; Defined at:
  7454 ;;		line 297 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;		None
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  i               1    5[COMMON] unsigned char 
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  1    wreg      void 
  7461 ;; Registers used:
  7462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7468 ;;      Params:         0       0       0       0       0       0       0       0
  7469 ;;      Locals:         1       0       0       0       0       0       0       0
  7470 ;;      Temps:          1       0       0       0       0       0       0       0
  7471 ;;      Totals:         2       0       0       0       0       0       0       0
  7472 ;;Total ram usage:        2 bytes
  7473 ;; Hardware stack levels used:    1
  7474 ;; Hardware stack levels required when called:    5
  7475 ;; This function calls:
  7476 ;;		_Button_Tick_helper
  7477 ;; This function is called by:
  7478 ;;		_MTOUCH_Tick
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           
  7483                           ;psect for function _MTOUCH_Button_Tick
  7484  1672                     _MTOUCH_Button_Tick:	
  7485                           
  7486                           ;mcc_generated_files/mtouch/mtouch_button.c: 299:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 300:     for (i = 0; i < 3u; i++)
  7487                           
  7488                           ;incstack = 0
  7489                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7490  1672  01F5               	clrf	MTOUCH_Button_Tick@i
  7491  1673                     l4619:	
  7492                           
  7493                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 302:         Button_Tick_helper(&mtouch_button[i]);
  7494  1673  0875               	movf	MTOUCH_Button_Tick@i,w
  7495  1674  00F4               	movwf	??_MTOUCH_Button_Tick
  7496  1675  3003               	movlw	3
  7497  1676                     u3455:	
  7498  1676  35F4               	lslf	??_MTOUCH_Button_Tick,f
  7499  1677  3EFF               	addlw	-1
  7500  1678  1D03               	skipz
  7501  1679  2E76               	goto	u3455
  7502  167A  3574               	lslf	??_MTOUCH_Button_Tick,w
  7503  167B  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  7504  167C  3188  2043  3196   	fcall	_Button_Tick_helper
  7505                           
  7506                           ;mcc_generated_files/mtouch/mtouch_button.c: 303:     }
  7507  167F  3001               	movlw	1
  7508  1680  00F4               	movwf	??_MTOUCH_Button_Tick
  7509  1681  0874               	movf	??_MTOUCH_Button_Tick,w
  7510  1682  07F5               	addwf	MTOUCH_Button_Tick@i,f
  7511  1683  3003               	movlw	3
  7512  1684  0275               	subwf	MTOUCH_Button_Tick@i,w
  7513  1685  1803               	btfsc	3,0
  7514  1686  0008               	return
  7515  1687  2E73               	goto	l4619
  7516  1688                     __end_of_MTOUCH_Button_Tick:	
  7517                           
  7518                           	psect	text35
  7519  0843                     __ptext35:	
  7520 ;; *************** function _Button_Tick_helper *****************
  7521 ;; Defined at:
  7522 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;  button          1    wreg     PTR struct .
  7525 ;;		 -> mtouch_button(48), 
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;  button          1    3[COMMON] PTR struct .
  7528 ;;		 -> mtouch_button(48), 
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  1    wreg      void 
  7531 ;; Registers used:
  7532 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7538 ;;      Params:         0       0       0       0       0       0       0       0
  7539 ;;      Locals:         1       0       0       0       0       0       0       0
  7540 ;;      Temps:          2       0       0       0       0       0       0       0
  7541 ;;      Totals:         3       0       0       0       0       0       0       0
  7542 ;;Total ram usage:        3 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    4
  7545 ;; This function calls:
  7546 ;;		Nothing
  7547 ;; This function is called by:
  7548 ;;		_MTOUCH_Button_Tick
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           
  7553                           ;psect for function _Button_Tick_helper
  7554  0843                     _Button_Tick_helper:	
  7555                           
  7556                           ;incstack = 0
  7557                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  7558                           ;Button_Tick_helper@button stored from wreg
  7559  0843  00F3               	movwf	Button_Tick_helper@button
  7560                           
  7561                           ;mcc_generated_files/mtouch/mtouch_button.c: 305: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 306: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 308:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  7562  0844  0873               	movf	Button_Tick_helper@button,w
  7563  0845  3E02               	addlw	2
  7564  0846  0086               	movwf	6
  7565  0847  3001               	movlw	1	; select bank2/3
  7566  0848  0087               	movwf	7
  7567  0849  3002               	movlw	2
  7568  084A  0601               	xorwf	1,w
  7569  084B  1D03               	btfss	3,2
  7570  084C  0008               	return
  7571                           
  7572                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         (button->counter)++;
  7573  084D  0873               	movf	Button_Tick_helper@button,w
  7574  084E  3E0A               	addlw	10
  7575  084F  0086               	movwf	6
  7576  0850  3001               	movlw	1	; select bank2/3
  7577  0851  0087               	movwf	7
  7578  0852  3001               	movlw	1
  7579  0853  0781               	addwf	1,f
  7580  0854  3141               	addfsr 1,1
  7581  0855  1803               	skipnc
  7582  0856  0A81               	incf	1,f
  7583                           
  7584                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  7585  0857  0873               	movf	Button_Tick_helper@button,w
  7586  0858  3E0A               	addlw	10
  7587  0859  0086               	movwf	6
  7588  085A  3001               	movlw	1	; select bank2/3
  7589  085B  0087               	movwf	7
  7590  085C  0016               	moviw fsr1++
  7591  085D  0401               	iorwf	1,w
  7592  085E  1D03               	btfss	3,2
  7593  085F  0008               	return
  7594                           
  7595                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 313:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  7596  0860  0873               	movf	Button_Tick_helper@button,w
  7597  0861  3E0A               	addlw	10
  7598  0862  0086               	movwf	6
  7599  0863  3001               	movlw	1	; select bank2/3
  7600  0864  0087               	movwf	7
  7601  0865  30FF               	movlw	255
  7602  0866  3FC0               	movwi [0]fsr1
  7603  0867  30FF               	movlw	255
  7604  0868  3FC1               	movwi [1]fsr1
  7605  0869  0008               	return
  7606  086A                     __end_of_Button_Tick_helper:	
  7607                           
  7608                           	psect	text36
  7609  161E                     __ptext36:	
  7610 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  7611 ;; Defined at:
  7612 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;		None
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;  sensor          1    3[COMMON] PTR struct .
  7617 ;;		 -> mtouch_sensor(27), 
  7618 ;; Return value:  Size  Location     Type
  7619 ;;                  1    wreg      void 
  7620 ;; Registers used:
  7621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7622 ;; Tracked objects:
  7623 ;;		On entry : 0/0
  7624 ;;		On exit  : 0/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7627 ;;      Params:         0       0       0       0       0       0       0       0
  7628 ;;      Locals:         1       0       0       0       0       0       0       0
  7629 ;;      Temps:          1       0       0       0       0       0       0       0
  7630 ;;      Totals:         2       0       0       0       0       0       0       0
  7631 ;;Total ram usage:        2 bytes
  7632 ;; Hardware stack levels used:    1
  7633 ;; Hardware stack levels required when called:    5
  7634 ;; This function calls:
  7635 ;;		_Sensor_Sampled_Reset
  7636 ;; This function is called by:
  7637 ;;		_MTOUCH_Initialize
  7638 ;;		_MTOUCH_Service_Mainloop
  7639 ;; This function uses a non-reentrant model
  7640 ;;
  7641                           
  7642                           
  7643                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  7644  161E                     _MTOUCH_Sensor_Sampled_ResetAll:	
  7645                           
  7646                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 953:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[3u -1];sensor++)
  7647                           
  7648                           ;incstack = 0
  7649                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  7650  161E  3050               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  7651  161F  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7652  1620  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7653  1621  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  7654  1622                     L2:	
  7655  1622  3062               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
  7656  1623  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7657  1624  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7658  1625  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7659  1626  1C03               	btfss	3,0
  7660  1627  0008               	return
  7661                           
  7662                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 955:         Sensor_Sampled_Reset(sensor);
  7663  1628  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7664  1629  3195  2506  3196   	fcall	_Sensor_Sampled_Reset
  7665                           
  7666                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 956:     }
  7667  162C  3009               	movlw	9
  7668  162D  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7669  162E  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7670  162F  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  7671  1630  2E22               	goto	L2
  7672  1631                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  7673                           
  7674                           	psect	text37
  7675  1506                     __ptext37:	
  7676 ;; *************** function _Sensor_Sampled_Reset *****************
  7677 ;; Defined at:
  7678 ;;		line 964 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;  sensor          1    wreg     PTR struct .
  7681 ;;		 -> mtouch_sensor(27), 
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;  sensor          1    1[COMMON] PTR struct .
  7684 ;;		 -> mtouch_sensor(27), 
  7685 ;; Return value:  Size  Location     Type
  7686 ;;                  1    wreg      void 
  7687 ;; Registers used:
  7688 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7689 ;; Tracked objects:
  7690 ;;		On entry : 0/0
  7691 ;;		On exit  : 0/0
  7692 ;;		Unchanged: 0/0
  7693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7694 ;;      Params:         0       0       0       0       0       0       0       0
  7695 ;;      Locals:         1       0       0       0       0       0       0       0
  7696 ;;      Temps:          0       0       0       0       0       0       0       0
  7697 ;;      Totals:         1       0       0       0       0       0       0       0
  7698 ;;Total ram usage:        1 bytes
  7699 ;; Hardware stack levels used:    1
  7700 ;; Hardware stack levels required when called:    4
  7701 ;; This function calls:
  7702 ;;		Nothing
  7703 ;; This function is called by:
  7704 ;;		_MTOUCH_Sensor_Initialize
  7705 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           
  7710                           ;psect for function _Sensor_Sampled_Reset
  7711  1506                     _Sensor_Sampled_Reset:	
  7712                           
  7713                           ;incstack = 0
  7714                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7715                           ;Sensor_Sampled_Reset@sensor stored from wreg
  7716  1506  00F1               	movwf	Sensor_Sampled_Reset@sensor
  7717                           
  7718                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          965: {;mcc_generated_files/mtouch/mtouch_sensor.c: 966:     sensor->sampled = 0;
  7719  1507  0871               	movf	Sensor_Sampled_Reset@sensor,w
  7720  1508  3E08               	addlw	8
  7721  1509  0086               	movwf	6
  7722  150A  3001               	movlw	1	; select bank2/3
  7723  150B  0087               	movwf	7
  7724  150C  1001               	bcf	1,0
  7725  150D  0008               	return
  7726  150E                     __end_of_Sensor_Sampled_Reset:	
  7727                           
  7728                           	psect	text38
  7729  165C                     __ptext38:	
  7730 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  7731 ;; Defined at:
  7732 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;		None
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;  group           1   39[BANK0 ] unsigned char 
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  1    wreg      _Bool 
  7739 ;; Registers used:
  7740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7746 ;;      Params:         0       0       0       0       0       0       0       0
  7747 ;;      Locals:         0       1       0       0       0       0       0       0
  7748 ;;      Temps:          0       1       0       0       0       0       0       0
  7749 ;;      Totals:         0       2       0       0       0       0       0       0
  7750 ;;Total ram usage:        2 bytes
  7751 ;; Hardware stack levels used:    1
  7752 ;; Hardware stack levels required when called:   10
  7753 ;; This function calls:
  7754 ;;		_Sensor_Service
  7755 ;; This function is called by:
  7756 ;;		_MTOUCH_Service_Mainloop
  7757 ;; This function uses a non-reentrant model
  7758 ;;
  7759                           
  7760                           
  7761                           ;psect for function _MTOUCH_Sensor_SampleAll
  7762  165C                     _MTOUCH_Sensor_SampleAll:	
  7763                           
  7764                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 261:     for (group = 0; group < 2u; group++)
  7765                           
  7766                           ;incstack = 0
  7767                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7768  165C  0020               	movlb	0	; select bank0
  7769  165D  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  7770  165E                     l6231:	
  7771                           
  7772                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 263:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  7773  165E  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  7774  165F  3187  2744  3196   	fcall	_Sensor_Service
  7775  1662  3A00               	xorlw	0
  7776  1663  1903               	skipnz
  7777  1664  2E67               	goto	l6237
  7778                           
  7779                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 264:             return 0;
  7780  1665  3000               	movlw	0
  7781  1666  0008               	return
  7782  1667                     l6237:	
  7783                           
  7784                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 265:     }
  7785  1667  3001               	movlw	1
  7786  1668  0020               	movlb	0	; select bank0
  7787  1669  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  7788  166A  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  7789  166B  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  7790  166C  3002               	movlw	2
  7791  166D  0247               	subwf	MTOUCH_Sensor_SampleAll@group,w
  7792  166E  1C03               	skipc
  7793  166F  2E5E               	goto	l6231
  7794                           
  7795                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 266:     return 1;
  7796  1670  3001               	movlw	1
  7797  1671  0008               	return
  7798  1672                     __end_of_MTOUCH_Sensor_SampleAll:	
  7799                           
  7800                           	psect	text39
  7801  0744                     __ptext39:	
  7802 ;; *************** function _Sensor_Service *****************
  7803 ;; Defined at:
  7804 ;;		line 303 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;  scanGroup       1    wreg     unsigned char 
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  7809 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  7810 ;;		 -> mtouch_sensor(27), 
  7811 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  7812 ;;		 -> NULL(0), mtouch_sensor(27), 
  7813 ;;  error           1   35[BANK0 ] enum E2858
  7814 ;; Return value:  Size  Location     Type
  7815 ;;                  1    wreg      enum E2858
  7816 ;; Registers used:
  7817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7818 ;; Tracked objects:
  7819 ;;		On entry : 0/0
  7820 ;;		On exit  : 0/0
  7821 ;;		Unchanged: 0/0
  7822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7823 ;;      Params:         0       0       0       0       0       0       0       0
  7824 ;;      Locals:         0       4       0       0       0       0       0       0
  7825 ;;      Temps:          0       3       0       0       0       0       0       0
  7826 ;;      Totals:         0       7       0       0       0       0       0       0
  7827 ;;Total ram usage:        7 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; Hardware stack levels required when called:    9
  7830 ;; This function calls:
  7831 ;;		_Sensor_Acquisition
  7832 ;;		_Sensor_DefaultCallback
  7833 ;;		_Sensor_RawSample_Update
  7834 ;;		_Sensor_isEnabled
  7835 ;;		_Sensor_setSampled
  7836 ;; This function is called by:
  7837 ;;		_MTOUCH_Sensor_SampleAll
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           
  7842                           ;psect for function _Sensor_Service
  7843  0744                     _Sensor_Service:	
  7844                           
  7845                           ;incstack = 0
  7846                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7847                           ;Sensor_Service@scanGroup stored from wreg
  7848  0744  0020               	movlb	0	; select bank0
  7849  0745  00C2               	movwf	Sensor_Service@scanGroup
  7850                           
  7851                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 303: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 304: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 305:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 306:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 308:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  7852  0746  0842               	movf	Sensor_Service@scanGroup,w
  7853  0747  00BF               	movwf	??_Sensor_Service
  7854  0748  01C0               	clrf	??_Sensor_Service+1
  7855  0749  35BF               	lslf	??_Sensor_Service,f
  7856  074A  0DC0               	rlf	??_Sensor_Service+1,f
  7857  074B  303C               	movlw	low (_sensor_scan_group| (0+32768))
  7858  074C  073F               	addwf	??_Sensor_Service,w
  7859  074D  0084               	movwf	4
  7860  074E  3098               	movlw	high (_sensor_scan_group| (0+32768))
  7861  074F  3D40               	addwfc	??_Sensor_Service+1,w
  7862  0750  0085               	movwf	5
  7863  0751  0800               	movf	0,w	;code access
  7864  0752  00C1               	movwf	??_Sensor_Service+2
  7865  0753  0841               	movf	??_Sensor_Service+2,w
  7866  0754  00C4               	movwf	Sensor_Service@sensor_adc1
  7867                           
  7868                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 309:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  7869  0755  0842               	movf	Sensor_Service@scanGroup,w
  7870  0756  00BF               	movwf	??_Sensor_Service
  7871  0757  01C0               	clrf	??_Sensor_Service+1
  7872  0758  35BF               	lslf	??_Sensor_Service,f
  7873  0759  0DC0               	rlf	??_Sensor_Service+1,f
  7874  075A  303D               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  7875  075B  073F               	addwf	??_Sensor_Service,w
  7876  075C  0084               	movwf	4
  7877  075D  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  7878  075E  3D40               	addwfc	??_Sensor_Service+1,w
  7879  075F  0085               	movwf	5
  7880  0760  0800               	movf	0,w	;code access
  7881  0761  00C1               	movwf	??_Sensor_Service+2
  7882  0762  0841               	movf	??_Sensor_Service+2,w
  7883  0763  00C5               	movwf	Sensor_Service@sensor_adc2
  7884                           
  7885                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  7886  0764  0845               	movf	Sensor_Service@sensor_adc2,w
  7887  0765  00BF               	movwf	??_Sensor_Service
  7888  0766  083F               	movf	??_Sensor_Service,w
  7889  0767  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  7890  0768  0844               	movf	Sensor_Service@sensor_adc1,w
  7891  0769  318C  2451  3187   	fcall	_Sensor_Acquisition
  7892  076C  0020               	movlb	0	; select bank0
  7893  076D  00C0               	movwf	??_Sensor_Service+1
  7894  076E  0840               	movf	??_Sensor_Service+1,w
  7895  076F  00C3               	movwf	Sensor_Service@error
  7896                           
  7897                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:     switch(error)
  7898  0770  2FB3               	goto	l6177
  7899  0771                     l6155:	
  7900                           
  7901                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 318:             if(Sensor_isEnabled(sensor_adc1))
  7902  0771  0844               	movf	Sensor_Service@sensor_adc1,w
  7903  0772  3195  25C6  3187   	fcall	_Sensor_isEnabled
  7904  0775  3A00               	xorlw	0
  7905  0776  1903               	skipnz
  7906  0777  2F91               	goto	l6165
  7907                           
  7908                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  7909  0778  0020               	movlb	0	; select bank0
  7910  0779  086A               	movf	_lowpowerActivated,w
  7911  077A  1D03               	btfss	3,2
  7912  077B  2F80               	goto	l6161
  7913                           
  7914                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc1);
  7915  077C  0844               	movf	Sensor_Service@sensor_adc1,w
  7916  077D  3188  206A  3187   	fcall	_Sensor_RawSample_Update
  7917  0780                     l6161:	
  7918                           
  7919                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc1);
  7920  0780  0020               	movlb	0	; select bank0
  7921  0781  0844               	movf	Sensor_Service@sensor_adc1,w
  7922  0782  3194  24FE  3187   	fcall	_Sensor_setSampled
  7923                           
  7924                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc1->sensor);
  7925  0785  0020               	movlb	0	; select bank0
  7926  0786  0844               	movf	Sensor_Service@sensor_adc1,w
  7927  0787  0086               	movwf	6
  7928  0788  3001               	movlw	1	; select bank2/3
  7929  0789  0087               	movwf	7
  7930  078A  0801               	movf	1,w
  7931  078B  00BF               	movwf	??_Sensor_Service
  7932  078C  083F               	movf	??_Sensor_Service,w
  7933  078D  00F1               	movwf	Sensor_DefaultCallback@sensor
  7934  078E  3194  2475  3187   	fcall	_Sensor_DefaultCallback
  7935  0791                     l6165:	
  7936                           
  7937                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  7938  0791  0020               	movlb	0	; select bank0
  7939  0792  0845               	movf	Sensor_Service@sensor_adc2,w
  7940  0793  3195  25C6  3187   	fcall	_Sensor_isEnabled
  7941  0796  3A00               	xorlw	0
  7942  0797  1903               	skipnz
  7943  0798  2FD6               	goto	l6179
  7944                           
  7945                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 332:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 333:                 if(!lowpowerActivated)
  7946  0799  0020               	movlb	0	; select bank0
  7947  079A  086A               	movf	_lowpowerActivated,w
  7948  079B  1D03               	btfss	3,2
  7949  079C  2FA1               	goto	l6171
  7950                           
  7951                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 335:                     Sensor_RawSample_Update(sensor_adc2);
  7952  079D  0845               	movf	Sensor_Service@sensor_adc2,w
  7953  079E  3188  206A  3187   	fcall	_Sensor_RawSample_Update
  7954  07A1                     l6171:	
  7955                           
  7956                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 Sensor_setSampled(sens
      +                          or_adc2);
  7957  07A1  0020               	movlb	0	; select bank0
  7958  07A2  0845               	movf	Sensor_Service@sensor_adc2,w
  7959  07A3  3194  24FE  3187   	fcall	_Sensor_setSampled
  7960                           
  7961                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 338:                 callback_sampled(senso
      +                          r_adc2->sensor);
  7962  07A6  0020               	movlb	0	; select bank0
  7963  07A7  0845               	movf	Sensor_Service@sensor_adc2,w
  7964  07A8  0086               	movwf	6
  7965  07A9  3001               	movlw	1	; select bank2/3
  7966  07AA  0087               	movwf	7
  7967  07AB  0801               	movf	1,w
  7968  07AC  00BF               	movwf	??_Sensor_Service
  7969  07AD  083F               	movf	??_Sensor_Service,w
  7970  07AE  00F1               	movwf	Sensor_DefaultCallback@sensor
  7971  07AF  3194  2475  3187   	fcall	_Sensor_DefaultCallback
  7972  07B2  2FD6               	goto	l6179
  7973  07B3                     l6177:	
  7974  07B3  0843               	movf	Sensor_Service@error,w
  7975  07B4  00BF               	movwf	??_Sensor_Service
  7976  07B5  01C0               	clrf	??_Sensor_Service+1
  7977  07B6  1BBF               	btfsc	??_Sensor_Service,7
  7978  07B7  03C0               	decf	??_Sensor_Service+1,f
  7979                           
  7980                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7981                           ; Switch size 1, requested type "simple"
  7982                           ; Number of cases is 2, Range of values is 0 to 255
  7983                           ; switch strategies available:
  7984                           ; Name         Instructions Cycles
  7985                           ; simple_byte            7     4 (average)
  7986                           ; jumptable            260     6 (fixed)
  7987                           ;	Chosen strategy is simple_byte
  7988  07B8  0840               	movf	??_Sensor_Service+1,w
  7989  07B9  3A00               	xorlw	0	; case 0
  7990  07BA  1903               	skipnz
  7991  07BB  2FC0               	goto	l6807
  7992  07BC  3AFF               	xorlw	255	; case 255
  7993  07BD  1903               	skipnz
  7994  07BE  2FC5               	goto	l6809
  7995  07BF  2FD6               	goto	l6179
  7996  07C0                     l6807:	
  7997                           
  7998                           ; Switch size 1, requested type "simple"
  7999                           ; Number of cases is 1, Range of values is 0 to 0
  8000                           ; switch strategies available:
  8001                           ; Name         Instructions Cycles
  8002                           ; simple_byte            4     3 (average)
  8003                           ; direct_byte            8     6 (fixed)
  8004                           ; jumptable            260     6 (fixed)
  8005                           ;	Chosen strategy is simple_byte
  8006  07C0  083F               	movf	??_Sensor_Service,w
  8007  07C1  3A00               	xorlw	0	; case 0
  8008  07C2  1903               	skipnz
  8009  07C3  2F71               	goto	l6155
  8010  07C4  2FD6               	goto	l6179
  8011  07C5                     l6809:	
  8012                           
  8013                           ; Switch size 1, requested type "simple"
  8014                           ; Number of cases is 5, Range of values is 251 to 255
  8015                           ; switch strategies available:
  8016                           ; Name         Instructions Cycles
  8017                           ; direct_byte           15     5 (fixed)
  8018                           ; simple_byte           16     9 (average)
  8019                           ; jumptable            263     9 (fixed)
  8020                           ;	Chosen strategy is simple_byte
  8021  07C5  083F               	movf	??_Sensor_Service,w
  8022  07C6  3AFB               	xorlw	251	; case 251
  8023  07C7  1903               	skipnz
  8024  07C8  2FD6               	goto	l6179
  8025  07C9  3A07               	xorlw	7	; case 252
  8026  07CA  1903               	skipnz
  8027  07CB  2FD6               	goto	l6179
  8028  07CC  3A01               	xorlw	1	; case 253
  8029  07CD  1903               	skipnz
  8030  07CE  2FD6               	goto	l6179
  8031  07CF  3A03               	xorlw	3	; case 254
  8032  07D0  1903               	skipnz
  8033  07D1  2FD6               	goto	l6179
  8034  07D2  3A01               	xorlw	1	; case 255
  8035  07D3  1903               	skipnz
  8036  07D4  2FD6               	goto	l6179
  8037  07D5  2FD6               	goto	l6179
  8038  07D6                     l6179:	
  8039                           
  8040                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     return error;
  8041  07D6  0020               	movlb	0	; select bank0
  8042  07D7  0843               	movf	Sensor_Service@error,w
  8043  07D8  0008               	return
  8044  07D9                     __end_of_Sensor_Service:	
  8045                           
  8046                           	psect	text40
  8047  14FE                     __ptext40:	
  8048 ;; *************** function _Sensor_setSampled *****************
  8049 ;; Defined at:
  8050 ;;		line 969 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;  sensor          1    wreg     PTR struct .
  8053 ;;		 -> NULL(0), mtouch_sensor(27), 
  8054 ;; Auto vars:     Size  Location     Type
  8055 ;;  sensor          1    1[COMMON] PTR struct .
  8056 ;;		 -> NULL(0), mtouch_sensor(27), 
  8057 ;; Return value:  Size  Location     Type
  8058 ;;                  1    wreg      void 
  8059 ;; Registers used:
  8060 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8061 ;; Tracked objects:
  8062 ;;		On entry : 0/0
  8063 ;;		On exit  : 0/0
  8064 ;;		Unchanged: 0/0
  8065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8066 ;;      Params:         0       0       0       0       0       0       0       0
  8067 ;;      Locals:         1       0       0       0       0       0       0       0
  8068 ;;      Temps:          0       0       0       0       0       0       0       0
  8069 ;;      Totals:         1       0       0       0       0       0       0       0
  8070 ;;Total ram usage:        1 bytes
  8071 ;; Hardware stack levels used:    1
  8072 ;; Hardware stack levels required when called:    4
  8073 ;; This function calls:
  8074 ;;		Nothing
  8075 ;; This function is called by:
  8076 ;;		_Sensor_Service
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           
  8081                           ;psect for function _Sensor_setSampled
  8082  14FE                     _Sensor_setSampled:	
  8083                           
  8084                           ;incstack = 0
  8085                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8086                           ;Sensor_setSampled@sensor stored from wreg
  8087  14FE  00F1               	movwf	Sensor_setSampled@sensor
  8088                           
  8089                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 969: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 970
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 971:     sensor->sampled = 1;
  8090  14FF  0871               	movf	Sensor_setSampled@sensor,w
  8091  1500  3E08               	addlw	8
  8092  1501  0086               	movwf	6
  8093  1502  3001               	movlw	1	; select bank2/3
  8094  1503  0087               	movwf	7
  8095  1504  1401               	bsf	1,0
  8096  1505  0008               	return
  8097  1506                     __end_of_Sensor_setSampled:	
  8098                           
  8099                           	psect	text41
  8100  086A                     __ptext41:	
  8101 ;; *************** function _Sensor_RawSample_Update *****************
  8102 ;; Defined at:
  8103 ;;		line 802 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;  sensor          1    wreg     PTR struct .
  8106 ;;		 -> NULL(0), mtouch_sensor(27), 
  8107 ;; Auto vars:     Size  Location     Type
  8108 ;;  sensor          1    7[COMMON] PTR struct .
  8109 ;;		 -> NULL(0), mtouch_sensor(27), 
  8110 ;;  adcIndex        1    6[COMMON] unsigned char 
  8111 ;; Return value:  Size  Location     Type
  8112 ;;                  1    wreg      void 
  8113 ;; Registers used:
  8114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8120 ;;      Params:         0       0       0       0       0       0       0       0
  8121 ;;      Locals:         2       0       0       0       0       0       0       0
  8122 ;;      Temps:          1       0       0       0       0       0       0       0
  8123 ;;      Totals:         3       0       0       0       0       0       0       0
  8124 ;;Total ram usage:        3 bytes
  8125 ;; Hardware stack levels used:    1
  8126 ;; Hardware stack levels required when called:    5
  8127 ;; This function calls:
  8128 ;;		_Sensor_getScanGroupIndex
  8129 ;; This function is called by:
  8130 ;;		_Sensor_Service
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           
  8135                           ;psect for function _Sensor_RawSample_Update
  8136  086A                     _Sensor_RawSample_Update:	
  8137                           
  8138                           ;incstack = 0
  8139                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8140                           ;Sensor_RawSample_Update@sensor stored from wreg
  8141  086A  00F7               	movwf	Sensor_RawSample_Update@sensor
  8142                           
  8143                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 803: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 804:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  8144  086B  0877               	movf	Sensor_RawSample_Update@sensor,w
  8145  086C  3188  20E6  3188   	fcall	_Sensor_getScanGroupIndex
  8146  086F  00F5               	movwf	??_Sensor_RawSample_Update
  8147  0870  0875               	movf	??_Sensor_RawSample_Update,w
  8148  0871  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  8149                           
  8150                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 806:     if (INTCONbits.GIE == (uint8_t)1)
  8151  0872  1F8B               	btfss	11,7	;volatile
  8152  0873  2884               	goto	l4433
  8153                           
  8154                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 808:         INTCONbits.GIE = (uint8_t)0;
  8155  0874  138B               	bcf	11,7	;volatile
  8156                           
  8157                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 809:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  8158  0875  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  8159  0876  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8160  0877  0086               	movwf	6
  8161  0878  0187               	clrf	7
  8162  0879  0877               	movf	Sensor_RawSample_Update@sensor,w
  8163  087A  3E06               	addlw	6
  8164  087B  0084               	movwf	4
  8165  087C  3001               	movlw	1	; select bank2/3
  8166  087D  0085               	movwf	5
  8167  087E  3F40               	moviw [0]fsr1
  8168  087F  3F80               	movwi [0]fsr0
  8169  0880  3F41               	moviw [1]fsr1
  8170  0881  3F81               	movwi [1]fsr0
  8171                           
  8172                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810:         INTCONbits.GIE = (uint8_t)1;
  8173  0882  178B               	bsf	11,7	;volatile
  8174                           
  8175                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 811:     }
  8176  0883  0008               	return
  8177  0884                     l4433:	
  8178                           
  8179                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 813:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 814:         sensor->rawSample = packet_sample[adcIndex];
  8180  0884  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  8181  0885  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8182  0886  0086               	movwf	6
  8183  0887  0187               	clrf	7
  8184  0888  0877               	movf	Sensor_RawSample_Update@sensor,w
  8185  0889  3E06               	addlw	6
  8186  088A  0084               	movwf	4
  8187  088B  3001               	movlw	1	; select bank2/3
  8188  088C  0085               	movwf	5
  8189  088D  3F40               	moviw [0]fsr1
  8190  088E  3F80               	movwi [0]fsr0
  8191  088F  3F41               	moviw [1]fsr1
  8192  0890  3F81               	movwi [1]fsr0
  8193  0891  0008               	return
  8194  0892                     __end_of_Sensor_RawSample_Update:	
  8195                           
  8196                           	psect	text42
  8197  1475                     __ptext42:	
  8198 ;; *************** function _Sensor_DefaultCallback *****************
  8199 ;; Defined at:
  8200 ;;		line 823 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;  sensor          1    1[COMMON] enum E2854
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;		None
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  1    wreg      void 
  8207 ;; Registers used:
  8208 ;;		None
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8214 ;;      Params:         1       0       0       0       0       0       0       0
  8215 ;;      Locals:         0       0       0       0       0       0       0       0
  8216 ;;      Temps:          0       0       0       0       0       0       0       0
  8217 ;;      Totals:         1       0       0       0       0       0       0       0
  8218 ;;Total ram usage:        1 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    4
  8221 ;; This function calls:
  8222 ;;		Nothing
  8223 ;; This function is called by:
  8224 ;;		_Sensor_Service
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           
  8229                           ;psect for function _Sensor_DefaultCallback
  8230  1475                     _Sensor_DefaultCallback:	
  8231                           
  8232                           ;incstack = 0
  8233                           ; Regs used in _Sensor_DefaultCallback: []
  8234  1475  0008               	return
  8235  1476                     __end_of_Sensor_DefaultCallback:	
  8236                           
  8237                           	psect	text43
  8238  0C51                     __ptext43:	
  8239 ;; *************** function _Sensor_Acquisition *****************
  8240 ;; Defined at:
  8241 ;;		line 372 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;  sensor_adc1     1    wreg     PTR struct .
  8244 ;;		 -> NULL(0), mtouch_sensor(27), 
  8245 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  8246 ;;		 -> mtouch_sensor(27), 
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  8249 ;;		 -> NULL(0), mtouch_sensor(27), 
  8250 ;;  retry           1   29[BANK0 ] unsigned char 
  8251 ;; Return value:  Size  Location     Type
  8252 ;;                  1    wreg      enum E2858
  8253 ;; Registers used:
  8254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8260 ;;      Params:         0       1       0       0       0       0       0       0
  8261 ;;      Locals:         0       2       0       0       0       0       0       0
  8262 ;;      Temps:          0       1       0       0       0       0       0       0
  8263 ;;      Totals:         0       4       0       0       0       0       0       0
  8264 ;;Total ram usage:        4 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    8
  8267 ;; This function calls:
  8268 ;;		_Sensor_Acq_ExecutePacket
  8269 ;;		_Sensor_Scanfrequency_Evaluation
  8270 ;;		_Sensor_isActive
  8271 ;;		_Sensor_isCalibrated
  8272 ;;		_Sensor_postAcquisitionProcess
  8273 ;; This function is called by:
  8274 ;;		_Sensor_Service
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           
  8279                           ;psect for function _Sensor_Acquisition
  8280  0C51                     _Sensor_Acquisition:	
  8281                           
  8282                           ;incstack = 0
  8283                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8284                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  8285  0C51  0020               	movlb	0	; select bank0
  8286  0C52  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  8287                           
  8288                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 372: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 373: {;mcc_generated_files/mtouch/mtouch_sensor.c: 374:     
      +                          uint8_t retry = (uint8_t)5;
  8289  0C53  3005               	movlw	5
  8290  0C54  00BC               	movwf	??_Sensor_Acquisition
  8291  0C55  083C               	movf	??_Sensor_Acquisition,w
  8292  0C56  00BD               	movwf	Sensor_Acquisition@retry
  8293                           
  8294                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 377:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  8295  0C57  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8296  0C58  1D03               	btfss	3,2
  8297  0C59  2C67               	goto	l5977
  8298  0C5A  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8299  0C5B  1D03               	btfss	3,2
  8300  0C5C  2C67               	goto	l5977
  8301                           
  8302                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 379:         return MTOUCH_SENSOR_ERROR_invalid_index;
  8303  0C5D  30FF               	movlw	255
  8304  0C5E  0008               	return
  8305  0C5F                     l5971:	
  8306                           
  8307                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         retry--;
  8308  0C5F  3001               	movlw	1
  8309  0C60  0020               	movlb	0	; select bank0
  8310  0C61  02BD               	subwf	Sensor_Acquisition@retry,f
  8311                           
  8312                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:         if(retry == 0)
  8313  0C62  083D               	movf	Sensor_Acquisition@retry,w
  8314  0C63  1D03               	btfss	3,2
  8315  0C64  2C67               	goto	l5977
  8316                           
  8317                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 392:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8318  0C65  30FC               	movlw	252
  8319  0C66  0008               	return
  8320  0C67                     l5977:	
  8321                           
  8322                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  8323  0C67  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8324  0C68  00BC               	movwf	??_Sensor_Acquisition
  8325  0C69  083C               	movf	??_Sensor_Acquisition,w
  8326  0C6A  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8327  0C6B  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8328  0C6C  3182  22D7  318C   	fcall	_Sensor_Acq_ExecutePacket
  8329  0C6F  3A00               	xorlw	0
  8330  0C70  1D03               	skipz
  8331  0C71  2C5F               	goto	l5971
  8332                           
  8333                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_adc1 != ((void*)0))
  8334  0C72  0020               	movlb	0	; select bank0
  8335  0C73  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8336  0C74  1903               	btfsc	3,2
  8337  0C75  2C7A               	goto	l5983
  8338                           
  8339                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 398:         Sensor_postAcquisitionProcess(sensor_adc1);
  8340  0C76  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8341  0C77  318A  223F  318C   	fcall	_Sensor_postAcquisitionProcess
  8342  0C7A                     l5983:	
  8343                           
  8344                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 401:     if(sensor_adc2 !=((void*)0))
  8345  0C7A  0020               	movlb	0	; select bank0
  8346  0C7B  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8347  0C7C  1903               	btfsc	3,2
  8348  0C7D  2C82               	goto	l5987
  8349                           
  8350                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 403:         Sensor_postAcquisitionProcess(sensor_adc2);
  8351  0C7E  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8352  0C7F  318A  223F  318C   	fcall	_Sensor_postAcquisitionProcess
  8353  0C82                     l5987:	
  8354                           
  8355                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  8356  0C82  0020               	movlb	0	; select bank0
  8357  0C83  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8358  0C84  3195  255B  318C   	fcall	_Sensor_isActive
  8359  0C87  3A00               	xorlw	0
  8360  0C88  1903               	skipnz
  8361  0C89  2C92               	goto	l5991
  8362  0C8A  0020               	movlb	0	; select bank0
  8363  0C8B  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8364  0C8C  3195  251F  318C   	fcall	_Sensor_isCalibrated
  8365  0C8F  3A00               	xorlw	0
  8366  0C90  1D03               	skipz
  8367  0C91  2CA2               	goto	l5995
  8368  0C92                     l5991:	
  8369  0C92  0020               	movlb	0	; select bank0
  8370  0C93  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8371  0C94  3195  255B  318C   	fcall	_Sensor_isActive
  8372  0C97  3A00               	xorlw	0
  8373  0C98  1903               	skipnz
  8374  0C99  2CAB               	goto	l5999
  8375  0C9A  0020               	movlb	0	; select bank0
  8376  0C9B  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8377  0C9C  3195  251F  318C   	fcall	_Sensor_isCalibrated
  8378  0C9F  3A00               	xorlw	0
  8379  0CA0  1903               	skipnz
  8380  0CA1  2CAB               	goto	l5999
  8381  0CA2                     l5995:	
  8382                           
  8383                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 409:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  8384  0CA2  0020               	movlb	0	; select bank0
  8385  0CA3  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8386  0CA4  00BC               	movwf	??_Sensor_Acquisition
  8387  0CA5  083C               	movf	??_Sensor_Acquisition,w
  8388  0CA6  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  8389  0CA7  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8390  0CA8  318D  25E2         	fcall	_Sensor_Scanfrequency_Evaluation
  8391  0CAA  0008               	return
  8392  0CAB                     l5999:	
  8393                           
  8394                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:     return MTOUCH_SENSOR_ERROR_none;
  8395  0CAB  3000               	movlw	0
  8396  0CAC  0008               	return
  8397  0CAD                     __end_of_Sensor_Acquisition:	
  8398                           
  8399                           	psect	text44
  8400  0A3F                     __ptext44:	
  8401 ;; *************** function _Sensor_postAcquisitionProcess *****************
  8402 ;; Defined at:
  8403 ;;		line 415 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;  sensor          1    wreg     PTR struct .
  8406 ;;		 -> NULL(0), mtouch_sensor(27), 
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  sensor          1    9[COMMON] PTR struct .
  8409 ;;		 -> NULL(0), mtouch_sensor(27), 
  8410 ;;  deviation       2    6[COMMON] unsigned short 
  8411 ;;  adcIndex        1    8[COMMON] unsigned char 
  8412 ;; Return value:  Size  Location     Type
  8413 ;;                  1    wreg      void 
  8414 ;; Registers used:
  8415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 0/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8421 ;;      Params:         0       0       0       0       0       0       0       0
  8422 ;;      Locals:         4       0       0       0       0       0       0       0
  8423 ;;      Temps:          1       0       0       0       0       0       0       0
  8424 ;;      Totals:         5       0       0       0       0       0       0       0
  8425 ;;Total ram usage:        5 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:    5
  8428 ;; This function calls:
  8429 ;;		_Sensor_getScanGroupIndex
  8430 ;;		_Sensor_isEnabled
  8431 ;;		_Sensor_setActive
  8432 ;;		_Sensor_setInactive
  8433 ;;		_abs
  8434 ;; This function is called by:
  8435 ;;		_Sensor_Acquisition
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           
  8440                           ;psect for function _Sensor_postAcquisitionProcess
  8441  0A3F                     _Sensor_postAcquisitionProcess:	
  8442                           
  8443                           ;incstack = 0
  8444                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8445                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  8446  0A3F  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  8447                           
  8448                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 415: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 416: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 417:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 418:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  8449  0A40  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8450  0A41  3188  20E6  318A   	fcall	_Sensor_getScanGroupIndex
  8451  0A44  00F5               	movwf	??_Sensor_postAcquisitionProcess
  8452  0A45  0875               	movf	??_Sensor_postAcquisitionProcess,w
  8453  0A46  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  8454                           
  8455                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     if(Sensor_isEnabled(sensor))
  8456  0A47  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8457  0A48  3195  25C6  318A   	fcall	_Sensor_isEnabled
  8458  0A4B  3A00               	xorlw	0
  8459  0A4C  1903               	skipnz
  8460  0A4D  2A66               	goto	l4245
  8461                           
  8462                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  8463  0A4E  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8464  0A4F  3E06               	addlw	6
  8465  0A50  0086               	movwf	6
  8466  0A51  3001               	movlw	1	; select bank2/3
  8467  0A52  0087               	movwf	7
  8468  0A53  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  8469  0A54  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8470  0A55  0084               	movwf	4
  8471  0A56  0185               	clrf	5
  8472  0A57  3F40               	moviw [0]fsr1
  8473  0A58  0200               	subwf	0,w
  8474  0A59  00F1               	movwf	abs@a
  8475  0A5A  3101               	addfsr 0,1
  8476  0A5B  3F41               	moviw [1]fsr1
  8477  0A5C  3B00               	subwfb	0,w
  8478  0A5D  00F2               	movwf	abs@a+1
  8479  0A5E  3196  269F  318A   	fcall	_abs
  8480  0A61  0872               	movf	?_abs+1,w
  8481  0A62  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  8482  0A63  0871               	movf	?_abs,w
  8483  0A64  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  8484  0A65  2A68               	goto	l4247
  8485  0A66                     l4245:	
  8486                           
  8487                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423:         deviation = 0;
  8488  0A66  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  8489  0A67  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  8490  0A68                     l4247:	
  8491                           
  8492                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     if(deviation > 100u)
  8493  0A68  3000               	movlw	0
  8494  0A69  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  8495  0A6A  3065               	movlw	101
  8496  0A6B  1903               	skipnz
  8497  0A6C  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  8498  0A6D  1C03               	skipc
  8499  0A6E  2A73               	goto	l4251
  8500                           
  8501                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:         Sensor_setActive(sensor);
  8502  0A6F  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8503  0A70  3194  24EE         	fcall	_Sensor_setActive
  8504  0A72  0008               	return
  8505  0A73                     l4251:	
  8506                           
  8507                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:         Sensor_setInactive(sensor);
  8508  0A73  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8509  0A74  3194  24F6         	fcall	_Sensor_setInactive
  8510  0A76  0008               	return
  8511  0A77                     __end_of_Sensor_postAcquisitionProcess:	
  8512                           
  8513                           	psect	text45
  8514  14F6                     __ptext45:	
  8515 ;; *************** function _Sensor_setInactive *****************
  8516 ;; Defined at:
  8517 ;;		line 877 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;  sensor          1    wreg     PTR struct .
  8520 ;;		 -> NULL(0), mtouch_sensor(27), 
  8521 ;; Auto vars:     Size  Location     Type
  8522 ;;  sensor          1    1[COMMON] PTR struct .
  8523 ;;		 -> NULL(0), mtouch_sensor(27), 
  8524 ;; Return value:  Size  Location     Type
  8525 ;;                  1    wreg      void 
  8526 ;; Registers used:
  8527 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8528 ;; Tracked objects:
  8529 ;;		On entry : 0/0
  8530 ;;		On exit  : 0/0
  8531 ;;		Unchanged: 0/0
  8532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8533 ;;      Params:         0       0       0       0       0       0       0       0
  8534 ;;      Locals:         1       0       0       0       0       0       0       0
  8535 ;;      Temps:          0       0       0       0       0       0       0       0
  8536 ;;      Totals:         1       0       0       0       0       0       0       0
  8537 ;;Total ram usage:        1 bytes
  8538 ;; Hardware stack levels used:    1
  8539 ;; Hardware stack levels required when called:    4
  8540 ;; This function calls:
  8541 ;;		Nothing
  8542 ;; This function is called by:
  8543 ;;		_Sensor_postAcquisitionProcess
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547                           
  8548                           ;psect for function _Sensor_setInactive
  8549  14F6                     _Sensor_setInactive:	
  8550                           
  8551                           ;incstack = 0
  8552                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8553                           ;Sensor_setInactive@sensor stored from wreg
  8554  14F6  00F1               	movwf	Sensor_setInactive@sensor
  8555                           
  8556                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 877: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 87
      +                          8: {;mcc_generated_files/mtouch/mtouch_sensor.c: 879:     sensor->active = 0;
  8557  14F7  0871               	movf	Sensor_setInactive@sensor,w
  8558  14F8  3E08               	addlw	8
  8559  14F9  0086               	movwf	6
  8560  14FA  3001               	movlw	1	; select bank2/3
  8561  14FB  0087               	movwf	7
  8562  14FC  1081               	bcf	1,1
  8563  14FD  0008               	return
  8564  14FE                     __end_of_Sensor_setInactive:	
  8565                           
  8566                           	psect	text46
  8567  14EE                     __ptext46:	
  8568 ;; *************** function _Sensor_setActive *****************
  8569 ;; Defined at:
  8570 ;;		line 872 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;  sensor          1    wreg     PTR struct .
  8573 ;;		 -> NULL(0), mtouch_sensor(27), 
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;  sensor          1    1[COMMON] PTR struct .
  8576 ;;		 -> NULL(0), mtouch_sensor(27), 
  8577 ;; Return value:  Size  Location     Type
  8578 ;;                  1    wreg      void 
  8579 ;; Registers used:
  8580 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8581 ;; Tracked objects:
  8582 ;;		On entry : 0/0
  8583 ;;		On exit  : 0/0
  8584 ;;		Unchanged: 0/0
  8585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8586 ;;      Params:         0       0       0       0       0       0       0       0
  8587 ;;      Locals:         1       0       0       0       0       0       0       0
  8588 ;;      Temps:          0       0       0       0       0       0       0       0
  8589 ;;      Totals:         1       0       0       0       0       0       0       0
  8590 ;;Total ram usage:        1 bytes
  8591 ;; Hardware stack levels used:    1
  8592 ;; Hardware stack levels required when called:    4
  8593 ;; This function calls:
  8594 ;;		Nothing
  8595 ;; This function is called by:
  8596 ;;		_Sensor_postAcquisitionProcess
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           
  8601                           ;psect for function _Sensor_setActive
  8602  14EE                     _Sensor_setActive:	
  8603                           
  8604                           ;incstack = 0
  8605                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8606                           ;Sensor_setActive@sensor stored from wreg
  8607  14EE  00F1               	movwf	Sensor_setActive@sensor
  8608                           
  8609                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 872: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 873:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 874:     sensor->active = 1;
  8610  14EF  0871               	movf	Sensor_setActive@sensor,w
  8611  14F0  3E08               	addlw	8
  8612  14F1  0086               	movwf	6
  8613  14F2  3001               	movlw	1	; select bank2/3
  8614  14F3  0087               	movwf	7
  8615  14F4  1481               	bsf	1,1
  8616  14F5  0008               	return
  8617  14F6                     __end_of_Sensor_setActive:	
  8618                           
  8619                           	psect	text47
  8620  0DE2                     __ptext47:	
  8621 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  8622 ;; Defined at:
  8623 ;;		line 733 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8624 ;; Parameters:    Size  Location     Type
  8625 ;;  sensor_adc1     1    wreg     PTR struct .
  8626 ;;		 -> NULL(0), mtouch_sensor(27), 
  8627 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  8628 ;;		 -> mtouch_sensor(27), 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  sensor_adc1     1   17[BANK0 ] PTR struct .
  8631 ;;		 -> NULL(0), mtouch_sensor(27), 
  8632 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  8633 ;;  packet_noise    2   18[BANK0 ] unsigned short 
  8634 ;;  i               1   26[BANK0 ] unsigned char 
  8635 ;;  retry           1   21[BANK0 ] unsigned char 
  8636 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  1    wreg      enum E2858
  8639 ;; Registers used:
  8640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 0/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8646 ;;      Params:         0       1       0       0       0       0       0       0
  8647 ;;      Locals:         0      10       0       0       0       0       0       0
  8648 ;;      Temps:          0       2       0       0       0       0       0       0
  8649 ;;      Totals:         0      13       0       0       0       0       0       0
  8650 ;;Total ram usage:       13 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    7
  8653 ;; This function calls:
  8654 ;;		_Sensor_Acq_ExecutePacket
  8655 ;; This function is called by:
  8656 ;;		_Sensor_Acquisition
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           
  8661                           ;psect for function _Sensor_Scanfrequency_Evaluation
  8662  0DE2                     _Sensor_Scanfrequency_Evaluation:	
  8663                           
  8664                           ;incstack = 0
  8665                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8666                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  8667  0DE2  0020               	movlb	0	; select bank0
  8668  0DE3  00B1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  8669                           
  8670                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 734: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 735:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 737:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 738:     mtouch_sensor_sampleperiod_t best_sample_period;
  8671  0DE4  085C               	movf	_packet_noise+1,w
  8672  0DE5  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  8673  0DE6  085B               	movf	_packet_noise,w
  8674  0DE7  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8675  0DE8  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8676  0DE9  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8677  0DEA  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8678  0DEB  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8679  0DEC  085B               	movf	_packet_noise,w
  8680  0DED  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  8681  0DEE  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8682  0DEF  085C               	movf	_packet_noise+1,w
  8683  0DF0  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  8684  0DF1  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8685                           
  8686                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:     best_sample_period = sample_period
      +                          ;
  8687  0DF2  086E               	movf	_sample_period,w
  8688  0DF3  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8689  0DF4  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8690  0DF5  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8691                           
  8692                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  8693  0DF6  0854               	movf	_packet_sample+1,w
  8694  0DF7  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8695  0DF8  0853               	movf	_packet_sample,w
  8696  0DF9  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8697                           
  8698                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  8699  0DFA  0856               	movf	_packet_sample+3,w
  8700  0DFB  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8701  0DFC  0855               	movf	_packet_sample+2,w
  8702  0DFD  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8703                           
  8704                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  8705  0DFE  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  8706  0DFF                     l5889:	
  8707                           
  8708                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 749:         sample_period += frequency_hop[i];
  8709  0DFF  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  8710  0E00  3E0F               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8711  0E01  0084               	movwf	4
  8712  0E02  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8713  0E03  1803               	skipnc
  8714  0E04  3E01               	addlw	1
  8715  0E05  0085               	movwf	5
  8716  0E06  0800               	movf	0,w	;code access
  8717  0E07  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8718  0E08  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8719  0E09  07EE               	addwf	_sample_period,f
  8720                           
  8721                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  8722  0E0A  30AE               	movlw	174
  8723  0E0B  026E               	subwf	_sample_period,w
  8724  0E0C  1803               	skipnc
  8725  0E0D  2E12               	goto	l5897
  8726                           
  8727                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  8728  0E0E  30AE               	movlw	174
  8729  0E0F  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8730  0E10  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8731  0E11  07EE               	addwf	_sample_period,f
  8732  0E12                     l5897:	
  8733                           
  8734                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:         retry = (uint8_t)5;
  8735  0E12  3005               	movlw	5
  8736  0E13  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8737  0E14  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8738  0E15  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  8739  0E16                     l5905:	
  8740                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8741                           
  8742                           
  8743                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8744  0E16  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  8745  0E17  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8746  0E18  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8747  0E19  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8748  0E1A  0831               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  8749  0E1B  3182  22D7  318D   	fcall	_Sensor_Acq_ExecutePacket
  8750  0E1E  3A00               	xorlw	0
  8751  0E1F  1903               	btfsc	3,2
  8752  0E20  2E29               	goto	l5907
  8753                           
  8754                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             retry--;
  8755  0E21  3001               	movlw	1
  8756  0E22  0020               	movlb	0	; select bank0
  8757  0E23  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  8758                           
  8759                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             if(retry == 0)
  8760  0E24  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  8761  0E25  1D03               	btfss	3,2
  8762  0E26  2E16               	goto	l5905
  8763                           
  8764                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 767:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8765  0E27  30FC               	movlw	252
  8766  0E28  0008               	return
  8767  0E29                     l5907:	
  8768                           
  8769                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         if(packet_noise_Max < packet_n
      +                          oise)
  8770  0E29  0020               	movlb	0	; select bank0
  8771  0E2A  085C               	movf	_packet_noise+1,w
  8772  0E2B  0233               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  8773  0E2C  1D03               	skipz
  8774  0E2D  2E30               	goto	u4725
  8775  0E2E  085B               	movf	_packet_noise,w
  8776  0E2F  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  8777  0E30                     u4725:	
  8778  0E30  1803               	skipnc
  8779  0E31  2E42               	goto	l5911
  8780                           
  8781                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 773:             packet_noise_Max = packet_noise;
  8782  0E32  085C               	movf	_packet_noise+1,w
  8783  0E33  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8784  0E34  085B               	movf	_packet_noise,w
  8785  0E35  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8786                           
  8787                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             best_sample_period = sampl
      +                          e_period;
  8788  0E36  086E               	movf	_sample_period,w
  8789  0E37  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8790  0E38  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8791  0E39  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8792                           
  8793                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  8794  0E3A  0854               	movf	_packet_sample+1,w
  8795  0E3B  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8796  0E3C  0853               	movf	_packet_sample,w
  8797  0E3D  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8798                           
  8799                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  8800  0E3E  0856               	movf	_packet_sample+3,w
  8801  0E3F  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8802  0E40  0855               	movf	_packet_sample+2,w
  8803  0E41  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8804  0E42                     l5911:	
  8805                           
  8806                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     }
  8807  0E42  3001               	movlw	1
  8808  0E43  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8809  0E44  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8810  0E45  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  8811  0E46  3005               	movlw	5
  8812  0E47  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  8813  0E48  1C03               	skipc
  8814  0E49  2DFF               	goto	l5889
  8815                           
  8816                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:     sample_period = best_sample_period
      +                          ;
  8817  0E4A  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  8818  0E4B  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8819  0E4C  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8820  0E4D  00EE               	movwf	_sample_period
  8821                           
  8822                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 781:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  8823  0E4E  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  8824  0E4F  00D4               	movwf	_packet_sample+1
  8825  0E50  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  8826  0E51  00D3               	movwf	_packet_sample
  8827                           
  8828                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  8829  0E52  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  8830  0E53  00D6               	movwf	_packet_sample+3
  8831  0E54  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  8832  0E55  00D5               	movwf	_packet_sample+2
  8833                           
  8834                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:     return MTOUCH_SENSOR_ERROR_none;
  8835  0E56  3000               	movlw	0
  8836  0E57  0008               	return
  8837  0E58                     __end_of_Sensor_Scanfrequency_Evaluation:	
  8838                           
  8839                           	psect	text48
  8840  02D7                     __ptext48:	
  8841 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  8842 ;; Defined at:
  8843 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  sensor_adc1     1    wreg     PTR struct .
  8846 ;;		 -> NULL(0), mtouch_sensor(27), 
  8847 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  8848 ;;		 -> mtouch_sensor(27), 
  8849 ;; Auto vars:     Size  Location     Type
  8850 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  8851 ;;		 -> NULL(0), mtouch_sensor(27), 
  8852 ;;  last_b          2   10[BANK0 ] unsigned short 
  8853 ;;  last_a          2    8[BANK0 ] unsigned short 
  8854 ;;  packet_count    1   12[BANK0 ] unsigned char 
  8855 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  8856 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  8857 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  8858 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  8859 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  8860 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  8861 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  1    wreg      enum E2858
  8864 ;; Registers used:
  8865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8871 ;;      Params:         1       0       0       0       0       0       0       0
  8872 ;;      Locals:         0      13       0       0       0       0       0       0
  8873 ;;      Temps:          0       1       0       0       0       0       0       0
  8874 ;;      Totals:         1      14       0       0       0       0       0       0
  8875 ;;Total ram usage:       15 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    6
  8878 ;; This function calls:
  8879 ;;		_MTOUCH_Sensor_Scan_Initialize
  8880 ;;		_Sensor_autoCalibration
  8881 ;;		_Sensor_isActive
  8882 ;;		_Sensor_isCalibrated
  8883 ;;		_Sensor_isEnabled
  8884 ;;		_Sensor_loadADCSettings
  8885 ;;		_TMR2_LoadPeriodRegister
  8886 ;;		_TMR2_StartTimer
  8887 ;;		_TMR2_StopTimer
  8888 ;;		_abs
  8889 ;; This function is called by:
  8890 ;;		_Sensor_Acquisition
  8891 ;;		_Sensor_Scanfrequency_Evaluation
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           
  8896                           ;psect for function _Sensor_Acq_ExecutePacket
  8897  02D7                     _Sensor_Acq_ExecutePacket:	
  8898                           
  8899                           ;incstack = 0
  8900                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8901                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  8902  02D7  0020               	movlb	0	; select bank0
  8903  02D8  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  8904                           
  8905                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 476:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  8906  02D9  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  8907  02DA  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  8908                           
  8909                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  8910  02DB  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  8911  02DC  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  8912                           
  8913                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:     uint8_t activeSensor = 0;
  8914  02DD  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  8915                           
  8916                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 481:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 487:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  8917  02DE  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8918  02DF  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8919                           
  8920                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  8921  02E0  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8922  02E1  1903               	btfsc	3,2
  8923  02E2  2B1D               	goto	l5669
  8924  02E3  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8925  02E4  1903               	btfsc	3,2
  8926  02E5  2B1D               	goto	l5669
  8927                           
  8928                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 490:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  8929  02E6  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8930  02E7  3E08               	addlw	8
  8931  02E8  0086               	movwf	6
  8932  02E9  3001               	movlw	1	; select bank2/3
  8933  02EA  0087               	movwf	7
  8934  02EB  1981               	btfsc	1,3
  8935  02EC  2AFD               	goto	l5651
  8936  02ED  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8937  02EE  3E08               	addlw	8
  8938  02EF  0086               	movwf	6
  8939  02F0  3001               	movlw	1	; select bank2/3
  8940  02F1  0087               	movwf	7
  8941  02F2  1D81               	btfss	1,3
  8942  02F3  2AFD               	goto	l5651
  8943                           
  8944                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 492:             sensor_adc1->enabled = 1;
  8945  02F4  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8946  02F5  3E08               	addlw	8
  8947  02F6  0086               	movwf	6
  8948  02F7  3001               	movlw	1	; select bank2/3
  8949  02F8  0087               	movwf	7
  8950  02F9  1581               	bsf	1,3
  8951                           
  8952                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:             sensor1ForceEnabled = 1;
  8953  02FA  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8954  02FB  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  8955                           
  8956                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 494:         }
  8957  02FC  2B32               	goto	l5693
  8958  02FD                     l5651:	
  8959  02FD  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8960  02FE  3E08               	addlw	8
  8961  02FF  0086               	movwf	6
  8962  0300  3001               	movlw	1	; select bank2/3
  8963  0301  0087               	movwf	7
  8964  0302  1981               	btfsc	1,3
  8965  0303  2B14               	goto	l5659
  8966  0304  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8967  0305  3E08               	addlw	8
  8968  0306  0086               	movwf	6
  8969  0307  3001               	movlw	1	; select bank2/3
  8970  0308  0087               	movwf	7
  8971  0309  1D81               	btfss	1,3
  8972  030A  2B14               	goto	l5659
  8973                           
  8974                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 497:             sensor_adc2->enabled = 1;
  8975  030B  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8976  030C  3E08               	addlw	8
  8977  030D  0086               	movwf	6
  8978  030E  3001               	movlw	1	; select bank2/3
  8979  030F  0087               	movwf	7
  8980  0310  1581               	bsf	1,3
  8981                           
  8982                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:             sensor2ForceEnabled = 1;
  8983  0311  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8984  0312  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  8985                           
  8986                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         }
  8987  0313  2B32               	goto	l5693
  8988  0314                     l5659:	
  8989  0314  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8990  0315  3E08               	addlw	8
  8991  0316  0086               	movwf	6
  8992  0317  3001               	movlw	1	; select bank2/3
  8993  0318  0087               	movwf	7
  8994  0319  1981               	btfsc	1,3
  8995  031A  2B32               	goto	l5693
  8996  031B                     l5661:	
  8997  031B  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8998  031C  2B2A               	goto	L4
  8999  031D                     l5669:	
  9000                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:     }
  9001                           
  9002  031D  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9003  031E  1D03               	btfss	3,2
  9004  031F  2B23               	goto	l5681
  9005  0320  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9006  0321  1D03               	btfss	3,2
  9007  0322  2B1B               	goto	l5661
  9008  0323                     l5681:	
  9009                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 510:         if(sensor_adc2->enabled == 0)
  9010                           
  9011  0323  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9012  0324  1903               	btfsc	3,2
  9013  0325  2B32               	goto	l5693
  9014  0326  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9015  0327  1D03               	btfss	3,2
  9016  0328  2B32               	goto	l5693
  9017                           
  9018                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 519:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 520:         if(sensor_adc1->enabled == 0)
  9019  0329  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9020  032A                     L4:	
  9021  032A  3E08               	addlw	8
  9022  032B  0086               	movwf	6
  9023  032C  3001               	movlw	1	; select bank2/3
  9024  032D  0087               	movwf	7
  9025  032E  1981               	btfsc	1,3
  9026  032F  2B32               	goto	l5693
  9027  0330                     l5663:	
  9028                           
  9029                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 502:             return MTOUCH_SENSOR_ERROR_none;
  9030  0330  3000               	movlw	0
  9031  0331  0008               	return
  9032  0332                     l5693:	
  9033                           
  9034                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     if(Sensor_isActive(sensor_adc2))
  9035  0332  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9036  0333  3195  255B  3182   	fcall	_Sensor_isActive
  9037  0336  3A00               	xorlw	0
  9038  0337  1903               	skipnz
  9039  0338  2B3C               	goto	l5697
  9040                           
  9041                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         activeSensor = 1;
  9042  0339  0020               	movlb	0	; select bank0
  9043  033A  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  9044  033B  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  9045  033C                     l5697:	
  9046                           
  9047                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     ADCOMCON_temp = ADCOMCON;
  9048  033C  002E               	movlb	14	; select bank14
  9049  033D  0812               	movf	18,w	;volatile
  9050  033E  0020               	movlb	0	; select bank0
  9051  033F  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9052  0340  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9053  0341  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  9054                           
  9055                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     AD1CON2_temp = AD1CON2;
  9056  0342  002E               	movlb	14	; select bank14
  9057  0343  0813               	movf	19,w	;volatile
  9058  0344  0020               	movlb	0	; select bank0
  9059  0345  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9060  0346  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9061  0347  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  9062                           
  9063                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:     AD2CON2_temp = AD2CON2;
  9064  0348  002F               	movlb	15	; select bank15
  9065  0349  0813               	movf	19,w	;volatile
  9066  034A  0020               	movlb	0	; select bank0
  9067  034B  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9068  034C  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9069  034D  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  9070                           
  9071                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:     MTOUCH_Sensor_Scan_Initialize();
  9072  034E  3195  25A5  3182   	fcall	_MTOUCH_Sensor_Scan_Initialize
  9073                           
  9074                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     if(sensor_adc1!=((void*)0))
  9075  0351  0020               	movlb	0	; select bank0
  9076  0352  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9077  0353  1903               	btfsc	3,2
  9078  0354  2B68               	goto	l5713
  9079                           
  9080                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 548:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9081  0355  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9082  0356  3E04               	addlw	4
  9083  0357  0086               	movwf	6
  9084  0358  3001               	movlw	1	; select bank2/3
  9085  0359  0087               	movwf	7
  9086  035A  0801               	movf	1,w
  9087  035B  3EFF               	addlw	255
  9088  035C  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9089  035D  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9090  035E  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9091                           
  9092                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         ADxIF_flag = 0;
  9093  035F  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9094                           
  9095                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD1GRD = 0b01000000;
  9096  0360  3040               	movlw	64
  9097  0361  002E               	movlb	14	; select bank14
  9098  0362  0098               	movwf	24	;volatile
  9099                           
  9100                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         AAD2GRD = 0b00000000;
  9101  0363  002F               	movlb	15	; select bank15
  9102  0364  0198               	clrf	24	;volatile
  9103                           
  9104                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:         APFCONbits.GRDASEL = 0x0;
  9105  0365  0022               	movlb	2	; select bank2
  9106  0366  101D               	bcf	29,0	;volatile
  9107                           
  9108                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
  9109  0367  2B7B               	goto	l5723
  9110  0368                     l5713:	
  9111                           
  9112                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9113  0368  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9114  0369  3E04               	addlw	4
  9115  036A  0086               	movwf	6
  9116  036B  3001               	movlw	1	; select bank2/3
  9117  036C  0087               	movwf	7
  9118  036D  0801               	movf	1,w
  9119  036E  3EFF               	addlw	255
  9120  036F  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9121  0370  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9122  0371  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9123                           
  9124                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 1;
  9125  0372  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9126  0373  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  9127                           
  9128                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b00000000;
  9129  0374  002E               	movlb	14	; select bank14
  9130  0375  0198               	clrf	24	;volatile
  9131                           
  9132                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b01000000;
  9133  0376  3040               	movlw	64
  9134  0377  002F               	movlb	15	; select bank15
  9135  0378  0098               	movwf	24	;volatile
  9136                           
  9137                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x1;
  9138  0379  0022               	movlb	2	; select bank2
  9139  037A  141D               	bsf	29,0	;volatile
  9140  037B                     l5723:	
  9141                           
  9142                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  9143  037B  01F2               	clrf	Sensor_loadADCSettings@adc_index
  9144  037C  0020               	movlb	0	; select bank0
  9145  037D  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9146  037E  3184  24A1  3182   	fcall	_Sensor_loadADCSettings
  9147                           
  9148                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  9149  0381  01F2               	clrf	Sensor_loadADCSettings@adc_index
  9150  0382  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  9151  0383  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9152  0384  3184  24A1  3182   	fcall	_Sensor_loadADCSettings
  9153                           
  9154                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor_globalFlags.done = 0;
  9155  0387  0020               	movlb	0	; select bank0
  9156  0388  1069               	bcf	_sensor_globalFlags,0	;volatile
  9157                           
  9158                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:     sensor_globalFlags.error = 0;
  9159  0389  1169               	bcf	_sensor_globalFlags,2	;volatile
  9160                           
  9161                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:     sensor_globalFlags.interrupted = 0
      +                          ;
  9162  038A  11E9               	bcf	_sensor_globalFlags,3	;volatile
  9163                           
  9164                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  9165  038B  086E               	movf	_sample_period,w
  9166  038C  3194  24A8  3182   	fcall	_TMR2_LoadPeriodRegister
  9167                           
  9168                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     TMR2_StartTimer();
  9169  038F  3194  247C  3182   	fcall	_TMR2_StartTimer
  9170                           
  9171                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     packet_noise = 0;
  9172  0392  0020               	movlb	0	; select bank0
  9173  0393  01DB               	clrf	_packet_noise
  9174  0394  01DC               	clrf	_packet_noise+1
  9175  0395                     l5739:	
  9176                           
  9177                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 576:         if(ADxIF_flag == 0)
  9178  0395  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  9179  0396  1D03               	btfss	3,2
  9180  0397  2B9E               	goto	l286
  9181                           
  9182                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 578:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9183  0398  1F11               	btfss	17,6	;volatile
  9184  0399  10E9               	bcf	_sensor_globalFlags,1	;volatile
  9185  039A                     l288:	
  9186  039A  1F11               	btfss	17,6	;volatile
  9187  039B  2B9A               	goto	l288
  9188                           
  9189                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             PIR1bits.AD1IF = 0;
  9190  039C  1311               	bcf	17,6	;volatile
  9191                           
  9192                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         }
  9193  039D  2BA4               	goto	l5747
  9194  039E                     l286:	
  9195                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         else
  9196                           
  9197                           
  9198                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 584:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9199  039E  1B12               	btfsc	18,6	;volatile
  9200  039F  2BA1               	goto	l293
  9201  03A0  10E9               	bcf	_sensor_globalFlags,1	;volatile
  9202  03A1                     l293:	
  9203  03A1  1F12               	btfss	18,6	;volatile
  9204  03A2  2BA1               	goto	l293
  9205                           
  9206                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             PIR2bits.AD2IF = 0;
  9207  03A3  1312               	bcf	18,6	;volatile
  9208  03A4                     l5747:	
  9209                           
  9210                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         AAD1GRD ^= 0b00100001;
  9211  03A4  3021               	movlw	33
  9212  03A5  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9213  03A6  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9214  03A7  002E               	movlb	14	; select bank14
  9215  03A8  0698               	xorwf	24,f	;volatile
  9216                           
  9217                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         AAD2GRD ^= 0b00100001;
  9218  03A9  3021               	movlw	33
  9219  03AA  0020               	movlb	0	; select bank0
  9220  03AB  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9221  03AC  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9222  03AD  002F               	movlb	15	; select bank15
  9223  03AE  0698               	xorwf	24,f	;volatile
  9224                           
  9225                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         AAD1CON3 ^= 0b11000000;
  9226  03AF  30C0               	movlw	192
  9227  03B0  0020               	movlb	0	; select bank0
  9228  03B1  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9229  03B2  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9230  03B3  002E               	movlb	14	; select bank14
  9231  03B4  0694               	xorwf	20,f	;volatile
  9232                           
  9233                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:         AAD2CON3 ^= 0b11000000;
  9234  03B5  30C0               	movlw	192
  9235  03B6  0020               	movlb	0	; select bank0
  9236  03B7  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9237  03B8  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9238  03B9  002F               	movlb	15	; select bank15
  9239  03BA  0694               	xorwf	20,f	;volatile
  9240                           
  9241                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         if ((packet_counter & 0x01) ==
      +                           0)
  9242  03BB  0020               	movlb	0	; select bank0
  9243  03BC  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  9244  03BD  2C04               	goto	l5763
  9245                           
  9246                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 596:             packet_sample[0] += AAD1RES0;
  9247  03BE  002E               	movlb	14	; select bank14
  9248  03BF  081A               	movf	26,w	;volatile
  9249  03C0  0020               	movlb	0	; select bank0
  9250  03C1  07D3               	addwf	_packet_sample,f
  9251  03C2  002E               	movlb	14	; select bank14
  9252  03C3  081B               	movf	27,w	;volatile
  9253  03C4  0020               	movlb	0	; select bank0
  9254  03C5  3DD4               	addwfc	_packet_sample+1,f
  9255                           
  9256                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             packet_sample[1] += AAD2RE
      +                          S0;
  9257  03C6  002F               	movlb	15	; select bank15
  9258  03C7  081A               	movf	26,w	;volatile
  9259  03C8  0020               	movlb	0	; select bank0
  9260  03C9  07D5               	addwf	_packet_sample+2,f
  9261  03CA  002F               	movlb	15	; select bank15
  9262  03CB  081B               	movf	27,w	;volatile
  9263  03CC  0020               	movlb	0	; select bank0
  9264  03CD  3DD6               	addwfc	_packet_sample+3,f
  9265                           
  9266                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             if(activeSensor ==0)
  9267  03CE  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9268  03CF  1D03               	btfss	3,2
  9269  03D0  2BE9               	goto	l5759
  9270                           
  9271                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 600:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  9272  03D1  002E               	movlb	14	; select bank14
  9273  03D2  081A               	movf	26,w	;volatile
  9274  03D3  0020               	movlb	0	; select bank0
  9275  03D4  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9276  03D5  00F1               	movwf	abs@a
  9277  03D6  002E               	movlb	14	; select bank14
  9278  03D7  081B               	movf	27,w	;volatile
  9279  03D8  0020               	movlb	0	; select bank0
  9280  03D9  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9281  03DA  00F2               	movwf	abs@a+1
  9282  03DB  3196  269F  3182   	fcall	_abs
  9283  03DE  0871               	movf	?_abs,w
  9284  03DF  0020               	movlb	0	; select bank0
  9285  03E0  07DB               	addwf	_packet_noise,f
  9286  03E1  0872               	movf	?_abs+1,w
  9287  03E2  3DDC               	addwfc	_packet_noise+1,f
  9288                           
  9289                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:                 last_b = AAD1RES0;
  9290  03E3  002E               	movlb	14	; select bank14
  9291  03E4  081B               	movf	27,w	;volatile
  9292  03E5  0020               	movlb	0	; select bank0
  9293  03E6  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9294  03E7  002E               	movlb	14	; select bank14
  9295  03E8  2C00               	goto	L3
  9296  03E9                     l5759:	
  9297                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             }
  9298                           
  9299                           
  9300                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 605:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  9301  03E9  002F               	movlb	15	; select bank15
  9302  03EA  081A               	movf	26,w	;volatile
  9303  03EB  0020               	movlb	0	; select bank0
  9304  03EC  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9305  03ED  00F1               	movwf	abs@a
  9306  03EE  002F               	movlb	15	; select bank15
  9307  03EF  081B               	movf	27,w	;volatile
  9308  03F0  0020               	movlb	0	; select bank0
  9309  03F1  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9310  03F2  00F2               	movwf	abs@a+1
  9311  03F3  3196  269F  3182   	fcall	_abs
  9312  03F6  0871               	movf	?_abs,w
  9313  03F7  0020               	movlb	0	; select bank0
  9314  03F8  07DB               	addwf	_packet_noise,f
  9315  03F9  0872               	movf	?_abs+1,w
  9316  03FA  3DDC               	addwfc	_packet_noise+1,f
  9317                           
  9318                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:                 last_b = AAD2RES0;
  9319  03FB  002F               	movlb	15	; select bank15
  9320  03FC  081B               	movf	27,w	;volatile
  9321  03FD  0020               	movlb	0	; select bank0
  9322  03FE  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9323  03FF  002F               	movlb	15	; select bank15
  9324  0400                     L3:	
  9325  0400  081A               	movf	26,w	;volatile
  9326  0401  0020               	movlb	0	; select bank0
  9327  0402  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  9328  0403  2C38               	goto	l5775
  9329  0404                     l5763:	
  9330                           
  9331                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 611:             packet_sample[0] -= AAD1RES0;
  9332  0404  002E               	movlb	14	; select bank14
  9333  0405  081A               	movf	26,w	;volatile
  9334  0406  0020               	movlb	0	; select bank0
  9335  0407  02D3               	subwf	_packet_sample,f
  9336  0408  002E               	movlb	14	; select bank14
  9337  0409  081B               	movf	27,w	;volatile
  9338  040A  0020               	movlb	0	; select bank0
  9339  040B  3BD4               	subwfb	_packet_sample+1,f
  9340                           
  9341                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             packet_sample[1] -= AAD2RE
      +                          S0;
  9342  040C  002F               	movlb	15	; select bank15
  9343  040D  081A               	movf	26,w	;volatile
  9344  040E  0020               	movlb	0	; select bank0
  9345  040F  02D5               	subwf	_packet_sample+2,f
  9346  0410  002F               	movlb	15	; select bank15
  9347  0411  081B               	movf	27,w	;volatile
  9348  0412  0020               	movlb	0	; select bank0
  9349  0413  3BD6               	subwfb	_packet_sample+3,f
  9350                           
  9351                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 613:             if(activeSensor ==0)
  9352  0414  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9353  0415  1D03               	btfss	3,2
  9354  0416  2C1E               	goto	l5771
  9355                           
  9356                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 615:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  9357  0417  002E               	movlb	14	; select bank14
  9358  0418  081A               	movf	26,w	;volatile
  9359  0419  0020               	movlb	0	; select bank0
  9360  041A  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9361  041B  00F1               	movwf	abs@a
  9362  041C  002E               	movlb	14	; select bank14
  9363  041D  2C24               	goto	L6
  9364  041E                     l5771:	
  9365                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:             }
  9366                           
  9367                           
  9368                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 620:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  9369  041E  002F               	movlb	15	; select bank15
  9370  041F  081A               	movf	26,w	;volatile
  9371  0420  0020               	movlb	0	; select bank0
  9372  0421  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9373  0422  00F1               	movwf	abs@a
  9374  0423  002F               	movlb	15	; select bank15
  9375  0424                     L6:	
  9376  0424  081B               	movf	27,w	;volatile
  9377  0425  0020               	movlb	0	; select bank0
  9378  0426  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  9379  0427  00F2               	movwf	abs@a+1
  9380  0428  3196  269F  3182   	fcall	_abs
  9381  042B  0871               	movf	?_abs,w
  9382  042C  0020               	movlb	0	; select bank0
  9383  042D  07DB               	addwf	_packet_noise,f
  9384  042E  0872               	movf	?_abs+1,w
  9385  042F  3DDC               	addwfc	_packet_noise+1,f
  9386                           
  9387                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:                 last_a = AAD1RES0;
  9388  0430  002E               	movlb	14	; select bank14
  9389  0431  081B               	movf	27,w	;volatile
  9390  0432  0020               	movlb	0	; select bank0
  9391  0433  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  9392  0434  002E               	movlb	14	; select bank14
  9393  0435  081A               	movf	26,w	;volatile
  9394  0436  0020               	movlb	0	; select bank0
  9395  0437  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  9396  0438                     l5775:	
  9397                           
  9398                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:         if (packet_counter == 0)
  9399  0438  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  9400  0439  1903               	btfsc	3,2
  9401                           
  9402                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 629:             sensor_globalFlags.done = (uint8_t)1;
  9403  043A  1469               	bsf	_sensor_globalFlags,0	;volatile
  9404                           
  9405                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:         packet_counter--;
  9406  043B  3001               	movlw	1
  9407  043C  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  9408                           
  9409                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:         if (sensor_globalFlags.check !
      +                          = 0)
  9410  043D  1CE9               	btfss	_sensor_globalFlags,1	;volatile
  9411  043E  2C41               	goto	l303
  9412                           
  9413                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 635:             sensor_globalFlags.error = 1;
  9414  043F  1569               	bsf	_sensor_globalFlags,2	;volatile
  9415                           
  9416                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:             sensor_globalFlags.done = 
      +                          1;
  9417  0440  1469               	bsf	_sensor_globalFlags,0	;volatile
  9418  0441                     l303:	
  9419                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         }
  9420                           
  9421                           
  9422                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:         sensor_globalFlags.check = 1;
  9423  0441  14E9               	bsf	_sensor_globalFlags,1	;volatile
  9424                           
  9425                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:     } while(sensor_globalFlags.done ==
      +                           0);
  9426  0442  1C69               	btfss	_sensor_globalFlags,0	;volatile
  9427  0443  2B95               	goto	l5739
  9428                           
  9429                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     TMR2_StopTimer();
  9430  0444  3194  247F  3182   	fcall	_TMR2_StopTimer
  9431                           
  9432                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     ADCOMCON = ADCOMCON_temp;
  9433  0447  0020               	movlb	0	; select bank0
  9434  0448  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  9435  0449  002E               	movlb	14	; select bank14
  9436  044A  0092               	movwf	18	;volatile
  9437                           
  9438                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     AD1CON2 = AD1CON2_temp;
  9439  044B  0020               	movlb	0	; select bank0
  9440  044C  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  9441  044D  002E               	movlb	14	; select bank14
  9442  044E  0093               	movwf	19	;volatile
  9443                           
  9444                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     AD2CON2 = AD2CON2_temp;
  9445  044F  0020               	movlb	0	; select bank0
  9446  0450  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  9447  0451  002F               	movlb	15	; select bank15
  9448  0452  0093               	movwf	19	;volatile
  9449                           
  9450                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:     if(sensor_globalFlags.error)
  9451  0453  0020               	movlb	0	; select bank0
  9452  0454  1D69               	btfss	_sensor_globalFlags,2	;volatile
  9453  0455  2C58               	goto	l305
  9454                           
  9455                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 648:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  9456  0456  30FB               	movlw	251
  9457  0457  0008               	return
  9458  0458                     l305:	
  9459                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     }
  9460                           
  9461                           
  9462                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(sensor_globalFlags.interrupted)
  9463  0458  1DE9               	btfss	_sensor_globalFlags,3	;volatile
  9464  0459  2C5C               	goto	l5803
  9465                           
  9466                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 653:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  9467  045A  30FA               	movlw	250
  9468  045B  0008               	return
  9469  045C                     l5803:	
  9470                           
  9471                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     if (sensor1ForceEnabled)
  9472  045C  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  9473  045D  1903               	btfsc	3,2
  9474  045E  2C65               	goto	l5807
  9475                           
  9476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:         sensor_adc1->enabled = 0;
  9477  045F  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9478  0460  3E08               	addlw	8
  9479  0461  0086               	movwf	6
  9480  0462  3001               	movlw	1	; select bank2/3
  9481  0463  0087               	movwf	7
  9482  0464  1181               	bcf	1,3
  9483  0465                     l5807:	
  9484                           
  9485                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     if (sensor2ForceEnabled)
  9486  0465  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  9487  0466  1903               	btfsc	3,2
  9488  0467  2C6E               	goto	l5811
  9489                           
  9490                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:         sensor_adc2->enabled = 0;
  9491  0468  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9492  0469  3E08               	addlw	8
  9493  046A  0086               	movwf	6
  9494  046B  3001               	movlw	1	; select bank2/3
  9495  046C  0087               	movwf	7
  9496  046D  1181               	bcf	1,3
  9497  046E                     l5811:	
  9498                           
  9499                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  9500  046E  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9501  046F  3195  25C6  3182   	fcall	_Sensor_isEnabled
  9502  0472  3A00               	xorlw	0
  9503  0473  1903               	skipnz
  9504  0474  2C82               	goto	l5817
  9505  0475  0020               	movlb	0	; select bank0
  9506  0476  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9507  0477  3195  251F  3182   	fcall	_Sensor_isCalibrated
  9508  047A  3A00               	xorlw	0
  9509  047B  1D03               	skipz
  9510  047C  2C82               	goto	l5817
  9511                           
  9512                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:         Sensor_autoCalibration(sensor_
      +                          adc1);
  9513  047D  0020               	movlb	0	; select bank0
  9514  047E  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9515  047F  318F  276E  3182   	fcall	_Sensor_autoCalibration
  9516  0482                     l5817:	
  9517                           
  9518                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 667:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  9519  0482  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9520  0483  3195  25C6  3182   	fcall	_Sensor_isEnabled
  9521  0486  3A00               	xorlw	0
  9522  0487  1903               	skipnz
  9523  0488  2C94               	goto	l5823
  9524  0489  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9525  048A  3195  251F  3182   	fcall	_Sensor_isCalibrated
  9526  048D  3A00               	xorlw	0
  9527  048E  1D03               	skipz
  9528  048F  2C94               	goto	l5823
  9529                           
  9530                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:         Sensor_autoCalibration(sensor_
      +                          adc2);
  9531  0490  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9532  0491  318F  276E  3182   	fcall	_Sensor_autoCalibration
  9533  0494                     l5823:	
  9534                           
  9535                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 670:     AD1PRECON = 0;
  9536  0494  002E               	movlb	14	; select bank14
  9537  0495  0196               	clrf	22	;volatile
  9538                           
  9539                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671:     AD2PRECON = 0;
  9540  0496  002F               	movlb	15	; select bank15
  9541  0497  0196               	clrf	22	;volatile
  9542                           
  9543                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     AD1ACQCON = 0;
  9544  0498  002E               	movlb	14	; select bank14
  9545  0499  0197               	clrf	23	;volatile
  9546                           
  9547                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:     AD2ACQCON = 0;
  9548  049A  002F               	movlb	15	; select bank15
  9549  049B  0197               	clrf	23	;volatile
  9550                           
  9551                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 674:     AD1CON0bits.ADON = 0;
  9552  049C  002E               	movlb	14	; select bank14
  9553  049D  1011               	bcf	17,0	;volatile
  9554                           
  9555                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     AD2CON0bits.ADON = 0;
  9556  049E  002F               	movlb	15	; select bank15
  9557  049F  1011               	bcf	17,0	;volatile
  9558  04A0  2B30               	goto	l5663
  9559  04A1                     __end_of_Sensor_Acq_ExecutePacket:	
  9560                           
  9561                           	psect	text49
  9562  147F                     __ptext49:	
  9563 ;; *************** function _TMR2_StopTimer *****************
  9564 ;; Defined at:
  9565 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;		None
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;		None
  9570 ;; Return value:  Size  Location     Type
  9571 ;;                  1    wreg      void 
  9572 ;; Registers used:
  9573 ;;		None
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9579 ;;      Params:         0       0       0       0       0       0       0       0
  9580 ;;      Locals:         0       0       0       0       0       0       0       0
  9581 ;;      Temps:          0       0       0       0       0       0       0       0
  9582 ;;      Totals:         0       0       0       0       0       0       0       0
  9583 ;;Total ram usage:        0 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:    4
  9586 ;; This function calls:
  9587 ;;		Nothing
  9588 ;; This function is called by:
  9589 ;;		_Sensor_Acq_ExecutePacket
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           
  9594                           ;psect for function _TMR2_StopTimer
  9595  147F                     _TMR2_StopTimer:	
  9596                           
  9597                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  9598                           
  9599                           ;incstack = 0
  9600                           ; Regs used in _TMR2_StopTimer: []
  9601  147F  0020               	movlb	0	; select bank0
  9602  1480  111C               	bcf	28,2	;volatile
  9603  1481  0008               	return
  9604  1482                     __end_of_TMR2_StopTimer:	
  9605                           
  9606                           	psect	text50
  9607  147C                     __ptext50:	
  9608 ;; *************** function _TMR2_StartTimer *****************
  9609 ;; Defined at:
  9610 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;		None
  9613 ;; Auto vars:     Size  Location     Type
  9614 ;;		None
  9615 ;; Return value:  Size  Location     Type
  9616 ;;                  1    wreg      void 
  9617 ;; Registers used:
  9618 ;;		None
  9619 ;; Tracked objects:
  9620 ;;		On entry : 0/0
  9621 ;;		On exit  : 0/0
  9622 ;;		Unchanged: 0/0
  9623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9624 ;;      Params:         0       0       0       0       0       0       0       0
  9625 ;;      Locals:         0       0       0       0       0       0       0       0
  9626 ;;      Temps:          0       0       0       0       0       0       0       0
  9627 ;;      Totals:         0       0       0       0       0       0       0       0
  9628 ;;Total ram usage:        0 bytes
  9629 ;; Hardware stack levels used:    1
  9630 ;; Hardware stack levels required when called:    4
  9631 ;; This function calls:
  9632 ;;		Nothing
  9633 ;; This function is called by:
  9634 ;;		_Sensor_Acq_ExecutePacket
  9635 ;; This function uses a non-reentrant model
  9636 ;;
  9637                           
  9638                           
  9639                           ;psect for function _TMR2_StartTimer
  9640  147C                     _TMR2_StartTimer:	
  9641                           
  9642                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  9643                           
  9644                           ;incstack = 0
  9645                           ; Regs used in _TMR2_StartTimer: []
  9646  147C  0020               	movlb	0	; select bank0
  9647  147D  151C               	bsf	28,2	;volatile
  9648  147E  0008               	return
  9649  147F                     __end_of_TMR2_StartTimer:	
  9650                           
  9651                           	psect	text51
  9652  14A8                     __ptext51:	
  9653 ;; *************** function _TMR2_LoadPeriodRegister *****************
  9654 ;; Defined at:
  9655 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  9656 ;; Parameters:    Size  Location     Type
  9657 ;;  periodVal       1    wreg     unsigned char 
  9658 ;; Auto vars:     Size  Location     Type
  9659 ;;  periodVal       1    1[COMMON] unsigned char 
  9660 ;; Return value:  Size  Location     Type
  9661 ;;                  1    wreg      void 
  9662 ;; Registers used:
  9663 ;;		wreg
  9664 ;; Tracked objects:
  9665 ;;		On entry : 0/0
  9666 ;;		On exit  : 0/0
  9667 ;;		Unchanged: 0/0
  9668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9669 ;;      Params:         0       0       0       0       0       0       0       0
  9670 ;;      Locals:         1       0       0       0       0       0       0       0
  9671 ;;      Temps:          0       0       0       0       0       0       0       0
  9672 ;;      Totals:         1       0       0       0       0       0       0       0
  9673 ;;Total ram usage:        1 bytes
  9674 ;; Hardware stack levels used:    1
  9675 ;; Hardware stack levels required when called:    4
  9676 ;; This function calls:
  9677 ;;		Nothing
  9678 ;; This function is called by:
  9679 ;;		_Sensor_Acq_ExecutePacket
  9680 ;; This function uses a non-reentrant model
  9681 ;;
  9682                           
  9683                           
  9684                           ;psect for function _TMR2_LoadPeriodRegister
  9685  14A8                     _TMR2_LoadPeriodRegister:	
  9686                           
  9687                           ;incstack = 0
  9688                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  9689                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  9690  14A8  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  9691                           
  9692                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  9693  14A9  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  9694  14AA  0020               	movlb	0	; select bank0
  9695  14AB  009B               	movwf	27	;volatile
  9696  14AC  0008               	return
  9697  14AD                     __end_of_TMR2_LoadPeriodRegister:	
  9698                           
  9699                           	psect	text52
  9700  04A1                     __ptext52:	
  9701 ;; *************** function _Sensor_loadADCSettings *****************
  9702 ;; Defined at:
  9703 ;;		line 437 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9704 ;; Parameters:    Size  Location     Type
  9705 ;;  sensor          1    wreg     PTR struct .
  9706 ;;		 -> NULL(0), mtouch_sensor(27), 
  9707 ;;  adc_index       1    2[COMMON] unsigned char 
  9708 ;; Auto vars:     Size  Location     Type
  9709 ;;  sensor          1    9[COMMON] PTR struct .
  9710 ;;		 -> NULL(0), mtouch_sensor(27), 
  9711 ;;  addressOffse    1    8[COMMON] unsigned char 
  9712 ;; Return value:  Size  Location     Type
  9713 ;;                  1    wreg      void 
  9714 ;; Registers used:
  9715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9716 ;; Tracked objects:
  9717 ;;		On entry : 0/0
  9718 ;;		On exit  : 0/0
  9719 ;;		Unchanged: 0/0
  9720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9721 ;;      Params:         1       0       0       0       0       0       0       0
  9722 ;;      Locals:         4       0       0       0       0       0       0       0
  9723 ;;      Temps:          3       0       0       0       0       0       0       0
  9724 ;;      Totals:         8       0       0       0       0       0       0       0
  9725 ;;Total ram usage:        8 bytes
  9726 ;; Hardware stack levels used:    1
  9727 ;; Hardware stack levels required when called:    5
  9728 ;; This function calls:
  9729 ;;		_Sensor_isCalibrated
  9730 ;;		_Sensor_isCalibratingAcqTime
  9731 ;; This function is called by:
  9732 ;;		_Sensor_Acq_ExecutePacket
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           
  9737                           ;psect for function _Sensor_loadADCSettings
  9738  04A1                     _Sensor_loadADCSettings:	
  9739                           
  9740                           ;incstack = 0
  9741                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9742                           ;Sensor_loadADCSettings@sensor stored from wreg
  9743  04A1  00F9               	movwf	Sensor_loadADCSettings@sensor
  9744                           
  9745                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 438
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     if (sensor == ((void*)0))
  9746  04A2  0879               	movf	Sensor_loadADCSettings@sensor,w
  9747  04A3  1903               	btfsc	3,2
  9748  04A4  0008               	return
  9749                           
  9750                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  9751  04A5  0872               	movf	Sensor_loadADCSettings@adc_index,w
  9752  04A6  1D03               	btfss	3,2
  9753  04A7  2CAB               	goto	l3859
  9754  04A8  01F6               	clrf	_Sensor_loadADCSettings$562
  9755  04A9  01F7               	clrf	_Sensor_loadADCSettings$562+1
  9756  04AA  2CAF               	goto	l257
  9757  04AB                     l3859:	
  9758  04AB  3080               	movlw	128
  9759  04AC  00F6               	movwf	_Sensor_loadADCSettings$562
  9760  04AD  3000               	movlw	0
  9761  04AE  00F7               	movwf	_Sensor_loadADCSettings$562+1
  9762  04AF                     l257:	
  9763  04AF  0876               	movf	_Sensor_loadADCSettings$562,w
  9764  04B0  00F3               	movwf	??_Sensor_loadADCSettings
  9765  04B1  0873               	movf	??_Sensor_loadADCSettings,w
  9766  04B2  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  9767                           
  9768                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  9769  04B3  0A79               	incf	Sensor_loadADCSettings@sensor,w
  9770  04B4  0086               	movwf	6
  9771  04B5  3001               	movlw	1	; select bank2/3
  9772  04B6  0087               	movwf	7
  9773  04B7  0801               	movf	1,w
  9774  04B8  00F3               	movwf	??_Sensor_loadADCSettings
  9775  04B9  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9776  04BA  3E11               	addlw	17
  9777  04BB  00F4               	movwf	??_Sensor_loadADCSettings+1
  9778  04BC  01F5               	clrf	??_Sensor_loadADCSettings+2
  9779  04BD  3007               	movlw	7
  9780  04BE  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9781  04BF  0874               	movf	??_Sensor_loadADCSettings+1,w
  9782  04C0  0086               	movwf	6
  9783  04C1  0875               	movf	??_Sensor_loadADCSettings+2,w
  9784  04C2  0087               	movwf	7
  9785  04C3  0873               	movf	??_Sensor_loadADCSettings,w
  9786  04C4  0081               	movwf	1
  9787                           
  9788                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  9789  04C5  0879               	movf	Sensor_loadADCSettings@sensor,w
  9790  04C6  3E05               	addlw	5
  9791  04C7  0086               	movwf	6
  9792  04C8  3001               	movlw	1	; select bank2/3
  9793  04C9  0087               	movwf	7
  9794  04CA  0801               	movf	1,w
  9795  04CB  00F3               	movwf	??_Sensor_loadADCSettings
  9796  04CC  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9797  04CD  3E19               	addlw	25
  9798  04CE  00F4               	movwf	??_Sensor_loadADCSettings+1
  9799  04CF  01F5               	clrf	??_Sensor_loadADCSettings+2
  9800  04D0  3007               	movlw	7
  9801  04D1  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9802  04D2  0874               	movf	??_Sensor_loadADCSettings+1,w
  9803  04D3  0086               	movwf	6
  9804  04D4  0875               	movf	??_Sensor_loadADCSettings+2,w
  9805  04D5  0087               	movwf	7
  9806  04D6  0873               	movf	??_Sensor_loadADCSettings,w
  9807  04D7  0081               	movwf	1
  9808                           
  9809                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  9810  04D8  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9811  04D9  3E13               	addlw	19
  9812  04DA  00F3               	movwf	??_Sensor_loadADCSettings
  9813  04DB  01F4               	clrf	??_Sensor_loadADCSettings+1
  9814  04DC  3007               	movlw	7
  9815  04DD  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9816  04DE  0873               	movf	??_Sensor_loadADCSettings,w
  9817  04DF  0086               	movwf	6
  9818  04E0  0874               	movf	??_Sensor_loadADCSettings+1,w
  9819  04E1  0087               	movwf	7
  9820  04E2  3050               	movlw	80
  9821  04E3  0081               	movwf	1
  9822                           
  9823                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  9824  04E4  30FE               	movlw	254
  9825  04E5  00F3               	movwf	??_Sensor_loadADCSettings
  9826  04E6  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9827  04E7  3E18               	addlw	24
  9828  04E8  0086               	movwf	6
  9829  04E9  0187               	clrf	7
  9830  04EA  3007               	movlw	7
  9831  04EB  3D87               	addwfc	7,f
  9832  04EC  0873               	movf	??_Sensor_loadADCSettings,w
  9833  04ED  0581               	andwf	1,f
  9834                           
  9835                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:     if (Sensor_isCalibrated(sensor))
  9836  04EE  0879               	movf	Sensor_loadADCSettings@sensor,w
  9837  04EF  3195  251F  3184   	fcall	_Sensor_isCalibrated
  9838  04F2  3A00               	xorlw	0
  9839  04F3  1903               	skipnz
  9840  04F4  2D09               	goto	l3873
  9841                           
  9842                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 451:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  9843  04F5  0879               	movf	Sensor_loadADCSettings@sensor,w
  9844  04F6  3E02               	addlw	2
  9845  04F7  0086               	movwf	6
  9846  04F8  3001               	movlw	1	; select bank2/3
  9847  04F9  0087               	movwf	7
  9848  04FA  0801               	movf	1,w
  9849  04FB  00F3               	movwf	??_Sensor_loadADCSettings
  9850  04FC  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9851  04FD  3E16               	addlw	22
  9852  04FE  00F4               	movwf	??_Sensor_loadADCSettings+1
  9853  04FF  01F5               	clrf	??_Sensor_loadADCSettings+2
  9854  0500  3007               	movlw	7
  9855  0501  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9856  0502  0874               	movf	??_Sensor_loadADCSettings+1,w
  9857  0503  0086               	movwf	6
  9858  0504  0875               	movf	??_Sensor_loadADCSettings+2,w
  9859  0505  0087               	movwf	7
  9860  0506  0873               	movf	??_Sensor_loadADCSettings,w
  9861  0507  0081               	movwf	1
  9862  0508  2D1C               	goto	l3877
  9863  0509                     l3873:	
  9864                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     }
  9865                           
  9866                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  9867                           
  9868                           
  9869                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 456:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  9870  0509  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9871  050A  3E16               	addlw	22
  9872  050B  00F3               	movwf	??_Sensor_loadADCSettings
  9873  050C  01F4               	clrf	??_Sensor_loadADCSettings+1
  9874  050D  3007               	movlw	7
  9875  050E  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9876  050F  0873               	movf	??_Sensor_loadADCSettings,w
  9877  0510  0086               	movwf	6
  9878  0511  0874               	movf	??_Sensor_loadADCSettings+1,w
  9879  0512  0087               	movwf	7
  9880  0513  3020               	movlw	32
  9881  0514  0081               	movwf	1
  9882                           
  9883                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  9884  0515  0879               	movf	Sensor_loadADCSettings@sensor,w
  9885  0516  3195  2516  3184   	fcall	_Sensor_isCalibratingAcqTime
  9886  0519  3A00               	xorlw	0
  9887  051A  1903               	skipnz
  9888  051B  2D2F               	goto	l3879
  9889  051C                     l3877:	
  9890                           
  9891                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  9892  051C  0879               	movf	Sensor_loadADCSettings@sensor,w
  9893  051D  3E03               	addlw	3
  9894  051E  0086               	movwf	6
  9895  051F  3001               	movlw	1	; select bank2/3
  9896  0520  0087               	movwf	7
  9897  0521  0801               	movf	1,w
  9898  0522  00F3               	movwf	??_Sensor_loadADCSettings
  9899  0523  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9900  0524  3E17               	addlw	23
  9901  0525  00F4               	movwf	??_Sensor_loadADCSettings+1
  9902  0526  01F5               	clrf	??_Sensor_loadADCSettings+2
  9903  0527  3007               	movlw	7
  9904  0528  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9905  0529  0874               	movf	??_Sensor_loadADCSettings+1,w
  9906  052A  0086               	movwf	6
  9907  052B  0875               	movf	??_Sensor_loadADCSettings+2,w
  9908  052C  0087               	movwf	7
  9909  052D  0873               	movf	??_Sensor_loadADCSettings,w
  9910  052E  2D3A               	goto	L7
  9911  052F                     l3879:	
  9912                           
  9913                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  9914  052F  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9915  0530  3E17               	addlw	23
  9916  0531  00F3               	movwf	??_Sensor_loadADCSettings
  9917  0532  01F4               	clrf	??_Sensor_loadADCSettings+1
  9918  0533  3007               	movlw	7
  9919  0534  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9920  0535  0873               	movf	??_Sensor_loadADCSettings,w
  9921  0536  0086               	movwf	6
  9922  0537  0874               	movf	??_Sensor_loadADCSettings+1,w
  9923  0538  0087               	movwf	7
  9924  0539  3020               	movlw	32
  9925  053A                     L7:	
  9926  053A  0081               	movwf	1
  9927                           
  9928                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  9929                           
  9930                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  9931  053B  0879               	movf	Sensor_loadADCSettings@sensor,w
  9932  053C  3E04               	addlw	4
  9933  053D  0086               	movwf	6
  9934  053E  3001               	movlw	1	; select bank2/3
  9935  053F  0087               	movwf	7
  9936  0540  0801               	movf	1,w
  9937  0541  00F3               	movwf	??_Sensor_loadADCSettings
  9938  0542  01F4               	clrf	??_Sensor_loadADCSettings+1
  9939  0543  3009               	movlw	9
  9940  0544                     u2305:	
  9941  0544  35F3               	lslf	??_Sensor_loadADCSettings,f
  9942  0545  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  9943  0546  0B89               	decfsz	9,f
  9944  0547  2D44               	goto	u2305
  9945  0548  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  9946  0549  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  9947  054A  0086               	movwf	6
  9948  054B  0187               	clrf	7
  9949  054C  0873               	movf	??_Sensor_loadADCSettings,w
  9950  054D  3FC0               	movwi [0]fsr1
  9951  054E  0874               	movf	??_Sensor_loadADCSettings+1,w
  9952  054F  3FC1               	movwi [1]fsr1
  9953  0550  0008               	return
  9954  0551                     __end_of_Sensor_loadADCSettings:	
  9955                           
  9956                           	psect	text53
  9957  151F                     __ptext53:	
  9958 ;; *************** function _Sensor_isCalibrated *****************
  9959 ;; Defined at:
  9960 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;  sensor          1    wreg     PTR struct .
  9963 ;;		 -> NULL(0), mtouch_sensor(27), 
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  sensor          1    1[COMMON] PTR struct .
  9966 ;;		 -> NULL(0), mtouch_sensor(27), 
  9967 ;; Return value:  Size  Location     Type
  9968 ;;                  1    wreg      _Bool 
  9969 ;; Registers used:
  9970 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9971 ;; Tracked objects:
  9972 ;;		On entry : 0/0
  9973 ;;		On exit  : 0/0
  9974 ;;		Unchanged: 0/0
  9975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9976 ;;      Params:         0       0       0       0       0       0       0       0
  9977 ;;      Locals:         1       0       0       0       0       0       0       0
  9978 ;;      Temps:          0       0       0       0       0       0       0       0
  9979 ;;      Totals:         1       0       0       0       0       0       0       0
  9980 ;;Total ram usage:        1 bytes
  9981 ;; Hardware stack levels used:    1
  9982 ;; Hardware stack levels required when called:    4
  9983 ;; This function calls:
  9984 ;;		Nothing
  9985 ;; This function is called by:
  9986 ;;		_Sensor_Acquisition
  9987 ;;		_Sensor_loadADCSettings
  9988 ;;		_Sensor_Acq_ExecutePacket
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           
  9993                           ;psect for function _Sensor_isCalibrated
  9994  151F                     _Sensor_isCalibrated:	
  9995                           
  9996                           ;incstack = 0
  9997                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  9998                           ;Sensor_isCalibrated@sensor stored from wreg
  9999  151F  00F1               	movwf	Sensor_isCalibrated@sensor
 10000                           
 10001                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor->calibr
      +                          ated;
 10002  1520  0871               	movf	Sensor_isCalibrated@sensor,w
 10003  1521  3E08               	addlw	8
 10004  1522  0086               	movwf	6
 10005  1523  3001               	movlw	1	; select bank2/3
 10006  1524  0087               	movwf	7
 10007  1525  0C01               	rrf	1,w
 10008  1526  0C89               	rrf	9,f
 10009  1527  3901               	andlw	1
 10010  1528  0008               	return
 10011  1529                     __end_of_Sensor_isCalibrated:	
 10012                           
 10013                           	psect	text54
 10014  15C6                     __ptext54:	
 10015 ;; *************** function _Sensor_isEnabled *****************
 10016 ;; Defined at:
 10017 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;  sensor          1    wreg     PTR struct .
 10020 ;;		 -> NULL(0), mtouch_sensor(27), 
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  sensor          1    2[COMMON] PTR struct .
 10023 ;;		 -> NULL(0), mtouch_sensor(27), 
 10024 ;; Return value:  Size  Location     Type
 10025 ;;                  1    wreg      _Bool 
 10026 ;; Registers used:
 10027 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/0
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10033 ;;      Params:         0       0       0       0       0       0       0       0
 10034 ;;      Locals:         1       0       0       0       0       0       0       0
 10035 ;;      Temps:          1       0       0       0       0       0       0       0
 10036 ;;      Totals:         2       0       0       0       0       0       0       0
 10037 ;;Total ram usage:        2 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; Hardware stack levels required when called:    4
 10040 ;; This function calls:
 10041 ;;		Nothing
 10042 ;; This function is called by:
 10043 ;;		_Sensor_Service
 10044 ;;		_Sensor_postAcquisitionProcess
 10045 ;;		_Sensor_Acq_ExecutePacket
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           
 10050                           ;psect for function _Sensor_isEnabled
 10051  15C6                     _Sensor_isEnabled:	
 10052                           
 10053                           ;incstack = 0
 10054                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
 10055                           ;Sensor_isEnabled@sensor stored from wreg
 10056  15C6  00F2               	movwf	Sensor_isEnabled@sensor
 10057                           
 10058                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 857:     if(sensor!=((void*)0))
 10059  15C7  0872               	movf	Sensor_isEnabled@sensor,w
 10060  15C8  1903               	btfsc	3,2
 10061  15C9  2DD5               	goto	l3837
 10062                           
 10063                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 858:         return (_Bool)sensor->enabled;
 10064  15CA  0872               	movf	Sensor_isEnabled@sensor,w
 10065  15CB  3E08               	addlw	8
 10066  15CC  0086               	movwf	6
 10067  15CD  3001               	movlw	1	; select bank2/3
 10068  15CE  0087               	movwf	7
 10069  15CF  0C01               	rrf	1,w
 10070  15D0  00F1               	movwf	??_Sensor_isEnabled
 10071  15D1  0CF1               	rrf	??_Sensor_isEnabled,f
 10072  15D2  0C71               	rrf	??_Sensor_isEnabled,w
 10073  15D3  3901               	andlw	1
 10074  15D4  0008               	return
 10075  15D5                     l3837:	
 10076                           
 10077                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860:         return 0;
 10078  15D5  3000               	movlw	0
 10079  15D6  0008               	return
 10080  15D7                     __end_of_Sensor_isEnabled:	
 10081                           
 10082                           	psect	text55
 10083  155B                     __ptext55:	
 10084 ;; *************** function _Sensor_isActive *****************
 10085 ;; Defined at:
 10086 ;;		line 882 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10087 ;; Parameters:    Size  Location     Type
 10088 ;;  sensor          1    wreg     PTR struct .
 10089 ;;		 -> NULL(0), mtouch_sensor(27), 
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;  sensor          1    1[COMMON] PTR struct .
 10092 ;;		 -> NULL(0), mtouch_sensor(27), 
 10093 ;; Return value:  Size  Location     Type
 10094 ;;                  1    wreg      _Bool 
 10095 ;; Registers used:
 10096 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10102 ;;      Params:         0       0       0       0       0       0       0       0
 10103 ;;      Locals:         1       0       0       0       0       0       0       0
 10104 ;;      Temps:          0       0       0       0       0       0       0       0
 10105 ;;      Totals:         1       0       0       0       0       0       0       0
 10106 ;;Total ram usage:        1 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    4
 10109 ;; This function calls:
 10110 ;;		Nothing
 10111 ;; This function is called by:
 10112 ;;		_Sensor_Acquisition
 10113 ;;		_Sensor_Acq_ExecutePacket
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117                           
 10118                           ;psect for function _Sensor_isActive
 10119  155B                     _Sensor_isActive:	
 10120                           
 10121                           ;incstack = 0
 10122                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
 10123                           ;Sensor_isActive@sensor stored from wreg
 10124  155B  00F1               	movwf	Sensor_isActive@sensor
 10125                           
 10126                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 882: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 883:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 884:     if(sensor == ((void*)0))
 10127  155C  0871               	movf	Sensor_isActive@sensor,w
 10128  155D  1D03               	btfss	3,2
 10129  155E  2D61               	goto	l3847
 10130                           
 10131                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885:         return 0;
 10132  155F  3000               	movlw	0
 10133  1560  0008               	return
 10134  1561                     l3847:	
 10135                           
 10136                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     return (_Bool)sensor->active;
 10137  1561  0871               	movf	Sensor_isActive@sensor,w
 10138  1562  3E08               	addlw	8
 10139  1563  0086               	movwf	6
 10140  1564  3001               	movlw	1	; select bank2/3
 10141  1565  0087               	movwf	7
 10142  1566  0C01               	rrf	1,w
 10143  1567  3901               	andlw	1
 10144  1568  0008               	return
 10145  1569                     __end_of_Sensor_isActive:	
 10146                           
 10147                           	psect	text56
 10148  0F6E                     __ptext56:	
 10149 ;; *************** function _Sensor_autoCalibration *****************
 10150 ;; Defined at:
 10151 ;;		line 688 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10152 ;; Parameters:    Size  Location     Type
 10153 ;;  sensor          1    wreg     PTR struct .
 10154 ;;		 -> NULL(0), mtouch_sensor(27), 
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;  sensor          1   10[COMMON] PTR struct .
 10157 ;;		 -> NULL(0), mtouch_sensor(27), 
 10158 ;;  adcIndex        1    9[COMMON] unsigned char 
 10159 ;; Return value:  Size  Location     Type
 10160 ;;                  1    wreg      void 
 10161 ;; Registers used:
 10162 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10168 ;;      Params:         0       0       0       0       0       0       0       0
 10169 ;;      Locals:         2       0       0       0       0       0       0       0
 10170 ;;      Temps:          4       0       0       0       0       0       0       0
 10171 ;;      Totals:         6       0       0       0       0       0       0       0
 10172 ;;Total ram usage:        6 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; Hardware stack levels required when called:    5
 10175 ;; This function calls:
 10176 ;;		_Sensor_getScanGroupIndex
 10177 ;;		_Sensor_isCalibratingAcqTime
 10178 ;;		_Sensor_setCalibratAcqTime
 10179 ;;		_Sensor_setCalibrated
 10180 ;;		_abs
 10181 ;; This function is called by:
 10182 ;;		_Sensor_Acq_ExecutePacket
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           
 10187                           ;psect for function _Sensor_autoCalibration
 10188  0F6E                     _Sensor_autoCalibration:	
 10189                           
 10190                           ;incstack = 0
 10191                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10192                           ;Sensor_autoCalibration@sensor stored from wreg
 10193  0F6E  00FA               	movwf	Sensor_autoCalibration@sensor
 10194                           
 10195                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 689: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 690:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
 10196  0F6F  087A               	movf	Sensor_autoCalibration@sensor,w
 10197  0F70  3188  20E6  318F   	fcall	_Sensor_getScanGroupIndex
 10198  0F73  00F5               	movwf	??_Sensor_autoCalibration
 10199  0F74  0875               	movf	??_Sensor_autoCalibration,w
 10200  0F75  00F9               	movwf	Sensor_autoCalibration@adcIndex
 10201                           
 10202                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
 10203  0F76  087A               	movf	Sensor_autoCalibration@sensor,w
 10204  0F77  3195  2516  318F   	fcall	_Sensor_isCalibratingAcqTime
 10205  0F7A  3A00               	xorlw	0
 10206  0F7B  1D03               	skipz
 10207  0F7C  2FAF               	goto	l3899
 10208                           
 10209                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 694:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
 10210  0F7D  3579               	lslf	Sensor_autoCalibration@adcIndex,w
 10211  0F7E  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
 10212  0F7F  0086               	movwf	6
 10213  0F80  0187               	clrf	7
 10214  0F81  3F40               	moviw [0]fsr1
 10215  0F82  00F5               	movwf	??_Sensor_autoCalibration
 10216  0F83  3F41               	moviw [1]fsr1
 10217  0F84  00F6               	movwf	??_Sensor_autoCalibration+1
 10218  0F85  087A               	movf	Sensor_autoCalibration@sensor,w
 10219  0F86  3E04               	addlw	4
 10220  0F87  0086               	movwf	6
 10221  0F88  3001               	movlw	1	; select bank2/3
 10222  0F89  0087               	movwf	7
 10223  0F8A  0801               	movf	1,w
 10224  0F8B  00F7               	movwf	??_Sensor_autoCalibration+2
 10225  0F8C  01F8               	clrf	??_Sensor_autoCalibration+3
 10226  0F8D  3009               	movlw	9
 10227  0F8E                     u2325:	
 10228  0F8E  35F7               	lslf	??_Sensor_autoCalibration+2,f
 10229  0F8F  0DF8               	rlf	??_Sensor_autoCalibration+3,f
 10230  0F90  0B89               	decfsz	9,f
 10231  0F91  2F8E               	goto	u2325
 10232  0F92  0876               	movf	??_Sensor_autoCalibration+1,w
 10233  0F93  0278               	subwf	??_Sensor_autoCalibration+3,w
 10234  0F94  1D03               	skipz
 10235  0F95  2F98               	goto	u2335
 10236  0F96  0875               	movf	??_Sensor_autoCalibration,w
 10237  0F97  0277               	subwf	??_Sensor_autoCalibration+2,w
 10238  0F98                     u2335:	
 10239  0F98  1803               	skipnc
 10240  0F99  2FAB               	goto	l3897
 10241                           
 10242                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 696:             if(++(sensor->addcap) >= (uint8_t)0x0F)
 10243  0F9A  3001               	movlw	1
 10244  0F9B  00F5               	movwf	??_Sensor_autoCalibration
 10245  0F9C  087A               	movf	Sensor_autoCalibration@sensor,w
 10246  0F9D  3E05               	addlw	5
 10247  0F9E  0086               	movwf	6
 10248  0F9F  3001               	movlw	1	; select bank2/3
 10249  0FA0  0087               	movwf	7
 10250  0FA1  0875               	movf	??_Sensor_autoCalibration,w
 10251  0FA2  0781               	addwf	1,f
 10252  0FA3  300F               	movlw	15
 10253  0FA4  0201               	subwf	1,w
 10254  0FA5  1C03               	skipc
 10255  0FA6  0008               	return
 10256                           
 10257                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 697:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
 10258  0FA7  087A               	movf	Sensor_autoCalibration@sensor,w
 10259  0FA8  3195  2586         	fcall	_Sensor_setCalibratAcqTime
 10260  0FAA  0008               	return
 10261  0FAB                     l3897:	
 10262                           
 10263                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 701:              Sensor_setCalibratAcqTime(sensor);
 10264  0FAB  087A               	movf	Sensor_autoCalibration@sensor,w
 10265  0FAC  3195  2586         	fcall	_Sensor_setCalibratAcqTime
 10266  0FAE  0008               	return
 10267  0FAF                     l3899:	
 10268                           
 10269                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 706:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 10270  0FAF  087A               	movf	Sensor_autoCalibration@sensor,w
 10271  0FB0  3E04               	addlw	4
 10272  0FB1  0086               	movwf	6
 10273  0FB2  3001               	movlw	1	; select bank2/3
 10274  0FB3  0087               	movwf	7
 10275  0FB4  0801               	movf	1,w
 10276  0FB5  00F5               	movwf	??_Sensor_autoCalibration
 10277  0FB6  01F6               	clrf	??_Sensor_autoCalibration+1
 10278  0FB7  35F5               	lslf	??_Sensor_autoCalibration,f
 10279  0FB8  0DF6               	rlf	??_Sensor_autoCalibration+1,f
 10280  0FB9  087A               	movf	Sensor_autoCalibration@sensor,w
 10281  0FBA  3E06               	addlw	6
 10282  0FBB  0086               	movwf	6
 10283  0FBC  3001               	movlw	1	; select bank2/3
 10284  0FBD  0087               	movwf	7
 10285  0FBE  3579               	lslf	Sensor_autoCalibration@adcIndex,w
 10286  0FBF  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
 10287  0FC0  0084               	movwf	4
 10288  0FC1  0185               	clrf	5
 10289  0FC2  3F40               	moviw [0]fsr1
 10290  0FC3  0200               	subwf	0,w
 10291  0FC4  00F1               	movwf	abs@a
 10292  0FC5  3101               	addfsr 0,1
 10293  0FC6  3F41               	moviw [1]fsr1
 10294  0FC7  3B00               	subwfb	0,w
 10295  0FC8  00F2               	movwf	abs@a+1
 10296  0FC9  3196  269F  318F   	fcall	_abs
 10297  0FCC  0876               	movf	??_Sensor_autoCalibration+1,w
 10298  0FCD  0272               	subwf	?_abs+1,w
 10299  0FCE  1D03               	skipz
 10300  0FCF  2FD2               	goto	u2355
 10301  0FD0  0875               	movf	??_Sensor_autoCalibration,w
 10302  0FD1  0271               	subwf	?_abs,w
 10303  0FD2                     u2355:	
 10304  0FD2  1803               	skipnc
 10305  0FD3  2FE1               	goto	l3905
 10306                           
 10307                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 707:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 708:             sensor->precharge_time = (mtouch_sensor_time_t)32;
 10308  0FD4  3020               	movlw	32
 10309  0FD5  00F5               	movwf	??_Sensor_autoCalibration
 10310  0FD6  087A               	movf	Sensor_autoCalibration@sensor,w
 10311  0FD7  3E02               	addlw	2
 10312  0FD8  0086               	movwf	6
 10313  0FD9  3001               	movlw	1	; select bank2/3
 10314  0FDA  0087               	movwf	7
 10315  0FDB  0875               	movf	??_Sensor_autoCalibration,w
 10316  0FDC  0081               	movwf	1
 10317                           
 10318                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             Sensor_setCalibrated(senso
      +                          r);
 10319  0FDD  087A               	movf	Sensor_autoCalibration@sensor,w
 10320  0FDE  3195  254D         	fcall	_Sensor_setCalibrated
 10321                           
 10322                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 710:         }
 10323  0FE0  0008               	return
 10324  0FE1                     l3905:	
 10325                           
 10326                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 712:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->acquisition_time += (uint8_t)2;
 10327  0FE1  3002               	movlw	2
 10328  0FE2  00F5               	movwf	??_Sensor_autoCalibration
 10329  0FE3  087A               	movf	Sensor_autoCalibration@sensor,w
 10330  0FE4  3E03               	addlw	3
 10331  0FE5  0086               	movwf	6
 10332  0FE6  3001               	movlw	1	; select bank2/3
 10333  0FE7  0087               	movwf	7
 10334  0FE8  0875               	movf	??_Sensor_autoCalibration,w
 10335  0FE9  0781               	addwf	1,f
 10336                           
 10337                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
 10338  0FEA  087A               	movf	Sensor_autoCalibration@sensor,w
 10339  0FEB  3E03               	addlw	3
 10340  0FEC  0086               	movwf	6
 10341  0FED  3001               	movlw	1	; select bank2/3
 10342  0FEE  0087               	movwf	7
 10343  0FEF  3020               	movlw	32
 10344  0FF0  0201               	subwf	1,w
 10345  0FF1  1C03               	skipc
 10346  0FF2  0008               	return
 10347                           
 10348                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 719:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
 10349  0FF3  3020               	movlw	32
 10350  0FF4  00F5               	movwf	??_Sensor_autoCalibration
 10351  0FF5  087A               	movf	Sensor_autoCalibration@sensor,w
 10352  0FF6  3E02               	addlw	2
 10353  0FF7  0086               	movwf	6
 10354  0FF8  3001               	movlw	1	; select bank2/3
 10355  0FF9  0087               	movwf	7
 10356  0FFA  0875               	movf	??_Sensor_autoCalibration,w
 10357  0FFB  0081               	movwf	1
 10358                           
 10359                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:                 Sensor_setCalibrated(s
      +                          ensor);
 10360  0FFC  087A               	movf	Sensor_autoCalibration@sensor,w
 10361  0FFD  3195  254D         	fcall	_Sensor_setCalibrated
 10362  0FFF  0008               	return
 10363  1000                     __end_of_Sensor_autoCalibration:	
 10364                           
 10365                           	psect	text57
 10366  169F                     __ptext57:	
 10367 ;; *************** function _abs *****************
 10368 ;; Defined at:
 10369 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;  a               2    1[COMMON] int 
 10372 ;; Auto vars:     Size  Location     Type
 10373 ;;		None
 10374 ;; Return value:  Size  Location     Type
 10375 ;;                  2    1[COMMON] int 
 10376 ;; Registers used:
 10377 ;;		wreg, status,2, status,0
 10378 ;; Tracked objects:
 10379 ;;		On entry : 0/0
 10380 ;;		On exit  : 0/0
 10381 ;;		Unchanged: 0/0
 10382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10383 ;;      Params:         2       0       0       0       0       0       0       0
 10384 ;;      Locals:         0       0       0       0       0       0       0       0
 10385 ;;      Temps:          2       0       0       0       0       0       0       0
 10386 ;;      Totals:         4       0       0       0       0       0       0       0
 10387 ;;Total ram usage:        4 bytes
 10388 ;; Hardware stack levels used:    1
 10389 ;; Hardware stack levels required when called:    4
 10390 ;; This function calls:
 10391 ;;		Nothing
 10392 ;; This function is called by:
 10393 ;;		_Sensor_postAcquisitionProcess
 10394 ;;		_Sensor_Acq_ExecutePacket
 10395 ;;		_Sensor_autoCalibration
 10396 ;; This function uses a non-reentrant model
 10397 ;;
 10398                           
 10399                           
 10400                           ;psect for function _abs
 10401  169F                     _abs:	
 10402                           
 10403                           ;incstack = 0
 10404                           ; Regs used in _abs: [wreg+status,2+status,0]
 10405  169F  0872               	movf	abs@a+1,w
 10406  16A0  3A80               	xorlw	128
 10407  16A1  00F3               	movwf	??_abs
 10408  16A2  3080               	movlw	128
 10409  16A3  0273               	subwf	??_abs,w
 10410  16A4  1D03               	skipz
 10411  16A5  2EA8               	goto	u2195
 10412  16A6  3001               	movlw	1
 10413  16A7  0271               	subwf	abs@a,w
 10414  16A8                     u2195:	
 10415  16A8  1803               	skipnc
 10416  16A9  0008               	return
 10417  16AA  0971               	comf	abs@a,w
 10418  16AB  00F3               	movwf	??_abs
 10419  16AC  0972               	comf	abs@a+1,w
 10420  16AD  00F4               	movwf	??_abs+1
 10421  16AE  0AF3               	incf	??_abs,f
 10422  16AF  1903               	skipnz
 10423  16B0  0AF4               	incf	??_abs+1,f
 10424  16B1  0873               	movf	??_abs,w
 10425  16B2  00F1               	movwf	?_abs
 10426  16B3  0874               	movf	??_abs+1,w
 10427  16B4  00F2               	movwf	?_abs+1
 10428  16B5  0008               	return
 10429  16B6                     __end_of_abs:	
 10430                           
 10431                           	psect	text58
 10432  154D                     __ptext58:	
 10433 ;; *************** function _Sensor_setCalibrated *****************
 10434 ;; Defined at:
 10435 ;;		line 925 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10436 ;; Parameters:    Size  Location     Type
 10437 ;;  sensor          1    wreg     PTR struct .
 10438 ;;		 -> NULL(0), mtouch_sensor(27), 
 10439 ;; Auto vars:     Size  Location     Type
 10440 ;;  sensor          1    1[COMMON] PTR struct .
 10441 ;;		 -> NULL(0), mtouch_sensor(27), 
 10442 ;; Return value:  Size  Location     Type
 10443 ;;                  1    wreg      void 
 10444 ;; Registers used:
 10445 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10446 ;; Tracked objects:
 10447 ;;		On entry : 0/0
 10448 ;;		On exit  : 0/0
 10449 ;;		Unchanged: 0/0
 10450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10451 ;;      Params:         0       0       0       0       0       0       0       0
 10452 ;;      Locals:         1       0       0       0       0       0       0       0
 10453 ;;      Temps:          0       0       0       0       0       0       0       0
 10454 ;;      Totals:         1       0       0       0       0       0       0       0
 10455 ;;Total ram usage:        1 bytes
 10456 ;; Hardware stack levels used:    1
 10457 ;; Hardware stack levels required when called:    4
 10458 ;; This function calls:
 10459 ;;		Nothing
 10460 ;; This function is called by:
 10461 ;;		_Sensor_autoCalibration
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           
 10466                           ;psect for function _Sensor_setCalibrated
 10467  154D                     _Sensor_setCalibrated:	
 10468                           
 10469                           ;incstack = 0
 10470                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10471                           ;Sensor_setCalibrated@sensor stored from wreg
 10472  154D  00F1               	movwf	Sensor_setCalibrated@sensor
 10473                           
 10474                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          926: {;mcc_generated_files/mtouch/mtouch_sensor.c: 927:     sensor->calibrated = 1;
 10475  154E  0871               	movf	Sensor_setCalibrated@sensor,w
 10476  154F  3E08               	addlw	8
 10477  1550  0086               	movwf	6
 10478  1551  3001               	movlw	1	; select bank2/3
 10479  1552  0087               	movwf	7
 10480  1553  1501               	bsf	1,2
 10481                           
 10482                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928:     sensor->acqTime_cal = 0;
 10483  1554  0871               	movf	Sensor_setCalibrated@sensor,w
 10484  1555  3E08               	addlw	8
 10485  1556  0086               	movwf	6
 10486  1557  3001               	movlw	1	; select bank2/3
 10487  1558  0087               	movwf	7
 10488  1559  1201               	bcf	1,4
 10489  155A  0008               	return
 10490  155B                     __end_of_Sensor_setCalibrated:	
 10491                           
 10492                           	psect	text59
 10493  1586                     __ptext59:	
 10494 ;; *************** function _Sensor_setCalibratAcqTime *****************
 10495 ;; Defined at:
 10496 ;;		line 931 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;  sensor          1    wreg     PTR struct .
 10499 ;;		 -> NULL(0), mtouch_sensor(27), 
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;  sensor          1    1[COMMON] PTR struct .
 10502 ;;		 -> NULL(0), mtouch_sensor(27), 
 10503 ;; Return value:  Size  Location     Type
 10504 ;;                  1    wreg      void 
 10505 ;; Registers used:
 10506 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10512 ;;      Params:         0       0       0       0       0       0       0       0
 10513 ;;      Locals:         1       0       0       0       0       0       0       0
 10514 ;;      Temps:          0       0       0       0       0       0       0       0
 10515 ;;      Totals:         1       0       0       0       0       0       0       0
 10516 ;;Total ram usage:        1 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    4
 10519 ;; This function calls:
 10520 ;;		Nothing
 10521 ;; This function is called by:
 10522 ;;		_Sensor_autoCalibration
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           
 10527                           ;psect for function _Sensor_setCalibratAcqTime
 10528  1586                     _Sensor_setCalibratAcqTime:	
 10529                           
 10530                           ;incstack = 0
 10531                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10532                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 10533  1586  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
 10534                           
 10535                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 931: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 932: {;mcc_generated_files/mtouch/mtouch_sensor.c: 933:     sensor->acqTime_cal = 1
      +                          ;
 10536  1587  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10537  1588  3E08               	addlw	8
 10538  1589  0086               	movwf	6
 10539  158A  3001               	movlw	1	; select bank2/3
 10540  158B  0087               	movwf	7
 10541  158C  1601               	bsf	1,4
 10542                           
 10543                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 934:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
 10544  158D  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10545  158E  3E03               	addlw	3
 10546  158F  0086               	movwf	6
 10547  1590  3001               	movlw	1	; select bank2/3
 10548  1591  0087               	movwf	7
 10549  1592  0181               	clrf	1
 10550  1593  0A81               	incf	1,f
 10551  1594  0008               	return
 10552  1595                     __end_of_Sensor_setCalibratAcqTime:	
 10553                           
 10554                           	psect	text60
 10555  1516                     __ptext60:	
 10556 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 10557 ;; Defined at:
 10558 ;;		line 937 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10559 ;; Parameters:    Size  Location     Type
 10560 ;;  sensor          1    wreg     PTR struct .
 10561 ;;		 -> NULL(0), mtouch_sensor(27), 
 10562 ;; Auto vars:     Size  Location     Type
 10563 ;;  sensor          1    1[COMMON] PTR struct .
 10564 ;;		 -> NULL(0), mtouch_sensor(27), 
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  1    wreg      _Bool 
 10567 ;; Registers used:
 10568 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : 0/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10574 ;;      Params:         0       0       0       0       0       0       0       0
 10575 ;;      Locals:         1       0       0       0       0       0       0       0
 10576 ;;      Temps:          0       0       0       0       0       0       0       0
 10577 ;;      Totals:         1       0       0       0       0       0       0       0
 10578 ;;Total ram usage:        1 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:    4
 10581 ;; This function calls:
 10582 ;;		Nothing
 10583 ;; This function is called by:
 10584 ;;		_Sensor_loadADCSettings
 10585 ;;		_Sensor_autoCalibration
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           
 10590                           ;psect for function _Sensor_isCalibratingAcqTime
 10591  1516                     _Sensor_isCalibratingAcqTime:	
 10592                           
 10593                           ;incstack = 0
 10594                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10595                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 10596  1516  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
 10597                           
 10598                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 938: {;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     return (_Bool)sensor
      +                          ->acqTime_cal;
 10599  1517  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
 10600  1518  3E08               	addlw	8
 10601  1519  0086               	movwf	6
 10602  151A  3001               	movlw	1	; select bank2/3
 10603  151B  0087               	movwf	7
 10604  151C  0E01               	swapf	1,w
 10605  151D  3901               	andlw	1
 10606  151E  0008               	return
 10607  151F                     __end_of_Sensor_isCalibratingAcqTime:	
 10608                           
 10609                           	psect	text61
 10610  08E6                     __ptext61:	
 10611 ;; *************** function _Sensor_getScanGroupIndex *****************
 10612 ;; Defined at:
 10613 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;  sensor          1    wreg     PTR struct .
 10616 ;;		 -> NULL(0), mtouch_sensor(27), 
 10617 ;; Auto vars:     Size  Location     Type
 10618 ;;  sensor          1    3[COMMON] PTR struct .
 10619 ;;		 -> NULL(0), mtouch_sensor(27), 
 10620 ;;  sensorGroup     1    4[COMMON] unsigned char 
 10621 ;; Return value:  Size  Location     Type
 10622 ;;                  1    wreg      unsigned char 
 10623 ;; Registers used:
 10624 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10625 ;; Tracked objects:
 10626 ;;		On entry : 0/0
 10627 ;;		On exit  : 0/0
 10628 ;;		Unchanged: 0/0
 10629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10630 ;;      Params:         0       0       0       0       0       0       0       0
 10631 ;;      Locals:         2       0       0       0       0       0       0       0
 10632 ;;      Temps:          2       0       0       0       0       0       0       0
 10633 ;;      Totals:         4       0       0       0       0       0       0       0
 10634 ;;Total ram usage:        4 bytes
 10635 ;; Hardware stack levels used:    1
 10636 ;; Hardware stack levels required when called:    4
 10637 ;; This function calls:
 10638 ;;		Nothing
 10639 ;; This function is called by:
 10640 ;;		_Sensor_postAcquisitionProcess
 10641 ;;		_Sensor_autoCalibration
 10642 ;;		_Sensor_RawSample_Update
 10643 ;; This function uses a non-reentrant model
 10644 ;;
 10645                           
 10646                           
 10647                           ;psect for function _Sensor_getScanGroupIndex
 10648  08E6                     _Sensor_getScanGroupIndex:	
 10649                           
 10650                           ;incstack = 0
 10651                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
 10652                           ;Sensor_getScanGroupIndex@sensor stored from wreg
 10653  08E6  00F3               	movwf	Sensor_getScanGroupIndex@sensor
 10654                           
 10655                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 355: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 356:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 357:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
 10656  08E7  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
 10657  08E8                     l3767:	
 10658                           
 10659                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 359:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
 10660  08E8  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10661  08E9  00F1               	movwf	??_Sensor_getScanGroupIndex
 10662  08EA  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10663  08EB  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10664  08EC  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10665  08ED  303C               	movlw	low (_sensor_scan_group| (0+32768))
 10666  08EE  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10667  08EF  0084               	movwf	4
 10668  08F0  3098               	movlw	high (_sensor_scan_group| (0+32768))
 10669  08F1  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10670  08F2  0085               	movwf	5
 10671  08F3  0800               	movf	0,w	;code access
 10672  08F4  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10673  08F5  1D03               	skipz
 10674  08F6  28F9               	goto	l3773
 10675  08F7                     l3769:	
 10676                           
 10677                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:             return 0;
 10678  08F7  3000               	movlw	0
 10679  08F8  0008               	return
 10680  08F9                     l3773:	
 10681                           
 10682                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
 10683  08F9  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10684  08FA  00F1               	movwf	??_Sensor_getScanGroupIndex
 10685  08FB  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10686  08FC  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10687  08FD  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10688  08FE  303D               	movlw	low ((_sensor_scan_group+1)| (0+32768))
 10689  08FF  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10690  0900  0084               	movwf	4
 10691  0901  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
 10692  0902  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10693  0903  0085               	movwf	5
 10694  0904  0800               	movf	0,w	;code access
 10695  0905  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10696  0906  1D03               	skipz
 10697  0907  290A               	goto	l3779
 10698                           
 10699                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:             return 1;
 10700  0908  3001               	movlw	1
 10701  0909  0008               	return
 10702  090A                     l3779:	
 10703                           
 10704                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     }
 10705  090A  3001               	movlw	1
 10706  090B  00F1               	movwf	??_Sensor_getScanGroupIndex
 10707  090C  0871               	movf	??_Sensor_getScanGroupIndex,w
 10708  090D  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
 10709  090E  3002               	movlw	2
 10710  090F  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
 10711  0910  1803               	btfsc	3,0
 10712  0911  28F7               	goto	l3769
 10713  0912  28E8               	goto	l3767
 10714  0913                     __end_of_Sensor_getScanGroupIndex:	
 10715                           
 10716                           	psect	text62
 10717  15A5                     __ptext62:	
 10718 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 10719 ;; Defined at:
 10720 ;;		line 239 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10721 ;; Parameters:    Size  Location     Type
 10722 ;;		None
 10723 ;; Auto vars:     Size  Location     Type
 10724 ;;		None
 10725 ;; Return value:  Size  Location     Type
 10726 ;;                  1    wreg      void 
 10727 ;; Registers used:
 10728 ;;		wreg, status,2, status,0
 10729 ;; Tracked objects:
 10730 ;;		On entry : 0/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10734 ;;      Params:         0       0       0       0       0       0       0       0
 10735 ;;      Locals:         0       0       0       0       0       0       0       0
 10736 ;;      Temps:          0       0       0       0       0       0       0       0
 10737 ;;      Totals:         0       0       0       0       0       0       0       0
 10738 ;;Total ram usage:        0 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    4
 10741 ;; This function calls:
 10742 ;;		Nothing
 10743 ;; This function is called by:
 10744 ;;		_MTOUCH_Initialize
 10745 ;;		_Sensor_Acq_ExecutePacket
 10746 ;; This function uses a non-reentrant model
 10747 ;;
 10748                           
 10749                           
 10750                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 10751  15A5                     _MTOUCH_Sensor_Scan_Initialize:	
 10752                           
 10753                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     T2CONbits.T2CKPS = 0x0;
 10754                           
 10755                           ;incstack = 0
 10756                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 10757  15A5  30FC               	movlw	-4
 10758  15A6  0020               	movlb	0	; select bank0
 10759  15A7  059C               	andwf	28,f	;volatile
 10760                           
 10761                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     AD1CON0 = (uint8_t)0;
 10762  15A8  002E               	movlb	14	; select bank14
 10763  15A9  0191               	clrf	17	;volatile
 10764                           
 10765                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     AD2CON0 = (uint8_t)0;
 10766  15AA  002F               	movlb	15	; select bank15
 10767  15AB  0191               	clrf	17	;volatile
 10768                           
 10769                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
 10770  15AC  3090               	movlw	144
 10771  15AD  002E               	movlb	14	; select bank14
 10772  15AE  0092               	movwf	18	;volatile
 10773                           
 10774                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 246:     AD1CON3 = (uint8_t)0b01000000;
 10775  15AF  3040               	movlw	64
 10776  15B0  0094               	movwf	20	;volatile
 10777                           
 10778                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     AD2CON3 = (uint8_t)0b01000000;
 10779  15B1  3040               	movlw	64
 10780  15B2  002F               	movlb	15	; select bank15
 10781  15B3  0094               	movwf	20	;volatile
 10782  15B4  0008               	return
 10783  15B5                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 10784                           
 10785                           	psect	text63
 10786  1595                     __ptext63:	
 10787 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 10788 ;; Defined at:
 10789 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;		None
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;  button          1   14[BANK0 ] enum E3069
 10794 ;; Return value:  Size  Location     Type
 10795 ;;                  1    wreg      void 
 10796 ;; Registers used:
 10797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/0
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10803 ;;      Params:         0       0       0       0       0       0       0       0
 10804 ;;      Locals:         0       1       0       0       0       0       0       0
 10805 ;;      Temps:          0       1       0       0       0       0       0       0
 10806 ;;      Totals:         0       2       0       0       0       0       0       0
 10807 ;;Total ram usage:        2 bytes
 10808 ;; Hardware stack levels used:    1
 10809 ;; Hardware stack levels required when called:    9
 10810 ;; This function calls:
 10811 ;;		_Button_Service
 10812 ;; This function is called by:
 10813 ;;		_MTOUCH_Service_Mainloop
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           
 10818                           ;psect for function _MTOUCH_Button_ServiceAll
 10819  1595                     _MTOUCH_Button_ServiceAll:	
 10820                           
 10821                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 194:     for (button = 0; button < 3u; button
      +                          ++)
 10822                           
 10823                           ;incstack = 0
 10824                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10825  1595  0020               	movlb	0	; select bank0
 10826  1596  01AE               	clrf	MTOUCH_Button_ServiceAll@button
 10827  1597                     l6251:	
 10828                           
 10829                           ;mcc_generated_files/mtouch/mtouch_button.c: 195:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 196:         Button_Service(button);
 10830  1597  082E               	movf	MTOUCH_Button_ServiceAll@button,w
 10831  1598  318B  23A2  3195   	fcall	_Button_Service
 10832                           
 10833                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     }
 10834  159B  3001               	movlw	1
 10835  159C  0020               	movlb	0	; select bank0
 10836  159D  00AD               	movwf	??_MTOUCH_Button_ServiceAll
 10837  159E  082D               	movf	??_MTOUCH_Button_ServiceAll,w
 10838  159F  07AE               	addwf	MTOUCH_Button_ServiceAll@button,f
 10839  15A0  3003               	movlw	3
 10840  15A1  022E               	subwf	MTOUCH_Button_ServiceAll@button,w
 10841  15A2  1803               	btfsc	3,0
 10842  15A3  0008               	return
 10843  15A4  2D97               	goto	l6251
 10844  15A5                     __end_of_MTOUCH_Button_ServiceAll:	
 10845                           
 10846                           	psect	text64
 10847  0BA2                     __ptext64:	
 10848 ;; *************** function _Button_Service *****************
 10849 ;; Defined at:
 10850 ;;		line 200 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10851 ;; Parameters:    Size  Location     Type
 10852 ;;  name            1    wreg     enum E3069
 10853 ;; Auto vars:     Size  Location     Type
 10854 ;;  name            1   11[BANK0 ] enum E3069
 10855 ;;  button          1   12[BANK0 ] PTR struct .
 10856 ;;		 -> mtouch_button(48), 
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  1    wreg      void 
 10859 ;; Registers used:
 10860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10866 ;;      Params:         0       0       0       0       0       0       0       0
 10867 ;;      Locals:         0       2       0       0       0       0       0       0
 10868 ;;      Temps:          0       2       0       0       0       0       0       0
 10869 ;;      Totals:         0       4       0       0       0       0       0       0
 10870 ;;Total ram usage:        4 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:    8
 10873 ;; This function calls:
 10874 ;;		_Button_Deviation_Update
 10875 ;;		_Button_Reading_Update
 10876 ;;		_Button_State_Initializing
 10877 ;;		_Button_State_NotPressed
 10878 ;;		_Button_State_Pressed
 10879 ;;		_MTOUCH_Button_Initialize
 10880 ;;		_MTOUCH_Sensor_isCalibrated
 10881 ;;		_MTOUCH_Sensor_wasSampled
 10882 ;; This function is called by:
 10883 ;;		_MTOUCH_Button_ServiceAll
 10884 ;; This function uses a non-reentrant model
 10885 ;;
 10886                           
 10887                           
 10888                           ;psect for function _Button_Service
 10889  0BA2                     _Button_Service:	
 10890                           
 10891                           ;incstack = 0
 10892                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10893                           ;Button_Service@name stored from wreg
 10894  0BA2  0020               	movlb	0	; select bank0
 10895  0BA3  00AB               	movwf	Button_Service@name
 10896                           
 10897                           ;mcc_generated_files/mtouch/mtouch_button.c: 200: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 201: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 202:     mtouch_button_t* button = &mtouch_button[name];
 10898  0BA4  082B               	movf	Button_Service@name,w
 10899  0BA5  00A9               	movwf	??_Button_Service
 10900  0BA6  3003               	movlw	3
 10901  0BA7                     u5095:	
 10902  0BA7  35A9               	lslf	??_Button_Service,f
 10903  0BA8  3EFF               	addlw	-1
 10904  0BA9  1D03               	skipz
 10905  0BAA  2BA7               	goto	u5095
 10906  0BAB  3529               	lslf	??_Button_Service,w
 10907  0BAC  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 10908  0BAD  00AA               	movwf	??_Button_Service+1
 10909  0BAE  082A               	movf	??_Button_Service+1,w
 10910  0BAF  00AC               	movwf	Button_Service@button
 10911                           
 10912                           ;mcc_generated_files/mtouch/mtouch_button.c: 204:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 10913  0BB0  0A2C               	incf	Button_Service@button,w
 10914  0BB1  0086               	movwf	6
 10915  0BB2  3001               	movlw	1	; select bank2/3
 10916  0BB3  0087               	movwf	7
 10917  0BB4  0801               	movf	1,w
 10918  0BB5  3195  2577  318B   	fcall	_MTOUCH_Sensor_wasSampled
 10919  0BB8  3A00               	xorlw	0
 10920  0BB9  1903               	skipnz
 10921  0BBA  0008               	return
 10922  0BBB  0020               	movlb	0	; select bank0
 10923  0BBC  0A2C               	incf	Button_Service@button,w
 10924  0BBD  0086               	movwf	6
 10925  0BBE  3001               	movlw	1	; select bank2/3
 10926  0BBF  0087               	movwf	7
 10927  0BC0  0801               	movf	1,w
 10928  0BC1  3196  2646  318B   	fcall	_MTOUCH_Sensor_isCalibrated
 10929  0BC4  3A00               	xorlw	0
 10930  0BC5  1903               	skipnz
 10931  0BC6  0008               	return
 10932                           
 10933                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Reading_Update(button);
 10934  0BC7  0020               	movlb	0	; select bank0
 10935  0BC8  082C               	movf	Button_Service@button,w
 10936  0BC9  3195  253F  318B   	fcall	_Button_Reading_Update
 10937                           
 10938                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:         Button_Deviation_Update(button
      +                          );
 10939  0BCC  0020               	movlb	0	; select bank0
 10940  0BCD  082C               	movf	Button_Service@button,w
 10941  0BCE  318E  2658  318B   	fcall	_Button_Deviation_Update
 10942                           
 10943                           ;mcc_generated_files/mtouch/mtouch_button.c: 209:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 10944  0BD1  0020               	movlb	0	; select bank0
 10945  0BD2  082C               	movf	Button_Service@button,w
 10946  0BD3  3E02               	addlw	2
 10947  0BD4  0086               	movwf	6
 10948  0BD5  3001               	movlw	1	; select bank2/3
 10949  0BD6  0087               	movwf	7
 10950  0BD7  3003               	movlw	3
 10951  0BD8  0201               	subwf	1,w
 10952  0BD9  1C03               	skipc
 10953  0BDA  2BE3               	goto	l6203
 10954                           
 10955                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 211:             MTOUCH_Button_Initialize(button->name);
 10956  0BDB  082C               	movf	Button_Service@button,w
 10957  0BDC  0086               	movwf	6
 10958  0BDD  3001               	movlw	1	; select bank2/3
 10959  0BDE  0087               	movwf	7
 10960  0BDF  0801               	movf	1,w
 10961  0BE0  318A  2209  318B   	fcall	_MTOUCH_Button_Initialize
 10962  0BE3                     l6203:	
 10963                           
 10964                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 10965  0BE3  0020               	movlb	0	; select bank0
 10966  0BE4  082C               	movf	Button_Service@button,w
 10967  0BE5  00A9               	movwf	??_Button_Service
 10968  0BE6  0829               	movf	??_Button_Service,w
 10969  0BE7  00A4               	movwf	Button_State_Pressed@button
 10970  0BE8  082C               	movf	Button_Service@button,w
 10971  0BE9  3E02               	addlw	2
 10972  0BEA  0086               	movwf	6
 10973  0BEB  3001               	movlw	1	; select bank2/3
 10974  0BEC  0087               	movwf	7
 10975  0BED  3501               	lslf	1,w
 10976  0BEE  3ECF               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 10977  0BEF  0086               	movwf	6
 10978  0BF0  0187               	clrf	7
 10979  0BF1  3F41               	moviw [1]fsr1
 10980  0BF2  008A               	movwf	10
 10981  0BF3  3F40               	moviw [0]fsr1
 10982  0BF4  000A               	callw
 10983  0BF5  318B               	pagesel	$
 10984  0BF6  0008               	return
 10985  0BF7                     __end_of_Button_Service:	
 10986                           
 10987                           	psect	text65
 10988  1577                     __ptext65:	
 10989 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 10990 ;; Defined at:
 10991 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10992 ;; Parameters:    Size  Location     Type
 10993 ;;  sensor          1    wreg     enum E2854
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;  sensor          1    6[COMMON] enum E2854
 10996 ;; Return value:  Size  Location     Type
 10997 ;;                  1    wreg      _Bool 
 10998 ;; Registers used:
 10999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11005 ;;      Params:         0       0       0       0       0       0       0       0
 11006 ;;      Locals:         1       0       0       0       0       0       0       0
 11007 ;;      Temps:          1       0       0       0       0       0       0       0
 11008 ;;      Totals:         2       0       0       0       0       0       0       0
 11009 ;;Total ram usage:        2 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; Hardware stack levels required when called:    5
 11012 ;; This function calls:
 11013 ;;		___bmul
 11014 ;; This function is called by:
 11015 ;;		_Button_Service
 11016 ;; This function uses a non-reentrant model
 11017 ;;
 11018                           
 11019                           
 11020                           ;psect for function _MTOUCH_Sensor_wasSampled
 11021  1577                     _MTOUCH_Sensor_wasSampled:	
 11022                           
 11023                           ;incstack = 0
 11024                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11025                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 11026  1577  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
 11027                           
 11028                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 959: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 960: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 961:     return (_Bool)mtouch_sensor[sensor].sampled;
 11029  1578  3009               	movlw	9
 11030  1579  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
 11031  157A  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
 11032  157B  00F1               	movwf	___bmul@multiplicand
 11033  157C  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 11034  157D  3195  25B5         	fcall	___bmul
 11035  157F  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11036  1580  0086               	movwf	6
 11037  1581  3001               	movlw	1	; select bank2/3
 11038  1582  0087               	movwf	7
 11039  1583  0801               	movf	1,w
 11040  1584  3901               	andlw	1
 11041  1585  0008               	return
 11042  1586                     __end_of_MTOUCH_Sensor_wasSampled:	
 11043                           
 11044                           	psect	text66
 11045  1646                     __ptext66:	
 11046 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 11047 ;; Defined at:
 11048 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11049 ;; Parameters:    Size  Location     Type
 11050 ;;  sensor          1    wreg     enum E2854
 11051 ;; Auto vars:     Size  Location     Type
 11052 ;;  sensor          1    6[COMMON] enum E2854
 11053 ;; Return value:  Size  Location     Type
 11054 ;;                  1    wreg      _Bool 
 11055 ;; Registers used:
 11056 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11057 ;; Tracked objects:
 11058 ;;		On entry : 0/0
 11059 ;;		On exit  : 0/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11062 ;;      Params:         0       0       0       0       0       0       0       0
 11063 ;;      Locals:         1       0       0       0       0       0       0       0
 11064 ;;      Temps:          1       0       0       0       0       0       0       0
 11065 ;;      Totals:         2       0       0       0       0       0       0       0
 11066 ;;Total ram usage:        2 bytes
 11067 ;; Hardware stack levels used:    1
 11068 ;; Hardware stack levels required when called:    5
 11069 ;; This function calls:
 11070 ;;		___bmul
 11071 ;; This function is called by:
 11072 ;;		_Button_Service
 11073 ;; This function uses a non-reentrant model
 11074 ;;
 11075                           
 11076                           
 11077                           ;psect for function _MTOUCH_Sensor_isCalibrated
 11078  1646                     _MTOUCH_Sensor_isCalibrated:	
 11079                           
 11080                           ;incstack = 0
 11081                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11082                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 11083  1646  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 11084                           
 11085                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 914:     if(sensor < 3u)
 11086  1647  3003               	movlw	3
 11087  1648  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
 11088  1649  1803               	skipnc
 11089  164A  2E5A               	goto	l6011
 11090                           
 11091                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
 11092  164B  3009               	movlw	9
 11093  164C  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
 11094  164D  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
 11095  164E  00F1               	movwf	___bmul@multiplicand
 11096  164F  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 11097  1650  3195  25B5         	fcall	___bmul
 11098  1652  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11099  1653  0086               	movwf	6
 11100  1654  3001               	movlw	1	; select bank2/3
 11101  1655  0087               	movwf	7
 11102  1656  0C01               	rrf	1,w
 11103  1657  0C89               	rrf	9,f
 11104  1658  3901               	andlw	1
 11105  1659  0008               	return
 11106  165A                     l6011:	
 11107                           
 11108                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:         return 0;
 11109  165A  3000               	movlw	0
 11110  165B  0008               	return
 11111  165C                     __end_of_MTOUCH_Sensor_isCalibrated:	
 11112                           
 11113                           	psect	text67
 11114  06A0                     __ptext67:	
 11115 ;; *************** function _Button_State_NotPressed *****************
 11116 ;; Defined at:
 11117 ;;		line 237 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11118 ;; Parameters:    Size  Location     Type
 11119 ;;  button          1    4[BANK0 ] PTR struct .
 11120 ;;		 -> mtouch_button(48), 
 11121 ;; Auto vars:     Size  Location     Type
 11122 ;;		None
 11123 ;; Return value:  Size  Location     Type
 11124 ;;                  1    wreg      void 
 11125 ;; Registers used:
 11126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11127 ;; Tracked objects:
 11128 ;;		On entry : 0/0
 11129 ;;		On exit  : 0/0
 11130 ;;		Unchanged: 0/0
 11131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11132 ;;      Params:         0       1       0       0       0       0       0       0
 11133 ;;      Locals:         0       0       0       0       0       0       0       0
 11134 ;;      Temps:          0       2       0       0       0       0       0       0
 11135 ;;      Totals:         0       3       0       0       0       0       0       0
 11136 ;;Total ram usage:        3 bytes
 11137 ;; Hardware stack levels used:    1
 11138 ;; Hardware stack levels required when called:    7
 11139 ;; This function calls:
 11140 ;;		_Button_Baseline_Update
 11141 ;;		_Button_DefaultCallback
 11142 ;;		_MTOUCH_Button_Initialize
 11143 ;;		_myButtonPressedCallback
 11144 ;; This function is called by:
 11145 ;;		_Button_Service
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           
 11150                           ;psect for function _Button_State_NotPressed
 11151  06A0                     _Button_State_NotPressed:	
 11152                           
 11153                           ;mcc_generated_files/mtouch/mtouch_button.c: 237: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 238: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 240:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 11154                           
 11155                           ;incstack = 0
 11156                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11157  06A0  0020               	movlb	0	; select bank0
 11158  06A1  0824               	movf	Button_State_NotPressed@button,w
 11159  06A2  3E09               	addlw	9
 11160  06A3  0086               	movwf	6
 11161  06A4  3001               	movlw	1	; select bank2/3
 11162  06A5  0087               	movwf	7
 11163  06A6  0801               	movf	1,w
 11164  06A7  3A80               	xorlw	128
 11165  06A8  00A5               	movwf	??_Button_State_NotPressed
 11166  06A9  0824               	movf	Button_State_NotPressed@button,w
 11167  06AA  3E0E               	addlw	14
 11168  06AB  0086               	movwf	6
 11169  06AC  3001               	movlw	1	; select bank2/3
 11170  06AD  0087               	movwf	7
 11171  06AE  0301               	decf	1,w
 11172  06AF  3AFF               	xorlw	255
 11173  06B0  3A80               	xorlw	128
 11174  06B1  02A5               	subwf	??_Button_State_NotPressed,f
 11175  06B2  1803               	skipnc
 11176  06B3  2EDF               	goto	l6061
 11177                           
 11178                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 242:         (button->counter)++;
 11179  06B4  0824               	movf	Button_State_NotPressed@button,w
 11180  06B5  3E0A               	addlw	10
 11181  06B6  0086               	movwf	6
 11182  06B7  3001               	movlw	1	; select bank2/3
 11183  06B8  0087               	movwf	7
 11184  06B9  3001               	movlw	1
 11185  06BA  0781               	addwf	1,f
 11186  06BB  3141               	addfsr 1,1
 11187  06BC  1803               	skipnc
 11188  06BD  0A81               	incf	1,f
 11189                           
 11190                           ;mcc_generated_files/mtouch/mtouch_button.c: 243:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 11191  06BE  0824               	movf	Button_State_NotPressed@button,w
 11192  06BF  3E0A               	addlw	10
 11193  06C0  0086               	movwf	6
 11194  06C1  3001               	movlw	1	; select bank2/3
 11195  06C2  0087               	movwf	7
 11196  06C3  3F40               	moviw [0]fsr1
 11197  06C4  00A5               	movwf	??_Button_State_NotPressed
 11198  06C5  3F41               	moviw [1]fsr1
 11199  06C6  00A6               	movwf	??_Button_State_NotPressed+1
 11200  06C7  3000               	movlw	0
 11201  06C8  0226               	subwf	??_Button_State_NotPressed+1,w
 11202  06C9  3041               	movlw	65
 11203  06CA  1903               	skipnz
 11204  06CB  0225               	subwf	??_Button_State_NotPressed,w
 11205  06CC  1C03               	skipc
 11206  06CD  2F21               	goto	l522
 11207                           
 11208                           ;mcc_generated_files/mtouch/mtouch_button.c: 244:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 245:             button->counter = (mtouch_button_statecounter_t)0;
 11209  06CE  0824               	movf	Button_State_NotPressed@button,w
 11210  06CF  3E0A               	addlw	10
 11211  06D0  0086               	movwf	6
 11212  06D1  3001               	movlw	1	; select bank2/3
 11213  06D2  0087               	movwf	7
 11214  06D3  3000               	movlw	0
 11215  06D4  3FC0               	movwi [0]fsr1
 11216  06D5  3FC1               	movwi [1]fsr1
 11217                           
 11218                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 11219  06D6  0824               	movf	Button_State_NotPressed@button,w
 11220  06D7  0086               	movwf	6
 11221  06D8  3001               	movlw	1	; select bank2/3
 11222  06D9  0087               	movwf	7
 11223  06DA  0801               	movf	1,w
 11224  06DB  318A  2209  3186   	fcall	_MTOUCH_Button_Initialize
 11225  06DE  2F21               	goto	l522
 11226  06DF                     l6061:	
 11227  06DF  0824               	movf	Button_State_NotPressed@button,w
 11228  06E0  3E09               	addlw	9
 11229  06E1  0086               	movwf	6
 11230  06E2  3001               	movlw	1	; select bank2/3
 11231  06E3  0087               	movwf	7
 11232  06E4  0801               	movf	1,w
 11233  06E5  00A5               	movwf	??_Button_State_NotPressed
 11234  06E6  01A6               	clrf	??_Button_State_NotPressed+1
 11235  06E7  1BA5               	btfsc	??_Button_State_NotPressed,7
 11236  06E8  03A6               	decf	??_Button_State_NotPressed+1,f
 11237  06E9  0824               	movf	Button_State_NotPressed@button,w
 11238  06EA  3E0E               	addlw	14
 11239  06EB  0086               	movwf	6
 11240  06EC  3001               	movlw	1	; select bank2/3
 11241  06ED  0087               	movwf	7
 11242  06EE  0826               	movf	??_Button_State_NotPressed+1,w
 11243  06EF  3A80               	xorlw	128
 11244  06F0  3C80               	sublw	128
 11245  06F1  1D03               	skipz
 11246  06F2  2EF5               	goto	u4965
 11247  06F3  0825               	movf	??_Button_State_NotPressed,w
 11248  06F4  0201               	subwf	1,w
 11249  06F5                     u4965:	
 11250  06F5  1803               	skipnc
 11251  06F6  2F18               	goto	l6067
 11252                           
 11253                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 253:         button->state = MTOUCH_BUTTON_STATE_pressed;
 11254  06F7  3002               	movlw	2
 11255  06F8  0020               	movlb	0	; select bank0
 11256  06F9  00A5               	movwf	??_Button_State_NotPressed
 11257  06FA  0824               	movf	Button_State_NotPressed@button,w
 11258  06FB  3E02               	addlw	2
 11259  06FC  0086               	movwf	6
 11260  06FD  3001               	movlw	1	; select bank2/3
 11261  06FE  0087               	movwf	7
 11262  06FF  0825               	movf	??_Button_State_NotPressed,w
 11263  0700  0081               	movwf	1
 11264                           
 11265                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11266  0701  0824               	movf	Button_State_NotPressed@button,w
 11267  0702  3E0A               	addlw	10
 11268  0703  0086               	movwf	6
 11269  0704  3001               	movlw	1	; select bank2/3
 11270  0705  0087               	movwf	7
 11271  0706  3000               	movlw	0
 11272  0707  3FC0               	movwi [0]fsr1
 11273  0708  3FC1               	movwi [1]fsr1
 11274                           
 11275                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:         callback_pressed(button->name)
      +                          ;
 11276  0709  0824               	movf	Button_State_NotPressed@button,w
 11277  070A  0086               	movwf	6
 11278  070B  3001               	movlw	1	; select bank2/3
 11279  070C  0087               	movwf	7
 11280  070D  0801               	movf	1,w
 11281  070E  00A5               	movwf	??_Button_State_NotPressed
 11282  070F  0825               	movf	??_Button_State_NotPressed,w
 11283  0710  00F4               	movwf	myButtonPressedCallback@button
 11284  0711  0021               	movlb	1	; select bank1
 11285  0712  0856               	movf	(_callback_pressed+1)^(0+128),w
 11286  0713  008A               	movwf	10
 11287  0714  0855               	movf	_callback_pressed^(0+128),w
 11288  0715  000A               	callw
 11289  0716  3186               	pagesel	$
 11290                           
 11291                           ;mcc_generated_files/mtouch/mtouch_button.c: 256:     }
 11292  0717  2F21               	goto	l522
 11293  0718                     l6067:	
 11294                           
 11295                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 260:         button->counter = (mtouch_button_statecounter_t)0;
 11296  0718  0020               	movlb	0	; select bank0
 11297  0719  0824               	movf	Button_State_NotPressed@button,w
 11298  071A  3E0A               	addlw	10
 11299  071B  0086               	movwf	6
 11300  071C  3001               	movlw	1	; select bank2/3
 11301  071D  0087               	movwf	7
 11302  071E  3000               	movlw	0
 11303  071F  3FC0               	movwi [0]fsr1
 11304  0720  3FC1               	movwi [1]fsr1
 11305  0721                     l522:	
 11306                           
 11307                           ;mcc_generated_files/mtouch/mtouch_button.c: 265:     (button->baseline_count)++;
 11308  0721  0020               	movlb	0	; select bank0
 11309  0722  0824               	movf	Button_State_NotPressed@button,w
 11310  0723  3E0C               	addlw	12
 11311  0724  0086               	movwf	6
 11312  0725  3001               	movlw	1	; select bank2/3
 11313  0726  0087               	movwf	7
 11314  0727  3001               	movlw	1
 11315  0728  0781               	addwf	1,f
 11316  0729  3141               	addfsr 1,1
 11317  072A  1803               	skipnc
 11318  072B  0A81               	incf	1,f
 11319                           
 11320                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 11321  072C  0824               	movf	Button_State_NotPressed@button,w
 11322  072D  3E0C               	addlw	12
 11323  072E  0086               	movwf	6
 11324  072F  3001               	movlw	1	; select bank2/3
 11325  0730  0087               	movwf	7
 11326  0731  0016               	moviw fsr1++
 11327  0732  3A40               	xorlw	64
 11328  0733  00A5               	movwf	??_Button_State_NotPressed
 11329  0734  0016               	moviw fsr1++
 11330  0735  04A5               	iorwf	??_Button_State_NotPressed,f
 11331  0736  1D03               	btfss	3,2
 11332  0737  0008               	return
 11333                           
 11334                           ;mcc_generated_files/mtouch/mtouch_button.c: 267:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 11335  0738  0824               	movf	Button_State_NotPressed@button,w
 11336  0739  3E0C               	addlw	12
 11337  073A  0086               	movwf	6
 11338  073B  3001               	movlw	1	; select bank2/3
 11339  073C  0087               	movwf	7
 11340  073D  3000               	movlw	0
 11341  073E  3FC0               	movwi [0]fsr1
 11342  073F  3FC1               	movwi [1]fsr1
 11343                           
 11344                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         Button_Baseline_Update(button)
      +                          ;
 11345  0740  0824               	movf	Button_State_NotPressed@button,w
 11346  0741  318E  26DF         	fcall	_Button_Baseline_Update
 11347  0743  0008               	return
 11348  0744                     __end_of_Button_State_NotPressed:	
 11349                           
 11350                           	psect	text68
 11351  0CAD                     __ptext68:	
 11352 ;; *************** function _Button_State_Initializing *****************
 11353 ;; Defined at:
 11354 ;;		line 217 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11355 ;; Parameters:    Size  Location     Type
 11356 ;;  button          1    4[BANK0 ] PTR struct .
 11357 ;;		 -> mtouch_button(48), 
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;		None
 11360 ;; Return value:  Size  Location     Type
 11361 ;;                  1    wreg      void 
 11362 ;; Registers used:
 11363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11369 ;;      Params:         0       1       0       0       0       0       0       0
 11370 ;;      Locals:         0       0       0       0       0       0       0       0
 11371 ;;      Temps:          0       4       0       0       0       0       0       0
 11372 ;;      Totals:         0       5       0       0       0       0       0       0
 11373 ;;Total ram usage:        5 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    7
 11376 ;; This function calls:
 11377 ;;		_Button_Baseline_Initialize
 11378 ;;		_Button_Baseline_Update
 11379 ;; This function is called by:
 11380 ;;		_Button_Service
 11381 ;; This function uses a non-reentrant model
 11382 ;;
 11383                           
 11384                           
 11385                           ;psect for function _Button_State_Initializing
 11386  0CAD                     _Button_State_Initializing:	
 11387                           
 11388                           ;mcc_generated_files/mtouch/mtouch_button.c: 217: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 218: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 220:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 11389                           
 11390                           ;incstack = 0
 11391                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11392  0CAD  0020               	movlb	0	; select bank0
 11393  0CAE  0824               	movf	Button_State_Initializing@button,w
 11394  0CAF  3E0A               	addlw	10
 11395  0CB0  0086               	movwf	6
 11396  0CB1  3001               	movlw	1	; select bank2/3
 11397  0CB2  0087               	movwf	7
 11398  0CB3  3F40               	moviw [0]fsr1
 11399  0CB4  00A5               	movwf	??_Button_State_Initializing
 11400  0CB5  3F41               	moviw [1]fsr1
 11401  0CB6  00A6               	movwf	??_Button_State_Initializing+1
 11402  0CB7  3000               	movlw	0
 11403  0CB8  0226               	subwf	??_Button_State_Initializing+1,w
 11404  0CB9  3009               	movlw	9
 11405  0CBA  1903               	skipnz
 11406  0CBB  0225               	subwf	??_Button_State_Initializing,w
 11407  0CBC  1803               	skipnc
 11408  0CBD  2CC3               	goto	l6045
 11409                           
 11410                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 222:         Button_Baseline_Initialize(button);
 11411  0CBE  0824               	movf	Button_State_Initializing@button,w
 11412  0CBF  3189  2113  318C   	fcall	_Button_Baseline_Initialize
 11413                           
 11414                           ;mcc_generated_files/mtouch/mtouch_button.c: 223:     } else {
 11415  0CC2  2CC7               	goto	l6047
 11416  0CC3                     l6045:	
 11417                           
 11418                           ;mcc_generated_files/mtouch/mtouch_button.c: 224:         Button_Baseline_Update(button)
      +                          ;
 11419  0CC3  0824               	movf	Button_State_Initializing@button,w
 11420  0CC4  318E  26DF  318C   	fcall	_Button_Baseline_Update
 11421  0CC7                     l6047:	
 11422                           
 11423                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:     (button->counter)++;
 11424  0CC7  0020               	movlb	0	; select bank0
 11425  0CC8  0824               	movf	Button_State_Initializing@button,w
 11426  0CC9  3E0A               	addlw	10
 11427  0CCA  0086               	movwf	6
 11428  0CCB  3001               	movlw	1	; select bank2/3
 11429  0CCC  0087               	movwf	7
 11430  0CCD  3001               	movlw	1
 11431  0CCE  0781               	addwf	1,f
 11432  0CCF  3141               	addfsr 1,1
 11433  0CD0  1803               	skipnc
 11434  0CD1  0A81               	incf	1,f
 11435                           
 11436                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 11437  0CD2  0824               	movf	Button_State_Initializing@button,w
 11438  0CD3  3E0A               	addlw	10
 11439  0CD4  0086               	movwf	6
 11440  0CD5  3001               	movlw	1	; select bank2/3
 11441  0CD6  0087               	movwf	7
 11442  0CD7  3F40               	moviw [0]fsr1
 11443  0CD8  00A5               	movwf	??_Button_State_Initializing
 11444  0CD9  3F41               	moviw [1]fsr1
 11445  0CDA  00A6               	movwf	??_Button_State_Initializing+1
 11446  0CDB  3000               	movlw	0
 11447  0CDC  0226               	subwf	??_Button_State_Initializing+1,w
 11448  0CDD  3010               	movlw	16
 11449  0CDE  1903               	skipnz
 11450  0CDF  0225               	subwf	??_Button_State_Initializing,w
 11451  0CE0  1C03               	skipc
 11452  0CE1  0008               	return
 11453                           
 11454                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 11455  0CE2  0824               	movf	Button_State_Initializing@button,w
 11456  0CE3  3E05               	addlw	5
 11457  0CE4  0086               	movwf	6
 11458  0CE5  3001               	movlw	1	; select bank2/3
 11459  0CE6  0087               	movwf	7
 11460  0CE7  3F40               	moviw [0]fsr1
 11461  0CE8  00A5               	movwf	??_Button_State_Initializing
 11462  0CE9  3F41               	moviw [1]fsr1
 11463  0CEA  00A6               	movwf	??_Button_State_Initializing+1
 11464  0CEB  3F42               	moviw [2]fsr1
 11465  0CEC  00A7               	movwf	??_Button_State_Initializing+2
 11466  0CED  3F43               	moviw [3]fsr1
 11467  0CEE  00A8               	movwf	??_Button_State_Initializing+3
 11468  0CEF  3004               	movlw	4
 11469  0CF0                     u4935:	
 11470  0CF0  36A8               	lsrf	??_Button_State_Initializing+3,f
 11471  0CF1  0CA7               	rrf	??_Button_State_Initializing+2,f
 11472  0CF2  0CA6               	rrf	??_Button_State_Initializing+1,f
 11473  0CF3  0CA5               	rrf	??_Button_State_Initializing,f
 11474  0CF4  0B89               	decfsz	9,f
 11475  0CF5  2CF0               	goto	u4935
 11476  0CF6  0824               	movf	Button_State_Initializing@button,w
 11477  0CF7  3E03               	addlw	3
 11478  0CF8  0086               	movwf	6
 11479  0CF9  3001               	movlw	1	; select bank2/3
 11480  0CFA  0087               	movwf	7
 11481  0CFB  0825               	movf	??_Button_State_Initializing,w
 11482  0CFC  3FC0               	movwi [0]fsr1
 11483  0CFD  0826               	movf	??_Button_State_Initializing+1,w
 11484  0CFE  3FC1               	movwi [1]fsr1
 11485                           
 11486                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 11487  0CFF  0824               	movf	Button_State_Initializing@button,w
 11488  0D00  3E02               	addlw	2
 11489  0D01  0086               	movwf	6
 11490  0D02  3001               	movlw	1	; select bank2/3
 11491  0D03  0087               	movwf	7
 11492  0D04  0181               	clrf	1
 11493  0D05  0A81               	incf	1,f
 11494                           
 11495                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11496  0D06  0824               	movf	Button_State_Initializing@button,w
 11497  0D07  3E0A               	addlw	10
 11498  0D08  0086               	movwf	6
 11499  0D09  3001               	movlw	1	; select bank2/3
 11500  0D0A  0087               	movwf	7
 11501  0D0B  3000               	movlw	0
 11502  0D0C  3FC0               	movwi [0]fsr1
 11503  0D0D  3FC1               	movwi [1]fsr1
 11504  0D0E  0008               	return
 11505  0D0F                     __end_of_Button_State_Initializing:	
 11506                           
 11507                           	psect	text69
 11508  0D0F                     __ptext69:	
 11509 ;; *************** function _Button_State_Pressed *****************
 11510 ;; Defined at:
 11511 ;;		line 273 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;  button          1    4[BANK0 ] PTR struct .
 11514 ;;		 -> mtouch_button(48), 
 11515 ;; Auto vars:     Size  Location     Type
 11516 ;;		None
 11517 ;; Return value:  Size  Location     Type
 11518 ;;                  1    wreg      void 
 11519 ;; Registers used:
 11520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11521 ;; Tracked objects:
 11522 ;;		On entry : 0/0
 11523 ;;		On exit  : 0/0
 11524 ;;		Unchanged: 0/0
 11525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11526 ;;      Params:         0       1       0       0       0       0       0       0
 11527 ;;      Locals:         0       0       0       0       0       0       0       0
 11528 ;;      Temps:          0       2       0       0       0       0       0       0
 11529 ;;      Totals:         0       3       0       0       0       0       0       0
 11530 ;;Total ram usage:        3 bytes
 11531 ;; Hardware stack levels used:    1
 11532 ;; Hardware stack levels required when called:    7
 11533 ;; This function calls:
 11534 ;;		_Button_DefaultCallback
 11535 ;;		_MTOUCH_Button_Initialize
 11536 ;;		_myButtonReleasedCallback
 11537 ;; This function is called by:
 11538 ;;		_Button_Service
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           
 11543                           ;psect for function _Button_State_Pressed
 11544  0D0F                     _Button_State_Pressed:	
 11545                           
 11546                           ;mcc_generated_files/mtouch/mtouch_button.c: 273: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 274: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 276:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 11547                           
 11548                           ;incstack = 0
 11549                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11550  0D0F  0020               	movlb	0	; select bank0
 11551  0D10  0824               	movf	Button_State_Pressed@button,w
 11552  0D11  3E0A               	addlw	10
 11553  0D12  0086               	movwf	6
 11554  0D13  3001               	movlw	1	; select bank2/3
 11555  0D14  0087               	movwf	7
 11556  0D15  3F40               	moviw [0]fsr1
 11557  0D16  00A5               	movwf	??_Button_State_Pressed
 11558  0D17  3F41               	moviw [1]fsr1
 11559  0D18  00A6               	movwf	??_Button_State_Pressed+1
 11560  0D19  3007               	movlw	7
 11561  0D1A  0226               	subwf	??_Button_State_Pressed+1,w
 11562  0D1B  30D0               	movlw	208
 11563  0D1C  1903               	skipnz
 11564  0D1D  0225               	subwf	??_Button_State_Pressed,w
 11565  0D1E  1C03               	skipc
 11566  0D1F  2D37               	goto	l6077
 11567                           
 11568                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         MTOUCH_Button_Initialize(button->name);
 11569  0D20  0824               	movf	Button_State_Pressed@button,w
 11570  0D21  0086               	movwf	6
 11571  0D22  3001               	movlw	1	; select bank2/3
 11572  0D23  0087               	movwf	7
 11573  0D24  0801               	movf	1,w
 11574  0D25  318A  2209  318D   	fcall	_MTOUCH_Button_Initialize
 11575                           
 11576                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         callback_notPressed(button->na
      +                          me);
 11577  0D28  0020               	movlb	0	; select bank0
 11578  0D29  0824               	movf	Button_State_Pressed@button,w
 11579  0D2A  0086               	movwf	6
 11580  0D2B  3001               	movlw	1	; select bank2/3
 11581  0D2C  0087               	movwf	7
 11582  0D2D  0801               	movf	1,w
 11583  0D2E  00A5               	movwf	??_Button_State_Pressed
 11584  0D2F  0825               	movf	??_Button_State_Pressed,w
 11585  0D30  00F4               	movwf	myButtonReleasedCallback@button
 11586  0D31  086D               	movf	_callback_notPressed+1,w
 11587  0D32  008A               	movwf	10
 11588  0D33  086C               	movf	_callback_notPressed,w
 11589  0D34  000A               	callw
 11590  0D35  318D               	pagesel	$
 11591                           
 11592                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:     }
 11593  0D36  0008               	return
 11594  0D37                     l6077:	
 11595  0D37  0824               	movf	Button_State_Pressed@button,w
 11596  0D38  3E09               	addlw	9
 11597  0D39  0086               	movwf	6
 11598  0D3A  3001               	movlw	1	; select bank2/3
 11599  0D3B  0087               	movwf	7
 11600  0D3C  0801               	movf	1,w
 11601  0D3D  3A80               	xorlw	128
 11602  0D3E  00A5               	movwf	??_Button_State_Pressed
 11603  0D3F  0824               	movf	Button_State_Pressed@button,w
 11604  0D40  3E0E               	addlw	14
 11605  0D41  0086               	movwf	6
 11606  0D42  3001               	movlw	1	; select bank2/3
 11607  0D43  0087               	movwf	7
 11608  0D44  0824               	movf	Button_State_Pressed@button,w
 11609  0D45  3E0E               	addlw	14
 11610  0D46  0084               	movwf	4
 11611  0D47  3001               	movlw	1	; select bank2/3
 11612  0D48  0085               	movwf	5
 11613  0D49  3600               	lsrf	0,w
 11614  0D4A  0201               	subwf	1,w
 11615  0D4B  3A80               	xorlw	128
 11616  0D4C  02A5               	subwf	??_Button_State_Pressed,f
 11617  0D4D  1803               	skipnc
 11618  0D4E  0008               	return
 11619                           
 11620                           ;mcc_generated_files/mtouch/mtouch_button.c: 284:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 11621  0D4F  0824               	movf	Button_State_Pressed@button,w
 11622  0D50  3E02               	addlw	2
 11623  0D51  0086               	movwf	6
 11624  0D52  3001               	movlw	1	; select bank2/3
 11625  0D53  0087               	movwf	7
 11626  0D54  0181               	clrf	1
 11627  0D55  0A81               	incf	1,f
 11628                           
 11629                           ;mcc_generated_files/mtouch/mtouch_button.c: 286:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11630  0D56  0824               	movf	Button_State_Pressed@button,w
 11631  0D57  3E0A               	addlw	10
 11632  0D58  0086               	movwf	6
 11633  0D59  3001               	movlw	1	; select bank2/3
 11634  0D5A  0087               	movwf	7
 11635  0D5B  3000               	movlw	0
 11636  0D5C  3FC0               	movwi [0]fsr1
 11637  0D5D  3FC1               	movwi [1]fsr1
 11638                           
 11639                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 11640  0D5E  0824               	movf	Button_State_Pressed@button,w
 11641  0D5F  3E0C               	addlw	12
 11642  0D60  0086               	movwf	6
 11643  0D61  3001               	movlw	1	; select bank2/3
 11644  0D62  0087               	movwf	7
 11645  0D63  30FF               	movlw	255
 11646  0D64  3FC0               	movwi [0]fsr1
 11647  0D65  30FB               	movlw	251
 11648  0D66  3FC1               	movwi [1]fsr1
 11649                           
 11650                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:         callback_notPressed(button->na
      +                          me);
 11651  0D67  0824               	movf	Button_State_Pressed@button,w
 11652  0D68  0086               	movwf	6
 11653  0D69  3001               	movlw	1	; select bank2/3
 11654  0D6A  0087               	movwf	7
 11655  0D6B  0801               	movf	1,w
 11656  0D6C  00A5               	movwf	??_Button_State_Pressed
 11657  0D6D  0825               	movf	??_Button_State_Pressed,w
 11658  0D6E  00F4               	movwf	myButtonReleasedCallback@button
 11659  0D6F  086D               	movf	_callback_notPressed+1,w
 11660  0D70  008A               	movwf	10
 11661  0D71  086C               	movf	_callback_notPressed,w
 11662  0D72  000A               	callw
 11663  0D73  318D               	pagesel	$
 11664  0D74  0008               	return
 11665  0D75                     __end_of_Button_State_Pressed:	
 11666                           
 11667                           	psect	text70
 11668  17DA                     __ptext70:	
 11669 ;; *************** function _myButtonPressedCallback *****************
 11670 ;; Defined at:
 11671 ;;		line 184 in file "main.c"
 11672 ;; Parameters:    Size  Location     Type
 11673 ;;  button          1    4[COMMON] enum E2913
 11674 ;; Auto vars:     Size  Location     Type
 11675 ;;		None
 11676 ;; Return value:  Size  Location     Type
 11677 ;;                  1    wreg      void 
 11678 ;; Registers used:
 11679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11680 ;; Tracked objects:
 11681 ;;		On entry : 0/0
 11682 ;;		On exit  : 0/0
 11683 ;;		Unchanged: 0/0
 11684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11685 ;;      Params:         1       0       0       0       0       0       0       0
 11686 ;;      Locals:         0       0       0       0       0       0       0       0
 11687 ;;      Temps:          0       0       0       0       0       0       0       0
 11688 ;;      Totals:         1       0       0       0       0       0       0       0
 11689 ;;Total ram usage:        1 bytes
 11690 ;; Hardware stack levels used:    1
 11691 ;; Hardware stack levels required when called:    6
 11692 ;; This function calls:
 11693 ;;		_LED_PROCESS
 11694 ;;		_RELAY_PROCESS
 11695 ;; This function is called by:
 11696 ;;		_main
 11697 ;;		_Button_State_NotPressed
 11698 ;; This function uses a non-reentrant model
 11699 ;;
 11700                           
 11701                           
 11702                           ;psect for function _myButtonPressedCallback
 11703  17DA                     _myButtonPressedCallback:	
 11704                           
 11705                           ;main.c: 184: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 185:
      +                           {;main.c: 186:     count_conf = 0;
 11706                           
 11707                           ;incstack = 0
 11708                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11709  17DA  0021               	movlb	1	; select bank1
 11710  17DB  01C2               	clrf	_count_conf^(0+128)
 11711  17DC  01C3               	clrf	(_count_conf+1)^(0+128)
 11712                           
 11713                           ;main.c: 187:     if(config_status == 0)
 11714  17DD  0020               	movlb	0	; select bank0
 11715  17DE  0861               	movf	_config_status,w
 11716  17DF  1D03               	btfss	3,2
 11717  17E0  0008               	return
 11718                           
 11719                           ;main.c: 188:     {;main.c: 189:         if(button == 0) last_touch_status.full_status ^
      +                          = 0b00000001;
 11720  17E1  0874               	movf	myButtonPressedCallback@button,w
 11721  17E2  1D03               	btfss	3,2
 11722  17E3  2FE8               	goto	l4339
 11723  17E4  3001               	movlw	1
 11724  17E5  06D9               	xorwf	_last_touch_status,f
 11725  17E6  3000               	movlw	0
 11726  17E7  06DA               	xorwf	_last_touch_status+1,f
 11727  17E8                     l4339:	
 11728                           
 11729                           ;main.c: 190:         if(button == 1) last_touch_status.full_status ^= 0b00000010;
 11730  17E8  0374               	decf	myButtonPressedCallback@button,w
 11731  17E9  1D03               	btfss	3,2
 11732  17EA  2FEF               	goto	l4343
 11733  17EB  3002               	movlw	2
 11734  17EC  06D9               	xorwf	_last_touch_status,f
 11735  17ED  3000               	movlw	0
 11736  17EE  06DA               	xorwf	_last_touch_status+1,f
 11737  17EF                     l4343:	
 11738                           
 11739                           ;main.c: 191:         if(button == 2) last_touch_status.full_status ^= 0b00000100;
 11740  17EF  3002               	movlw	2
 11741  17F0  0674               	xorwf	myButtonPressedCallback@button,w
 11742  17F1  1D03               	btfss	3,2
 11743  17F2  2FF7               	goto	l4347
 11744  17F3  3004               	movlw	4
 11745  17F4  06D9               	xorwf	_last_touch_status,f
 11746  17F5  3000               	movlw	0
 11747  17F6  06DA               	xorwf	_last_touch_status+1,f
 11748  17F7                     l4347:	
 11749                           
 11750                           ;main.c: 193:         LED_PROCESS(last_touch_status.full_status);
 11751  17F7  0859               	movf	_last_touch_status,w
 11752  17F8  318D  2575  3197   	fcall	_LED_PROCESS
 11753                           
 11754                           ;main.c: 194:         RELAY_PROCESS(last_touch_status.full_status);
 11755  17FB  0020               	movlb	0	; select bank0
 11756  17FC  0859               	movf	_last_touch_status,w
 11757  17FD  318A  22B8         	fcall	_RELAY_PROCESS
 11758  17FF  0008               	return
 11759  1800                     __end_of_myButtonPressedCallback:	
 11760                           
 11761                           	psect	text71
 11762  1474                     __ptext71:	
 11763 ;; *************** function _Button_DefaultCallback *****************
 11764 ;; Defined at:
 11765 ;;		line 527 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11766 ;; Parameters:    Size  Location     Type
 11767 ;;  button          1    4[COMMON] enum E3069
 11768 ;; Auto vars:     Size  Location     Type
 11769 ;;		None
 11770 ;; Return value:  Size  Location     Type
 11771 ;;                  1    wreg      void 
 11772 ;; Registers used:
 11773 ;;		None
 11774 ;; Tracked objects:
 11775 ;;		On entry : 0/0
 11776 ;;		On exit  : 0/0
 11777 ;;		Unchanged: 0/0
 11778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11779 ;;      Params:         1       0       0       0       0       0       0       0
 11780 ;;      Locals:         0       0       0       0       0       0       0       0
 11781 ;;      Temps:          0       0       0       0       0       0       0       0
 11782 ;;      Totals:         1       0       0       0       0       0       0       0
 11783 ;;Total ram usage:        1 bytes
 11784 ;; Hardware stack levels used:    1
 11785 ;; Hardware stack levels required when called:    4
 11786 ;; This function calls:
 11787 ;;		Nothing
 11788 ;; This function is called by:
 11789 ;;		_Button_State_NotPressed
 11790 ;;		_Button_State_Pressed
 11791 ;; This function uses a non-reentrant model
 11792 ;;
 11793                           
 11794                           
 11795                           ;psect for function _Button_DefaultCallback
 11796  1474                     _Button_DefaultCallback:	
 11797                           
 11798                           ;incstack = 0
 11799                           ; Regs used in _Button_DefaultCallback: []
 11800  1474  0008               	return
 11801  1475                     __end_of_Button_DefaultCallback:	
 11802                           
 11803                           	psect	text72
 11804  1772                     __ptext72:	
 11805 ;; *************** function _myButtonReleasedCallback *****************
 11806 ;; Defined at:
 11807 ;;		line 197 in file "main.c"
 11808 ;; Parameters:    Size  Location     Type
 11809 ;;  button          1    4[COMMON] enum E2913
 11810 ;; Auto vars:     Size  Location     Type
 11811 ;;		None
 11812 ;; Return value:  Size  Location     Type
 11813 ;;                  1    wreg      void 
 11814 ;; Registers used:
 11815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11816 ;; Tracked objects:
 11817 ;;		On entry : 0/0
 11818 ;;		On exit  : 0/0
 11819 ;;		Unchanged: 0/0
 11820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11821 ;;      Params:         1       0       0       0       0       0       0       0
 11822 ;;      Locals:         0       0       0       0       0       0       0       0
 11823 ;;      Temps:          0       0       0       0       0       0       0       0
 11824 ;;      Totals:         1       0       0       0       0       0       0       0
 11825 ;;Total ram usage:        1 bytes
 11826 ;; Hardware stack levels used:    1
 11827 ;; Hardware stack levels required when called:    5
 11828 ;; This function calls:
 11829 ;;		_MTOUCH_Button_isPressed
 11830 ;; This function is called by:
 11831 ;;		_main
 11832 ;;		_Button_State_Pressed
 11833 ;; This function uses a non-reentrant model
 11834 ;;
 11835                           
 11836                           
 11837                           ;psect for function _myButtonReleasedCallback
 11838  1772                     _myButtonReleasedCallback:	
 11839                           
 11840                           ;main.c: 197: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 198
      +                          : {;main.c: 199:     count_conf = 0;
 11841                           
 11842                           ;incstack = 0
 11843                           ; Regs used in _myButtonReleasedCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11844  1772  0021               	movlb	1	; select bank1
 11845  1773  01C2               	clrf	_count_conf^(0+128)
 11846  1774  01C3               	clrf	(_count_conf+1)^(0+128)
 11847                           
 11848                           ;main.c: 200:     if(config_status == 0)
 11849  1775  0020               	movlb	0	; select bank0
 11850  1776  0861               	movf	_config_status,w
 11851  1777  1D03               	btfss	3,2
 11852  1778  0008               	return
 11853                           
 11854                           ;main.c: 201:     {;main.c: 203:         if(MTOUCH_Button_isPressed(0)==0&&MTOUCH_Button
      +                          _isPressed(1)==0&&MTOUCH_Button_isPressed(2)==0)
 11855  1779  3000               	movlw	0
 11856  177A  3196  26E6  3197   	fcall	_MTOUCH_Button_isPressed
 11857  177D  3A00               	xorlw	0
 11858  177E  1D03               	skipz
 11859  177F  0008               	return
 11860  1780  3001               	movlw	1
 11861  1781  3196  26E6  3197   	fcall	_MTOUCH_Button_isPressed
 11862  1784  3A00               	xorlw	0
 11863  1785  1D03               	skipz
 11864  1786  0008               	return
 11865  1787  3002               	movlw	2
 11866  1788  3196  26E6  3197   	fcall	_MTOUCH_Button_isPressed
 11867  178B  3A00               	xorlw	0
 11868  178C  1D03               	skipz
 11869  178D  0008               	return
 11870                           
 11871                           ;main.c: 204:         {;main.c: 205:             update_state_flag = 1;
 11872  178E  0020               	movlb	0	; select bank0
 11873  178F  01DD               	clrf	_update_state_flag
 11874  1790  0ADD               	incf	_update_state_flag,f
 11875  1791  0008               	return
 11876  1792                     __end_of_myButtonReleasedCallback:	
 11877                           
 11878                           	psect	text73
 11879  16E6                     __ptext73:	
 11880 ;; *************** function _MTOUCH_Button_isPressed *****************
 11881 ;; Defined at:
 11882 ;;		line 374 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11883 ;; Parameters:    Size  Location     Type
 11884 ;;  name            1    wreg     enum E3069
 11885 ;; Auto vars:     Size  Location     Type
 11886 ;;  name            1    2[COMMON] enum E3069
 11887 ;; Return value:  Size  Location     Type
 11888 ;;                  1    wreg      _Bool 
 11889 ;; Registers used:
 11890 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11891 ;; Tracked objects:
 11892 ;;		On entry : 0/0
 11893 ;;		On exit  : 0/0
 11894 ;;		Unchanged: 0/0
 11895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11896 ;;      Params:         0       0       0       0       0       0       0       0
 11897 ;;      Locals:         1       0       0       0       0       0       0       0
 11898 ;;      Temps:          1       0       0       0       0       0       0       0
 11899 ;;      Totals:         2       0       0       0       0       0       0       0
 11900 ;;Total ram usage:        2 bytes
 11901 ;; Hardware stack levels used:    1
 11902 ;; Hardware stack levels required when called:    4
 11903 ;; This function calls:
 11904 ;;		Nothing
 11905 ;; This function is called by:
 11906 ;;		_main
 11907 ;;		_myButtonReleasedCallback
 11908 ;;		_touch_example
 11909 ;;		_MTOUCH_Button_Buttonmask_Get
 11910 ;; This function uses a non-reentrant model
 11911 ;;
 11912                           
 11913                           
 11914                           ;psect for function _MTOUCH_Button_isPressed
 11915  16E6                     _MTOUCH_Button_isPressed:	
 11916                           
 11917                           ;incstack = 0
 11918                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 11919                           ;MTOUCH_Button_isPressed@name stored from wreg
 11920  16E6  00F2               	movwf	MTOUCH_Button_isPressed@name
 11921                           
 11922                           ;mcc_generated_files/mtouch/mtouch_button.c: 374: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 375: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 376:     if(name < 3u)
 11923  16E7  3003               	movlw	3
 11924  16E8  0272               	subwf	MTOUCH_Button_isPressed@name,w
 11925  16E9  1803               	skipnc
 11926  16EA  2EFF               	goto	l3951
 11927                           
 11928                           ;mcc_generated_files/mtouch/mtouch_button.c: 377:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 11929  16EB  0872               	movf	MTOUCH_Button_isPressed@name,w
 11930  16EC  00F1               	movwf	??_MTOUCH_Button_isPressed
 11931  16ED  3003               	movlw	3
 11932  16EE                     u2425:	
 11933  16EE  35F1               	lslf	??_MTOUCH_Button_isPressed,f
 11934  16EF  3EFF               	addlw	-1
 11935  16F0  1D03               	skipz
 11936  16F1  2EEE               	goto	u2425
 11937  16F2  3571               	lslf	??_MTOUCH_Button_isPressed,w
 11938  16F3  3E22               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 11939  16F4  0086               	movwf	6
 11940  16F5  3001               	movlw	1	; select bank2/3
 11941  16F6  0087               	movwf	7
 11942  16F7  3002               	movlw	2
 11943  16F8  0601               	xorwf	1,w
 11944  16F9  1D03               	btfss	3,2
 11945  16FA  2EFD               	goto	u2430
 11946  16FB  3001               	movlw	1
 11947  16FC  0008               	return
 11948  16FD                     u2430:	
 11949  16FD  3000               	movlw	0
 11950  16FE  0008               	return
 11951  16FF                     l3951:	
 11952                           
 11953                           ;mcc_generated_files/mtouch/mtouch_button.c: 379:         return 0;
 11954  16FF  3000               	movlw	0
 11955  1700  0008               	return
 11956  1701                     __end_of_MTOUCH_Button_isPressed:	
 11957                           
 11958                           	psect	text74
 11959  0A09                     __ptext74:	
 11960 ;; *************** function _MTOUCH_Button_Initialize *****************
 11961 ;; Defined at:
 11962 ;;		line 159 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11963 ;; Parameters:    Size  Location     Type
 11964 ;;  name            1    wreg     enum E3069
 11965 ;; Auto vars:     Size  Location     Type
 11966 ;;  name            1    9[COMMON] enum E3069
 11967 ;;  button          1   10[COMMON] PTR struct .
 11968 ;;		 -> mtouch_button(48), 
 11969 ;; Return value:  Size  Location     Type
 11970 ;;                  1    wreg      void 
 11971 ;; Registers used:
 11972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11973 ;; Tracked objects:
 11974 ;;		On entry : 0/0
 11975 ;;		On exit  : 0/0
 11976 ;;		Unchanged: 0/0
 11977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11978 ;;      Params:         0       0       0       0       0       0       0       0
 11979 ;;      Locals:         2       0       0       0       0       0       0       0
 11980 ;;      Temps:          2       0       0       0       0       0       0       0
 11981 ;;      Totals:         4       0       0       0       0       0       0       0
 11982 ;;Total ram usage:        4 bytes
 11983 ;; Hardware stack levels used:    1
 11984 ;; Hardware stack levels required when called:    6
 11985 ;; This function calls:
 11986 ;;		_MTOUCH_Sensor_Calibrate
 11987 ;; This function is called by:
 11988 ;;		_MTOUCH_Button_InitializeAll
 11989 ;;		_Button_Service
 11990 ;;		_Button_State_NotPressed
 11991 ;;		_Button_State_Pressed
 11992 ;; This function uses a non-reentrant model
 11993 ;;
 11994                           
 11995                           
 11996                           ;psect for function _MTOUCH_Button_Initialize
 11997  0A09                     _MTOUCH_Button_Initialize:	
 11998                           
 11999                           ;incstack = 0
 12000                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 12001                           ;MTOUCH_Button_Initialize@name stored from wreg
 12002  0A09  00F9               	movwf	MTOUCH_Button_Initialize@name
 12003                           
 12004                           ;mcc_generated_files/mtouch/mtouch_button.c: 159: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 160: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 161:     mtouch_button_t* button = &mtouch_button[name];
 12005  0A0A  0879               	movf	MTOUCH_Button_Initialize@name,w
 12006  0A0B  00F7               	movwf	??_MTOUCH_Button_Initialize
 12007  0A0C  3003               	movlw	3
 12008  0A0D                     u4745:	
 12009  0A0D  35F7               	lslf	??_MTOUCH_Button_Initialize,f
 12010  0A0E  3EFF               	addlw	-1
 12011  0A0F  1D03               	skipz
 12012  0A10  2A0D               	goto	u4745
 12013  0A11  3577               	lslf	??_MTOUCH_Button_Initialize,w
 12014  0A12  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 12015  0A13  00F8               	movwf	??_MTOUCH_Button_Initialize+1
 12016  0A14  0878               	movf	??_MTOUCH_Button_Initialize+1,w
 12017  0A15  00FA               	movwf	MTOUCH_Button_Initialize@button
 12018                           
 12019                           ;mcc_generated_files/mtouch/mtouch_button.c: 163:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 12020  0A16  087A               	movf	MTOUCH_Button_Initialize@button,w
 12021  0A17  3E02               	addlw	2
 12022  0A18  0086               	movwf	6
 12023  0A19  3001               	movlw	1	; select bank2/3
 12024  0A1A  0087               	movwf	7
 12025  0A1B  0181               	clrf	1
 12026                           
 12027                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 12028  0A1C  087A               	movf	MTOUCH_Button_Initialize@button,w
 12029  0A1D  3E05               	addlw	5
 12030  0A1E  0086               	movwf	6
 12031  0A1F  3001               	movlw	1	; select bank2/3
 12032  0A20  0087               	movwf	7
 12033  0A21  3000               	movlw	0
 12034  0A22  3FC0               	movwi [0]fsr1
 12035  0A23  3000               	movlw	0
 12036  0A24  3FC1               	movwi [1]fsr1
 12037  0A25  3FC2               	movwi [2]fsr1
 12038  0A26  3FC3               	movwi [3]fsr1
 12039                           
 12040                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 12041  0A27  087A               	movf	MTOUCH_Button_Initialize@button,w
 12042  0A28  3E0A               	addlw	10
 12043  0A29  0086               	movwf	6
 12044  0A2A  3001               	movlw	1	; select bank2/3
 12045  0A2B  0087               	movwf	7
 12046  0A2C  3000               	movlw	0
 12047  0A2D  3FC0               	movwi [0]fsr1
 12048  0A2E  3FC1               	movwi [1]fsr1
 12049                           
 12050                           ;mcc_generated_files/mtouch/mtouch_button.c: 166:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 12051  0A2F  087A               	movf	MTOUCH_Button_Initialize@button,w
 12052  0A30  3E0C               	addlw	12
 12053  0A31  0086               	movwf	6
 12054  0A32  3001               	movlw	1	; select bank2/3
 12055  0A33  0087               	movwf	7
 12056  0A34  3000               	movlw	0
 12057  0A35  3FC0               	movwi [0]fsr1
 12058  0A36  3FC1               	movwi [1]fsr1
 12059                           
 12060                           ;mcc_generated_files/mtouch/mtouch_button.c: 168:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 12061  0A37  0A7A               	incf	MTOUCH_Button_Initialize@button,w
 12062  0A38  0086               	movwf	6
 12063  0A39  3001               	movlw	1	; select bank2/3
 12064  0A3A  0087               	movwf	7
 12065  0A3B  0801               	movf	1,w
 12066  0A3C  3195  25E8         	fcall	_MTOUCH_Sensor_Calibrate
 12067  0A3E  0008               	return
 12068  0A3F                     __end_of_MTOUCH_Button_Initialize:	
 12069                           
 12070                           	psect	text75
 12071  15E8                     __ptext75:	
 12072 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 12073 ;; Defined at:
 12074 ;;		line 904 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12075 ;; Parameters:    Size  Location     Type
 12076 ;;  sensor          1    wreg     enum E2854
 12077 ;; Auto vars:     Size  Location     Type
 12078 ;;  sensor          1    6[COMMON] enum E2854
 12079 ;; Return value:  Size  Location     Type
 12080 ;;                  1    wreg      void 
 12081 ;; Registers used:
 12082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12083 ;; Tracked objects:
 12084 ;;		On entry : 0/0
 12085 ;;		On exit  : 0/0
 12086 ;;		Unchanged: 0/0
 12087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12088 ;;      Params:         0       0       0       0       0       0       0       0
 12089 ;;      Locals:         1       0       0       0       0       0       0       0
 12090 ;;      Temps:          1       0       0       0       0       0       0       0
 12091 ;;      Totals:         2       0       0       0       0       0       0       0
 12092 ;;Total ram usage:        2 bytes
 12093 ;; Hardware stack levels used:    1
 12094 ;; Hardware stack levels required when called:    5
 12095 ;; This function calls:
 12096 ;;		___bmul
 12097 ;; This function is called by:
 12098 ;;		_MTOUCH_Sensor_Initialize
 12099 ;;		_MTOUCH_Button_Initialize
 12100 ;; This function uses a non-reentrant model
 12101 ;;
 12102                           
 12103                           
 12104                           ;psect for function _MTOUCH_Sensor_Calibrate
 12105  15E8                     _MTOUCH_Sensor_Calibrate:	
 12106                           
 12107                           ;incstack = 0
 12108                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12109                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 12110  15E8  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
 12111                           
 12112                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 904: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 905: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 906:     if(sensor < 3u)
 12113  15E9  3003               	movlw	3
 12114  15EA  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 12115  15EB  1803               	skipnc
 12116  15EC  0008               	return
 12117                           
 12118                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 908:         mtouch_sensor[sensor].calibrated = 0;
 12119  15ED  3009               	movlw	9
 12120  15EE  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
 12121  15EF  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
 12122  15F0  00F1               	movwf	___bmul@multiplicand
 12123  15F1  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 12124  15F2  3195  25B5         	fcall	___bmul
 12125  15F4  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 12126  15F5  0086               	movwf	6
 12127  15F6  3001               	movlw	1	; select bank2/3
 12128  15F7  0087               	movwf	7
 12129  15F8  1101               	bcf	1,2
 12130  15F9  0008               	return
 12131  15FA                     __end_of_MTOUCH_Sensor_Calibrate:	
 12132                           
 12133                           	psect	text76
 12134  0EDF                     __ptext76:	
 12135 ;; *************** function _Button_Baseline_Update *****************
 12136 ;; Defined at:
 12137 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12138 ;; Parameters:    Size  Location     Type
 12139 ;;  button          1    wreg     PTR struct .
 12140 ;;		 -> mtouch_button(48), 
 12141 ;; Auto vars:     Size  Location     Type
 12142 ;;  button          1    7[COMMON] PTR struct .
 12143 ;;		 -> mtouch_button(48), 
 12144 ;; Return value:  Size  Location     Type
 12145 ;;                  1    wreg      void 
 12146 ;; Registers used:
 12147 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12148 ;; Tracked objects:
 12149 ;;		On entry : 0/0
 12150 ;;		On exit  : 0/0
 12151 ;;		Unchanged: 0/0
 12152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12153 ;;      Params:         0       0       0       0       0       0       0       0
 12154 ;;      Locals:         1       0       0       0       0       0       0       0
 12155 ;;      Temps:          6       0       0       0       0       0       0       0
 12156 ;;      Totals:         7       0       0       0       0       0       0       0
 12157 ;;Total ram usage:        7 bytes
 12158 ;; Hardware stack levels used:    1
 12159 ;; Hardware stack levels required when called:    4
 12160 ;; This function calls:
 12161 ;;		Nothing
 12162 ;; This function is called by:
 12163 ;;		_Button_State_Initializing
 12164 ;;		_Button_State_NotPressed
 12165 ;; This function uses a non-reentrant model
 12166 ;;
 12167                           
 12168                           
 12169                           ;psect for function _Button_Baseline_Update
 12170  0EDF                     _Button_Baseline_Update:	
 12171                           
 12172                           ;incstack = 0
 12173                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12174                           ;Button_Baseline_Update@button stored from wreg
 12175  0EDF  00F7               	movwf	Button_Baseline_Update@button
 12176                           
 12177                           ;mcc_generated_files/mtouch/mtouch_button.c: 481: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 482: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 483:     if (GIE == (uint8_t)1)
 12178  0EE0  1F8B               	btfss	11,7	;volatile
 12179  0EE1  2F29               	goto	l4321
 12180                           
 12181                           ;mcc_generated_files/mtouch/mtouch_button.c: 484:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 485:         GIE = (uint8_t)0;
 12182  0EE2  138B               	bcf	11,7	;volatile
 12183                           
 12184                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 12185  0EE3  0877               	movf	Button_Baseline_Update@button,w
 12186  0EE4  3E05               	addlw	5
 12187  0EE5  0086               	movwf	6
 12188  0EE6  3001               	movlw	1	; select bank2/3
 12189  0EE7  0087               	movwf	7
 12190  0EE8  3F40               	moviw [0]fsr1
 12191  0EE9  00F1               	movwf	??_Button_Baseline_Update
 12192  0EEA  3F41               	moviw [1]fsr1
 12193  0EEB  00F2               	movwf	??_Button_Baseline_Update+1
 12194  0EEC  3F42               	moviw [2]fsr1
 12195  0EED  00F3               	movwf	??_Button_Baseline_Update+2
 12196  0EEE  3F43               	moviw [3]fsr1
 12197  0EEF  00F4               	movwf	??_Button_Baseline_Update+3
 12198  0EF0  3004               	movlw	4
 12199  0EF1                     u2975:	
 12200  0EF1  36F4               	lsrf	??_Button_Baseline_Update+3,f
 12201  0EF2  0CF3               	rrf	??_Button_Baseline_Update+2,f
 12202  0EF3  0CF2               	rrf	??_Button_Baseline_Update+1,f
 12203  0EF4  0CF1               	rrf	??_Button_Baseline_Update,f
 12204  0EF5  0B89               	decfsz	9,f
 12205  0EF6  2EF1               	goto	u2975
 12206  0EF7  0877               	movf	Button_Baseline_Update@button,w
 12207  0EF8  3E05               	addlw	5
 12208  0EF9  0086               	movwf	6
 12209  0EFA  3001               	movlw	1	; select bank2/3
 12210  0EFB  0087               	movwf	7
 12211  0EFC  0871               	movf	??_Button_Baseline_Update,w
 12212  0EFD  0281               	subwf	1,f
 12213  0EFE  3141               	addfsr 1,1
 12214  0EFF  0872               	movf	??_Button_Baseline_Update+1,w
 12215  0F00  3B81               	subwfb	1,f
 12216  0F01  3141               	addfsr 1,1
 12217  0F02  0873               	movf	??_Button_Baseline_Update+2,w
 12218  0F03  3B81               	subwfb	1,f
 12219  0F04  3141               	addfsr 1,1
 12220  0F05  0874               	movf	??_Button_Baseline_Update+3,w
 12221  0F06  3B81               	subwfb	1,f
 12222  0F07  317D               	addfsr 1,-3
 12223                           
 12224                           ;mcc_generated_files/mtouch/mtouch_button.c: 487:         button->baseline += button->re
      +                          ading;
 12225  0F08  0877               	movf	Button_Baseline_Update@button,w
 12226  0F09  3E03               	addlw	3
 12227  0F0A  0086               	movwf	6
 12228  0F0B  3001               	movlw	1	; select bank2/3
 12229  0F0C  0087               	movwf	7
 12230  0F0D  3F40               	moviw [0]fsr1
 12231  0F0E  00F1               	movwf	??_Button_Baseline_Update
 12232  0F0F  3F41               	moviw [1]fsr1
 12233  0F10  00F2               	movwf	??_Button_Baseline_Update+1
 12234  0F11  0871               	movf	??_Button_Baseline_Update,w
 12235  0F12  00F3               	movwf	??_Button_Baseline_Update+2
 12236  0F13  0872               	movf	??_Button_Baseline_Update+1,w
 12237  0F14  00F4               	movwf	??_Button_Baseline_Update+3
 12238  0F15  01F5               	clrf	??_Button_Baseline_Update+4
 12239  0F16  01F6               	clrf	??_Button_Baseline_Update+5
 12240  0F17  0877               	movf	Button_Baseline_Update@button,w
 12241  0F18  3E05               	addlw	5
 12242  0F19  0086               	movwf	6
 12243  0F1A  3001               	movlw	1	; select bank2/3
 12244  0F1B  0087               	movwf	7
 12245  0F1C  0873               	movf	??_Button_Baseline_Update+2,w
 12246  0F1D  0781               	addwf	1,f
 12247  0F1E  3141               	addfsr 1,1
 12248  0F1F  0874               	movf	??_Button_Baseline_Update+3,w
 12249  0F20  3D81               	addwfc	1,f
 12250  0F21  3141               	addfsr 1,1
 12251  0F22  0875               	movf	??_Button_Baseline_Update+4,w
 12252  0F23  3D81               	addwfc	1,f
 12253  0F24  3141               	addfsr 1,1
 12254  0F25  0876               	movf	??_Button_Baseline_Update+5,w
 12255  0F26  3D81               	addwfc	1,f
 12256                           
 12257                           ;mcc_generated_files/mtouch/mtouch_button.c: 488:         GIE = (uint8_t)1;
 12258  0F27  178B               	bsf	11,7	;volatile
 12259                           
 12260                           ;mcc_generated_files/mtouch/mtouch_button.c: 489:     }
 12261  0F28  0008               	return
 12262  0F29                     l4321:	
 12263                           
 12264                           ;mcc_generated_files/mtouch/mtouch_button.c: 491:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 492:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 12265  0F29  0877               	movf	Button_Baseline_Update@button,w
 12266  0F2A  3E05               	addlw	5
 12267  0F2B  0086               	movwf	6
 12268  0F2C  3001               	movlw	1	; select bank2/3
 12269  0F2D  0087               	movwf	7
 12270  0F2E  3F40               	moviw [0]fsr1
 12271  0F2F  00F1               	movwf	??_Button_Baseline_Update
 12272  0F30  3F41               	moviw [1]fsr1
 12273  0F31  00F2               	movwf	??_Button_Baseline_Update+1
 12274  0F32  3F42               	moviw [2]fsr1
 12275  0F33  00F3               	movwf	??_Button_Baseline_Update+2
 12276  0F34  3F43               	moviw [3]fsr1
 12277  0F35  00F4               	movwf	??_Button_Baseline_Update+3
 12278  0F36  3004               	movlw	4
 12279  0F37                     u2985:	
 12280  0F37  36F4               	lsrf	??_Button_Baseline_Update+3,f
 12281  0F38  0CF3               	rrf	??_Button_Baseline_Update+2,f
 12282  0F39  0CF2               	rrf	??_Button_Baseline_Update+1,f
 12283  0F3A  0CF1               	rrf	??_Button_Baseline_Update,f
 12284  0F3B  0B89               	decfsz	9,f
 12285  0F3C  2F37               	goto	u2985
 12286  0F3D  0877               	movf	Button_Baseline_Update@button,w
 12287  0F3E  3E05               	addlw	5
 12288  0F3F  0086               	movwf	6
 12289  0F40  3001               	movlw	1	; select bank2/3
 12290  0F41  0087               	movwf	7
 12291  0F42  0871               	movf	??_Button_Baseline_Update,w
 12292  0F43  0281               	subwf	1,f
 12293  0F44  3141               	addfsr 1,1
 12294  0F45  0872               	movf	??_Button_Baseline_Update+1,w
 12295  0F46  3B81               	subwfb	1,f
 12296  0F47  3141               	addfsr 1,1
 12297  0F48  0873               	movf	??_Button_Baseline_Update+2,w
 12298  0F49  3B81               	subwfb	1,f
 12299  0F4A  3141               	addfsr 1,1
 12300  0F4B  0874               	movf	??_Button_Baseline_Update+3,w
 12301  0F4C  3B81               	subwfb	1,f
 12302  0F4D  317D               	addfsr 1,-3
 12303                           
 12304                           ;mcc_generated_files/mtouch/mtouch_button.c: 493:         button->baseline += button->re
      +                          ading;
 12305  0F4E  0877               	movf	Button_Baseline_Update@button,w
 12306  0F4F  3E03               	addlw	3
 12307  0F50  0086               	movwf	6
 12308  0F51  3001               	movlw	1	; select bank2/3
 12309  0F52  0087               	movwf	7
 12310  0F53  3F40               	moviw [0]fsr1
 12311  0F54  00F1               	movwf	??_Button_Baseline_Update
 12312  0F55  3F41               	moviw [1]fsr1
 12313  0F56  00F2               	movwf	??_Button_Baseline_Update+1
 12314  0F57  0871               	movf	??_Button_Baseline_Update,w
 12315  0F58  00F3               	movwf	??_Button_Baseline_Update+2
 12316  0F59  0872               	movf	??_Button_Baseline_Update+1,w
 12317  0F5A  00F4               	movwf	??_Button_Baseline_Update+3
 12318  0F5B  01F5               	clrf	??_Button_Baseline_Update+4
 12319  0F5C  01F6               	clrf	??_Button_Baseline_Update+5
 12320  0F5D  0877               	movf	Button_Baseline_Update@button,w
 12321  0F5E  3E05               	addlw	5
 12322  0F5F  0086               	movwf	6
 12323  0F60  3001               	movlw	1	; select bank2/3
 12324  0F61  0087               	movwf	7
 12325  0F62  0873               	movf	??_Button_Baseline_Update+2,w
 12326  0F63  0781               	addwf	1,f
 12327  0F64  3141               	addfsr 1,1
 12328  0F65  0874               	movf	??_Button_Baseline_Update+3,w
 12329  0F66  3D81               	addwfc	1,f
 12330  0F67  3141               	addfsr 1,1
 12331  0F68  0875               	movf	??_Button_Baseline_Update+4,w
 12332  0F69  3D81               	addwfc	1,f
 12333  0F6A  3141               	addfsr 1,1
 12334  0F6B  0876               	movf	??_Button_Baseline_Update+5,w
 12335  0F6C  3D81               	addwfc	1,f
 12336  0F6D  0008               	return
 12337  0F6E                     __end_of_Button_Baseline_Update:	
 12338                           
 12339                           	psect	text77
 12340  0913                     __ptext77:	
 12341 ;; *************** function _Button_Baseline_Initialize *****************
 12342 ;; Defined at:
 12343 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12344 ;; Parameters:    Size  Location     Type
 12345 ;;  button          1    wreg     PTR struct .
 12346 ;;		 -> mtouch_button(48), 
 12347 ;; Auto vars:     Size  Location     Type
 12348 ;;  button          1    9[COMMON] PTR struct .
 12349 ;;		 -> mtouch_button(48), 
 12350 ;; Return value:  Size  Location     Type
 12351 ;;                  1    wreg      void 
 12352 ;; Registers used:
 12353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12354 ;; Tracked objects:
 12355 ;;		On entry : 0/0
 12356 ;;		On exit  : 0/0
 12357 ;;		Unchanged: 0/0
 12358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12359 ;;      Params:         0       0       0       0       0       0       0       0
 12360 ;;      Locals:         1       0       0       0       0       0       0       0
 12361 ;;      Temps:          0       4       0       0       0       0       0       0
 12362 ;;      Totals:         1       4       0       0       0       0       0       0
 12363 ;;Total ram usage:        5 bytes
 12364 ;; Hardware stack levels used:    1
 12365 ;; Hardware stack levels required when called:    6
 12366 ;; This function calls:
 12367 ;;		_MTOUCH_Sensor_RawSample_Get
 12368 ;; This function is called by:
 12369 ;;		_Button_State_Initializing
 12370 ;; This function uses a non-reentrant model
 12371 ;;
 12372                           
 12373                           
 12374                           ;psect for function _Button_Baseline_Initialize
 12375  0913                     _Button_Baseline_Initialize:	
 12376                           
 12377                           ;incstack = 0
 12378                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12379                           ;Button_Baseline_Initialize@button stored from wreg
 12380  0913  00F9               	movwf	Button_Baseline_Initialize@button
 12381                           
 12382                           ;mcc_generated_files/mtouch/mtouch_button.c: 475: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 476: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 477:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 12383  0914  0A79               	incf	Button_Baseline_Initialize@button,w
 12384  0915  0086               	movwf	6
 12385  0916  3001               	movlw	1	; select bank2/3
 12386  0917  0087               	movwf	7
 12387  0918  0801               	movf	1,w
 12388  0919  3196  26B6  3189   	fcall	_MTOUCH_Sensor_RawSample_Get
 12389  091C  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12390  091D  0020               	movlb	0	; select bank0
 12391  091E  00A0               	movwf	??_Button_Baseline_Initialize
 12392  091F  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12393  0920  00A1               	movwf	??_Button_Baseline_Initialize+1
 12394  0921  01A2               	clrf	??_Button_Baseline_Initialize+2
 12395  0922  01A3               	clrf	??_Button_Baseline_Initialize+3
 12396  0923  0879               	movf	Button_Baseline_Initialize@button,w
 12397  0924  3E05               	addlw	5
 12398  0925  0086               	movwf	6
 12399  0926  3001               	movlw	1	; select bank2/3
 12400  0927  0087               	movwf	7
 12401  0928  0820               	movf	??_Button_Baseline_Initialize,w
 12402  0929  3FC0               	movwi [0]fsr1
 12403  092A  0821               	movf	??_Button_Baseline_Initialize+1,w
 12404  092B  3FC1               	movwi [1]fsr1
 12405  092C  0822               	movf	??_Button_Baseline_Initialize+2,w
 12406  092D  3FC2               	movwi [2]fsr1
 12407  092E  0823               	movf	??_Button_Baseline_Initialize+3,w
 12408  092F  3FC3               	movwi [3]fsr1
 12409                           
 12410                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 12411  0930  0879               	movf	Button_Baseline_Initialize@button,w
 12412  0931  3E05               	addlw	5
 12413  0932  0086               	movwf	6
 12414  0933  3001               	movlw	1	; select bank2/3
 12415  0934  0087               	movwf	7
 12416  0935  3004               	movlw	4
 12417  0936                     u4755:	
 12418  0936  3581               	lslf	1,f
 12419  0937  3141               	addfsr 1,1
 12420  0938  0D81               	rlf	1,f
 12421  0939  3141               	addfsr 1,1
 12422  093A  0D81               	rlf	1,f
 12423  093B  3141               	addfsr 1,1
 12424  093C  0D81               	rlf	1,f
 12425  093D  317D               	addfsr 1,-3
 12426  093E  0B89               	decfsz	9,f
 12427  093F  2936               	goto	u4755
 12428  0940  0008               	return
 12429  0941                     __end_of_Button_Baseline_Initialize:	
 12430                           
 12431                           	psect	text78
 12432  153F                     __ptext78:	
 12433 ;; *************** function _Button_Reading_Update *****************
 12434 ;; Defined at:
 12435 ;;		line 448 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12436 ;; Parameters:    Size  Location     Type
 12437 ;;  button          1    wreg     PTR struct .
 12438 ;;		 -> mtouch_button(48), 
 12439 ;; Auto vars:     Size  Location     Type
 12440 ;;  button          1    0[BANK0 ] PTR struct .
 12441 ;;		 -> mtouch_button(48), 
 12442 ;; Return value:  Size  Location     Type
 12443 ;;                  1    wreg      void 
 12444 ;; Registers used:
 12445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12446 ;; Tracked objects:
 12447 ;;		On entry : 0/0
 12448 ;;		On exit  : 0/0
 12449 ;;		Unchanged: 0/0
 12450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12451 ;;      Params:         0       0       0       0       0       0       0       0
 12452 ;;      Locals:         0       1       0       0       0       0       0       0
 12453 ;;      Temps:          0       0       0       0       0       0       0       0
 12454 ;;      Totals:         0       1       0       0       0       0       0       0
 12455 ;;Total ram usage:        1 bytes
 12456 ;; Hardware stack levels used:    1
 12457 ;; Hardware stack levels required when called:    7
 12458 ;; This function calls:
 12459 ;;		_Button_Reading_Update_Helper
 12460 ;; This function is called by:
 12461 ;;		_Button_Service
 12462 ;; This function uses a non-reentrant model
 12463 ;;
 12464                           
 12465                           
 12466                           ;psect for function _Button_Reading_Update
 12467  153F                     _Button_Reading_Update:	
 12468                           
 12469                           ;incstack = 0
 12470                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12471                           ;Button_Reading_Update@button stored from wreg
 12472  153F  0020               	movlb	0	; select bank0
 12473  1540  00A0               	movwf	Button_Reading_Update@button
 12474                           
 12475                           ;mcc_generated_files/mtouch/mtouch_button.c: 448: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 449: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 450:     if (GIE == (uint8_t) 1)
 12476  1541  1F8B               	btfss	11,7	;volatile
 12477  1542  2D49               	goto	l6039
 12478                           
 12479                           ;mcc_generated_files/mtouch/mtouch_button.c: 451:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 452:         GIE = (uint8_t) 0;
 12480  1543  138B               	bcf	11,7	;volatile
 12481                           
 12482                           ;mcc_generated_files/mtouch/mtouch_button.c: 453:         Button_Reading_Update_Helper(b
      +                          utton);
 12483  1544  0820               	movf	Button_Reading_Update@button,w
 12484  1545  318B  2305         	fcall	_Button_Reading_Update_Helper
 12485                           
 12486                           ;mcc_generated_files/mtouch/mtouch_button.c: 454:         GIE = (uint8_t) 1;
 12487  1547  178B               	bsf	11,7	;volatile
 12488                           
 12489                           ;mcc_generated_files/mtouch/mtouch_button.c: 455:     }
 12490  1548  0008               	return
 12491  1549                     l6039:	
 12492                           
 12493                           ;mcc_generated_files/mtouch/mtouch_button.c: 457:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 458:         Button_Reading_Update_Helper(button);
 12494  1549  0820               	movf	Button_Reading_Update@button,w
 12495  154A  318B  2305         	fcall	_Button_Reading_Update_Helper
 12496  154C  0008               	return
 12497  154D                     __end_of_Button_Reading_Update:	
 12498                           
 12499                           	psect	text79
 12500  0B05                     __ptext79:	
 12501 ;; *************** function _Button_Reading_Update_Helper *****************
 12502 ;; Defined at:
 12503 ;;		line 462 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12504 ;; Parameters:    Size  Location     Type
 12505 ;;  button          1    wreg     PTR struct .
 12506 ;;		 -> mtouch_button(48), 
 12507 ;; Auto vars:     Size  Location     Type
 12508 ;;  button          1   11[COMMON] PTR struct .
 12509 ;;		 -> mtouch_button(48), 
 12510 ;; Return value:  Size  Location     Type
 12511 ;;                  1    wreg      void 
 12512 ;; Registers used:
 12513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12514 ;; Tracked objects:
 12515 ;;		On entry : 0/0
 12516 ;;		On exit  : 0/0
 12517 ;;		Unchanged: 0/0
 12518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12519 ;;      Params:         0       0       0       0       0       0       0       0
 12520 ;;      Locals:         1       0       0       0       0       0       0       0
 12521 ;;      Temps:          2       0       0       0       0       0       0       0
 12522 ;;      Totals:         3       0       0       0       0       0       0       0
 12523 ;;Total ram usage:        3 bytes
 12524 ;; Hardware stack levels used:    1
 12525 ;; Hardware stack levels required when called:    6
 12526 ;; This function calls:
 12527 ;;		_MTOUCH_Sensor_RawSample_Get
 12528 ;; This function is called by:
 12529 ;;		_Button_Reading_Update
 12530 ;; This function uses a non-reentrant model
 12531 ;;
 12532                           
 12533                           
 12534                           ;psect for function _Button_Reading_Update_Helper
 12535  0B05                     _Button_Reading_Update_Helper:	
 12536                           
 12537                           ;incstack = 0
 12538                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12539                           ;Button_Reading_Update_Helper@button stored from wreg
 12540  0B05  00FB               	movwf	Button_Reading_Update_Helper@button
 12541                           
 12542                           ;mcc_generated_files/mtouch/mtouch_button.c: 462: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 463: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 464:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 12543  0B06  087B               	movf	Button_Reading_Update_Helper@button,w
 12544  0B07  3E02               	addlw	2
 12545  0B08  0086               	movwf	6
 12546  0B09  3001               	movlw	1	; select bank2/3
 12547  0B0A  0087               	movwf	7
 12548  0B0B  0801               	movf	1,w
 12549  0B0C  1903               	btfsc	3,2
 12550  0B0D  2B41               	goto	l5941
 12551                           
 12552                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         button->reading -= button->reading>>((uint8_t)2u);
 12553  0B0E  087B               	movf	Button_Reading_Update_Helper@button,w
 12554  0B0F  3E03               	addlw	3
 12555  0B10  0086               	movwf	6
 12556  0B11  3001               	movlw	1	; select bank2/3
 12557  0B12  0087               	movwf	7
 12558  0B13  3F40               	moviw [0]fsr1
 12559  0B14  00F9               	movwf	??_Button_Reading_Update_Helper
 12560  0B15  3F41               	moviw [1]fsr1
 12561  0B16  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12562  0B17  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12563  0B18  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12564  0B19  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12565  0B1A  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12566  0B1B  087B               	movf	Button_Reading_Update_Helper@button,w
 12567  0B1C  3E03               	addlw	3
 12568  0B1D  0086               	movwf	6
 12569  0B1E  3001               	movlw	1	; select bank2/3
 12570  0B1F  0087               	movwf	7
 12571  0B20  0879               	movf	??_Button_Reading_Update_Helper,w
 12572  0B21  0281               	subwf	1,f
 12573  0B22  3141               	addfsr 1,1
 12574  0B23  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12575  0B24  3B81               	subwfb	1,f
 12576  0B25  317F               	addfsr 1,-1
 12577                           
 12578                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 12579  0B26  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12580  0B27  0086               	movwf	6
 12581  0B28  3001               	movlw	1	; select bank2/3
 12582  0B29  0087               	movwf	7
 12583  0B2A  0801               	movf	1,w
 12584  0B2B  3196  26B6         	fcall	_MTOUCH_Sensor_RawSample_Get
 12585  0B2D  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12586  0B2E  00F9               	movwf	??_Button_Reading_Update_Helper
 12587  0B2F  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12588  0B30  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12589  0B31  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12590  0B32  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12591  0B33  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12592  0B34  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12593  0B35  087B               	movf	Button_Reading_Update_Helper@button,w
 12594  0B36  3E03               	addlw	3
 12595  0B37  0086               	movwf	6
 12596  0B38  3001               	movlw	1	; select bank2/3
 12597  0B39  0087               	movwf	7
 12598  0B3A  0879               	movf	??_Button_Reading_Update_Helper,w
 12599  0B3B  0781               	addwf	1,f
 12600  0B3C  3141               	addfsr 1,1
 12601  0B3D  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12602  0B3E  3D81               	addwfc	1,f
 12603  0B3F  317F               	addfsr 1,-1
 12604                           
 12605                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     }
 12606  0B40  0008               	return
 12607  0B41                     l5941:	
 12608                           
 12609                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 471:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 12610  0B41  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12611  0B42  0086               	movwf	6
 12612  0B43  3001               	movlw	1	; select bank2/3
 12613  0B44  0087               	movwf	7
 12614  0B45  0801               	movf	1,w
 12615  0B46  3196  26B6         	fcall	_MTOUCH_Sensor_RawSample_Get
 12616  0B48  087B               	movf	Button_Reading_Update_Helper@button,w
 12617  0B49  3E03               	addlw	3
 12618  0B4A  0086               	movwf	6
 12619  0B4B  3001               	movlw	1	; select bank2/3
 12620  0B4C  0087               	movwf	7
 12621  0B4D  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12622  0B4E  3FC0               	movwi [0]fsr1
 12623  0B4F  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12624  0B50  3FC1               	movwi [1]fsr1
 12625  0B51  0008               	return
 12626  0B52                     __end_of_Button_Reading_Update_Helper:	
 12627                           
 12628                           	psect	text80
 12629  16B6                     __ptext80:	
 12630 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 12631 ;; Defined at:
 12632 ;;		line 792 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12633 ;; Parameters:    Size  Location     Type
 12634 ;;  name            1    wreg     enum E2854
 12635 ;; Auto vars:     Size  Location     Type
 12636 ;;  name            1    8[COMMON] enum E2854
 12637 ;; Return value:  Size  Location     Type
 12638 ;;                  2    5[COMMON] unsigned short 
 12639 ;; Registers used:
 12640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12641 ;; Tracked objects:
 12642 ;;		On entry : 0/0
 12643 ;;		On exit  : 0/0
 12644 ;;		Unchanged: 0/0
 12645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12646 ;;      Params:         2       0       0       0       0       0       0       0
 12647 ;;      Locals:         1       0       0       0       0       0       0       0
 12648 ;;      Temps:          1       0       0       0       0       0       0       0
 12649 ;;      Totals:         4       0       0       0       0       0       0       0
 12650 ;;Total ram usage:        4 bytes
 12651 ;; Hardware stack levels used:    1
 12652 ;; Hardware stack levels required when called:    5
 12653 ;; This function calls:
 12654 ;;		___bmul
 12655 ;; This function is called by:
 12656 ;;		_Button_Reading_Update_Helper
 12657 ;;		_Button_Baseline_Initialize
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           
 12662                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 12663  16B6                     _MTOUCH_Sensor_RawSample_Get:	
 12664                           
 12665                           ;incstack = 0
 12666                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12667                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 12668  16B6  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 12669                           
 12670                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          793: {;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     if (name < 3u)
 12671  16B7  3003               	movlw	3
 12672  16B8  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 12673  16B9  1803               	skipnc
 12674  16BA  2ECB               	goto	l5847
 12675                           
 12676                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 795:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 796:         return mtouch_sensor[name].rawSample;
 12677  16BB  3009               	movlw	9
 12678  16BC  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 12679  16BD  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 12680  16BE  00F1               	movwf	___bmul@multiplicand
 12681  16BF  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 12682  16C0  3195  25B5         	fcall	___bmul
 12683  16C2  3E56               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 12684  16C3  0086               	movwf	6
 12685  16C4  3001               	movlw	1	; select bank2/3
 12686  16C5  0087               	movwf	7
 12687  16C6  3F40               	moviw [0]fsr1
 12688  16C7  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 12689  16C8  3F41               	moviw [1]fsr1
 12690  16C9  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 12691  16CA  0008               	return
 12692  16CB                     l5847:	
 12693                           
 12694                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 799:         return (mtouch_sensor_sample_t
      +                          )0;
 12695  16CB  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 12696  16CC  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 12697  16CD  0008               	return
 12698  16CE                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 12699                           
 12700                           	psect	text81
 12701  15B5                     __ptext81:	
 12702 ;; *************** function ___bmul *****************
 12703 ;; Defined at:
 12704 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 12705 ;; Parameters:    Size  Location     Type
 12706 ;;  multiplier      1    wreg     unsigned char 
 12707 ;;  multiplicand    1    1[COMMON] unsigned char 
 12708 ;; Auto vars:     Size  Location     Type
 12709 ;;  multiplier      1    4[COMMON] unsigned char 
 12710 ;;  product         1    3[COMMON] unsigned char 
 12711 ;; Return value:  Size  Location     Type
 12712 ;;                  1    wreg      unsigned char 
 12713 ;; Registers used:
 12714 ;;		wreg, status,2, status,0
 12715 ;; Tracked objects:
 12716 ;;		On entry : 0/0
 12717 ;;		On exit  : 0/0
 12718 ;;		Unchanged: 0/0
 12719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12720 ;;      Params:         1       0       0       0       0       0       0       0
 12721 ;;      Locals:         2       0       0       0       0       0       0       0
 12722 ;;      Temps:          1       0       0       0       0       0       0       0
 12723 ;;      Totals:         4       0       0       0       0       0       0       0
 12724 ;;Total ram usage:        4 bytes
 12725 ;; Hardware stack levels used:    1
 12726 ;; Hardware stack levels required when called:    4
 12727 ;; This function calls:
 12728 ;;		Nothing
 12729 ;; This function is called by:
 12730 ;;		_MTOUCH_Sensor_Initialize
 12731 ;;		_MTOUCH_Sensor_RawSample_Get
 12732 ;;		_MTOUCH_Sensor_Enable
 12733 ;;		_MTOUCH_Sensor_Calibrate
 12734 ;;		_MTOUCH_Sensor_isCalibrated
 12735 ;;		_MTOUCH_Sensor_wasSampled
 12736 ;;		_MTOUCH_Sensor_isAnySensorActive
 12737 ;;		_MTOUCH_Sensor_Disable
 12738 ;;		_MTOUCH_Sensor_isEnabled
 12739 ;;		_MTOUCH_Sensor_isActive
 12740 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 12741 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 12742 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 12743 ;;		_MTOUCH_Sensor_Oversampling_Get
 12744 ;;		_MTOUCH_Sensor_Oversampling_Set
 12745 ;; This function uses a non-reentrant model
 12746 ;;
 12747                           
 12748                           
 12749                           ;psect for function ___bmul
 12750  15B5                     ___bmul:	
 12751                           
 12752                           ;incstack = 0
 12753                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12754                           ;___bmul@multiplier stored from wreg
 12755  15B5  00F4               	movwf	___bmul@multiplier
 12756  15B6  01F3               	clrf	___bmul@product
 12757  15B7                     l5621:	
 12758  15B7  1C74               	btfss	___bmul@multiplier,0
 12759  15B8  2DBD               	goto	l5625
 12760  15B9  0871               	movf	___bmul@multiplicand,w
 12761  15BA  00F2               	movwf	??___bmul
 12762  15BB  0872               	movf	??___bmul,w
 12763  15BC  07F3               	addwf	___bmul@product,f
 12764  15BD                     l5625:	
 12765  15BD  1003               	clrc
 12766  15BE  0DF1               	rlf	___bmul@multiplicand,f
 12767  15BF  1003               	clrc
 12768  15C0  0CF4               	rrf	___bmul@multiplier,f
 12769  15C1  0874               	movf	___bmul@multiplier,w
 12770  15C2  1D03               	btfss	3,2
 12771  15C3  2DB7               	goto	l5621
 12772  15C4  0873               	movf	___bmul@product,w
 12773  15C5  0008               	return
 12774  15C6                     __end_of___bmul:	
 12775                           
 12776                           	psect	text82
 12777  0E58                     __ptext82:	
 12778 ;; *************** function _Button_Deviation_Update *****************
 12779 ;; Defined at:
 12780 ;;		line 399 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12781 ;; Parameters:    Size  Location     Type
 12782 ;;  button          1    wreg     PTR struct .
 12783 ;;		 -> mtouch_button(48), 
 12784 ;; Auto vars:     Size  Location     Type
 12785 ;;  button          1    0[BANK0 ] PTR struct .
 12786 ;;		 -> mtouch_button(48), 
 12787 ;;  deviation       4    1[BANK0 ] long 
 12788 ;; Return value:  Size  Location     Type
 12789 ;;                  1    wreg      void 
 12790 ;; Registers used:
 12791 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12792 ;; Tracked objects:
 12793 ;;		On entry : 0/0
 12794 ;;		On exit  : 0/0
 12795 ;;		Unchanged: 0/0
 12796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12797 ;;      Params:         0       0       0       0       0       0       0       0
 12798 ;;      Locals:         0       5       0       0       0       0       0       0
 12799 ;;      Temps:         10       0       0       0       0       0       0       0
 12800 ;;      Totals:        10       5       0       0       0       0       0       0
 12801 ;;Total ram usage:       15 bytes
 12802 ;; Hardware stack levels used:    1
 12803 ;; Hardware stack levels required when called:    4
 12804 ;; This function calls:
 12805 ;;		Nothing
 12806 ;; This function is called by:
 12807 ;;		_Button_Service
 12808 ;; This function uses a non-reentrant model
 12809 ;;
 12810                           
 12811                           
 12812                           ;psect for function _Button_Deviation_Update
 12813  0E58                     _Button_Deviation_Update:	
 12814                           
 12815                           ;incstack = 0
 12816                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12817                           ;Button_Deviation_Update@button stored from wreg
 12818  0E58  0020               	movlb	0	; select bank0
 12819  0E59  00A0               	movwf	Button_Deviation_Update@button
 12820                           
 12821                           ;mcc_generated_files/mtouch/mtouch_button.c: 399: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 400: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 401:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 403:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 12822  0E5A  0820               	movf	Button_Deviation_Update@button,w
 12823  0E5B  3E05               	addlw	5
 12824  0E5C  0086               	movwf	6
 12825  0E5D  3001               	movlw	1	; select bank2/3
 12826  0E5E  0087               	movwf	7
 12827  0E5F  3F40               	moviw [0]fsr1
 12828  0E60  00F1               	movwf	??_Button_Deviation_Update
 12829  0E61  3F41               	moviw [1]fsr1
 12830  0E62  00F2               	movwf	??_Button_Deviation_Update+1
 12831  0E63  3F42               	moviw [2]fsr1
 12832  0E64  00F3               	movwf	??_Button_Deviation_Update+2
 12833  0E65  3F43               	moviw [3]fsr1
 12834  0E66  00F4               	movwf	??_Button_Deviation_Update+3
 12835  0E67  3004               	movlw	4
 12836  0E68                     u3235:	
 12837  0E68  36F4               	lsrf	??_Button_Deviation_Update+3,f
 12838  0E69  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12839  0E6A  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12840  0E6B  0CF1               	rrf	??_Button_Deviation_Update,f
 12841  0E6C  0B89               	decfsz	9,f
 12842  0E6D  2E68               	goto	u3235
 12843  0E6E  0820               	movf	Button_Deviation_Update@button,w
 12844  0E6F  3E03               	addlw	3
 12845  0E70  0086               	movwf	6
 12846  0E71  3001               	movlw	1	; select bank2/3
 12847  0E72  0087               	movwf	7
 12848  0E73  3F40               	moviw [0]fsr1
 12849  0E74  00F5               	movwf	??_Button_Deviation_Update+4
 12850  0E75  3F41               	moviw [1]fsr1
 12851  0E76  00F6               	movwf	??_Button_Deviation_Update+5
 12852  0E77  0875               	movf	??_Button_Deviation_Update+4,w
 12853  0E78  00F7               	movwf	??_Button_Deviation_Update+6
 12854  0E79  0876               	movf	??_Button_Deviation_Update+5,w
 12855  0E7A  00F8               	movwf	??_Button_Deviation_Update+7
 12856  0E7B  01F9               	clrf	??_Button_Deviation_Update+8
 12857  0E7C  01FA               	clrf	??_Button_Deviation_Update+9
 12858  0E7D  0871               	movf	??_Button_Deviation_Update,w
 12859  0E7E  02F7               	subwf	??_Button_Deviation_Update+6,f
 12860  0E7F  0872               	movf	??_Button_Deviation_Update+1,w
 12861  0E80  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 12862  0E81  0873               	movf	??_Button_Deviation_Update+2,w
 12863  0E82  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 12864  0E83  0874               	movf	??_Button_Deviation_Update+3,w
 12865  0E84  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 12866  0E85  087A               	movf	??_Button_Deviation_Update+9,w
 12867  0E86  00A4               	movwf	Button_Deviation_Update@deviation+3
 12868  0E87  0879               	movf	??_Button_Deviation_Update+8,w
 12869  0E88  00A3               	movwf	Button_Deviation_Update@deviation+2
 12870  0E89  0878               	movf	??_Button_Deviation_Update+7,w
 12871  0E8A  00A2               	movwf	Button_Deviation_Update@deviation+1
 12872  0E8B  0877               	movf	??_Button_Deviation_Update+6,w
 12873  0E8C  00A1               	movwf	Button_Deviation_Update@deviation
 12874                           
 12875                           ;mcc_generated_files/mtouch/mtouch_button.c: 406:     deviation = deviation >> (button->
      +                          scaling);
 12876  0E8D  0821               	movf	Button_Deviation_Update@deviation,w
 12877  0E8E  00F1               	movwf	??_Button_Deviation_Update
 12878  0E8F  0822               	movf	Button_Deviation_Update@deviation+1,w
 12879  0E90  00F2               	movwf	??_Button_Deviation_Update+1
 12880  0E91  0823               	movf	Button_Deviation_Update@deviation+2,w
 12881  0E92  00F3               	movwf	??_Button_Deviation_Update+2
 12882  0E93  0824               	movf	Button_Deviation_Update@deviation+3,w
 12883  0E94  00F4               	movwf	??_Button_Deviation_Update+3
 12884  0E95  0820               	movf	Button_Deviation_Update@button,w
 12885  0E96  3E0F               	addlw	15
 12886  0E97  0086               	movwf	6
 12887  0E98  3001               	movlw	1	; select bank2/3
 12888  0E99  0087               	movwf	7
 12889  0E9A  0A01               	incf	1,w
 12890  0E9B  2EA0               	goto	u3240
 12891  0E9C                     u3245:	
 12892  0E9C  37F4               	asrf	??_Button_Deviation_Update+3,f
 12893  0E9D  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12894  0E9E  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12895  0E9F  0CF1               	rrf	??_Button_Deviation_Update,f
 12896  0EA0                     u3240:	
 12897  0EA0  0B89               	decfsz	9,f
 12898  0EA1  2E9C               	goto	u3245
 12899  0EA2  0874               	movf	??_Button_Deviation_Update+3,w
 12900  0EA3  00A4               	movwf	Button_Deviation_Update@deviation+3
 12901  0EA4  0873               	movf	??_Button_Deviation_Update+2,w
 12902  0EA5  00A3               	movwf	Button_Deviation_Update@deviation+2
 12903  0EA6  0872               	movf	??_Button_Deviation_Update+1,w
 12904  0EA7  00A2               	movwf	Button_Deviation_Update@deviation+1
 12905  0EA8  0871               	movf	??_Button_Deviation_Update,w
 12906  0EA9  00A1               	movwf	Button_Deviation_Update@deviation
 12907                           
 12908                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:     if (deviation > ((0x7f)))
 12909  0EAA  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 12910  0EAB  2EC1               	goto	l4481
 12911  0EAC  0824               	movf	Button_Deviation_Update@deviation+3,w
 12912  0EAD  1D03               	btfss	3,2
 12913  0EAE  2EB9               	goto	l4479
 12914  0EAF  0823               	movf	Button_Deviation_Update@deviation+2,w
 12915  0EB0  1D03               	btfss	3,2
 12916  0EB1  2EB9               	goto	l4479
 12917  0EB2  0822               	movf	Button_Deviation_Update@deviation+1,w
 12918  0EB3  1D03               	btfss	3,2
 12919  0EB4  2EB9               	goto	l4479
 12920  0EB5  3080               	movlw	128
 12921  0EB6  0221               	subwf	Button_Deviation_Update@deviation,w
 12922  0EB7  1C03               	btfss	3,0
 12923  0EB8  2EC1               	goto	l4481
 12924  0EB9                     l4479:	
 12925                           
 12926                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 411:         deviation = ((0x7f));
 12927  0EB9  3000               	movlw	0
 12928  0EBA  00A4               	movwf	Button_Deviation_Update@deviation+3
 12929  0EBB  3000               	movlw	0
 12930  0EBC  00A3               	movwf	Button_Deviation_Update@deviation+2
 12931  0EBD  3000               	movlw	0
 12932  0EBE  00A2               	movwf	Button_Deviation_Update@deviation+1
 12933  0EBF  307F               	movlw	127
 12934  0EC0  00A1               	movwf	Button_Deviation_Update@deviation
 12935  0EC1                     l4481:	
 12936                           
 12937                           ;mcc_generated_files/mtouch/mtouch_button.c: 413:     if (deviation < ((-1-0x7f)))
 12938  0EC1  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 12939  0EC2  2ED5               	goto	l4485
 12940  0EC3  3080               	movlw	128
 12941  0EC4  0221               	subwf	Button_Deviation_Update@deviation,w
 12942  0EC5  30FF               	movlw	255
 12943  0EC6  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 12944  0EC7  30FF               	movlw	255
 12945  0EC8  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 12946  0EC9  30FF               	movlw	255
 12947  0ECA  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 12948  0ECB  1803               	btfsc	3,0
 12949  0ECC  2ED5               	goto	l4485
 12950                           
 12951                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 415:         deviation = ((-1-0x7f));
 12952  0ECD  30FF               	movlw	255
 12953  0ECE  00A4               	movwf	Button_Deviation_Update@deviation+3
 12954  0ECF  30FF               	movlw	255
 12955  0ED0  00A3               	movwf	Button_Deviation_Update@deviation+2
 12956  0ED1  30FF               	movlw	255
 12957  0ED2  00A2               	movwf	Button_Deviation_Update@deviation+1
 12958  0ED3  3080               	movlw	128
 12959  0ED4  00A1               	movwf	Button_Deviation_Update@deviation
 12960  0ED5                     l4485:	
 12961                           
 12962                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 12963  0ED5  0821               	movf	Button_Deviation_Update@deviation,w
 12964  0ED6  00F1               	movwf	??_Button_Deviation_Update
 12965  0ED7  0820               	movf	Button_Deviation_Update@button,w
 12966  0ED8  3E09               	addlw	9
 12967  0ED9  0086               	movwf	6
 12968  0EDA  3001               	movlw	1	; select bank2/3
 12969  0EDB  0087               	movwf	7
 12970  0EDC  0871               	movf	??_Button_Deviation_Update,w
 12971  0EDD  0081               	movwf	1
 12972  0EDE  0008               	return
 12973  0EDF                     __end_of_Button_Deviation_Update:	
 12974                           
 12975                           	psect	text83
 12976  14B8                     __ptext83:	
 12977 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 12978 ;; Defined at:
 12979 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12980 ;; Parameters:    Size  Location     Type
 12981 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 12982 ;;		 -> myButtonPressedCallback(1), 
 12983 ;; Auto vars:     Size  Location     Type
 12984 ;;		None
 12985 ;; Return value:  Size  Location     Type
 12986 ;;                  1    wreg      void 
 12987 ;; Registers used:
 12988 ;;		wreg
 12989 ;; Tracked objects:
 12990 ;;		On entry : 0/0
 12991 ;;		On exit  : 0/0
 12992 ;;		Unchanged: 0/0
 12993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12994 ;;      Params:         2       0       0       0       0       0       0       0
 12995 ;;      Locals:         0       0       0       0       0       0       0       0
 12996 ;;      Temps:          0       0       0       0       0       0       0       0
 12997 ;;      Totals:         2       0       0       0       0       0       0       0
 12998 ;;Total ram usage:        2 bytes
 12999 ;; Hardware stack levels used:    1
 13000 ;; Hardware stack levels required when called:    4
 13001 ;; This function calls:
 13002 ;;		Nothing
 13003 ;; This function is called by:
 13004 ;;		_main
 13005 ;; This function uses a non-reentrant model
 13006 ;;
 13007                           
 13008                           
 13009                           ;psect for function _MTOUCH_Button_SetPressedCallback
 13010  14B8                     _MTOUCH_Button_SetPressedCallback:	
 13011                           
 13012                           ;mcc_generated_files/mtouch/mtouch_button.c: 528: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          529: {;mcc_generated_files/mtouch/mtouch_button.c: 530:     callback_pressed = callback;
 13013                           
 13014                           ;incstack = 0
 13015                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 13016  14B8  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 13017  14B9  0021               	movlb	1	; select bank1
 13018  14BA  00D6               	movwf	(_callback_pressed+1)^(0+128)
 13019  14BB  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 13020  14BC  00D5               	movwf	_callback_pressed^(0+128)
 13021  14BD  0008               	return
 13022  14BE                     __end_of_MTOUCH_Button_SetPressedCallback:	
 13023                           
 13024                           	psect	text84
 13025  14B2                     __ptext84:	
 13026 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 13027 ;; Defined at:
 13028 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13029 ;; Parameters:    Size  Location     Type
 13030 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 13031 ;;		 -> myButtonReleasedCallback(1), 
 13032 ;; Auto vars:     Size  Location     Type
 13033 ;;		None
 13034 ;; Return value:  Size  Location     Type
 13035 ;;                  1    wreg      void 
 13036 ;; Registers used:
 13037 ;;		wreg
 13038 ;; Tracked objects:
 13039 ;;		On entry : 0/0
 13040 ;;		On exit  : 0/0
 13041 ;;		Unchanged: 0/0
 13042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13043 ;;      Params:         2       0       0       0       0       0       0       0
 13044 ;;      Locals:         0       0       0       0       0       0       0       0
 13045 ;;      Temps:          0       0       0       0       0       0       0       0
 13046 ;;      Totals:         2       0       0       0       0       0       0       0
 13047 ;;Total ram usage:        2 bytes
 13048 ;; Hardware stack levels used:    1
 13049 ;; Hardware stack levels required when called:    4
 13050 ;; This function calls:
 13051 ;;		Nothing
 13052 ;; This function is called by:
 13053 ;;		_main
 13054 ;; This function uses a non-reentrant model
 13055 ;;
 13056                           
 13057                           
 13058                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 13059  14B2                     _MTOUCH_Button_SetNotPressedCallback:	
 13060                           
 13061                           ;mcc_generated_files/mtouch/mtouch_button.c: 532: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 533: {;mcc_generated_files/mtouch/mtouch_button.c: 534:     callback_notPressed = cal
      +                          lback;
 13062                           
 13063                           ;incstack = 0
 13064                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 13065  14B2  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 13066  14B3  0020               	movlb	0	; select bank0
 13067  14B4  00ED               	movwf	_callback_notPressed+1
 13068  14B5  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 13069  14B6  00EC               	movwf	_callback_notPressed
 13070  14B7  0008               	return
 13071  14B8                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 13072                           
 13073                           	psect	text85
 13074  1479                     __ptext85:	
 13075 ;; *************** function _EUSART_is_rx_ready *****************
 13076 ;; Defined at:
 13077 ;;		line 134 in file "mcc_generated_files/eusart.c"
 13078 ;; Parameters:    Size  Location     Type
 13079 ;;		None
 13080 ;; Auto vars:     Size  Location     Type
 13081 ;;		None
 13082 ;; Return value:  Size  Location     Type
 13083 ;;                  1    wreg      unsigned char 
 13084 ;; Registers used:
 13085 ;;		wreg
 13086 ;; Tracked objects:
 13087 ;;		On entry : 0/0
 13088 ;;		On exit  : 0/0
 13089 ;;		Unchanged: 0/0
 13090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13091 ;;      Params:         0       0       0       0       0       0       0       0
 13092 ;;      Locals:         0       0       0       0       0       0       0       0
 13093 ;;      Temps:          0       0       0       0       0       0       0       0
 13094 ;;      Totals:         0       0       0       0       0       0       0       0
 13095 ;;Total ram usage:        0 bytes
 13096 ;; Hardware stack levels used:    1
 13097 ;; Hardware stack levels required when called:    4
 13098 ;; This function calls:
 13099 ;;		Nothing
 13100 ;; This function is called by:
 13101 ;;		_main
 13102 ;; This function uses a non-reentrant model
 13103 ;;
 13104                           
 13105                           
 13106                           ;psect for function _EUSART_is_rx_ready
 13107  1479                     _EUSART_is_rx_ready:	
 13108                           
 13109                           ;mcc_generated_files/eusart.c: 136:     return eusartRxCount;
 13110                           
 13111                           ;incstack = 0
 13112                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 13113  1479  0020               	movlb	0	; select bank0
 13114  147A  0865               	movf	_eusartRxCount,w	;volatile
 13115  147B  0008               	return
 13116  147C                     __end_of_EUSART_is_rx_ready:	
 13117                           
 13118                           	psect	text86
 13119  17B5                     __ptext86:	
 13120 ;; *************** function _EUSART_Read *****************
 13121 ;; Defined at:
 13122 ;;		line 148 in file "mcc_generated_files/eusart.c"
 13123 ;; Parameters:    Size  Location     Type
 13124 ;;		None
 13125 ;; Auto vars:     Size  Location     Type
 13126 ;;  readValue       1    2[COMMON] unsigned char 
 13127 ;; Return value:  Size  Location     Type
 13128 ;;                  1    wreg      unsigned char 
 13129 ;; Registers used:
 13130 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13131 ;; Tracked objects:
 13132 ;;		On entry : 0/0
 13133 ;;		On exit  : 0/0
 13134 ;;		Unchanged: 0/0
 13135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13136 ;;      Params:         0       0       0       0       0       0       0       0
 13137 ;;      Locals:         1       0       0       0       0       0       0       0
 13138 ;;      Temps:          1       0       0       0       0       0       0       0
 13139 ;;      Totals:         2       0       0       0       0       0       0       0
 13140 ;;Total ram usage:        2 bytes
 13141 ;; Hardware stack levels used:    1
 13142 ;; Hardware stack levels required when called:    4
 13143 ;; This function calls:
 13144 ;;		Nothing
 13145 ;; This function is called by:
 13146 ;;		_main
 13147 ;;		_getch
 13148 ;; This function uses a non-reentrant model
 13149 ;;
 13150                           
 13151                           
 13152                           ;psect for function _EUSART_Read
 13153  17B5                     _EUSART_Read:	
 13154  17B5                     l4879:	
 13155                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 13156                           
 13157                           ;incstack = 0
 13158                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 13159                           
 13160                           
 13161                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 13162  17B5  0020               	movlb	0	; select bank0
 13163  17B6  0865               	movf	_eusartRxCount,w	;volatile
 13164  17B7  1903               	btfsc	3,2
 13165  17B8  2FB5               	goto	l4879
 13166                           
 13167                           ;mcc_generated_files/eusart.c: 156:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 13168  17B9  0866               	movf	_eusartRxTail,w	;volatile
 13169  17BA  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13170  17BB  0086               	movwf	6
 13171  17BC  0187               	clrf	7
 13172  17BD  0801               	movf	1,w
 13173  17BE  00F1               	movwf	??_EUSART_Read
 13174  17BF  0871               	movf	??_EUSART_Read,w
 13175  17C0  00E4               	movwf	_eusartRxLastError	;volatile
 13176                           
 13177                           ;mcc_generated_files/eusart.c: 158:     readValue = eusartRxBuffer[eusartRxTail++];
 13178  17C1  0866               	movf	_eusartRxTail,w
 13179  17C2  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 13180  17C3  0086               	movwf	6
 13181  17C4  0187               	clrf	7
 13182  17C5  0801               	movf	1,w
 13183  17C6  00F1               	movwf	??_EUSART_Read
 13184  17C7  0871               	movf	??_EUSART_Read,w
 13185  17C8  00F2               	movwf	EUSART_Read@readValue
 13186  17C9  3001               	movlw	1
 13187  17CA  00F1               	movwf	??_EUSART_Read
 13188  17CB  0871               	movf	??_EUSART_Read,w
 13189  17CC  07E6               	addwf	_eusartRxTail,f	;volatile
 13190                           
 13191                           ;mcc_generated_files/eusart.c: 159:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 13192  17CD  3008               	movlw	8
 13193  17CE  0266               	subwf	_eusartRxTail,w	;volatile
 13194  17CF  1803               	btfsc	3,0
 13195                           
 13196                           ;mcc_generated_files/eusart.c: 160:     {;mcc_generated_files/eusart.c: 161:         eus
      +                          artRxTail = 0;
 13197  17D0  01E6               	clrf	_eusartRxTail	;volatile
 13198                           
 13199                           ;mcc_generated_files/eusart.c: 163:     PIE1bits.RCIE = 0;
 13200  17D1  0021               	movlb	1	; select bank1
 13201  17D2  1291               	bcf	17,5	;volatile
 13202                           
 13203                           ;mcc_generated_files/eusart.c: 164:     eusartRxCount--;
 13204  17D3  3001               	movlw	1
 13205  17D4  0020               	movlb	0	; select bank0
 13206  17D5  02E5               	subwf	_eusartRxCount,f	;volatile
 13207                           
 13208                           ;mcc_generated_files/eusart.c: 165:     PIE1bits.RCIE = 1;
 13209  17D6  0021               	movlb	1	; select bank1
 13210  17D7  1691               	bsf	17,5	;volatile
 13211                           
 13212                           ;mcc_generated_files/eusart.c: 167:     return readValue;
 13213  17D8  0872               	movf	EUSART_Read@readValue,w
 13214  17D9  0008               	return
 13215  17DA                     __end_of_EUSART_Read:	
 13216                           
 13217                           	psect	text87
 13218  05F9                     __ptext87:	
 13219 ;; *************** function _DATA_PROCESS *****************
 13220 ;; Defined at:
 13221 ;;		line 223 in file "main.c"
 13222 ;; Parameters:    Size  Location     Type
 13223 ;;  x               1    wreg     unsigned char 
 13224 ;; Auto vars:     Size  Location     Type
 13225 ;;  x               1    6[COMMON] unsigned char 
 13226 ;; Return value:  Size  Location     Type
 13227 ;;                  1    wreg      void 
 13228 ;; Registers used:
 13229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13230 ;; Tracked objects:
 13231 ;;		On entry : 0/0
 13232 ;;		On exit  : 0/0
 13233 ;;		Unchanged: 0/0
 13234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13235 ;;      Params:         0       0       0       0       0       0       0       0
 13236 ;;      Locals:         1       0       0       0       0       0       0       0
 13237 ;;      Temps:          2       0       0       0       0       0       0       0
 13238 ;;      Totals:         3       0       0       0       0       0       0       0
 13239 ;;Total ram usage:        3 bytes
 13240 ;; Hardware stack levels used:    1
 13241 ;; Hardware stack levels required when called:    6
 13242 ;; This function calls:
 13243 ;;		_LED_PROCESS
 13244 ;;		_RELAY_PROCESS
 13245 ;; This function is called by:
 13246 ;;		_main
 13247 ;; This function uses a non-reentrant model
 13248 ;;
 13249                           
 13250                           
 13251                           ;psect for function _DATA_PROCESS
 13252  05F9                     _DATA_PROCESS:	
 13253                           
 13254                           ;incstack = 0
 13255                           ; Regs used in _DATA_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13256                           ;DATA_PROCESS@x stored from wreg
 13257  05F9  00F6               	movwf	DATA_PROCESS@x
 13258                           
 13259                           ;main.c: 223: void DATA_PROCESS(char x);main.c: 224: {;main.c: 225:     timeout_count = 
      +                          0;
 13260  05FA  3000               	movlw	0
 13261  05FB  0021               	movlb	1	; select bank1
 13262  05FC  00BB               	movwf	(_timeout_count+3)^(0+128)
 13263  05FD  3000               	movlw	0
 13264  05FE  00BA               	movwf	(_timeout_count+2)^(0+128)
 13265  05FF  3000               	movlw	0
 13266  0600  00B9               	movwf	(_timeout_count+1)^(0+128)
 13267  0601  3000               	movlw	0
 13268  0602  00B8               	movwf	_timeout_count^(0+128)
 13269                           
 13270                           ;main.c: 226:     switch(x)
 13271  0603  2E7A               	goto	l5097
 13272  0604                     l5041:	
 13273                           
 13274                           ;main.c: 229:         {;main.c: 230:             LED_PROCESS(0);
 13275  0604  3000               	movlw	0
 13276  0605  318D  2575  3185   	fcall	_LED_PROCESS
 13277                           
 13278                           ;main.c: 231:             RELAY_PROCESS(0);
 13279  0608  3000               	movlw	0
 13280  0609  318A  22B8         	fcall	_RELAY_PROCESS
 13281                           
 13282                           ;main.c: 232:             check_request = 0;
 13283  060B  0020               	movlb	0	; select bank0
 13284  060C  01E0               	clrf	_check_request
 13285                           
 13286                           ;main.c: 233:             last_touch_status.full_status = 0;
 13287  060D  01D9               	clrf	_last_touch_status
 13288  060E  01DA               	clrf	_last_touch_status+1
 13289                           
 13290                           ;main.c: 234:             break;
 13291  060F  0008               	return
 13292  0610                     l5047:	
 13293                           
 13294                           ;main.c: 237:         {;main.c: 238:             LED_PROCESS(1);
 13295  0610  3001               	movlw	1
 13296  0611  318D  2575  3185   	fcall	_LED_PROCESS
 13297                           
 13298                           ;main.c: 239:             RELAY_PROCESS(1);
 13299  0614  3001               	movlw	1
 13300  0615  318A  22B8         	fcall	_RELAY_PROCESS
 13301                           
 13302                           ;main.c: 240:             check_request = 0;
 13303  0617  0020               	movlb	0	; select bank0
 13304  0618  01E0               	clrf	_check_request
 13305                           
 13306                           ;main.c: 241:             last_touch_status.full_status = 1;
 13307  0619  3001               	movlw	1
 13308  061A  00D9               	movwf	_last_touch_status
 13309  061B  3000               	movlw	0
 13310  061C  00DA               	movwf	_last_touch_status+1
 13311                           
 13312                           ;main.c: 242:             break;
 13313  061D  0008               	return
 13314  061E                     l5053:	
 13315                           
 13316                           ;main.c: 245:         {;main.c: 246:             LED_PROCESS(2);
 13317  061E  3002               	movlw	2
 13318  061F  318D  2575  3185   	fcall	_LED_PROCESS
 13319                           
 13320                           ;main.c: 247:             RELAY_PROCESS(2);
 13321  0622  3002               	movlw	2
 13322  0623  318A  22B8         	fcall	_RELAY_PROCESS
 13323                           
 13324                           ;main.c: 248:             check_request = 0;
 13325  0625  0020               	movlb	0	; select bank0
 13326  0626  01E0               	clrf	_check_request
 13327                           
 13328                           ;main.c: 249:             last_touch_status.full_status = 2;
 13329  0627  3002               	movlw	2
 13330  0628  00D9               	movwf	_last_touch_status
 13331  0629  3000               	movlw	0
 13332  062A  00DA               	movwf	_last_touch_status+1
 13333                           
 13334                           ;main.c: 250:             break;
 13335  062B  0008               	return
 13336  062C                     l5059:	
 13337                           
 13338                           ;main.c: 253:         {;main.c: 254:             LED_PROCESS(3);
 13339  062C  3003               	movlw	3
 13340  062D  318D  2575  3185   	fcall	_LED_PROCESS
 13341                           
 13342                           ;main.c: 255:             RELAY_PROCESS(3);
 13343  0630  3003               	movlw	3
 13344  0631  318A  22B8         	fcall	_RELAY_PROCESS
 13345                           
 13346                           ;main.c: 256:             check_request = 0;
 13347  0633  0020               	movlb	0	; select bank0
 13348  0634  01E0               	clrf	_check_request
 13349                           
 13350                           ;main.c: 257:             last_touch_status.full_status = 3;
 13351  0635  3003               	movlw	3
 13352  0636  00D9               	movwf	_last_touch_status
 13353  0637  3000               	movlw	0
 13354  0638  00DA               	movwf	_last_touch_status+1
 13355                           
 13356                           ;main.c: 258:             break;
 13357  0639  0008               	return
 13358  063A                     l5065:	
 13359                           
 13360                           ;main.c: 261:         {;main.c: 262:             LED_PROCESS(4);
 13361  063A  3004               	movlw	4
 13362  063B  318D  2575  3185   	fcall	_LED_PROCESS
 13363                           
 13364                           ;main.c: 263:             RELAY_PROCESS(4);
 13365  063E  3004               	movlw	4
 13366  063F  318A  22B8         	fcall	_RELAY_PROCESS
 13367                           
 13368                           ;main.c: 264:             check_request = 0;
 13369  0641  0020               	movlb	0	; select bank0
 13370  0642  01E0               	clrf	_check_request
 13371                           
 13372                           ;main.c: 265:             last_touch_status.full_status = 4;
 13373  0643  3004               	movlw	4
 13374  0644  00D9               	movwf	_last_touch_status
 13375  0645  3000               	movlw	0
 13376  0646  00DA               	movwf	_last_touch_status+1
 13377                           
 13378                           ;main.c: 266:             break;
 13379  0647  0008               	return
 13380  0648                     l5071:	
 13381                           
 13382                           ;main.c: 269:         {;main.c: 270:             LED_PROCESS(5);
 13383  0648  3005               	movlw	5
 13384  0649  318D  2575  3185   	fcall	_LED_PROCESS
 13385                           
 13386                           ;main.c: 271:             RELAY_PROCESS(5);
 13387  064C  3005               	movlw	5
 13388  064D  318A  22B8         	fcall	_RELAY_PROCESS
 13389                           
 13390                           ;main.c: 272:             check_request = 0;
 13391  064F  0020               	movlb	0	; select bank0
 13392  0650  01E0               	clrf	_check_request
 13393                           
 13394                           ;main.c: 273:             last_touch_status.full_status = 5;
 13395  0651  3005               	movlw	5
 13396  0652  00D9               	movwf	_last_touch_status
 13397  0653  3000               	movlw	0
 13398  0654  00DA               	movwf	_last_touch_status+1
 13399                           
 13400                           ;main.c: 274:             break;
 13401  0655  0008               	return
 13402  0656                     l5077:	
 13403                           
 13404                           ;main.c: 277:         {;main.c: 278:             LED_PROCESS(6);
 13405  0656  3006               	movlw	6
 13406  0657  318D  2575  3185   	fcall	_LED_PROCESS
 13407                           
 13408                           ;main.c: 279:             RELAY_PROCESS(6);
 13409  065A  3006               	movlw	6
 13410  065B  318A  22B8         	fcall	_RELAY_PROCESS
 13411                           
 13412                           ;main.c: 280:             check_request = 0;
 13413  065D  0020               	movlb	0	; select bank0
 13414  065E  01E0               	clrf	_check_request
 13415                           
 13416                           ;main.c: 281:             last_touch_status.full_status = 6;
 13417  065F  3006               	movlw	6
 13418  0660  00D9               	movwf	_last_touch_status
 13419  0661  3000               	movlw	0
 13420  0662  00DA               	movwf	_last_touch_status+1
 13421                           
 13422                           ;main.c: 282:             break;
 13423  0663  0008               	return
 13424  0664                     l5083:	
 13425                           
 13426                           ;main.c: 285:         {;main.c: 286:             LED_PROCESS(7);
 13427  0664  3007               	movlw	7
 13428  0665  318D  2575  3185   	fcall	_LED_PROCESS
 13429                           
 13430                           ;main.c: 287:             RELAY_PROCESS(7);
 13431  0668  3007               	movlw	7
 13432  0669  318A  22B8         	fcall	_RELAY_PROCESS
 13433                           
 13434                           ;main.c: 288:             check_request = 0;
 13435  066B  0020               	movlb	0	; select bank0
 13436  066C  01E0               	clrf	_check_request
 13437                           
 13438                           ;main.c: 289:             last_touch_status.full_status = 7;
 13439  066D  3007               	movlw	7
 13440  066E  00D9               	movwf	_last_touch_status
 13441  066F  3000               	movlw	0
 13442  0670  00DA               	movwf	_last_touch_status+1
 13443                           
 13444                           ;main.c: 290:             break;
 13445  0671  0008               	return
 13446  0672                     l5089:	
 13447                           
 13448                           ;main.c: 293:         {;main.c: 294:             check_request = 0;
 13449  0672  0020               	movlb	0	; select bank0
 13450  0673  01E0               	clrf	_check_request
 13451                           
 13452                           ;main.c: 295:             update_state_flag = 1;
 13453  0674  01DD               	clrf	_update_state_flag
 13454  0675  0ADD               	incf	_update_state_flag,f
 13455                           
 13456                           ;main.c: 296:             break;
 13457  0676  0008               	return
 13458  0677                     l5093:	
 13459                           
 13460                           ;main.c: 299:         {;main.c: 300:             check_request = 0;
 13461  0677  0020               	movlb	0	; select bank0
 13462  0678  01E0               	clrf	_check_request
 13463                           
 13464                           ;main.c: 301:             break;
 13465  0679  0008               	return
 13466  067A                     l5097:	
 13467  067A  0876               	movf	DATA_PROCESS@x,w
 13468  067B  00F4               	movwf	??_DATA_PROCESS
 13469  067C  01F5               	clrf	??_DATA_PROCESS+1
 13470                           
 13471                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13472                           ; Switch size 1, requested type "simple"
 13473                           ; Number of cases is 1, Range of values is 0 to 0
 13474                           ; switch strategies available:
 13475                           ; Name         Instructions Cycles
 13476                           ; simple_byte            4     3 (average)
 13477                           ; direct_byte            8     6 (fixed)
 13478                           ; jumptable            260     6 (fixed)
 13479                           ;	Chosen strategy is simple_byte
 13480  067D  0875               	movf	??_DATA_PROCESS+1,w
 13481  067E  3A00               	xorlw	0	; case 0
 13482  067F  1903               	skipnz
 13483  0680  2E82               	goto	l6811
 13484  0681  2E77               	goto	l5093
 13485  0682                     l6811:	
 13486                           
 13487                           ; Switch size 1, requested type "simple"
 13488                           ; Number of cases is 9, Range of values is 48 to 85
 13489                           ; switch strategies available:
 13490                           ; Name         Instructions Cycles
 13491                           ; simple_byte           28    15 (average)
 13492                           ; direct_byte           85     9 (fixed)
 13493                           ; jumptable            263     9 (fixed)
 13494                           ;	Chosen strategy is simple_byte
 13495  0682  0874               	movf	??_DATA_PROCESS,w
 13496  0683  3A30               	xorlw	48	; case 48
 13497  0684  1903               	skipnz
 13498  0685  2E04               	goto	l5041
 13499  0686  3A01               	xorlw	1	; case 49
 13500  0687  1903               	skipnz
 13501  0688  2E10               	goto	l5047
 13502  0689  3A03               	xorlw	3	; case 50
 13503  068A  1903               	skipnz
 13504  068B  2E1E               	goto	l5053
 13505  068C  3A01               	xorlw	1	; case 51
 13506  068D  1903               	skipnz
 13507  068E  2E2C               	goto	l5059
 13508  068F  3A07               	xorlw	7	; case 52
 13509  0690  1903               	skipnz
 13510  0691  2E3A               	goto	l5065
 13511  0692  3A01               	xorlw	1	; case 53
 13512  0693  1903               	skipnz
 13513  0694  2E48               	goto	l5071
 13514  0695  3A03               	xorlw	3	; case 54
 13515  0696  1903               	skipnz
 13516  0697  2E56               	goto	l5077
 13517  0698  3A01               	xorlw	1	; case 55
 13518  0699  1903               	skipnz
 13519  069A  2E64               	goto	l5083
 13520  069B  3A62               	xorlw	98	; case 85
 13521  069C  1903               	skipnz
 13522  069D  2E72               	goto	l5089
 13523  069E  2E77               	goto	l5093
 13524  069F  0008               	return
 13525  06A0                     __end_of_DATA_PROCESS:	
 13526                           
 13527                           	psect	text88
 13528  0AB8                     __ptext88:	
 13529 ;; *************** function _RELAY_PROCESS *****************
 13530 ;; Defined at:
 13531 ;;		line 5 in file "relay.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;  x               1    wreg     unsigned char 
 13534 ;; Auto vars:     Size  Location     Type
 13535 ;;  x               1    3[COMMON] unsigned char 
 13536 ;; Return value:  Size  Location     Type
 13537 ;;                  1    wreg      void 
 13538 ;; Registers used:
 13539 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13540 ;; Tracked objects:
 13541 ;;		On entry : 0/0
 13542 ;;		On exit  : 0/0
 13543 ;;		Unchanged: 0/0
 13544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13545 ;;      Params:         0       0       0       0       0       0       0       0
 13546 ;;      Locals:         1       0       0       0       0       0       0       0
 13547 ;;      Temps:          2       0       0       0       0       0       0       0
 13548 ;;      Totals:         3       0       0       0       0       0       0       0
 13549 ;;Total ram usage:        3 bytes
 13550 ;; Hardware stack levels used:    1
 13551 ;; Hardware stack levels required when called:    4
 13552 ;; This function calls:
 13553 ;;		Nothing
 13554 ;; This function is called by:
 13555 ;;		_main
 13556 ;;		_myButtonPressedCallback
 13557 ;;		_DATA_PROCESS
 13558 ;; This function uses a non-reentrant model
 13559 ;;
 13560                           
 13561                           
 13562                           ;psect for function _RELAY_PROCESS
 13563  0AB8                     _RELAY_PROCESS:	
 13564                           
 13565                           ;incstack = 0
 13566                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
 13567                           ;RELAY_PROCESS@x stored from wreg
 13568  0AB8  00F3               	movwf	RELAY_PROCESS@x
 13569                           
 13570                           ;relay.c: 5: void RELAY_PROCESS(uint8_t x);relay.c: 6: {;relay.c: 7:     switch(x)
 13571  0AB9  2AE2               	goto	l4207
 13572  0ABA                     l1160:	
 13573                           ;relay.c: 10:         {;relay.c: 11:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13574                           
 13575  0ABA  0022               	movlb	2	; select bank2
 13576  0ABB  170D               	bsf	13,6	;volatile
 13577  0ABC  168C               	bsf	12,5	;volatile
 13578  0ABD  160C               	bsf	12,4	;volatile
 13579  0ABE  0008               	return
 13580  0ABF                     l1168:	
 13581                           ;relay.c: 15:         {;relay.c: 16:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13582                           
 13583  0ABF  0022               	movlb	2	; select bank2
 13584  0AC0  170D               	bsf	13,6	;volatile
 13585  0AC1  168C               	bsf	12,5	;volatile
 13586  0AC2  120C               	bcf	12,4	;volatile
 13587  0AC3  0008               	return
 13588  0AC4                     l1175:	
 13589                           ;relay.c: 20:         {;relay.c: 21:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13590                           
 13591  0AC4  0022               	movlb	2	; select bank2
 13592  0AC5  170D               	bsf	13,6	;volatile
 13593  0AC6  128C               	bcf	12,5	;volatile
 13594  0AC7  160C               	bsf	12,4	;volatile
 13595  0AC8  0008               	return
 13596  0AC9                     l1182:	
 13597                           ;relay.c: 25:         {;relay.c: 26:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13598                           
 13599  0AC9  0022               	movlb	2	; select bank2
 13600  0ACA  170D               	bsf	13,6	;volatile
 13601  0ACB  128C               	bcf	12,5	;volatile
 13602  0ACC  120C               	bcf	12,4	;volatile
 13603  0ACD  0008               	return
 13604  0ACE                     l1189:	
 13605                           ;relay.c: 30:         {;relay.c: 31:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13606                           
 13607  0ACE  0022               	movlb	2	; select bank2
 13608  0ACF  130D               	bcf	13,6	;volatile
 13609  0AD0  168C               	bsf	12,5	;volatile
 13610  0AD1  160C               	bsf	12,4	;volatile
 13611  0AD2  0008               	return
 13612  0AD3                     l1196:	
 13613                           ;relay.c: 35:         {;relay.c: 36:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13614                           
 13615  0AD3  0022               	movlb	2	; select bank2
 13616  0AD4  130D               	bcf	13,6	;volatile
 13617  0AD5  168C               	bsf	12,5	;volatile
 13618  0AD6  120C               	bcf	12,4	;volatile
 13619  0AD7  0008               	return
 13620  0AD8                     l1203:	
 13621                           ;relay.c: 40:         {;relay.c: 41:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13622                           
 13623  0AD8  0022               	movlb	2	; select bank2
 13624  0AD9  130D               	bcf	13,6	;volatile
 13625  0ADA  128C               	bcf	12,5	;volatile
 13626  0ADB  160C               	bsf	12,4	;volatile
 13627  0ADC  0008               	return
 13628  0ADD                     l1210:	
 13629                           ;relay.c: 45:         {;relay.c: 46:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13630                           
 13631  0ADD  0022               	movlb	2	; select bank2
 13632  0ADE  130D               	bcf	13,6	;volatile
 13633  0ADF  128C               	bcf	12,5	;volatile
 13634  0AE0  120C               	bcf	12,4	;volatile
 13635  0AE1  0008               	return
 13636  0AE2                     l4207:	
 13637  0AE2  0873               	movf	RELAY_PROCESS@x,w
 13638  0AE3  00F1               	movwf	??_RELAY_PROCESS
 13639  0AE4  01F2               	clrf	??_RELAY_PROCESS+1
 13640                           
 13641                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13642                           ; Switch size 1, requested type "simple"
 13643                           ; Number of cases is 1, Range of values is 0 to 0
 13644                           ; switch strategies available:
 13645                           ; Name         Instructions Cycles
 13646                           ; simple_byte            4     3 (average)
 13647                           ; direct_byte            8     6 (fixed)
 13648                           ; jumptable            260     6 (fixed)
 13649                           ;	Chosen strategy is simple_byte
 13650  0AE5  0872               	movf	??_RELAY_PROCESS+1,w
 13651  0AE6  3A00               	xorlw	0	; case 0
 13652  0AE7  1903               	skipnz
 13653  0AE8  2AEA               	goto	l6813
 13654  0AE9  2B04               	goto	l1216
 13655  0AEA                     l6813:	
 13656                           
 13657                           ; Switch size 1, requested type "simple"
 13658                           ; Number of cases is 8, Range of values is 0 to 7
 13659                           ; switch strategies available:
 13660                           ; Name         Instructions Cycles
 13661                           ; direct_byte           22     6 (fixed)
 13662                           ; simple_byte           25    13 (average)
 13663                           ; jumptable            260     6 (fixed)
 13664                           ;	Chosen strategy is simple_byte
 13665  0AEA  0871               	movf	??_RELAY_PROCESS,w
 13666  0AEB  3A00               	xorlw	0	; case 0
 13667  0AEC  1903               	skipnz
 13668  0AED  2ABA               	goto	l1160
 13669  0AEE  3A01               	xorlw	1	; case 1
 13670  0AEF  1903               	skipnz
 13671  0AF0  2ABF               	goto	l1168
 13672  0AF1  3A03               	xorlw	3	; case 2
 13673  0AF2  1903               	skipnz
 13674  0AF3  2AC4               	goto	l1175
 13675  0AF4  3A01               	xorlw	1	; case 3
 13676  0AF5  1903               	skipnz
 13677  0AF6  2AC9               	goto	l1182
 13678  0AF7  3A07               	xorlw	7	; case 4
 13679  0AF8  1903               	skipnz
 13680  0AF9  2ACE               	goto	l1189
 13681  0AFA  3A01               	xorlw	1	; case 5
 13682  0AFB  1903               	skipnz
 13683  0AFC  2AD3               	goto	l1196
 13684  0AFD  3A03               	xorlw	3	; case 6
 13685  0AFE  1903               	skipnz
 13686  0AFF  2AD8               	goto	l1203
 13687  0B00  3A01               	xorlw	1	; case 7
 13688  0B01  1903               	skipnz
 13689  0B02  2ADD               	goto	l1210
 13690  0B03  2B04               	goto	l1216
 13691  0B04                     l1216:	
 13692  0B04  0008               	return
 13693  0B05                     __end_of_RELAY_PROCESS:	
 13694                           
 13695                           	psect	text89
 13696  0D75                     __ptext89:	
 13697 ;; *************** function _LED_PROCESS *****************
 13698 ;; Defined at:
 13699 ;;		line 45 in file "led.c"
 13700 ;; Parameters:    Size  Location     Type
 13701 ;;  x               1    wreg     unsigned char 
 13702 ;; Auto vars:     Size  Location     Type
 13703 ;;  x               1    3[COMMON] unsigned char 
 13704 ;; Return value:  Size  Location     Type
 13705 ;;                  1    wreg      void 
 13706 ;; Registers used:
 13707 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13708 ;; Tracked objects:
 13709 ;;		On entry : 0/0
 13710 ;;		On exit  : 0/0
 13711 ;;		Unchanged: 0/0
 13712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13713 ;;      Params:         0       0       0       0       0       0       0       0
 13714 ;;      Locals:         1       0       0       0       0       0       0       0
 13715 ;;      Temps:          2       0       0       0       0       0       0       0
 13716 ;;      Totals:         3       0       0       0       0       0       0       0
 13717 ;;Total ram usage:        3 bytes
 13718 ;; Hardware stack levels used:    1
 13719 ;; Hardware stack levels required when called:    5
 13720 ;; This function calls:
 13721 ;;		_LED_0_SetHigh
 13722 ;;		_LED_0_SetLow
 13723 ;;		_LED_1_SetHigh
 13724 ;;		_LED_1_SetLow
 13725 ;;		_LED_2_SetHigh
 13726 ;;		_LED_2_SetLow
 13727 ;; This function is called by:
 13728 ;;		_main
 13729 ;;		_myButtonPressedCallback
 13730 ;;		_DATA_PROCESS
 13731 ;; This function uses a non-reentrant model
 13732 ;;
 13733                           
 13734                           
 13735                           ;psect for function _LED_PROCESS
 13736  0D75                     _LED_PROCESS:	
 13737                           
 13738                           ;incstack = 0
 13739                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13740                           ;LED_PROCESS@x stored from wreg
 13741  0D75  00F3               	movwf	LED_PROCESS@x
 13742                           
 13743                           ;led.c: 45: void LED_PROCESS(uint8_t x);led.c: 46: {;led.c: 47:     switch(x)
 13744  0D76  2DBF               	goto	l4197
 13745  0D77                     l4179:	
 13746                           
 13747                           ;led.c: 50:         {;led.c: 51:             LED_2_SetHigh();LED_1_SetHigh();LED_0_SetHi
      +                          gh();
 13748  0D77  3194  249C  318D   	fcall	_LED_2_SetHigh
 13749  0D7A  3194  2494  318D   	fcall	_LED_1_SetHigh
 13750  0D7D  3194  248C         	fcall	_LED_0_SetHigh
 13751                           
 13752                           ;led.c: 52:             break;
 13753  0D7F  0008               	return
 13754  0D80                     l4181:	
 13755                           
 13756                           ;led.c: 55:         {;led.c: 56:             LED_2_SetHigh();LED_1_SetHigh();LED_0_SetLo
      +                          w();
 13757  0D80  3194  249C  318D   	fcall	_LED_2_SetHigh
 13758  0D83  3194  2494  318D   	fcall	_LED_1_SetHigh
 13759  0D86  3194  2490         	fcall	_LED_0_SetLow
 13760                           
 13761                           ;led.c: 57:             break;
 13762  0D88  0008               	return
 13763  0D89                     l4183:	
 13764                           
 13765                           ;led.c: 60:         {;led.c: 61:             LED_2_SetHigh();LED_1_SetLow();LED_0_SetHig
      +                          h();
 13766  0D89  3194  249C  318D   	fcall	_LED_2_SetHigh
 13767  0D8C  3194  2498  318D   	fcall	_LED_1_SetLow
 13768  0D8F  3194  248C         	fcall	_LED_0_SetHigh
 13769                           
 13770                           ;led.c: 62:             break;
 13771  0D91  0008               	return
 13772  0D92                     l4185:	
 13773                           
 13774                           ;led.c: 65:         {;led.c: 66:             LED_2_SetHigh();LED_1_SetLow();LED_0_SetLow
      +                          ();
 13775  0D92  3194  249C  318D   	fcall	_LED_2_SetHigh
 13776  0D95  3194  2498  318D   	fcall	_LED_1_SetLow
 13777  0D98  3194  2490         	fcall	_LED_0_SetLow
 13778                           
 13779                           ;led.c: 67:             break;
 13780  0D9A  0008               	return
 13781  0D9B                     l4187:	
 13782                           
 13783                           ;led.c: 70:         {;led.c: 71:             LED_2_SetLow();LED_1_SetHigh();LED_0_SetHig
      +                          h();
 13784  0D9B  3194  24A0  318D   	fcall	_LED_2_SetLow
 13785  0D9E  3194  2494  318D   	fcall	_LED_1_SetHigh
 13786  0DA1  3194  248C         	fcall	_LED_0_SetHigh
 13787                           
 13788                           ;led.c: 72:             break;
 13789  0DA3  0008               	return
 13790  0DA4                     l4189:	
 13791                           
 13792                           ;led.c: 75:         {;led.c: 76:             LED_2_SetLow();LED_1_SetHigh();LED_0_SetLow
      +                          ();
 13793  0DA4  3194  24A0  318D   	fcall	_LED_2_SetLow
 13794  0DA7  3194  2494  318D   	fcall	_LED_1_SetHigh
 13795  0DAA  3194  2490         	fcall	_LED_0_SetLow
 13796                           
 13797                           ;led.c: 77:             break;
 13798  0DAC  0008               	return
 13799  0DAD                     l4191:	
 13800                           
 13801                           ;led.c: 80:         {;led.c: 81:             LED_2_SetLow();LED_1_SetLow();LED_0_SetHigh
      +                          ();
 13802  0DAD  3194  24A0  318D   	fcall	_LED_2_SetLow
 13803  0DB0  3194  2498  318D   	fcall	_LED_1_SetLow
 13804  0DB3  3194  248C         	fcall	_LED_0_SetHigh
 13805                           
 13806                           ;led.c: 82:             break;
 13807  0DB5  0008               	return
 13808  0DB6                     l4193:	
 13809                           
 13810                           ;led.c: 85:         {;led.c: 86:             LED_2_SetLow();LED_1_SetLow();LED_0_SetLow(
      +                          );
 13811  0DB6  3194  24A0  318D   	fcall	_LED_2_SetLow
 13812  0DB9  3194  2498  318D   	fcall	_LED_1_SetLow
 13813  0DBC  3194  2490         	fcall	_LED_0_SetLow
 13814                           
 13815                           ;led.c: 87:             break;
 13816  0DBE  0008               	return
 13817  0DBF                     l4197:	
 13818  0DBF  0873               	movf	LED_PROCESS@x,w
 13819  0DC0  00F1               	movwf	??_LED_PROCESS
 13820  0DC1  01F2               	clrf	??_LED_PROCESS+1
 13821                           
 13822                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13823                           ; Switch size 1, requested type "simple"
 13824                           ; Number of cases is 1, Range of values is 0 to 0
 13825                           ; switch strategies available:
 13826                           ; Name         Instructions Cycles
 13827                           ; simple_byte            4     3 (average)
 13828                           ; direct_byte            8     6 (fixed)
 13829                           ; jumptable            260     6 (fixed)
 13830                           ;	Chosen strategy is simple_byte
 13831  0DC2  0872               	movf	??_LED_PROCESS+1,w
 13832  0DC3  3A00               	xorlw	0	; case 0
 13833  0DC4  1903               	skipnz
 13834  0DC5  2DC7               	goto	l6815
 13835  0DC6  2DE1               	goto	l1151
 13836  0DC7                     l6815:	
 13837                           
 13838                           ; Switch size 1, requested type "simple"
 13839                           ; Number of cases is 8, Range of values is 0 to 7
 13840                           ; switch strategies available:
 13841                           ; Name         Instructions Cycles
 13842                           ; direct_byte           22     6 (fixed)
 13843                           ; simple_byte           25    13 (average)
 13844                           ; jumptable            260     6 (fixed)
 13845                           ;	Chosen strategy is simple_byte
 13846  0DC7  0871               	movf	??_LED_PROCESS,w
 13847  0DC8  3A00               	xorlw	0	; case 0
 13848  0DC9  1903               	skipnz
 13849  0DCA  2D77               	goto	l4179
 13850  0DCB  3A01               	xorlw	1	; case 1
 13851  0DCC  1903               	skipnz
 13852  0DCD  2D80               	goto	l4181
 13853  0DCE  3A03               	xorlw	3	; case 2
 13854  0DCF  1903               	skipnz
 13855  0DD0  2D89               	goto	l4183
 13856  0DD1  3A01               	xorlw	1	; case 3
 13857  0DD2  1903               	skipnz
 13858  0DD3  2D92               	goto	l4185
 13859  0DD4  3A07               	xorlw	7	; case 4
 13860  0DD5  1903               	skipnz
 13861  0DD6  2D9B               	goto	l4187
 13862  0DD7  3A01               	xorlw	1	; case 5
 13863  0DD8  1903               	skipnz
 13864  0DD9  2DA4               	goto	l4189
 13865  0DDA  3A03               	xorlw	3	; case 6
 13866  0DDB  1903               	skipnz
 13867  0DDC  2DAD               	goto	l4191
 13868  0DDD  3A01               	xorlw	1	; case 7
 13869  0DDE  1903               	skipnz
 13870  0DDF  2DB6               	goto	l4193
 13871  0DE0  2DE1               	goto	l1151
 13872  0DE1                     l1151:	
 13873  0DE1  0008               	return
 13874  0DE2                     __end_of_LED_PROCESS:	
 13875                           
 13876                           	psect	text90
 13877  14A0                     __ptext90:	
 13878 ;; *************** function _LED_2_SetLow *****************
 13879 ;; Defined at:
 13880 ;;		line 17 in file "led.c"
 13881 ;; Parameters:    Size  Location     Type
 13882 ;;		None
 13883 ;; Auto vars:     Size  Location     Type
 13884 ;;		None
 13885 ;; Return value:  Size  Location     Type
 13886 ;;                  1    wreg      void 
 13887 ;; Registers used:
 13888 ;;		None
 13889 ;; Tracked objects:
 13890 ;;		On entry : 0/0
 13891 ;;		On exit  : 0/0
 13892 ;;		Unchanged: 0/0
 13893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13894 ;;      Params:         0       0       0       0       0       0       0       0
 13895 ;;      Locals:         0       0       0       0       0       0       0       0
 13896 ;;      Temps:          0       0       0       0       0       0       0       0
 13897 ;;      Totals:         0       0       0       0       0       0       0       0
 13898 ;;Total ram usage:        0 bytes
 13899 ;; Hardware stack levels used:    1
 13900 ;; Hardware stack levels required when called:    4
 13901 ;; This function calls:
 13902 ;;		Nothing
 13903 ;; This function is called by:
 13904 ;;		_LED_PROCESS
 13905 ;; This function uses a non-reentrant model
 13906 ;;
 13907                           
 13908                           
 13909                           ;psect for function _LED_2_SetLow
 13910  14A0                     _LED_2_SetLow:	
 13911                           
 13912                           ;incstack = 0
 13913                           ; Regs used in _LED_2_SetLow: []
 13914                           ;led.c: 19:     do { LATCbits.LATC3 = 1; } while(0);
 13915  14A0  0022               	movlb	2	; select bank2
 13916  14A1  158E               	bsf	14,3	;volatile
 13917                           
 13918                           ;led.c: 20:     do { LATCbits.LATC2 = 0; } while(0);
 13919  14A2  110E               	bcf	14,2	;volatile
 13920  14A3  0008               	return
 13921  14A4                     __end_of_LED_2_SetLow:	
 13922                           
 13923                           	psect	text91
 13924  149C                     __ptext91:	
 13925 ;; *************** function _LED_2_SetHigh *****************
 13926 ;; Defined at:
 13927 ;;		line 12 in file "led.c"
 13928 ;; Parameters:    Size  Location     Type
 13929 ;;		None
 13930 ;; Auto vars:     Size  Location     Type
 13931 ;;		None
 13932 ;; Return value:  Size  Location     Type
 13933 ;;                  1    wreg      void 
 13934 ;; Registers used:
 13935 ;;		None
 13936 ;; Tracked objects:
 13937 ;;		On entry : 0/0
 13938 ;;		On exit  : 0/0
 13939 ;;		Unchanged: 0/0
 13940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13941 ;;      Params:         0       0       0       0       0       0       0       0
 13942 ;;      Locals:         0       0       0       0       0       0       0       0
 13943 ;;      Temps:          0       0       0       0       0       0       0       0
 13944 ;;      Totals:         0       0       0       0       0       0       0       0
 13945 ;;Total ram usage:        0 bytes
 13946 ;; Hardware stack levels used:    1
 13947 ;; Hardware stack levels required when called:    4
 13948 ;; This function calls:
 13949 ;;		Nothing
 13950 ;; This function is called by:
 13951 ;;		_LED_PROCESS
 13952 ;; This function uses a non-reentrant model
 13953 ;;
 13954                           
 13955                           
 13956                           ;psect for function _LED_2_SetHigh
 13957  149C                     _LED_2_SetHigh:	
 13958                           
 13959                           ;incstack = 0
 13960                           ; Regs used in _LED_2_SetHigh: []
 13961                           ;led.c: 14:     do { LATCbits.LATC2 = 1; } while(0);
 13962  149C  0022               	movlb	2	; select bank2
 13963  149D  150E               	bsf	14,2	;volatile
 13964                           
 13965                           ;led.c: 15:     do { LATCbits.LATC3 = 0; } while(0);
 13966  149E  118E               	bcf	14,3	;volatile
 13967  149F  0008               	return
 13968  14A0                     __end_of_LED_2_SetHigh:	
 13969                           
 13970                           	psect	text92
 13971  1498                     __ptext92:	
 13972 ;; *************** function _LED_1_SetLow *****************
 13973 ;; Defined at:
 13974 ;;		line 28 in file "led.c"
 13975 ;; Parameters:    Size  Location     Type
 13976 ;;		None
 13977 ;; Auto vars:     Size  Location     Type
 13978 ;;		None
 13979 ;; Return value:  Size  Location     Type
 13980 ;;                  1    wreg      void 
 13981 ;; Registers used:
 13982 ;;		None
 13983 ;; Tracked objects:
 13984 ;;		On entry : 0/0
 13985 ;;		On exit  : 0/0
 13986 ;;		Unchanged: 0/0
 13987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13988 ;;      Params:         0       0       0       0       0       0       0       0
 13989 ;;      Locals:         0       0       0       0       0       0       0       0
 13990 ;;      Temps:          0       0       0       0       0       0       0       0
 13991 ;;      Totals:         0       0       0       0       0       0       0       0
 13992 ;;Total ram usage:        0 bytes
 13993 ;; Hardware stack levels used:    1
 13994 ;; Hardware stack levels required when called:    4
 13995 ;; This function calls:
 13996 ;;		Nothing
 13997 ;; This function is called by:
 13998 ;;		_LED_PROCESS
 13999 ;; This function uses a non-reentrant model
 14000 ;;
 14001                           
 14002                           
 14003                           ;psect for function _LED_1_SetLow
 14004  1498                     _LED_1_SetLow:	
 14005                           
 14006                           ;incstack = 0
 14007                           ; Regs used in _LED_1_SetLow: []
 14008                           ;led.c: 30:     do { LATCbits.LATC7 = 1; } while(0);
 14009  1498  0022               	movlb	2	; select bank2
 14010  1499  178E               	bsf	14,7	;volatile
 14011                           
 14012                           ;led.c: 31:     do { LATCbits.LATC5 = 0; } while(0);
 14013  149A  128E               	bcf	14,5	;volatile
 14014  149B  0008               	return
 14015  149C                     __end_of_LED_1_SetLow:	
 14016                           
 14017                           	psect	text93
 14018  1494                     __ptext93:	
 14019 ;; *************** function _LED_1_SetHigh *****************
 14020 ;; Defined at:
 14021 ;;		line 23 in file "led.c"
 14022 ;; Parameters:    Size  Location     Type
 14023 ;;		None
 14024 ;; Auto vars:     Size  Location     Type
 14025 ;;		None
 14026 ;; Return value:  Size  Location     Type
 14027 ;;                  1    wreg      void 
 14028 ;; Registers used:
 14029 ;;		None
 14030 ;; Tracked objects:
 14031 ;;		On entry : 0/0
 14032 ;;		On exit  : 0/0
 14033 ;;		Unchanged: 0/0
 14034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14035 ;;      Params:         0       0       0       0       0       0       0       0
 14036 ;;      Locals:         0       0       0       0       0       0       0       0
 14037 ;;      Temps:          0       0       0       0       0       0       0       0
 14038 ;;      Totals:         0       0       0       0       0       0       0       0
 14039 ;;Total ram usage:        0 bytes
 14040 ;; Hardware stack levels used:    1
 14041 ;; Hardware stack levels required when called:    4
 14042 ;; This function calls:
 14043 ;;		Nothing
 14044 ;; This function is called by:
 14045 ;;		_LED_PROCESS
 14046 ;; This function uses a non-reentrant model
 14047 ;;
 14048                           
 14049                           
 14050                           ;psect for function _LED_1_SetHigh
 14051  1494                     _LED_1_SetHigh:	
 14052                           
 14053                           ;incstack = 0
 14054                           ; Regs used in _LED_1_SetHigh: []
 14055                           ;led.c: 25:     do { LATCbits.LATC5 = 1; } while(0);
 14056  1494  0022               	movlb	2	; select bank2
 14057  1495  168E               	bsf	14,5	;volatile
 14058                           
 14059                           ;led.c: 26:     do { LATCbits.LATC7 = 0; } while(0);
 14060  1496  138E               	bcf	14,7	;volatile
 14061  1497  0008               	return
 14062  1498                     __end_of_LED_1_SetHigh:	
 14063                           
 14064                           	psect	text94
 14065  1490                     __ptext94:	
 14066 ;; *************** function _LED_0_SetLow *****************
 14067 ;; Defined at:
 14068 ;;		line 39 in file "led.c"
 14069 ;; Parameters:    Size  Location     Type
 14070 ;;		None
 14071 ;; Auto vars:     Size  Location     Type
 14072 ;;		None
 14073 ;; Return value:  Size  Location     Type
 14074 ;;                  1    wreg      void 
 14075 ;; Registers used:
 14076 ;;		None
 14077 ;; Tracked objects:
 14078 ;;		On entry : 0/0
 14079 ;;		On exit  : 0/0
 14080 ;;		Unchanged: 0/0
 14081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14082 ;;      Params:         0       0       0       0       0       0       0       0
 14083 ;;      Locals:         0       0       0       0       0       0       0       0
 14084 ;;      Temps:          0       0       0       0       0       0       0       0
 14085 ;;      Totals:         0       0       0       0       0       0       0       0
 14086 ;;Total ram usage:        0 bytes
 14087 ;; Hardware stack levels used:    1
 14088 ;; Hardware stack levels required when called:    4
 14089 ;; This function calls:
 14090 ;;		Nothing
 14091 ;; This function is called by:
 14092 ;;		_LED_PROCESS
 14093 ;; This function uses a non-reentrant model
 14094 ;;
 14095                           
 14096                           
 14097                           ;psect for function _LED_0_SetLow
 14098  1490                     _LED_0_SetLow:	
 14099                           
 14100                           ;incstack = 0
 14101                           ; Regs used in _LED_0_SetLow: []
 14102                           ;led.c: 41:     do { LATAbits.LATA1 = 1; } while(0);
 14103  1490  0022               	movlb	2	; select bank2
 14104  1491  148C               	bsf	12,1	;volatile
 14105                           
 14106                           ;led.c: 42:     do { LATAbits.LATA0 = 0; } while(0);
 14107  1492  100C               	bcf	12,0	;volatile
 14108  1493  0008               	return
 14109  1494                     __end_of_LED_0_SetLow:	
 14110                           
 14111                           	psect	text95
 14112  148C                     __ptext95:	
 14113 ;; *************** function _LED_0_SetHigh *****************
 14114 ;; Defined at:
 14115 ;;		line 34 in file "led.c"
 14116 ;; Parameters:    Size  Location     Type
 14117 ;;		None
 14118 ;; Auto vars:     Size  Location     Type
 14119 ;;		None
 14120 ;; Return value:  Size  Location     Type
 14121 ;;                  1    wreg      void 
 14122 ;; Registers used:
 14123 ;;		None
 14124 ;; Tracked objects:
 14125 ;;		On entry : 0/0
 14126 ;;		On exit  : 0/0
 14127 ;;		Unchanged: 0/0
 14128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14129 ;;      Params:         0       0       0       0       0       0       0       0
 14130 ;;      Locals:         0       0       0       0       0       0       0       0
 14131 ;;      Temps:          0       0       0       0       0       0       0       0
 14132 ;;      Totals:         0       0       0       0       0       0       0       0
 14133 ;;Total ram usage:        0 bytes
 14134 ;; Hardware stack levels used:    1
 14135 ;; Hardware stack levels required when called:    4
 14136 ;; This function calls:
 14137 ;;		Nothing
 14138 ;; This function is called by:
 14139 ;;		_LED_PROCESS
 14140 ;; This function uses a non-reentrant model
 14141 ;;
 14142                           
 14143                           
 14144                           ;psect for function _LED_0_SetHigh
 14145  148C                     _LED_0_SetHigh:	
 14146                           
 14147                           ;incstack = 0
 14148                           ; Regs used in _LED_0_SetHigh: []
 14149                           ;led.c: 36:     do { LATAbits.LATA0 = 1; } while(0);
 14150  148C  0022               	movlb	2	; select bank2
 14151  148D  140C               	bsf	12,0	;volatile
 14152                           
 14153                           ;led.c: 37:     do { LATAbits.LATA1 = 0; } while(0);
 14154  148E  108C               	bcf	12,1	;volatile
 14155  148F  0008               	return
 14156  1490                     __end_of_LED_0_SetHigh:	
 14157                           
 14158                           	psect	intentry
 14159  0004                     __pintentry:	
 14160 ;; *************** function _INTERRUPT_InterruptManager *****************
 14161 ;; Defined at:
 14162 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14163 ;; Parameters:    Size  Location     Type
 14164 ;;		None
 14165 ;; Auto vars:     Size  Location     Type
 14166 ;;		None
 14167 ;; Return value:  Size  Location     Type
 14168 ;;                  1    wreg      void 
 14169 ;; Registers used:
 14170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14171 ;; Tracked objects:
 14172 ;;		On entry : 0/0
 14173 ;;		On exit  : 0/0
 14174 ;;		Unchanged: 0/0
 14175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14176 ;;      Params:         0       0       0       0       0       0       0       0
 14177 ;;      Locals:         0       0       0       0       0       0       0       0
 14178 ;;      Temps:          0       0       0       0       0       0       0       0
 14179 ;;      Totals:         0       0       0       0       0       0       0       0
 14180 ;;Total ram usage:        0 bytes
 14181 ;; Hardware stack levels used:    1
 14182 ;; Hardware stack levels required when called:    3
 14183 ;; This function calls:
 14184 ;;		Absolute function
 14185 ;;		_EUSART_Receive_ISR
 14186 ;;		_EUSART_Transmit_ISR
 14187 ;; This function is called by:
 14188 ;;		Interrupt level 1
 14189 ;; This function uses a non-reentrant model
 14190 ;;
 14191                           
 14192  0004                     _INTERRUPT_InterruptManager:	
 14193                           
 14194                           ;incstack = 0
 14195  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14196                           
 14197                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14198  0005  3180               	pagesel	$
 14199                           
 14200                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 14201  0006  1F0B               	btfss	11,6	;volatile
 14202  0007  2821               	goto	i1l845
 14203                           
 14204                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 14205  0008  0021               	movlb	1	; select bank1
 14206  0009  1E11               	btfss	17,4	;volatile
 14207  000A  2815               	goto	i1l840
 14208  000B  0020               	movlb	0	; select bank0
 14209  000C  1E11               	btfss	17,4	;volatile
 14210  000D  2815               	goto	i1l840
 14211                           
 14212                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
 14213  000E  0021               	movlb	1	; select bank1
 14214  000F  084D               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 14215  0010  008A               	movwf	10
 14216  0011  084C               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 14217  0012  000A               	callw
 14218  0013  3180               	pagesel	$
 14219                           
 14220                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 14221  0014  2821               	goto	i1l845
 14222  0015                     i1l840:	
 14223                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 14224                           
 14225  0015  0021               	movlb	1	; select bank1
 14226  0016  1E91               	btfss	17,5	;volatile
 14227  0017  2821               	goto	i1l845
 14228  0018  0020               	movlb	0	; select bank0
 14229  0019  1E91               	btfss	17,5	;volatile
 14230  001A  2821               	goto	i1l845
 14231                           
 14232                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
 14233  001B  0021               	movlb	1	; select bank1
 14234  001C  084B               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 14235  001D  008A               	movwf	10
 14236  001E  084A               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 14237  001F  000A               	callw
 14238  0020  3180               	pagesel	$
 14239  0021                     i1l845:	
 14240                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 14241                           
 14242                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 14243                           
 14244  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14245  0022  0009               	retfie
 14246  0023                     __end_of_INTERRUPT_InterruptManager:	
 14247                           
 14248                           	psect	text97
 14249  1754                     __ptext97:	
 14250 ;; *************** function _EUSART_Transmit_ISR *****************
 14251 ;; Defined at:
 14252 ;;		line 203 in file "mcc_generated_files/eusart.c"
 14253 ;; Parameters:    Size  Location     Type
 14254 ;;		None
 14255 ;; Auto vars:     Size  Location     Type
 14256 ;;		None
 14257 ;; Return value:  Size  Location     Type
 14258 ;;                  1    wreg      void 
 14259 ;; Registers used:
 14260 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14261 ;; Tracked objects:
 14262 ;;		On entry : 0/0
 14263 ;;		On exit  : 0/0
 14264 ;;		Unchanged: 0/0
 14265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14266 ;;      Params:         0       0       0       0       0       0       0       0
 14267 ;;      Locals:         0       0       0       0       0       0       0       0
 14268 ;;      Temps:          1       0       0       0       0       0       0       0
 14269 ;;      Totals:         1       0       0       0       0       0       0       0
 14270 ;;Total ram usage:        1 bytes
 14271 ;; Hardware stack levels used:    1
 14272 ;; This function calls:
 14273 ;;		Nothing
 14274 ;; This function is called by:
 14275 ;;		_EUSART_Initialize
 14276 ;;		_INTERRUPT_InterruptManager
 14277 ;; This function uses a non-reentrant model
 14278 ;;
 14279                           
 14280                           
 14281                           ;psect for function _EUSART_Transmit_ISR
 14282  1754                     _EUSART_Transmit_ISR:	
 14283                           
 14284                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 14285                           
 14286                           ;incstack = 0
 14287                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 14288  1754  3008               	movlw	8
 14289  1755  0021               	movlb	1	; select bank1
 14290  1756  024E               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 14291  1757  1803               	skipnc
 14292  1758  2F70               	goto	i1l754
 14293                           
 14294                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 14295  1759  0020               	movlb	0	; select bank0
 14296  175A  0867               	movf	_eusartTxTail,w
 14297  175B  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 14298  175C  0086               	movwf	6
 14299  175D  0187               	clrf	7
 14300  175E  0801               	movf	1,w
 14301  175F  0023               	movlb	3	; select bank3
 14302  1760  009A               	movwf	26	;volatile
 14303  1761  3001               	movlw	1
 14304  1762  00F0               	movwf	??_EUSART_Transmit_ISR
 14305  1763  0870               	movf	??_EUSART_Transmit_ISR,w
 14306  1764  0020               	movlb	0	; select bank0
 14307  1765  07E7               	addwf	_eusartTxTail,f	;volatile
 14308                           
 14309                           ;mcc_generated_files/eusart.c: 210:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 14310  1766  3008               	movlw	8
 14311  1767  0267               	subwf	_eusartTxTail,w	;volatile
 14312  1768  1803               	btfsc	3,0
 14313                           
 14314                           ;mcc_generated_files/eusart.c: 211:         {;mcc_generated_files/eusart.c: 212:        
      +                               eusartTxTail = 0;
 14315  1769  01E7               	clrf	_eusartTxTail	;volatile
 14316                           
 14317                           ;mcc_generated_files/eusart.c: 214:         eusartTxBufferRemaining++;
 14318  176A  3001               	movlw	1
 14319  176B  00F0               	movwf	??_EUSART_Transmit_ISR
 14320  176C  0870               	movf	??_EUSART_Transmit_ISR,w
 14321  176D  0021               	movlb	1	; select bank1
 14322  176E  07CE               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 14323                           
 14324                           ;mcc_generated_files/eusart.c: 215:     }
 14325  176F  0008               	return
 14326  1770                     i1l754:	
 14327                           ;mcc_generated_files/eusart.c: 216:     else
 14328                           
 14329                           
 14330                           ;mcc_generated_files/eusart.c: 217:     {;mcc_generated_files/eusart.c: 218:         PIE
      +                          1bits.TXIE = 0;
 14331  1770  1211               	bcf	17,4	;volatile
 14332  1771  0008               	return
 14333  1772                     __end_of_EUSART_Transmit_ISR:	
 14334                           
 14335                           	psect	text98
 14336  0970                     __ptext98:	
 14337 ;; *************** function _EUSART_Receive_ISR *****************
 14338 ;; Defined at:
 14339 ;;		line 222 in file "mcc_generated_files/eusart.c"
 14340 ;; Parameters:    Size  Location     Type
 14341 ;;		None
 14342 ;; Auto vars:     Size  Location     Type
 14343 ;;		None
 14344 ;; Return value:  Size  Location     Type
 14345 ;;                  1    wreg      void 
 14346 ;; Registers used:
 14347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14348 ;; Tracked objects:
 14349 ;;		On entry : 0/0
 14350 ;;		On exit  : 0/0
 14351 ;;		Unchanged: 0/0
 14352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14353 ;;      Params:         0       0       0       0       0       0       0       0
 14354 ;;      Locals:         0       0       0       0       0       0       0       0
 14355 ;;      Temps:          0       0       0       0       0       0       0       0
 14356 ;;      Totals:         0       0       0       0       0       0       0       0
 14357 ;;Total ram usage:        0 bytes
 14358 ;; Hardware stack levels used:    1
 14359 ;; Hardware stack levels required when called:    2
 14360 ;; This function calls:
 14361 ;;		Absolute function
 14362 ;;		_EUSART_DefaultErrorHandler
 14363 ;;		_EUSART_DefaultFramingErrorHandler
 14364 ;;		_EUSART_DefaultOverrunErrorHandler
 14365 ;;		_EUSART_RxDataHandler
 14366 ;; This function is called by:
 14367 ;;		_EUSART_Initialize
 14368 ;;		_INTERRUPT_InterruptManager
 14369 ;; This function uses a non-reentrant model
 14370 ;;
 14371                           
 14372                           
 14373                           ;psect for function _EUSART_Receive_ISR
 14374  0970                     _EUSART_Receive_ISR:	
 14375                           
 14376                           ;mcc_generated_files/eusart.c: 225:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 14377                           
 14378                           ;incstack = 0
 14379                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14380  0970  087C               	movf	_eusartRxHead,w	;volatile
 14381  0971  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14382  0972  0086               	movwf	6
 14383  0973  0187               	clrf	7
 14384  0974  0181               	clrf	1
 14385                           
 14386                           ;mcc_generated_files/eusart.c: 227:     if(RCSTAbits.FERR){
 14387  0975  0023               	movlb	3	; select bank3
 14388  0976  1D1D               	btfss	29,2	;volatile
 14389  0977  2983               	goto	i1l4919
 14390                           
 14391                           ;mcc_generated_files/eusart.c: 228:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 14392  0978  087C               	movf	_eusartRxHead,w	;volatile
 14393  0979  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14394  097A  0086               	movwf	6
 14395  097B  0187               	clrf	7
 14396  097C  1481               	bsf	1,1
 14397                           
 14398                           ;mcc_generated_files/eusart.c: 229:         EUSART_FramingErrorHandler();
 14399  097D  0021               	movlb	1	; select bank1
 14400  097E  0849               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 14401  097F  008A               	movwf	10
 14402  0980  0848               	movf	_EUSART_FramingErrorHandler^(0+128),w
 14403  0981  000A               	callw
 14404  0982  3189               	pagesel	$
 14405  0983                     i1l4919:	
 14406                           
 14407                           ;mcc_generated_files/eusart.c: 232:     if(RCSTAbits.OERR){
 14408  0983  0023               	movlb	3	; select bank3
 14409  0984  1C9D               	btfss	29,1	;volatile
 14410  0985  2991               	goto	i1l4925
 14411                           
 14412                           ;mcc_generated_files/eusart.c: 233:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 14413  0986  087C               	movf	_eusartRxHead,w	;volatile
 14414  0987  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14415  0988  0086               	movwf	6
 14416  0989  0187               	clrf	7
 14417  098A  1501               	bsf	1,2
 14418                           
 14419                           ;mcc_generated_files/eusart.c: 234:         EUSART_OverrunErrorHandler();
 14420  098B  0021               	movlb	1	; select bank1
 14421  098C  0847               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 14422  098D  008A               	movwf	10
 14423  098E  0846               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 14424  098F  000A               	callw
 14425  0990  3189               	pagesel	$
 14426  0991                     i1l4925:	
 14427                           
 14428                           ;mcc_generated_files/eusart.c: 237:     if(eusartRxStatusBuffer[eusartRxHead].status){
 14429  0991  087C               	movf	_eusartRxHead,w	;volatile
 14430  0992  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14431  0993  0086               	movwf	6
 14432  0994  0187               	clrf	7
 14433  0995  0801               	movf	1,w
 14434  0996  1903               	btfsc	3,2
 14435  0997  299F               	goto	i1l4929
 14436                           
 14437                           ;mcc_generated_files/eusart.c: 238:         EUSART_ErrorHandler();
 14438  0998  0021               	movlb	1	; select bank1
 14439  0999  0845               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 14440  099A  008A               	movwf	10
 14441  099B  0844               	movf	_EUSART_ErrorHandler^(0+128),w
 14442  099C  000A               	callw
 14443  099D  3189               	pagesel	$
 14444                           
 14445                           ;mcc_generated_files/eusart.c: 239:     } else {
 14446  099E  0008               	return
 14447  099F                     i1l4929:	
 14448                           
 14449                           ;mcc_generated_files/eusart.c: 240:         EUSART_RxDataHandler();
 14450  099F  3196  2688         	fcall	_EUSART_RxDataHandler
 14451  09A1  0008               	return
 14452  09A2                     __end_of_EUSART_Receive_ISR:	
 14453                           
 14454                           	psect	text99
 14455  1488                     __ptext99:	
 14456 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 14457 ;; Defined at:
 14458 ;;		line 258 in file "mcc_generated_files/eusart.c"
 14459 ;; Parameters:    Size  Location     Type
 14460 ;;		None
 14461 ;; Auto vars:     Size  Location     Type
 14462 ;;		None
 14463 ;; Return value:  Size  Location     Type
 14464 ;;                  1    wreg      void 
 14465 ;; Registers used:
 14466 ;;		None
 14467 ;; Tracked objects:
 14468 ;;		On entry : 0/0
 14469 ;;		On exit  : 0/0
 14470 ;;		Unchanged: 0/0
 14471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14472 ;;      Params:         0       0       0       0       0       0       0       0
 14473 ;;      Locals:         0       0       0       0       0       0       0       0
 14474 ;;      Temps:          0       0       0       0       0       0       0       0
 14475 ;;      Totals:         0       0       0       0       0       0       0       0
 14476 ;;Total ram usage:        0 bytes
 14477 ;; Hardware stack levels used:    1
 14478 ;; This function calls:
 14479 ;;		Nothing
 14480 ;; This function is called by:
 14481 ;;		_EUSART_Initialize
 14482 ;;		_EUSART_Receive_ISR
 14483 ;; This function uses a non-reentrant model
 14484 ;;
 14485                           
 14486                           
 14487                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 14488  1488                     _EUSART_DefaultOverrunErrorHandler:	
 14489                           
 14490                           ;mcc_generated_files/eusart.c: 261:     RCSTAbits.CREN = 0;
 14491                           
 14492                           ;incstack = 0
 14493                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 14494  1488  0023               	movlb	3	; select bank3
 14495  1489  121D               	bcf	29,4	;volatile
 14496                           
 14497                           ;mcc_generated_files/eusart.c: 262:     RCSTAbits.CREN = 1;
 14498  148A  161D               	bsf	29,4	;volatile
 14499  148B  0008               	return
 14500  148C                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 14501                           
 14502                           	psect	text100
 14503  1473                     __ptext100:	
 14504 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 14505 ;; Defined at:
 14506 ;;		line 256 in file "mcc_generated_files/eusart.c"
 14507 ;; Parameters:    Size  Location     Type
 14508 ;;		None
 14509 ;; Auto vars:     Size  Location     Type
 14510 ;;		None
 14511 ;; Return value:  Size  Location     Type
 14512 ;;                  1    wreg      void 
 14513 ;; Registers used:
 14514 ;;		None
 14515 ;; Tracked objects:
 14516 ;;		On entry : 0/0
 14517 ;;		On exit  : 0/0
 14518 ;;		Unchanged: 0/0
 14519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14520 ;;      Params:         0       0       0       0       0       0       0       0
 14521 ;;      Locals:         0       0       0       0       0       0       0       0
 14522 ;;      Temps:          0       0       0       0       0       0       0       0
 14523 ;;      Totals:         0       0       0       0       0       0       0       0
 14524 ;;Total ram usage:        0 bytes
 14525 ;; Hardware stack levels used:    1
 14526 ;; This function calls:
 14527 ;;		Nothing
 14528 ;; This function is called by:
 14529 ;;		_EUSART_Initialize
 14530 ;;		_EUSART_Receive_ISR
 14531 ;; This function uses a non-reentrant model
 14532 ;;
 14533                           
 14534                           
 14535                           ;psect for function _EUSART_DefaultFramingErrorHandler
 14536  1473                     _EUSART_DefaultFramingErrorHandler:	
 14537                           
 14538                           ;incstack = 0
 14539                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 14540  1473  0008               	return
 14541  1474                     __end_of_EUSART_DefaultFramingErrorHandler:	
 14542                           
 14543                           	psect	text101
 14544  1476                     __ptext101:	
 14545 ;; *************** function _EUSART_DefaultErrorHandler *****************
 14546 ;; Defined at:
 14547 ;;		line 266 in file "mcc_generated_files/eusart.c"
 14548 ;; Parameters:    Size  Location     Type
 14549 ;;		None
 14550 ;; Auto vars:     Size  Location     Type
 14551 ;;		None
 14552 ;; Return value:  Size  Location     Type
 14553 ;;                  1    wreg      void 
 14554 ;; Registers used:
 14555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14556 ;; Tracked objects:
 14557 ;;		On entry : 0/0
 14558 ;;		On exit  : 0/0
 14559 ;;		Unchanged: 0/0
 14560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14561 ;;      Params:         0       0       0       0       0       0       0       0
 14562 ;;      Locals:         0       0       0       0       0       0       0       0
 14563 ;;      Temps:          0       0       0       0       0       0       0       0
 14564 ;;      Totals:         0       0       0       0       0       0       0       0
 14565 ;;Total ram usage:        0 bytes
 14566 ;; Hardware stack levels used:    1
 14567 ;; Hardware stack levels required when called:    1
 14568 ;; This function calls:
 14569 ;;		_EUSART_RxDataHandler
 14570 ;; This function is called by:
 14571 ;;		_EUSART_Initialize
 14572 ;;		_EUSART_Receive_ISR
 14573 ;; This function uses a non-reentrant model
 14574 ;;
 14575                           
 14576                           
 14577                           ;psect for function _EUSART_DefaultErrorHandler
 14578  1476                     _EUSART_DefaultErrorHandler:	
 14579                           
 14580                           ;mcc_generated_files/eusart.c: 267:     EUSART_RxDataHandler();
 14581                           
 14582                           ;incstack = 0
 14583                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14584  1476  3196  2688         	fcall	_EUSART_RxDataHandler
 14585  1478  0008               	return
 14586  1479                     __end_of_EUSART_DefaultErrorHandler:	
 14587                           
 14588                           	psect	text102
 14589  1688                     __ptext102:	
 14590 ;; *************** function _EUSART_RxDataHandler *****************
 14591 ;; Defined at:
 14592 ;;		line 246 in file "mcc_generated_files/eusart.c"
 14593 ;; Parameters:    Size  Location     Type
 14594 ;;		None
 14595 ;; Auto vars:     Size  Location     Type
 14596 ;;		None
 14597 ;; Return value:  Size  Location     Type
 14598 ;;                  1    wreg      void 
 14599 ;; Registers used:
 14600 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14601 ;; Tracked objects:
 14602 ;;		On entry : 0/0
 14603 ;;		On exit  : 0/0
 14604 ;;		Unchanged: 0/0
 14605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14606 ;;      Params:         0       0       0       0       0       0       0       0
 14607 ;;      Locals:         0       0       0       0       0       0       0       0
 14608 ;;      Temps:          1       0       0       0       0       0       0       0
 14609 ;;      Totals:         1       0       0       0       0       0       0       0
 14610 ;;Total ram usage:        1 bytes
 14611 ;; Hardware stack levels used:    1
 14612 ;; This function calls:
 14613 ;;		Nothing
 14614 ;; This function is called by:
 14615 ;;		_EUSART_Receive_ISR
 14616 ;;		_EUSART_DefaultErrorHandler
 14617 ;; This function uses a non-reentrant model
 14618 ;;
 14619                           
 14620                           
 14621                           ;psect for function _EUSART_RxDataHandler
 14622  1688                     _EUSART_RxDataHandler:	
 14623                           
 14624                           ;mcc_generated_files/eusart.c: 248:     eusartRxBuffer[eusartRxHead++] = RCREG;
 14625                           
 14626                           ;incstack = 0
 14627                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 14628  1688  0023               	movlb	3	; select bank3
 14629  1689  0819               	movf	25,w	;volatile
 14630  168A  00F0               	movwf	??_EUSART_RxDataHandler
 14631  168B  087C               	movf	_eusartRxHead,w
 14632  168C  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14633  168D  0086               	movwf	6
 14634  168E  0187               	clrf	7
 14635  168F  0870               	movf	??_EUSART_RxDataHandler,w
 14636  1690  0081               	movwf	1
 14637  1691  3001               	movlw	1
 14638  1692  00F0               	movwf	??_EUSART_RxDataHandler
 14639  1693  0870               	movf	??_EUSART_RxDataHandler,w
 14640  1694  07FC               	addwf	_eusartRxHead,f	;volatile
 14641                           
 14642                           ;mcc_generated_files/eusart.c: 249:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14643  1695  3008               	movlw	8
 14644  1696  027C               	subwf	_eusartRxHead,w	;volatile
 14645  1697  1803               	btfsc	3,0
 14646                           
 14647                           ;mcc_generated_files/eusart.c: 250:     {;mcc_generated_files/eusart.c: 251:         eus
      +                          artRxHead = 0;
 14648  1698  01FC               	clrf	_eusartRxHead	;volatile
 14649                           
 14650                           ;mcc_generated_files/eusart.c: 253:     eusartRxCount++;
 14651  1699  3001               	movlw	1
 14652  169A  00F0               	movwf	??_EUSART_RxDataHandler
 14653  169B  0870               	movf	??_EUSART_RxDataHandler,w
 14654  169C  0020               	movlb	0	; select bank0
 14655  169D  07E5               	addwf	_eusartRxCount,f	;volatile
 14656  169E  0008               	return
 14657  169F                     __end_of_EUSART_RxDataHandler:	
 14658  007E                     btemp	set	126	;btemp
 14659  007E                     int$flags	set	126
 14660  007E                     wtemp0	set	126


Data Sizes:
    Strings     58
    Constant    57
    Data        40
    BSS         142
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     51      79
    BANK1            80      2      59
    BANK2            80      0      75
    BANK3            80      0      32
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2604$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service$2604	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2282_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@s1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    sp__memcpy	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    S113$sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    S113$sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _vfpfcnvrt->_fputc
    _pad->_fputc
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _Button_State_Pressed->_MTOUCH_Button_Initialize
    _Button_State_NotPressed->_MTOUCH_Button_Initialize
    _myButtonPressedCallback->_LED_PROCESS
    _myButtonPressedCallback->_RELAY_PROCESS
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _DATA_PROCESS->_LED_PROCESS
    _DATA_PROCESS->_RELAY_PROCESS

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_check_message
    _update_state->_printf
    _check_message->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   46601
                                              0 BANK1      2     2      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                      _RELAY_PROCESS
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         0     0      0    6027
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    6089
                                             48 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     4      4    6027
                                             40 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     5      3    4956
                                             32 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    38      2    4521
                                             23 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 8     6      2    3015
                                             17 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  9     6      3    2771
                                              8 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     123
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     7      1    1226
                                              0 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     834
                                              4 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      66
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4468
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              3 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23594
                                             40 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14526
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14427
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13171
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5745
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5202
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    8700
                                             13 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    8601
                                              9 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1437
                                              4 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     150
                                              4 COMMON     1     0      1
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1831
                                              4 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     163
                                              4 COMMON     1     0      1
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              4 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              4 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0      66
                                              4 COMMON     3     3      0
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (1) _RELAY_PROCESS                                        3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              1 COMMON     3     3      0
                      _LED_0_SetHigh
                       _LED_0_SetLow
                      _LED_1_SetHigh
                       _LED_1_SetLow
                      _LED_2_SetHigh
                       _LED_2_SetLow
 ---------------------------------------------------------------------------------
 (7) _LED_2_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_2_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_0_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_0_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
       _LED_0_SetHigh
       _LED_0_SetLow
       _LED_1_SetHigh
       _LED_1_SetLow
       _LED_2_SetHigh
       _LED_2_SetLow
     _RELAY_PROCESS
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_PROCESS
     _LED_0_SetHigh
     _LED_0_SetLow
     _LED_1_SetHigh
     _LED_1_SetLow
     _LED_2_SetHigh
     _LED_2_SetLow
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
               _LED_0_SetHigh
               _LED_0_SetLow
               _LED_1_SetHigh
               _LED_1_SetLow
               _LED_2_SetHigh
               _LED_2_SetLow
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _MTOUCH_Button_isPressed
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _RELAY_PROCESS
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write
   _update_state
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     102       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     33      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      2      3B       8       73.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      20      12       40.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     102      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Jul 30 10:37:30 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                          _update_state 0BF7  
                                      ___bmul@product 0073                                          ?_LED_PROCESS 0070  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 14FE                             _Sensor_setCalibratAcqTime 1586  
                                         __CFG_LVP$ON 0000                                                   l303 0441  
                                                 l305 0458                                                   l257 04AF  
                                                 l522 0721                                                   l293 03A1  
                                                 l286 039E                                                   l288 039A  
                                                 l742 179D                                                   _GIE 005F  
                                                 _PR2 001B                                                   _abs 169F  
                              ??_EUSART_RxDataHandler 0070                                                   _pad 0B52  
                      ?_EUSART_SetFramingErrorHandler 0071                               ?_Sensor_loadADCSettings 0072  
                                     _TMR2_Initialize 150E                                          __CFG_BORV$LO 0000  
                                       DATA_PROCESS@x 0076                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0072                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0016                        Sensor_getScanGroupIndex@sensor 0073  
                   __size_of_MTOUCH_Sensor_Initialize 0015                             ?_MTOUCH_Sensor_Initialize 0070  
                                        ?_EUSART_Read 0070                                                  l1032 0C50  
                                                l1210 0ADD                                                  l1203 0AD8  
                                                ?_abs 0071                                                  l1151 0DE1  
                                                l1216 0B04                                                  l1160 0ABA  
                                                l1305 0B6A                                                  l1308 0B8A  
                                                l1309 0B96                                                  l1182 0AC9  
                                                l1175 0AC4                                                  l1168 0ABF  
                                                l1196 0AD3                                                  l1189 0ACE  
                                                l5013 09A8                                                  l4207 0AE2  
                                                l5007 09A6                                                  l5041 0604  
                                                l4321 0F29                                                  l6011 165A  
                                                l4251 0A73                                                  l4181 0D80  
                                                l5053 061E                                                  l4245 0A66  
                                                l6101 05A4                                                  l4191 0DAD  
                                                l4183 0D89                                                  l5071 0648  
                                                l5047 0610                                                  l4343 17EF  
                                                l4247 0A68                                                  l6111 05CB  
                                                l4193 0DB6                                                  l4185 0D92  
                                                l5065 063A                                                  l4433 0884  
                                                l4187 0D9B                                                  l4179 0D77  
                                                l5083 0664                                                  l5059 062C  
                                                l4347 17F7                                                  l4339 17E8  
                                                l6203 0BE3                                                  l6131 156A  
                                                l6107 05C5                                                  l6211 094A  
                                                l4189 0DA4                                                  l4197 0DBF  
                                                l5093 0677                                                  l5077 0656  
                                                l6045 0CC3                                                  l6061 06DF  
                                                l6029 08C4                                                  l3813 0A00  
                                                l6117 05D6                                                  l6213 0967  
                                                ?_pad 0028                                                  l6039 1549  
                                                l6047 0CC7                                                  l6231 165E  
                                                l3743 1793                                                  l5089 0672  
                                                l5097 067A                                                  l4481 0EC1  
                                                l3905 0FE1                                                  l6161 0780  
                                                l6145 1746                                                  l3809 09DD  
                                                l6321 0C14                                                  l6313 0BF8  
                                                l6067 0718                                                  l6251 1597  
                                                l6171 07A1                                                  l6155 0771  
                                                l4619 1673                                                  l3923 16D3  
                                                l6323 0C1B                                                  l6315 0BFF  
                                                l6331 0C30                                                  l4485 0ED5  
                                                l5621 15B7                                                  l6077 0D37  
                                                l3773 08F9                                                  l3837 15D5  
                                                l6165 0791                                                  l6237 1667  
                                                l3757 17B2                                                  l3925 16DF  
                                                l6325 0C22                                                  l6317 0C06  
                                                l4479 0EB9                                                  l3951 16FF  
                                                l3767 08E8                                                  l3847 1561  
                                                l6343 07DE                                                  l6327 0C29  
                                                l6319 0C0D                                                  l5625 15BD  
                                                l3769 08F7                                                  l3873 0509  
                                                l5713 0368                                                  l6177 07B3  
                                                l6273 1727                                                  l5617 0821  
                                                l6521 0197                                                  l3779 090A  
                                                l3859 04AB                                                  l5811 046E  
                                                l5803 045C                                                  l5723 037B  
                                                l5651 02FD                                                  l6179 07D6  
                                                l6339 07DC                                                  l3877 051C  
                                                l5661 031B                                                  l6349 07EF  
                                                l6605 02B6                                                  l6525 019F  
                                                l6453 0098                                                  l3879 052F  
                                                l5823 0494                                                  l5807 0465  
                                                l5663 0330                                                  l5911 0E42  
                                                l6615 02CB                                                  l6543 01CB  
                                                l6471 00C4                                                  l3897 0FAB  
                                                l5817 0482                                                  l5681 0323  
                                                l5905 0E16                                                  l6801 0C36  
                                                l6529 01A4                                                  l6811 0682  
                                                l3899 0FAF                                                  l5771 041E  
                                                l5763 0404                                                  l5747 03A4  
                                                l5739 0395                                                  l5659 0314  
                                                l5907 0E29                                                  l4963 09A4  
                                                l6803 07F7                                                  l6459 00A0  
                                                l6813 0AEA                                                  l5941 0B41  
                                                l5693 0332                                                  l5669 031D  
                                                l6805 09B0                                                  l6815 0DC7  
                                                l4879 17B5                                                  l5847 16CB  
                                                l5775 0438                                                  l5759 03E9  
                                                l6807 07C0                                                  l5855 0B60  
                                                l5697 033C                                                  l6809 07C5  
                                                l5865 0B6C                                                  l6593 0296  
                                                l6585 027A                                                  l6497 012E  
                                                l5971 0C5F                                                  l5859 0B68  
                                                l5947 089D                                                  l6587 027E  
                                                l5949 08A3                                                  l6597 02A5  
                                                l5991 0C92                                                  l5983 0C7A  
                                                l5897 0E12                                                  l5889 0DFF  
                                                l5977 0C67                                                  l5995 0CA2  
                                                l5987 0C82                                                  l5999 0CAB  
                                                STR_1 1800                                                  STR_2 1809  
                                                STR_3 1814                                                  STR_4 1819  
                                                STR_5 181E                                                  STR_6 1823  
                                                STR_7 1828                                                  STR_8 182D  
                                                STR_9 1832                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u2305 0544  
                                                u2235 09FE                                                  u2325 0F8E  
                                                u2430 16FD                                                  u2335 0F98  
                                                u3240 0EA0                                                  u2425 16EE  
                                                u3235 0E68                                                  u2195 16A8  
                                                u2355 0FD2                                                  u3245 0E9C  
                                                u3455 1676                                                  u5095 0BA7  
                                                u4725 0E30                                                  u2975 0EF1  
                                                u5607 0109                                                  u2985 0F37  
                                                u4745 0A0D                                                  u4665 0B76  
                                                u5617 0116                                                  u4755 0936  
                                                u5707 0216                                                  u5627 013D  
                                                u5717 0223                                                  u5637 014A  
                                                u4935 0CF0                                                  u5727 0230  
                                                u5647 0157                                                  u5567 00D5  
                                                u5737 023D                                                  u5657 0164  
                                                u5577 00E2                                                  u5747 024A  
                                                u5667 0171                                                  u5587 00EF  
                                      ??_LED_0_SetLow 0071                                                  u4965 06F5  
                                                u5757 0257                                                  u5677 017E  
                                                u5597 00FC                                                  u5687 01FC  
                                                u5697 0209                            Button_State_Pressed@button 0024  
                                                _TMR2 001A                                 __end_of_check_message 0800  
                                                _WPUA 020C                                                  _WPUB 020D  
                   __size_of_Sensor_Acq_ExecutePacket 01CA                                        ??_LED_1_SetLow 0071  
                            _Sensor_getScanGroupIndex 08E6                             ?_Sensor_Acq_ExecutePacket 007B  
                                        __CFG_WRT$OFF 0000                                        ??_LED_2_SetLow 0071  
                                  _MTOUCH_needReburst 0002                                                  abs@a 0071  
                                                _dbuf 01A0                                                  _ctoa 0892  
                                                _main 006D                  __size_of_MTOUCH_Button_InitializeAll 001C  
                                                _prec 00BE                                                  _nout 00BC  
                                                pad@i 002C                                                  pad@p 0029  
                                                fsr0h 0005                                                  fsr1h 0007  
                                                indf0 0000                                                  fsr0l 0004  
                                                indf1 0001                                                  fsr1l 0006  
                                                pad@w 002E                  __size_of_MTOUCH_Sensor_InitializeAll 000E  
                                                btemp 007E                                                  start 0023  
                                   ___bmul@multiplier 0074                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                        __end_of_Sensor_autoCalibration 1000  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1814          Sensor_Scanfrequency_Evaluation@frequency_hop 180F  
                                       __CFG_LPBOR$ON 0000                              _myButtonReleasedCallback 1772  
                            ?_MTOUCH_Service_Mainloop 0070                      __size_of_MTOUCH_Button_isPressed 001B  
                       __size_of_Button_State_Pressed 0066                                                 ??_abs 0073  
                                               ??_pad 002B                           ?_Button_Baseline_Initialize 0070  
               Sensor_postAcquisitionProcess@adcIndex 0078                         ??_MTOUCH_Sensor_RawSample_Get 0077  
                       Sensor_RawSample_Update@sensor 0077                         myButtonPressedCallback@button 0074  
                           __size_of_Sensor_isEnabled 0011                                         ?_EUSART_Write 0070  
                      __size_of_OSCILLATOR_Initialize 0006                         __end_of_OSCILLATOR_Initialize 14E2  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 0036                   __end_of_Sensor_isCalibratingAcqTime 151F  
                         _Sensor_isCalibratingAcqTime 1516                                                 ?_ctoa 0031  
                                               ?_main 0070                                                 STR_10 1837  
                                               STR_11 1840                                         __CFG_WDTE$OFF 0000  
                      __end_of_Sensor_loadADCSettings 0551                                                 _T2CON 001C  
                             __size_of_Button_Service 0055                                       ??_LED_0_SetHigh 0071  
                                               i1l840 0015                                                 i1l754 1770  
                                               i1l845 0021                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 0037  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                       ??_LED_1_SetHigh 0071  
                                               _TXREG 019A                                                 _TXSTA 019E  
                     __size_of_Button_DefaultCallback 0001                                       ??_LED_2_SetHigh 0071  
                                ??_MTOUCH_needReburst 0071                       __size_of_Sensor_DefaultCallback 0001  
                                               _blink 005F                                                 _flags 00C0  
                             __size_of_Sensor_Service 0095                 __end_of_MTOUCH_Sensor_Scan_Initialize 15B5  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0010                         _MTOUCH_Sensor_Scan_Initialize 15A5  
                                      _WDT_Initialize 14A4                               Sensor_setSampled@sensor 0071  
                                               _fputc 09D4                                                 _fputs 081D  
                                        LED_PROCESS@x 0073                                                 pad@fp 0030  
                                               _width 0057                                                 ctoa@c 0031  
                                               _putch 14AD                                                 ctoa@w 0034  
                    __size_of_Button_State_NotPressed 00A4                                                 pclath 000A  
                                _Sensor_Sampled_Reset 1506                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 147C  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0008  
                              Sensor_isEnabled@sensor 0072                                       __initialization 0025  
                                        __end_of_ctoa 08BB                                          __end_of_main 02D7  
                                _Sensor_setCalibrated 154D                                 __size_of_DATA_PROCESS 00A7  
                                      ??_EUSART_Write 0071                               __end_of_TMR2_Initialize 1516  
                         ?_INTERRUPT_InterruptManager 0070                        ??_EUSART_SetRxInterruptHandler 0073  
                    __end_of_MTOUCH_Button_Initialize 0A3F                                                ??_ctoa 0033  
                                              ??_main 00D9                               _MTOUCH_Sensor_Calibrate 15E8  
                           Sensor_Service@sensor_adc1 0044                             Sensor_Service@sensor_adc2 0045  
                             ??_Button_Reading_Update 007C                  MTOUCH_Sensor_Sampled_ResetAll@sensor 0073  
                            ?_Button_Deviation_Update 0070                                __end_of_WDT_Initialize 14A8  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 0077  
           __end_of_EUSART_DefaultFramingErrorHandler 1474            __size_of_EUSART_DefaultFramingErrorHandler 0001  
                 ??_EUSART_DefaultFramingErrorHandler 0070                    ?_EUSART_DefaultFramingErrorHandler 0070  
                   _EUSART_DefaultFramingErrorHandler 1473                            _EUSART_OverrunErrorHandler 00C6  
                __size_of_MTOUCH_Sensor_RawSample_Get 0018                                                ?_fputc 0074  
                                              ?_fputs 0020                                                _APFCON 011D  
                                              _ANSELA 018C                                                ?_putch 0070  
                                              _ANSELB 018D                                                _ANSELC 018E  
                          __end_of_EUSART_is_rx_ready 147C                                                _BORCON 0116  
                                              i1l4925 0991                                                i1l4919 0983  
                                              i1l4929 099F                                 ?_Sensor_Sampled_Reset 0070  
                                              _OSCCON 0099                                                _SPBRGH 019C  
                                              _SPBRGL 019B                                                _WDTCON 0097  
                   MTOUCH_Button_InitializeAll@button 0020                                          _DATA_PROCESS 05F9  
                      ??_Button_Reading_Update_Helper 0079                                _Button_DefaultCallback 1474  
                     __end_of_MTOUCH_Service_Mainloop 1738                                        __CFG_PWRTE$OFF 0000  
                                 _Sensor_isCalibrated 151F                                _Sensor_DefaultCallback 1475  
                                        vfprintf@cfmt 0046                                         _packet_sample 0053  
                                              ___bmul 15B5                                 ?_Sensor_setCalibrated 0070  
                        Sensor_DefaultCallback@sensor 0071                                        __CFG_STVREN$ON 0000  
                    __size_of_myButtonPressedCallback 0026                                   _EUSART_Transmit_ISR 1754  
                                              _memcpy 08BB                                                _rxData 0063  
                                __end_of_LED_0_SetLow 1494                      __end_of_MTOUCH_Button_ServiceAll 15A5  
                                __end_of_LED_1_SetLow 149C                                                _printf 15D7  
                                              pad@buf 0028                                  __size_of_LED_PROCESS 006D  
                                              ctoa@fp 0036                          Sensor_autoCalibration@sensor 007A  
                                __end_of_LED_2_SetLow 14A4                                                _strlen 16CE  
                                              fputc@c 0074                                                fputs@c 0024  
                                              fputs@i 0025                                                fputs@s 0027  
                             _MTOUCH_Sensor_SampleAll 165C                          Button_DefaultCallback@button 0074  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 0CAD  
                              __size_of_RELAY_PROCESS 004D                               ?_Button_Baseline_Update 0070  
                                    __end_of_vfprintf 0970                   Sensor_postAcquisitionProcess@sensor 0079  
                             __end_of_TMR2_StartTimer 147F                    __size_of_Sensor_setCalibratAcqTime 000F  
            __end_of_MTOUCH_Button_SetPressedCallback 14BE             __size_of_MTOUCH_Button_SetPressedCallback 0006  
                  ??_MTOUCH_Button_SetPressedCallback 0073                     ?_MTOUCH_Button_SetPressedCallback 0071  
                    _MTOUCH_Button_SetPressedCallback 14B8                              __size_of_Sensor_isActive 000E  
                                ?_EUSART_Transmit_ISR 0070                       MTOUCH_Sensor_RawSample_Get@name 0078  
                 Sensor_getScanGroupIndex@sensorGroup 0074                                  __size_of_EUSART_Read 0025  
                                   _SYSTEM_Initialize 160C                               __end_of__initialization 0069  
                 __size_of_Button_Baseline_Initialize 002E                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0075                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00CF                            __end_of_Button_Tick_helper 086A  
                                   _update_state_flag 005D                         MTOUCH_Sensor_Calibrate@sensor 0076  
                __end_of_EUSART_SetTxInterruptHandler 14DC                 __size_of_EUSART_SetTxInterruptHandler 0006  
                        _EUSART_SetTxInterruptHandler 14D6           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024  
                                 ___bmul@multiplicand 0071                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 16E6                                          __pidataBANK0 1485  
                                        __pidataBANK1 1529                                          __pidataBANK2 1701  
         __end_of_MTOUCH_Button_SetNotPressedCallback 14B8          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0073                  ?_MTOUCH_Button_SetNotPressedCallback 0071  
                 _MTOUCH_Button_SetNotPressedCallback 14B2                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 1688                                         __end_of_fputc 0A09  
                                       __end_of_fputs 0843                      __end_of_MTOUCH_Sensor_Initialize 1646  
                                       __end_of_putch 14B2                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 15C6                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0EDF                              Sensor_setInactive@sensor 0071  
                                      _Button_Service 0BA2                      __end_of_Sensor_Acq_ExecutePacket 04A1  
                          ?_Button_State_Initializing 0024                                  Button_Service@button 002C  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 00A0  
                      __end_of_Button_Baseline_Update 0F6E                   Sensor_Acq_ExecutePacket@sensor_adc1 002D  
                 Sensor_Acq_ExecutePacket@sensor_adc2 007B                              _MTOUCH_Button_Initialize 0A09  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 0744  
                             _Button_State_NotPressed 06A0                         __size_of_MTOUCH_Sensor_Enable 0012  
                                  _Sensor_setInactive 14F6                                     _sensor_scan_group 183C  
                                             ??_fputc 0077                             __end_of_SYSTEM_Initialize 161E  
                                   _lowpowerActivated 006A                                               ??_fputs 0021  
                               ??_EUSART_Transmit_ISR 0070                      MTOUCH_Sensor_isCalibrated@sensor 0076  
                              ??_Sensor_Sampled_Reset 0071                                               ??_putch 0073  
                                          __pbssBANK0 0053                                            __pbssBANK1 00A0  
                                          __pbssBANK2 0120                                            __pbssBANK3 01A0  
                                          _check_data 09A2                                  __end_of_EUSART_Write 17B5  
                             _TMR2_LoadPeriodRegister 14A8                            ??_myButtonReleasedCallback 0075  
                        Sensor_loadADCSettings@sensor 0079                                   ?_Sensor_setInactive 0070  
                                    _Sensor_setActive 14EE                           __size_of_EUSART_Receive_ISR 0032  
                          __end_of_mtouch_button_init 1030                                     _last_touch_status 0059  
         Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025                                ??_Sensor_setCalibrated 0071  
                                          __pmaintext 006D                                         _RELAY_PROCESS 0AB8  
                                             ?___bmul 0071                         ?_EUSART_SetTxInterruptHandler 0071  
                    _EUSART_TxDefaultInterruptHandler 00CC                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                      MTOUCH_Sensor_wasSampled@sensor 0076                                            __pintentry 0004  
                              __end_of_Button_Service 0BF7                                               ?_memcpy 0071  
                                             _BAUDCON 019F                                             _AD1ACQCON 0717  
                 __end_of_MTOUCH_Button_InitializeAll 1754                           _MTOUCH_Button_InitializeAll 1738  
                                           _AD2ACQCON 0797                          ??_EUSART_DefaultErrorHandler 0071  
                 __end_of_MTOUCH_Sensor_InitializeAll 1577                           _MTOUCH_Sensor_InitializeAll 1569  
                           ??_MTOUCH_Sensor_SampleAll 0046                                               ?_printf 0048  
                     __end_of_Sensor_RawSample_Update 0892                                  ??_Sensor_setInactive 0071  
                                             ?_strlen 0071                     __size_of_MTOUCH_Sensor_wasSampled 000F  
                           ?_MTOUCH_Sensor_wasSampled 0070                                         _eusartRxCount 0065  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0071  
                                           _AD2PRECON 0796                     __end_of_Button_State_Initializing 0D0F  
                              __end_of_Sensor_Service 07D9                               Sensor_Service@scanGroup 0042  
                            _MTOUCH_Button_ServiceAll 1595                             __end_of_sensor_scan_group 1840  
                                  __size_of_vfpfcnvrt 00A8                         __size_of_EUSART_RxDataHandler 0017  
                    __size_of_MTOUCH_Service_Mainloop 001C                          __end_of_Button_State_Pressed 0D75  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0073  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 0079  
                     Sensor_setCalibratAcqTime@sensor 0071                                  __size_of_MTOUCH_Tick 0003  
                 Sensor_loadADCSettings@addressOffset 0078                  __size_of_Sensor_isCalibratingAcqTime 0009  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021                             ??_MTOUCH_Button_isPressed 0071  
                                          _count_conf 00C2                                     ??_Sensor_isActive 0071  
                 __size_of_EUSART_DefaultErrorHandler 0003                                        ?_RELAY_PROCESS 0070  
               __end_of_Sensor_postAcquisitionProcess 0A77                __size_of_Sensor_postAcquisitionProcess 0038  
                       _Sensor_postAcquisitionProcess 0A3F                                 __size_of_LED_0_SetLow 0004  
                               __size_of_LED_1_SetLow 0004                               _myButtonPressedCallback 17DA  
                             Sensor_Acquisition@retry 003D                                       __size_of___bmul 0011  
                                         _AD1CON0bits 0711                                 __size_of_LED_2_SetLow 0004  
                      MTOUCH_Button_Initialize@button 007A                                           _AD2CON0bits 0791  
                                           ?_vfprintf 0040                                       ?_Button_Service 0070  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 0031            Sensor_Scanfrequency_Evaluation@sensor_adc2 002E  
                                     __size_of_memcpy 002B                                               __ptext1 0BF7  
                                             __ptext2 07D9                                               __ptext3 15D7  
                                             __ptext4 0941                                               __ptext5 0551  
                                             __ptext6 0892                                               __ptext7 0B52  
                                             __ptext8 16CE                                               __ptext9 081D  
                              __size_of_check_message 0027                                       __size_of_printf 0011  
                         Button_Reading_Update@button 0020                                       __size_of_strlen 0018  
                            _MTOUCH_Sensor_Initialize 1631                                 _OSCILLATOR_Initialize 14DC  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 0025  
                                             _prcData 0062                                       ?_Sensor_Service 0070  
                               __end_of_LED_0_SetHigh 1490                              ??_PIN_MANAGER_Initialize 0071  
                      __size_of_Button_Reading_Update 000E                           __size_of_MTOUCH_needReburst 0002  
                               __end_of_LED_1_SetHigh 1498                         __end_of_Button_Reading_Update 154D  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 02D7  
                                    _callback_sampled 00D7                                 __end_of_LED_2_SetHigh 14A0  
                           ??_TMR2_LoadPeriodRegister 0071                       Sensor_RawSample_Update@adcIndex 0076  
                          __size_of_SYSTEM_Initialize 0012                                               clrloop0 14E3  
                                    _callback_pressed 00D5                        MTOUCH_Sensor_Initialize@sensor 0078  
                                end_of_initialization 0069                                           ?_check_data 0070  
                             ?_Button_DefaultCallback 0074                 __end_of_EUSART_SetOverrunErrorHandler 14D0  
              __size_of_EUSART_SetOverrunErrorHandler 0006                         _EUSART_SetOverrunErrorHandler 14CA  
                                             memcpy@d 007A                                               memcpy@n 0073  
                                             memcpy@s 0077                                               fputc@fp 0076  
                                        _LED_0_SetLow 1490                                               init_ram 14E8  
                                             fputs@fp 0020                                          _LED_1_SetLow 1498  
                                             initloop 14E9                                          _LED_2_SetLow 14A0  
                             ?_Sensor_DefaultCallback 0071                         Sensor_Acquisition@sensor_adc1 003E  
                       Sensor_Acquisition@sensor_adc2 003B                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 0A77                          ??_MTOUCH_Sensor_isCalibrated 0075  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 05F9  
                 __end_of_MTOUCH_Sensor_RawSample_Get 16CE                           _MTOUCH_Sensor_RawSample_Get 16B6  
                                           _RCSTAbits 019D                                    _EUSART_is_rx_ready 1479  
                                          ??_vfprintf 0043                                               strlen@a 0074  
                                             strlen@s 0075                                   ??_EUSART_Initialize 0073  
                                    ??_WDT_Initialize 0071                        ??_EUSART_SetTxInterruptHandler 0073  
                                 ?_EUSART_is_rx_ready 0070                                Sensor_setActive@sensor 0071  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 0034  
                       Button_Deviation_Update@button 0020                  Sensor_Acq_ExecutePacket@AD1CON2_temp 0022  
                               __size_of_EUSART_Write 0023              MTOUCH_Button_SetPressedCallback@callback 0071  
                          MTOUCH_Sensor_Enable@sensor 0076                  Sensor_Acq_ExecutePacket@AD2CON2_temp 0023  
                                 _callback_notPressed 006C                   __size_of_MTOUCH_Sensor_isCalibrated 0016  
                      __end_of_Button_DefaultCallback 1475                       __size_of_EUSART_SetErrorHandler 0006  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 0032                                    _sensor_globalFlags 0069  
                            __end_of_Sensor_isEnabled 15D7                            Sensor_setCalibrated@sensor 0071  
                      __end_of_Sensor_DefaultCallback 1476                      __end_of_myButtonReleasedCallback 1792  
                           __end_of_EUSART_Initialize 0AB8                                  ??_EUSART_is_rx_ready 0071  
                                       _check_message 07D9                            _Sensor_loadADCSettings$562 0076  
                            ??_Sensor_autoCalibration 0075                                             _TXSTAbits 019E  
                                       _check_request 0060                                       ??_RELAY_PROCESS 0071  
                           ??_myButtonPressedCallback 0075                      __size_of_Sensor_RawSample_Update 0028  
                                  _Sensor_Acquisition 0C51                              ??_Sensor_loadADCSettings 0073  
                                       ?_update_state 0070                                         ??_LED_PROCESS 0071  
                                _Button_State_Pressed 0D0F                                        __end_of___bmul 15C6  
                  __end_of_EUSART_DefaultErrorHandler 1479                            _EUSART_DefaultErrorHandler 1476  
                                 ?_Sensor_Acquisition 003B                                           vfpfcnvrt@ap 0038  
                                         vfpfcnvrt@fp 003F                            ??_MTOUCH_Button_Initialize 0077  
         MTOUCH_Button_SetNotPressedCallback@callback 0071                       ??_MTOUCH_Sensor_Scan_Initialize 0071  
                      ?_Sensor_postAcquisitionProcess 0070                                          _EUSART_Write 1792  
                                 __size_of_check_data 0032                                    _Button_Tick_helper 0843  
                                      __end_of_memcpy 08E6                                ?_OSCILLATOR_Initialize 0070  
                                 MTOUCH_Button_Tick@i 0075                              __end_of_Sensor_setActive 14F6  
                    TMR2_LoadPeriodRegister@periodVal 0071                                        __end_of_printf 15E8  
                         ??_Button_State_Initializing 0025                                        __end_of_strlen 16E6  
                                 start_initialization 0025                               _MTOUCH_Service_Mainloop 171C  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 1672  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 16B6  
                                         __end_of_pad 0BA2                                        _TMR2_StopTimer 147F  
                                       ??_EUSART_Read 0071          EUSART_SetRxInterruptHandler@interruptHandler 0071  
        EUSART_SetTxInterruptHandler@interruptHandler 0071                                           putch@txData 0073  
                                ??_Sensor_Acquisition 003C                                        ?_check_message 0070  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 0024  
                      Sensor_autoCalibration@adcIndex 0079                        ?_EUSART_SetOverrunErrorHandler 0071  
                    __end_of_MTOUCH_Sensor_wasSampled 1586                                  ??_Button_Tick_helper 0071  
                        __end_of_MTOUCH_Sensor_Enable 160C                                           vfprintf@fmt 0040  
                                        _packet_noise 005B                                        ??_update_state 007C  
                          _EUSART_FramingErrorHandler 00C8                                              ??___bmul 0072  
                               ?_Button_State_Pressed 0024                                _EUSART_SetErrorHandler 14BE  
                          ??_MTOUCH_Button_ServiceAll 002D                                           __pdataBANK0 006C  
                                         __pdataBANK1 00CF                                           __pdataBANK2 0150  
                                      check_message@x 0052                                              ??_memcpy 0075  
                         __end_of_Sensor_isCalibrated 1529                          ??_Button_Baseline_Initialize 0020  
                                       _sample_period 006E                                  ??_MTOUCH_Button_Tick 0074  
                                  _mtouch_button_init 1000                            Sensor_Sampled_Reset@sensor 0071  
                                            ??_printf 004C                                              ??_strlen 0073  
                        ?_Sensor_isCalibratingAcqTime 0070                       __end_of_myButtonPressedCallback 1800  
                                 __end_of_LED_PROCESS 0DE2                           __end_of_EUSART_Transmit_ISR 1772  
                              __end_of_TMR2_StopTimer 1482                                           __pbssCOMMON 007C  
                                           ___latbits 0002                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00D9                              __size_of_TMR2_Initialize 0008  
                                     _Sensor_isActive 155B                        MTOUCH_Button_ServiceAll@button 002E  
                                 Sensor_Service@error 0043                            __end_of_EUSART_Receive_ISR 09A2  
                       __size_of_Sensor_Sampled_Reset 0008                            __size_of_EUSART_Initialize 0041  
                             _Button_Deviation_Update 0E58                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 00CA                                   __end_of_EUSART_Read 17DA  
                           _Button_State_Initializing 0CAD                    __end_of_MTOUCH_Sensor_isCalibrated 165C  
                          _MTOUCH_Sensor_isCalibrated 1646                                             __pnvBANK1 00C4  
                     __size_of_Sensor_autoCalibration 0092                     __size_of_Sensor_getScanGroupIndex 002D  
                                   _Sensor_setSampled 14FE                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 169F                                _PIN_MANAGER_Initialize 0800  
                                    ??_Button_Service 0029                              ?_MTOUCH_Sensor_Calibrate 0070  
                                EUSART_Read@readValue 0072                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 007B                            ??_MTOUCH_Sensor_Initialize 0077  
                       __size_of_Sensor_setCalibrated 000E                                             __ptext100 1473  
                                           __ptext101 1476                                             __ptext102 1688  
                     __size_of_Sensor_loadADCSettings 00B0                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 007C  
                                            _AAD2RES0 079A                                          _eusartTxHead 0068  
                                        _eusartRxTail 0066                                          _eusartTxTail 0067  
                                    ??_Sensor_Service 003F                            ??_Sensor_Acq_ExecutePacket 0020  
                        ??_INTERRUPT_InterruptManager 0071                                   ??_Sensor_setSampled 0071  
                   __size_of_myButtonReleasedCallback 0020                                           _blink_count 005E  
                           ?_myButtonReleasedCallback 0074                             ??_MTOUCH_Service_Mainloop 0048  
                                   __size_of_vfprintf 002F                                              _ADCOMCON 0712  
                             _eusartTxBufferRemaining 00CE                           __size_of_Sensor_setInactive 0008  
                      Sensor_Acq_ExecutePacket@last_a 0028                        Sensor_Acq_ExecutePacket@last_b 002A  
                                     ?_TMR2_StopTimer 0070                         ??_Sensor_isCalibratingAcqTime 0071  
                                       ??_MTOUCH_Tick 0076                                       ??_check_message 0050  
                                      __size_of_fputc 0035                                        __size_of_fputs 0026  
                                      __size_of_putch 0005                                          ??_check_data 0071  
                                      _eusartRxBuffer 00A8                                        _eusartTxBuffer 00B0  
                           __end_of_Sensor_setSampled 1506                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0071                                              _LATBbits 010D  
                                            _LATCbits 010E                                         ?_DATA_PROCESS 0070  
                             _Sensor_RawSample_Update 086A                     __end_of_Sensor_setCalibratAcqTime 1595  
                                           clear_ram0 14E2                                              _PIE1bits 0091  
                                   _eusartRxLastError 0064                              __size_of_TMR2_StartTimer 0003  
                 __size_of_INTERRUPT_InterruptManager 001F                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0073                Sensor_Acq_ExecutePacket@packet_counter 002C  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0025  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 1631               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013  
                      _MTOUCH_Sensor_Sampled_ResetAll 161E                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 148C            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 1488                    Sensor_Acq_ExecutePacket@ADxIF_flag 0026  
                                         _LED_PROCESS 0D75                              _MTOUCH_Sensor_wasSampled 1577  
                                  _mtouch_time_toScan 006B                                             _vfpfcnvrt 0551  
                            ??_Button_Baseline_Update 0071                                    __end_of_check_data 09D4  
                             __end_of_Sensor_isActive 1569                                _Sensor_autoCalibration 0F6E  
                          __end_of_MTOUCH_needReburst 0004                        myButtonReleasedCallback@button 0074  
                              _Sensor_loadADCSettings 04A1                                  _MTOUCH_Sensor_Enable 15FA  
                                         _EUSART_Read 17B5                                  __end_of_update_state 0C51  
                                          vfpfcnvrt@c 003E                              Button_Tick_helper@button 0073  
                           ??_Button_Deviation_Update 0071                                 _Button_Reading_Update 153F  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                      ??_DATA_PROCESS 0074                                     ??_TMR2_Initialize 0071  
                                 __end_of_MTOUCH_Tick 1485                                     _MTOUCH_Initialize 1533  
                     __end_of_MTOUCH_Sensor_Calibrate 15FA                                    ??_Sensor_isEnabled 0071  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0076  
                                           memcpy@tmp 0076                                            vfprintf@ap 0042  
                                          vfprintf@fp 0045                                __size_of_LED_0_SetHigh 0004  
                                          _APFCONbits 011D                                __size_of_LED_1_SetHigh 0004  
                             ??_OSCILLATOR_Initialize 0071                    __end_of_Button_Baseline_Initialize 0941  
                          _Button_Baseline_Initialize 0913                                   _EUSART_ErrorHandler 00C4  
                              __size_of_LED_2_SetHigh 0004                                   ??_MTOUCH_Initialize 007C  
                         ?_EUSART_DefaultErrorHandler 0070                                            ?_vfpfcnvrt 0037  
                            ?_Button_State_NotPressed 0024                                           check_data@x 0073  
                                  Button_Service@name 002B                                     ?_Sensor_setActive 0070  
                            ?_TMR2_LoadPeriodRegister 0070                                 Sensor_isActive@sensor 0071  
                Sensor_Scanfrequency_Evaluation@retry 0035                                    ??_Sensor_setActive 0071  
                                _EUSART_RxDataHandler 1688                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 09D4                                              __ptext11 14AD  
                                            __ptext20 1569                                              __ptext12 1792  
                                            __ptext21 1631                                              __ptext13 09A2  
                                            __ptext30 14BE                                              __ptext22 15FA  
                                            __ptext14 160C                                              __ptext31 171C  
                                            __ptext23 1738                                              __ptext15 14A4  
                                            __ptext40 14FE                                              __ptext32 0002  
                                            __ptext24 08BB                                              __ptext16 150E  
                                            __ptext41 086A                                              __ptext33 1482  
                                            __ptext25 0A77                                              __ptext17 0800  
                                            __ptext50 147C                                              __ptext42 1475  
                                            __ptext34 1672                                              __ptext26 14D6  
                                            __ptext18 14DC                                              __ptext51 14A8  
                                            __ptext43 0C51                                              __ptext35 0843  
                                            __ptext27 14D0                                              __ptext19 1533  
                                            __ptext60 1516                                              __ptext52 04A1  
                                            __ptext44 0A3F                                              __ptext36 161E  
                                            __ptext28 14CA                                              __ptext61 08E6  
                                            __ptext53 151F                                              __ptext45 14F6  
                                            __ptext37 1506                                              __ptext29 14C4  
                                            __ptext70 17DA                                              __ptext62 15A5  
                                            __ptext54 15C6                                              __ptext46 14EE  
                                            __ptext38 165C                                              __ptext71 1474  
                                            __ptext63 1595                                              __ptext55 155B  
                                            __ptext47 0DE2                                              __ptext39 0744  
                                            __ptext80 16B6                                              __ptext72 1772  
                                            __ptext64 0BA2                                              __ptext56 0F6E  
                                            __ptext48 02D7                                              __ptext81 15B5  
                                            __ptext73 16E6                                              __ptext65 1577  
                                            __ptext57 169F                                              __ptext49 147F  
                                            __ptext90 14A0                                              __ptext82 0E58  
                                            __ptext74 0A09                                              __ptext66 1646  
                                            __ptext58 154D                                              __ptext91 149C  
                                            __ptext83 14B8                                              __ptext75 15E8  
                                            __ptext67 06A0                                              __ptext59 1586  
                                            __ptext92 1498                                              __ptext84 14B2  
                                            __ptext76 0EDF                                              __ptext68 0CAD  
                                            __ptext93 1494                                              __ptext85 1479  
                                            __ptext77 0913                                              __ptext69 0D0F  
                                            __ptext94 1490                                              __ptext86 17B5  
                                            __ptext78 153F                                              __ptext95 148C  
                                            __ptext87 05F9                                              __ptext79 0B05  
                                            __ptext88 0AB8                                              __ptext97 1754  
                                            __ptext89 0D75                                              __ptext98 0970  
                                            __ptext99 1488                             __end_of_MTOUCH_Initialize 153F  
                           ??_Sensor_RawSample_Update 0075                            __size_of_Sensor_setSampled 0008  
                         __size_of_EUSART_is_rx_ready 0003                                         __size_of_ctoa 0029  
                                       __size_of_main 026A                       __end_of_MTOUCH_Sensor_SampleAll 1672  
                    Sensor_Scanfrequency_Evaluation@i 003A                               ?_EUSART_SetErrorHandler 0071  
                               __end_of_RELAY_PROCESS 0B05         EUSART_SetOverrunErrorHandler@interruptHandler 0071  
                                            int$flags 007E                                              _vfprintf 0941  
                  __size_of_Button_State_Initializing 0062                                     ??_TMR2_StartTimer 0071  
                  __end_of_INTERRUPT_InterruptManager 0023                            _INTERRUPT_InterruptManager 0004  
                                           printf@fmt 0048                 __end_of_EUSART_SetFramingErrorHandler 14CA  
              __size_of_EUSART_SetFramingErrorHandler 0006                         _EUSART_SetFramingErrorHandler 14C4  
                                      RELAY_PROCESS@x 0073                       __size_of_Button_Baseline_Update 008F  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 0047  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ?_Sensor_isActive 0070  
                                       _mtouch_button 0120                                            _INTCONbits 000B  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 0150  
                                            memcpy@d1 0079                                              memcpy@s1 0071  
                     __end_of_MTOUCH_Button_isPressed 1701                                         _LED_0_SetHigh 148C  
                    __end_of_Sensor_getScanGroupIndex 0913                                     __CFG_BOREN$NSLEEP 0000  
                                      __pstringtext10 1828                                        __pstringtext11 182D  
                                      __pstringtext12 1832                                        __pstringtext13 1837  
                                      __pstringtext14 1840                                        __pstringtext15 0000  
                                         _MTOUCH_Tick 1482                                ?_Button_Reading_Update 0070  
                                       _LED_1_SetHigh 1494                      Button_Deviation_Update@deviation 0021  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0079  
                                       _LED_2_SetHigh 149C                     __size_of_MTOUCH_Button_Initialize 0036  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 005C                              ?_myButtonPressedCallback 0074  
             __end_of_Sensor_Scanfrequency_Evaluation 0E58              __size_of_Sensor_Scanfrequency_Evaluation 0076  
                   ??_Sensor_Scanfrequency_Evaluation 002F                      ?_Sensor_Scanfrequency_Evaluation 002E  
                     _Sensor_Scanfrequency_Evaluation 0DE2                               ?_PIN_MANAGER_Initialize 0070  
                                       _timeout_count 00B8                           ??_Sensor_setCalibratAcqTime 0071  
                      __end_of_EUSART_SetErrorHandler 14C4                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                  __end_of_EUSART_SetRxInterruptHandler 14D6  
               __size_of_EUSART_SetRxInterruptHandler 0006                          _EUSART_SetRxInterruptHandler 14D0  
                                       _config_status 0061                           __size_of_Button_Tick_helper 0027  
                     __end_of_Button_State_NotPressed 0744                                              printf@ap 004F  
                                  _EUSART_Receive_ISR 0970         EUSART_SetFramingErrorHandler@interruptHandler 0071  
                        __end_of_Sensor_Sampled_Reset 150E                                           ??_vfpfcnvrt 0039  
                                    ??_TMR2_StopTimer 0071                       __end_of_TMR2_LoadPeriodRegister 14AD  
                         __size_of_MTOUCH_Button_Tick 0016                                         __pstringtext1 180F  
                                       __pstringtext2 183C                                         __pstringtext3 1000  
                                       __pstringtext4 1800                                         __pstringtext5 1809  
                                       __pstringtext6 1814                                         __pstringtext7 1819  
                                       __pstringtext8 181E                                         __pstringtext9 1823  
                                __end_of_DATA_PROCESS 06A0                                   ?_EUSART_Receive_ISR 0070  
                               __size_of_update_state 005A                         ??_MTOUCH_Button_InitializeAll 007B  
                            ??_Button_DefaultCallback 0075                         ??_MTOUCH_Sensor_InitializeAll 0079  
                Sensor_Acq_ExecutePacket@activeSensor 0027                      __size_of_MTOUCH_Sensor_Calibrate 0012  
                              ??_MTOUCH_Sensor_Enable 0075                                        ?_LED_0_SetHigh 0070  
                   Sensor_isCalibratingAcqTime@sensor 0071                          __size_of_Sensor_isCalibrated 000A  
                            ??_Sensor_DefaultCallback 0072                          __end_of_Sensor_setCalibrated 155B  
                                      ?_LED_1_SetHigh 0070                  __end_of_Button_Reading_Update_Helper 0B52  
               __size_of_Button_Reading_Update_Helper 004D                          _Button_Reading_Update_Helper 0B05  
                                      ?_LED_2_SetHigh 0070                     __size_of_MTOUCH_Button_ServiceAll 0010  
                           ?_MTOUCH_Button_ServiceAll 0070                         Button_State_NotPressed@button 0024  
                                  EUSART_Write@txData 0072                          __size_of_EUSART_Transmit_ISR 001E  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 081D  
                              _Button_Baseline_Update 0EDF                                         ?_LED_0_SetLow 0070  
                                       ?_LED_1_SetLow 0070                                         ?_LED_2_SetLow 0070  
                         MTOUCH_Button_isPressed@name 0072                                  ??_EUSART_Receive_ISR 0071  
                          ??_MTOUCH_Sensor_wasSampled 0075  
