

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Aug 29 09:59:48 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	cinit,global,class=CODE,merge=1,delta=2
    24                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    30                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    31                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    32                           	psect	inittext,global,class=CODE,delta=2
    33                           	psect	clrtext,global,class=CODE,delta=2
    34                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    36                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    37                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    38                           	psect	text1,local,class=CODE,merge=1,delta=2
    39                           	psect	text2,local,class=CODE,merge=1,delta=2
    40                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text4,local,class=CODE,merge=1,delta=2
    42                           	psect	text5,local,class=CODE,merge=1,delta=2
    43                           	psect	text6,local,class=CODE,merge=1,delta=2
    44                           	psect	text7,local,class=CODE,merge=1,delta=2
    45                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text11,local,class=CODE,merge=1,delta=2
    49                           	psect	text12,local,class=CODE,merge=1,delta=2
    50                           	psect	text13,local,class=CODE,merge=1,delta=2
    51                           	psect	text14,local,class=CODE,merge=1,delta=2
    52                           	psect	text15,local,class=CODE,merge=1,delta=2
    53                           	psect	text16,local,class=CODE,merge=1,delta=2
    54                           	psect	text17,local,class=CODE,merge=1,delta=2
    55                           	psect	text18,local,class=CODE,merge=1,delta=2
    56                           	psect	text19,local,class=CODE,merge=1,delta=2
    57                           	psect	text20,local,class=CODE,merge=1,delta=2
    58                           	psect	text21,local,class=CODE,merge=1,delta=2
    59                           	psect	text22,local,class=CODE,merge=1,delta=2
    60                           	psect	text23,local,class=CODE,merge=1,delta=2
    61                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text25,local,class=CODE,merge=1,delta=2
    63                           	psect	text26,local,class=CODE,merge=1,delta=2
    64                           	psect	text27,local,class=CODE,merge=1,delta=2
    65                           	psect	text28,local,class=CODE,merge=1,delta=2
    66                           	psect	text29,local,class=CODE,merge=1,delta=2
    67                           	psect	text30,local,class=CODE,merge=1,delta=2
    68                           	psect	text31,local,class=CODE,merge=1,delta=2
    69                           	psect	text32,local,class=CODE,merge=1,delta=2
    70                           	psect	text33,local,class=CODE,merge=1,delta=2
    71                           	psect	text34,local,class=CODE,merge=1,delta=2
    72                           	psect	text35,local,class=CODE,merge=1,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	psect	text39,local,class=CODE,merge=1,delta=2
    77                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text41,local,class=CODE,merge=1,delta=2
    79                           	psect	text42,local,class=CODE,merge=1,delta=2
    80                           	psect	text43,local,class=CODE,merge=1,delta=2
    81                           	psect	text44,local,class=CODE,merge=1,delta=2
    82                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text47,local,class=CODE,merge=1,delta=2
    85                           	psect	text48,local,class=CODE,merge=1,delta=2
    86                           	psect	text49,local,class=CODE,merge=1,delta=2
    87                           	psect	text50,local,class=CODE,merge=1,delta=2
    88                           	psect	text51,local,class=CODE,merge=1,delta=2
    89                           	psect	text52,local,class=CODE,merge=1,delta=2
    90                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text54,local,class=CODE,merge=1,delta=2
    92                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text56,local,class=CODE,merge=1,delta=2
    94                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    95                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text61,local,class=CODE,merge=1,delta=2
    99                           	psect	text62,local,class=CODE,merge=1,delta=2
   100                           	psect	text63,local,class=CODE,merge=1,delta=2
   101                           	psect	text64,local,class=CODE,merge=1,delta=2
   102                           	psect	text65,local,class=CODE,merge=1,delta=2
   103                           	psect	text66,local,class=CODE,merge=1,delta=2
   104                           	psect	text67,local,class=CODE,merge=1,delta=2
   105                           	psect	text68,local,class=CODE,merge=1,delta=2
   106                           	psect	text69,local,class=CODE,merge=1,delta=2
   107                           	psect	text70,local,class=CODE,merge=1,delta=2
   108                           	psect	text71,local,class=CODE,merge=1,delta=2
   109                           	psect	text72,local,class=CODE,merge=1,delta=2
   110                           	psect	text73,local,class=CODE,merge=1,delta=2
   111                           	psect	text74,local,class=CODE,merge=1,delta=2
   112                           	psect	text75,local,class=CODE,merge=1,delta=2
   113                           	psect	text76,local,class=CODE,merge=1,delta=2
   114                           	psect	text77,local,class=CODE,merge=1,delta=2
   115                           	psect	text78,local,class=CODE,merge=1,delta=2
   116                           	psect	text79,local,class=CODE,merge=1,delta=2
   117                           	psect	text80,local,class=CODE,merge=1,delta=2
   118                           	psect	text81,local,class=CODE,merge=1,delta=2,group=1
   119                           	psect	text82,local,class=CODE,merge=1,delta=2
   120                           	psect	text83,local,class=CODE,merge=1,delta=2
   121                           	psect	text84,local,class=CODE,merge=1,delta=2
   122                           	psect	text85,local,class=CODE,merge=1,delta=2
   123                           	psect	text86,local,class=CODE,merge=1,delta=2
   124                           	psect	text87,local,class=CODE,merge=1,delta=2
   125                           	psect	text88,local,class=CODE,merge=1,delta=2
   126                           	psect	text89,local,class=CODE,merge=1,delta=2
   127                           	psect	text90,local,class=CODE,merge=1,delta=2
   128                           	psect	text91,local,class=CODE,merge=1,delta=2
   129                           	psect	text92,local,class=CODE,merge=1,delta=2
   130                           	psect	text93,local,class=CODE,merge=1,delta=2
   131                           	psect	text94,local,class=CODE,merge=1,delta=2
   132                           	psect	text95,local,class=CODE,merge=1,delta=2
   133                           	psect	intentry,global,class=CODE,delta=2
   134                           	psect	text97,local,class=CODE,merge=1,delta=2
   135                           	psect	text98,local,class=CODE,merge=1,delta=2
   136                           	psect	text99,local,class=CODE,merge=1,delta=2
   137                           	psect	text100,local,class=CODE,merge=1,delta=2
   138                           	psect	text101,local,class=CODE,merge=1,delta=2
   139                           	psect	text102,local,class=CODE,merge=1,delta=2
   140                           	dabs	1,0x7E,2
   141  0000                     
   142                           ; Version 2.05
   143                           ; Generated 20/12/2018 GMT
   144                           ; 
   145                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   146                           ; All rights reserved.
   147                           ; 
   148                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   149                           ; 
   150                           ; Redistribution and use in source and binary forms, with or without modification, are
   151                           ; permitted provided that the following conditions are met:
   152                           ; 
   153                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   154                           ;        conditions and the following disclaimer.
   155                           ; 
   156                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   157                           ;        of conditions and the following disclaimer in the documentation and/or other
   158                           ;        materials provided with the distribution.
   159                           ; 
   160                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   161                           ;        software without specific prior written permission.
   162                           ; 
   163                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   164                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   165                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   166                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   167                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   168                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   169                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   170                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   171                           ; 
   172                           ; 
   173                           ; Code-generator required, PIC16LF1559 Definitions
   174                           ; 
   175                           ; SFR Addresses
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  000E                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0015                     	;# 
   194  0016                     	;# 
   195  0016                     	;# 
   196  0017                     	;# 
   197  0018                     	;# 
   198  0019                     	;# 
   199  001A                     	;# 
   200  001B                     	;# 
   201  001C                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  0091                     	;# 
   206  0092                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0099                     	;# 
   211  009A                     	;# 
   212  009B                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  011D                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0194                     	;# 
   233  0195                     	;# 
   234  0196                     	;# 
   235  0199                     	;# 
   236  019A                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019C                     	;# 
   240  019D                     	;# 
   241  019E                     	;# 
   242  019F                     	;# 
   243  020C                     	;# 
   244  020D                     	;# 
   245  0211                     	;# 
   246  0211                     	;# 
   247  0212                     	;# 
   248  0212                     	;# 
   249  0213                     	;# 
   250  0213                     	;# 
   251  0214                     	;# 
   252  0214                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0216                     	;# 
   257  0216                     	;# 
   258  0217                     	;# 
   259  0217                     	;# 
   260  0391                     	;# 
   261  0392                     	;# 
   262  0393                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0611                     	;# 
   267  0612                     	;# 
   268  0613                     	;# 
   269  0613                     	;# 
   270  0614                     	;# 
   271  0615                     	;# 
   272  0616                     	;# 
   273  0616                     	;# 
   274  0711                     	;# 
   275  0711                     	;# 
   276  0711                     	;# 
   277  0712                     	;# 
   278  0712                     	;# 
   279  0713                     	;# 
   280  0713                     	;# 
   281  0713                     	;# 
   282  0714                     	;# 
   283  0714                     	;# 
   284  0714                     	;# 
   285  0715                     	;# 
   286  0715                     	;# 
   287  0716                     	;# 
   288  0716                     	;# 
   289  0716                     	;# 
   290  0716                     	;# 
   291  0717                     	;# 
   292  0717                     	;# 
   293  0717                     	;# 
   294  0717                     	;# 
   295  0718                     	;# 
   296  0718                     	;# 
   297  0718                     	;# 
   298  0719                     	;# 
   299  0719                     	;# 
   300  0719                     	;# 
   301  0719                     	;# 
   302  071A                     	;# 
   303  071A                     	;# 
   304  071A                     	;# 
   305  071A                     	;# 
   306  071A                     	;# 
   307  071B                     	;# 
   308  071B                     	;# 
   309  071C                     	;# 
   310  071C                     	;# 
   311  071C                     	;# 
   312  071C                     	;# 
   313  071C                     	;# 
   314  071D                     	;# 
   315  071D                     	;# 
   316  071E                     	;# 
   317  071E                     	;# 
   318  0791                     	;# 
   319  0791                     	;# 
   320  0793                     	;# 
   321  0793                     	;# 
   322  0794                     	;# 
   323  0794                     	;# 
   324  0796                     	;# 
   325  0796                     	;# 
   326  0796                     	;# 
   327  0797                     	;# 
   328  0797                     	;# 
   329  0797                     	;# 
   330  0798                     	;# 
   331  0798                     	;# 
   332  0799                     	;# 
   333  0799                     	;# 
   334  0799                     	;# 
   335  079A                     	;# 
   336  079A                     	;# 
   337  079A                     	;# 
   338  079B                     	;# 
   339  079C                     	;# 
   340  079C                     	;# 
   341  079C                     	;# 
   342  079D                     	;# 
   343  079E                     	;# 
   344  079E                     	;# 
   345  0F8C                     	;# 
   346  0F8D                     	;# 
   347  0F91                     	;# 
   348  0F96                     	;# 
   349  0F97                     	;# 
   350  0F9C                     	;# 
   351  0F9D                     	;# 
   352  0F9E                     	;# 
   353  0FE3                     	;# 
   354  0FE4                     	;# 
   355  0FE5                     	;# 
   356  0FE6                     	;# 
   357  0FE7                     	;# 
   358  0FE8                     	;# 
   359  0FE9                     	;# 
   360  0FEA                     	;# 
   361  0FEB                     	;# 
   362  0FED                     	;# 
   363  0FEE                     	;# 
   364  0FEF                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  0011                     	;# 
   381  0012                     	;# 
   382  0015                     	;# 
   383  0016                     	;# 
   384  0016                     	;# 
   385  0017                     	;# 
   386  0018                     	;# 
   387  0019                     	;# 
   388  001A                     	;# 
   389  001B                     	;# 
   390  001C                     	;# 
   391  008C                     	;# 
   392  008D                     	;# 
   393  008E                     	;# 
   394  0091                     	;# 
   395  0092                     	;# 
   396  0095                     	;# 
   397  0096                     	;# 
   398  0097                     	;# 
   399  0099                     	;# 
   400  009A                     	;# 
   401  009B                     	;# 
   402  009B                     	;# 
   403  009C                     	;# 
   404  009D                     	;# 
   405  009E                     	;# 
   406  009F                     	;# 
   407  010C                     	;# 
   408  010D                     	;# 
   409  010E                     	;# 
   410  0116                     	;# 
   411  0117                     	;# 
   412  011D                     	;# 
   413  018C                     	;# 
   414  018D                     	;# 
   415  018E                     	;# 
   416  0191                     	;# 
   417  0191                     	;# 
   418  0192                     	;# 
   419  0193                     	;# 
   420  0193                     	;# 
   421  0194                     	;# 
   422  0195                     	;# 
   423  0196                     	;# 
   424  0199                     	;# 
   425  019A                     	;# 
   426  019B                     	;# 
   427  019B                     	;# 
   428  019C                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019F                     	;# 
   432  020C                     	;# 
   433  020D                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0391                     	;# 
   450  0392                     	;# 
   451  0393                     	;# 
   452  0394                     	;# 
   453  0395                     	;# 
   454  0396                     	;# 
   455  0611                     	;# 
   456  0612                     	;# 
   457  0613                     	;# 
   458  0613                     	;# 
   459  0614                     	;# 
   460  0615                     	;# 
   461  0616                     	;# 
   462  0616                     	;# 
   463  0711                     	;# 
   464  0711                     	;# 
   465  0711                     	;# 
   466  0712                     	;# 
   467  0712                     	;# 
   468  0713                     	;# 
   469  0713                     	;# 
   470  0713                     	;# 
   471  0714                     	;# 
   472  0714                     	;# 
   473  0714                     	;# 
   474  0715                     	;# 
   475  0715                     	;# 
   476  0716                     	;# 
   477  0716                     	;# 
   478  0716                     	;# 
   479  0716                     	;# 
   480  0717                     	;# 
   481  0717                     	;# 
   482  0717                     	;# 
   483  0717                     	;# 
   484  0718                     	;# 
   485  0718                     	;# 
   486  0718                     	;# 
   487  0719                     	;# 
   488  0719                     	;# 
   489  0719                     	;# 
   490  0719                     	;# 
   491  071A                     	;# 
   492  071A                     	;# 
   493  071A                     	;# 
   494  071A                     	;# 
   495  071A                     	;# 
   496  071B                     	;# 
   497  071B                     	;# 
   498  071C                     	;# 
   499  071C                     	;# 
   500  071C                     	;# 
   501  071C                     	;# 
   502  071C                     	;# 
   503  071D                     	;# 
   504  071D                     	;# 
   505  071E                     	;# 
   506  071E                     	;# 
   507  0791                     	;# 
   508  0791                     	;# 
   509  0793                     	;# 
   510  0793                     	;# 
   511  0794                     	;# 
   512  0794                     	;# 
   513  0796                     	;# 
   514  0796                     	;# 
   515  0796                     	;# 
   516  0797                     	;# 
   517  0797                     	;# 
   518  0797                     	;# 
   519  0798                     	;# 
   520  0798                     	;# 
   521  0799                     	;# 
   522  0799                     	;# 
   523  0799                     	;# 
   524  079A                     	;# 
   525  079A                     	;# 
   526  079A                     	;# 
   527  079B                     	;# 
   528  079C                     	;# 
   529  079C                     	;# 
   530  079C                     	;# 
   531  079D                     	;# 
   532  079E                     	;# 
   533  079E                     	;# 
   534  0F8C                     	;# 
   535  0F8D                     	;# 
   536  0F91                     	;# 
   537  0F96                     	;# 
   538  0F97                     	;# 
   539  0F9C                     	;# 
   540  0F9D                     	;# 
   541  0F9E                     	;# 
   542  0FE3                     	;# 
   543  0FE4                     	;# 
   544  0FE5                     	;# 
   545  0FE6                     	;# 
   546  0FE7                     	;# 
   547  0FE8                     	;# 
   548  0FE9                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEF                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000D                     	;# 
   568  000E                     	;# 
   569  0011                     	;# 
   570  0012                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0016                     	;# 
   574  0017                     	;# 
   575  0018                     	;# 
   576  0019                     	;# 
   577  001A                     	;# 
   578  001B                     	;# 
   579  001C                     	;# 
   580  008C                     	;# 
   581  008D                     	;# 
   582  008E                     	;# 
   583  0091                     	;# 
   584  0092                     	;# 
   585  0095                     	;# 
   586  0096                     	;# 
   587  0097                     	;# 
   588  0099                     	;# 
   589  009A                     	;# 
   590  009B                     	;# 
   591  009B                     	;# 
   592  009C                     	;# 
   593  009D                     	;# 
   594  009E                     	;# 
   595  009F                     	;# 
   596  010C                     	;# 
   597  010D                     	;# 
   598  010E                     	;# 
   599  0116                     	;# 
   600  0117                     	;# 
   601  011D                     	;# 
   602  018C                     	;# 
   603  018D                     	;# 
   604  018E                     	;# 
   605  0191                     	;# 
   606  0191                     	;# 
   607  0192                     	;# 
   608  0193                     	;# 
   609  0193                     	;# 
   610  0194                     	;# 
   611  0195                     	;# 
   612  0196                     	;# 
   613  0199                     	;# 
   614  019A                     	;# 
   615  019B                     	;# 
   616  019B                     	;# 
   617  019C                     	;# 
   618  019D                     	;# 
   619  019E                     	;# 
   620  019F                     	;# 
   621  020C                     	;# 
   622  020D                     	;# 
   623  0211                     	;# 
   624  0211                     	;# 
   625  0212                     	;# 
   626  0212                     	;# 
   627  0213                     	;# 
   628  0213                     	;# 
   629  0214                     	;# 
   630  0214                     	;# 
   631  0215                     	;# 
   632  0215                     	;# 
   633  0215                     	;# 
   634  0216                     	;# 
   635  0216                     	;# 
   636  0217                     	;# 
   637  0217                     	;# 
   638  0391                     	;# 
   639  0392                     	;# 
   640  0393                     	;# 
   641  0394                     	;# 
   642  0395                     	;# 
   643  0396                     	;# 
   644  0611                     	;# 
   645  0612                     	;# 
   646  0613                     	;# 
   647  0613                     	;# 
   648  0614                     	;# 
   649  0615                     	;# 
   650  0616                     	;# 
   651  0616                     	;# 
   652  0711                     	;# 
   653  0711                     	;# 
   654  0711                     	;# 
   655  0712                     	;# 
   656  0712                     	;# 
   657  0713                     	;# 
   658  0713                     	;# 
   659  0713                     	;# 
   660  0714                     	;# 
   661  0714                     	;# 
   662  0714                     	;# 
   663  0715                     	;# 
   664  0715                     	;# 
   665  0716                     	;# 
   666  0716                     	;# 
   667  0716                     	;# 
   668  0716                     	;# 
   669  0717                     	;# 
   670  0717                     	;# 
   671  0717                     	;# 
   672  0717                     	;# 
   673  0718                     	;# 
   674  0718                     	;# 
   675  0718                     	;# 
   676  0719                     	;# 
   677  0719                     	;# 
   678  0719                     	;# 
   679  0719                     	;# 
   680  071A                     	;# 
   681  071A                     	;# 
   682  071A                     	;# 
   683  071A                     	;# 
   684  071A                     	;# 
   685  071B                     	;# 
   686  071B                     	;# 
   687  071C                     	;# 
   688  071C                     	;# 
   689  071C                     	;# 
   690  071C                     	;# 
   691  071C                     	;# 
   692  071D                     	;# 
   693  071D                     	;# 
   694  071E                     	;# 
   695  071E                     	;# 
   696  0791                     	;# 
   697  0791                     	;# 
   698  0793                     	;# 
   699  0793                     	;# 
   700  0794                     	;# 
   701  0794                     	;# 
   702  0796                     	;# 
   703  0796                     	;# 
   704  0796                     	;# 
   705  0797                     	;# 
   706  0797                     	;# 
   707  0797                     	;# 
   708  0798                     	;# 
   709  0798                     	;# 
   710  0799                     	;# 
   711  0799                     	;# 
   712  0799                     	;# 
   713  079A                     	;# 
   714  079A                     	;# 
   715  079A                     	;# 
   716  079B                     	;# 
   717  079C                     	;# 
   718  079C                     	;# 
   719  079C                     	;# 
   720  079D                     	;# 
   721  079E                     	;# 
   722  079E                     	;# 
   723  0F8C                     	;# 
   724  0F8D                     	;# 
   725  0F91                     	;# 
   726  0F96                     	;# 
   727  0F97                     	;# 
   728  0F9C                     	;# 
   729  0F9D                     	;# 
   730  0F9E                     	;# 
   731  0FE3                     	;# 
   732  0FE4                     	;# 
   733  0FE5                     	;# 
   734  0FE6                     	;# 
   735  0FE7                     	;# 
   736  0FE8                     	;# 
   737  0FE9                     	;# 
   738  0FEA                     	;# 
   739  0FEB                     	;# 
   740  0FED                     	;# 
   741  0FEE                     	;# 
   742  0FEF                     	;# 
   743  0000                     	;# 
   744  0001                     	;# 
   745  0002                     	;# 
   746  0003                     	;# 
   747  0004                     	;# 
   748  0005                     	;# 
   749  0006                     	;# 
   750  0007                     	;# 
   751  0008                     	;# 
   752  0009                     	;# 
   753  000A                     	;# 
   754  000B                     	;# 
   755  000C                     	;# 
   756  000D                     	;# 
   757  000E                     	;# 
   758  0011                     	;# 
   759  0012                     	;# 
   760  0015                     	;# 
   761  0016                     	;# 
   762  0016                     	;# 
   763  0017                     	;# 
   764  0018                     	;# 
   765  0019                     	;# 
   766  001A                     	;# 
   767  001B                     	;# 
   768  001C                     	;# 
   769  008C                     	;# 
   770  008D                     	;# 
   771  008E                     	;# 
   772  0091                     	;# 
   773  0092                     	;# 
   774  0095                     	;# 
   775  0096                     	;# 
   776  0097                     	;# 
   777  0099                     	;# 
   778  009A                     	;# 
   779  009B                     	;# 
   780  009B                     	;# 
   781  009C                     	;# 
   782  009D                     	;# 
   783  009E                     	;# 
   784  009F                     	;# 
   785  010C                     	;# 
   786  010D                     	;# 
   787  010E                     	;# 
   788  0116                     	;# 
   789  0117                     	;# 
   790  011D                     	;# 
   791  018C                     	;# 
   792  018D                     	;# 
   793  018E                     	;# 
   794  0191                     	;# 
   795  0191                     	;# 
   796  0192                     	;# 
   797  0193                     	;# 
   798  0193                     	;# 
   799  0194                     	;# 
   800  0195                     	;# 
   801  0196                     	;# 
   802  0199                     	;# 
   803  019A                     	;# 
   804  019B                     	;# 
   805  019B                     	;# 
   806  019C                     	;# 
   807  019D                     	;# 
   808  019E                     	;# 
   809  019F                     	;# 
   810  020C                     	;# 
   811  020D                     	;# 
   812  0211                     	;# 
   813  0211                     	;# 
   814  0212                     	;# 
   815  0212                     	;# 
   816  0213                     	;# 
   817  0213                     	;# 
   818  0214                     	;# 
   819  0214                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0391                     	;# 
   828  0392                     	;# 
   829  0393                     	;# 
   830  0394                     	;# 
   831  0395                     	;# 
   832  0396                     	;# 
   833  0611                     	;# 
   834  0612                     	;# 
   835  0613                     	;# 
   836  0613                     	;# 
   837  0614                     	;# 
   838  0615                     	;# 
   839  0616                     	;# 
   840  0616                     	;# 
   841  0711                     	;# 
   842  0711                     	;# 
   843  0711                     	;# 
   844  0712                     	;# 
   845  0712                     	;# 
   846  0713                     	;# 
   847  0713                     	;# 
   848  0713                     	;# 
   849  0714                     	;# 
   850  0714                     	;# 
   851  0714                     	;# 
   852  0715                     	;# 
   853  0715                     	;# 
   854  0716                     	;# 
   855  0716                     	;# 
   856  0716                     	;# 
   857  0716                     	;# 
   858  0717                     	;# 
   859  0717                     	;# 
   860  0717                     	;# 
   861  0717                     	;# 
   862  0718                     	;# 
   863  0718                     	;# 
   864  0718                     	;# 
   865  0719                     	;# 
   866  0719                     	;# 
   867  0719                     	;# 
   868  0719                     	;# 
   869  071A                     	;# 
   870  071A                     	;# 
   871  071A                     	;# 
   872  071A                     	;# 
   873  071A                     	;# 
   874  071B                     	;# 
   875  071B                     	;# 
   876  071C                     	;# 
   877  071C                     	;# 
   878  071C                     	;# 
   879  071C                     	;# 
   880  071C                     	;# 
   881  071D                     	;# 
   882  071D                     	;# 
   883  071E                     	;# 
   884  071E                     	;# 
   885  0791                     	;# 
   886  0791                     	;# 
   887  0793                     	;# 
   888  0793                     	;# 
   889  0794                     	;# 
   890  0794                     	;# 
   891  0796                     	;# 
   892  0796                     	;# 
   893  0796                     	;# 
   894  0797                     	;# 
   895  0797                     	;# 
   896  0797                     	;# 
   897  0798                     	;# 
   898  0798                     	;# 
   899  0799                     	;# 
   900  0799                     	;# 
   901  0799                     	;# 
   902  079A                     	;# 
   903  079A                     	;# 
   904  079A                     	;# 
   905  079B                     	;# 
   906  079C                     	;# 
   907  079C                     	;# 
   908  079C                     	;# 
   909  079D                     	;# 
   910  079E                     	;# 
   911  079E                     	;# 
   912  0F8C                     	;# 
   913  0F8D                     	;# 
   914  0F91                     	;# 
   915  0F96                     	;# 
   916  0F97                     	;# 
   917  0F9C                     	;# 
   918  0F9D                     	;# 
   919  0F9E                     	;# 
   920  0FE3                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0015                     	;# 
   950  0016                     	;# 
   951  0016                     	;# 
   952  0017                     	;# 
   953  0018                     	;# 
   954  0019                     	;# 
   955  001A                     	;# 
   956  001B                     	;# 
   957  001C                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  009F                     	;# 
   974  010C                     	;# 
   975  010D                     	;# 
   976  010E                     	;# 
   977  0116                     	;# 
   978  0117                     	;# 
   979  011D                     	;# 
   980  018C                     	;# 
   981  018D                     	;# 
   982  018E                     	;# 
   983  0191                     	;# 
   984  0191                     	;# 
   985  0192                     	;# 
   986  0193                     	;# 
   987  0193                     	;# 
   988  0194                     	;# 
   989  0195                     	;# 
   990  0196                     	;# 
   991  0199                     	;# 
   992  019A                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019C                     	;# 
   996  019D                     	;# 
   997  019E                     	;# 
   998  019F                     	;# 
   999  020C                     	;# 
  1000  020D                     	;# 
  1001  0211                     	;# 
  1002  0211                     	;# 
  1003  0212                     	;# 
  1004  0212                     	;# 
  1005  0213                     	;# 
  1006  0213                     	;# 
  1007  0214                     	;# 
  1008  0214                     	;# 
  1009  0215                     	;# 
  1010  0215                     	;# 
  1011  0215                     	;# 
  1012  0216                     	;# 
  1013  0216                     	;# 
  1014  0217                     	;# 
  1015  0217                     	;# 
  1016  0391                     	;# 
  1017  0392                     	;# 
  1018  0393                     	;# 
  1019  0394                     	;# 
  1020  0395                     	;# 
  1021  0396                     	;# 
  1022  0611                     	;# 
  1023  0612                     	;# 
  1024  0613                     	;# 
  1025  0613                     	;# 
  1026  0614                     	;# 
  1027  0615                     	;# 
  1028  0616                     	;# 
  1029  0616                     	;# 
  1030  0711                     	;# 
  1031  0711                     	;# 
  1032  0711                     	;# 
  1033  0712                     	;# 
  1034  0712                     	;# 
  1035  0713                     	;# 
  1036  0713                     	;# 
  1037  0713                     	;# 
  1038  0714                     	;# 
  1039  0714                     	;# 
  1040  0714                     	;# 
  1041  0715                     	;# 
  1042  0715                     	;# 
  1043  0716                     	;# 
  1044  0716                     	;# 
  1045  0716                     	;# 
  1046  0716                     	;# 
  1047  0717                     	;# 
  1048  0717                     	;# 
  1049  0717                     	;# 
  1050  0717                     	;# 
  1051  0718                     	;# 
  1052  0718                     	;# 
  1053  0718                     	;# 
  1054  0719                     	;# 
  1055  0719                     	;# 
  1056  0719                     	;# 
  1057  0719                     	;# 
  1058  071A                     	;# 
  1059  071A                     	;# 
  1060  071A                     	;# 
  1061  071A                     	;# 
  1062  071A                     	;# 
  1063  071B                     	;# 
  1064  071B                     	;# 
  1065  071C                     	;# 
  1066  071C                     	;# 
  1067  071C                     	;# 
  1068  071C                     	;# 
  1069  071C                     	;# 
  1070  071D                     	;# 
  1071  071D                     	;# 
  1072  071E                     	;# 
  1073  071E                     	;# 
  1074  0791                     	;# 
  1075  0791                     	;# 
  1076  0793                     	;# 
  1077  0793                     	;# 
  1078  0794                     	;# 
  1079  0794                     	;# 
  1080  0796                     	;# 
  1081  0796                     	;# 
  1082  0796                     	;# 
  1083  0797                     	;# 
  1084  0797                     	;# 
  1085  0797                     	;# 
  1086  0798                     	;# 
  1087  0798                     	;# 
  1088  0799                     	;# 
  1089  0799                     	;# 
  1090  0799                     	;# 
  1091  079A                     	;# 
  1092  079A                     	;# 
  1093  079A                     	;# 
  1094  079B                     	;# 
  1095  079C                     	;# 
  1096  079C                     	;# 
  1097  079C                     	;# 
  1098  079D                     	;# 
  1099  079E                     	;# 
  1100  079E                     	;# 
  1101  0F8C                     	;# 
  1102  0F8D                     	;# 
  1103  0F91                     	;# 
  1104  0F96                     	;# 
  1105  0F97                     	;# 
  1106  0F9C                     	;# 
  1107  0F9D                     	;# 
  1108  0F9E                     	;# 
  1109  0FE3                     	;# 
  1110  0FE4                     	;# 
  1111  0FE5                     	;# 
  1112  0FE6                     	;# 
  1113  0FE7                     	;# 
  1114  0FE8                     	;# 
  1115  0FE9                     	;# 
  1116  0FEA                     	;# 
  1117  0FEB                     	;# 
  1118  0FED                     	;# 
  1119  0FEE                     	;# 
  1120  0FEF                     	;# 
  1121  0000                     	;# 
  1122  0001                     	;# 
  1123  0002                     	;# 
  1124  0003                     	;# 
  1125  0004                     	;# 
  1126  0005                     	;# 
  1127  0006                     	;# 
  1128  0007                     	;# 
  1129  0008                     	;# 
  1130  0009                     	;# 
  1131  000A                     	;# 
  1132  000B                     	;# 
  1133  000C                     	;# 
  1134  000D                     	;# 
  1135  000E                     	;# 
  1136  0011                     	;# 
  1137  0012                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  008C                     	;# 
  1148  008D                     	;# 
  1149  008E                     	;# 
  1150  0091                     	;# 
  1151  0092                     	;# 
  1152  0095                     	;# 
  1153  0096                     	;# 
  1154  0097                     	;# 
  1155  0099                     	;# 
  1156  009A                     	;# 
  1157  009B                     	;# 
  1158  009B                     	;# 
  1159  009C                     	;# 
  1160  009D                     	;# 
  1161  009E                     	;# 
  1162  009F                     	;# 
  1163  010C                     	;# 
  1164  010D                     	;# 
  1165  010E                     	;# 
  1166  0116                     	;# 
  1167  0117                     	;# 
  1168  011D                     	;# 
  1169  018C                     	;# 
  1170  018D                     	;# 
  1171  018E                     	;# 
  1172  0191                     	;# 
  1173  0191                     	;# 
  1174  0192                     	;# 
  1175  0193                     	;# 
  1176  0193                     	;# 
  1177  0194                     	;# 
  1178  0195                     	;# 
  1179  0196                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019C                     	;# 
  1185  019D                     	;# 
  1186  019E                     	;# 
  1187  019F                     	;# 
  1188  020C                     	;# 
  1189  020D                     	;# 
  1190  0211                     	;# 
  1191  0211                     	;# 
  1192  0212                     	;# 
  1193  0212                     	;# 
  1194  0213                     	;# 
  1195  0213                     	;# 
  1196  0214                     	;# 
  1197  0214                     	;# 
  1198  0215                     	;# 
  1199  0215                     	;# 
  1200  0215                     	;# 
  1201  0216                     	;# 
  1202  0216                     	;# 
  1203  0217                     	;# 
  1204  0217                     	;# 
  1205  0391                     	;# 
  1206  0392                     	;# 
  1207  0393                     	;# 
  1208  0394                     	;# 
  1209  0395                     	;# 
  1210  0396                     	;# 
  1211  0611                     	;# 
  1212  0612                     	;# 
  1213  0613                     	;# 
  1214  0613                     	;# 
  1215  0614                     	;# 
  1216  0615                     	;# 
  1217  0616                     	;# 
  1218  0616                     	;# 
  1219  0711                     	;# 
  1220  0711                     	;# 
  1221  0711                     	;# 
  1222  0712                     	;# 
  1223  0712                     	;# 
  1224  0713                     	;# 
  1225  0713                     	;# 
  1226  0713                     	;# 
  1227  0714                     	;# 
  1228  0714                     	;# 
  1229  0714                     	;# 
  1230  0715                     	;# 
  1231  0715                     	;# 
  1232  0716                     	;# 
  1233  0716                     	;# 
  1234  0716                     	;# 
  1235  0716                     	;# 
  1236  0717                     	;# 
  1237  0717                     	;# 
  1238  0717                     	;# 
  1239  0717                     	;# 
  1240  0718                     	;# 
  1241  0718                     	;# 
  1242  0718                     	;# 
  1243  0719                     	;# 
  1244  0719                     	;# 
  1245  0719                     	;# 
  1246  0719                     	;# 
  1247  071A                     	;# 
  1248  071A                     	;# 
  1249  071A                     	;# 
  1250  071A                     	;# 
  1251  071A                     	;# 
  1252  071B                     	;# 
  1253  071B                     	;# 
  1254  071C                     	;# 
  1255  071C                     	;# 
  1256  071C                     	;# 
  1257  071C                     	;# 
  1258  071C                     	;# 
  1259  071D                     	;# 
  1260  071D                     	;# 
  1261  071E                     	;# 
  1262  071E                     	;# 
  1263  0791                     	;# 
  1264  0791                     	;# 
  1265  0793                     	;# 
  1266  0793                     	;# 
  1267  0794                     	;# 
  1268  0794                     	;# 
  1269  0796                     	;# 
  1270  0796                     	;# 
  1271  0796                     	;# 
  1272  0797                     	;# 
  1273  0797                     	;# 
  1274  0797                     	;# 
  1275  0798                     	;# 
  1276  0798                     	;# 
  1277  0799                     	;# 
  1278  0799                     	;# 
  1279  0799                     	;# 
  1280  079A                     	;# 
  1281  079A                     	;# 
  1282  079A                     	;# 
  1283  079B                     	;# 
  1284  079C                     	;# 
  1285  079C                     	;# 
  1286  079C                     	;# 
  1287  079D                     	;# 
  1288  079E                     	;# 
  1289  079E                     	;# 
  1290  0F8C                     	;# 
  1291  0F8D                     	;# 
  1292  0F91                     	;# 
  1293  0F96                     	;# 
  1294  0F97                     	;# 
  1295  0F9C                     	;# 
  1296  0F9D                     	;# 
  1297  0F9E                     	;# 
  1298  0FE3                     	;# 
  1299  0FE4                     	;# 
  1300  0FE5                     	;# 
  1301  0FE6                     	;# 
  1302  0FE7                     	;# 
  1303  0FE8                     	;# 
  1304  0FE9                     	;# 
  1305  0FEA                     	;# 
  1306  0FEB                     	;# 
  1307  0FED                     	;# 
  1308  0FEE                     	;# 
  1309  0FEF                     	;# 
  1310  0000                     	;# 
  1311  0001                     	;# 
  1312  0002                     	;# 
  1313  0003                     	;# 
  1314  0004                     	;# 
  1315  0005                     	;# 
  1316  0006                     	;# 
  1317  0007                     	;# 
  1318  0008                     	;# 
  1319  0009                     	;# 
  1320  000A                     	;# 
  1321  000B                     	;# 
  1322  000C                     	;# 
  1323  000D                     	;# 
  1324  000E                     	;# 
  1325  0011                     	;# 
  1326  0012                     	;# 
  1327  0015                     	;# 
  1328  0016                     	;# 
  1329  0016                     	;# 
  1330  0017                     	;# 
  1331  0018                     	;# 
  1332  0019                     	;# 
  1333  001A                     	;# 
  1334  001B                     	;# 
  1335  001C                     	;# 
  1336  008C                     	;# 
  1337  008D                     	;# 
  1338  008E                     	;# 
  1339  0091                     	;# 
  1340  0092                     	;# 
  1341  0095                     	;# 
  1342  0096                     	;# 
  1343  0097                     	;# 
  1344  0099                     	;# 
  1345  009A                     	;# 
  1346  009B                     	;# 
  1347  009B                     	;# 
  1348  009C                     	;# 
  1349  009D                     	;# 
  1350  009E                     	;# 
  1351  009F                     	;# 
  1352  010C                     	;# 
  1353  010D                     	;# 
  1354  010E                     	;# 
  1355  0116                     	;# 
  1356  0117                     	;# 
  1357  011D                     	;# 
  1358  018C                     	;# 
  1359  018D                     	;# 
  1360  018E                     	;# 
  1361  0191                     	;# 
  1362  0191                     	;# 
  1363  0192                     	;# 
  1364  0193                     	;# 
  1365  0193                     	;# 
  1366  0194                     	;# 
  1367  0195                     	;# 
  1368  0196                     	;# 
  1369  0199                     	;# 
  1370  019A                     	;# 
  1371  019B                     	;# 
  1372  019B                     	;# 
  1373  019C                     	;# 
  1374  019D                     	;# 
  1375  019E                     	;# 
  1376  019F                     	;# 
  1377  020C                     	;# 
  1378  020D                     	;# 
  1379  0211                     	;# 
  1380  0211                     	;# 
  1381  0212                     	;# 
  1382  0212                     	;# 
  1383  0213                     	;# 
  1384  0213                     	;# 
  1385  0214                     	;# 
  1386  0214                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0215                     	;# 
  1390  0216                     	;# 
  1391  0216                     	;# 
  1392  0217                     	;# 
  1393  0217                     	;# 
  1394  0391                     	;# 
  1395  0392                     	;# 
  1396  0393                     	;# 
  1397  0394                     	;# 
  1398  0395                     	;# 
  1399  0396                     	;# 
  1400  0611                     	;# 
  1401  0612                     	;# 
  1402  0613                     	;# 
  1403  0613                     	;# 
  1404  0614                     	;# 
  1405  0615                     	;# 
  1406  0616                     	;# 
  1407  0616                     	;# 
  1408  0711                     	;# 
  1409  0711                     	;# 
  1410  0711                     	;# 
  1411  0712                     	;# 
  1412  0712                     	;# 
  1413  0713                     	;# 
  1414  0713                     	;# 
  1415  0713                     	;# 
  1416  0714                     	;# 
  1417  0714                     	;# 
  1418  0714                     	;# 
  1419  0715                     	;# 
  1420  0715                     	;# 
  1421  0716                     	;# 
  1422  0716                     	;# 
  1423  0716                     	;# 
  1424  0716                     	;# 
  1425  0717                     	;# 
  1426  0717                     	;# 
  1427  0717                     	;# 
  1428  0717                     	;# 
  1429  0718                     	;# 
  1430  0718                     	;# 
  1431  0718                     	;# 
  1432  0719                     	;# 
  1433  0719                     	;# 
  1434  0719                     	;# 
  1435  0719                     	;# 
  1436  071A                     	;# 
  1437  071A                     	;# 
  1438  071A                     	;# 
  1439  071A                     	;# 
  1440  071A                     	;# 
  1441  071B                     	;# 
  1442  071B                     	;# 
  1443  071C                     	;# 
  1444  071C                     	;# 
  1445  071C                     	;# 
  1446  071C                     	;# 
  1447  071C                     	;# 
  1448  071D                     	;# 
  1449  071D                     	;# 
  1450  071E                     	;# 
  1451  071E                     	;# 
  1452  0791                     	;# 
  1453  0791                     	;# 
  1454  0793                     	;# 
  1455  0793                     	;# 
  1456  0794                     	;# 
  1457  0794                     	;# 
  1458  0796                     	;# 
  1459  0796                     	;# 
  1460  0796                     	;# 
  1461  0797                     	;# 
  1462  0797                     	;# 
  1463  0797                     	;# 
  1464  0798                     	;# 
  1465  0798                     	;# 
  1466  0799                     	;# 
  1467  0799                     	;# 
  1468  0799                     	;# 
  1469  079A                     	;# 
  1470  079A                     	;# 
  1471  079A                     	;# 
  1472  079B                     	;# 
  1473  079C                     	;# 
  1474  079C                     	;# 
  1475  079C                     	;# 
  1476  079D                     	;# 
  1477  079E                     	;# 
  1478  079E                     	;# 
  1479  0F8C                     	;# 
  1480  0F8D                     	;# 
  1481  0F91                     	;# 
  1482  0F96                     	;# 
  1483  0F97                     	;# 
  1484  0F9C                     	;# 
  1485  0F9D                     	;# 
  1486  0F9E                     	;# 
  1487  0FE3                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0091                     	;# 
  1529  0092                     	;# 
  1530  0095                     	;# 
  1531  0096                     	;# 
  1532  0097                     	;# 
  1533  0099                     	;# 
  1534  009A                     	;# 
  1535  009B                     	;# 
  1536  009B                     	;# 
  1537  009C                     	;# 
  1538  009D                     	;# 
  1539  009E                     	;# 
  1540  009F                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0199                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019D                     	;# 
  1564  019E                     	;# 
  1565  019F                     	;# 
  1566  020C                     	;# 
  1567  020D                     	;# 
  1568  0211                     	;# 
  1569  0211                     	;# 
  1570  0212                     	;# 
  1571  0212                     	;# 
  1572  0213                     	;# 
  1573  0213                     	;# 
  1574  0214                     	;# 
  1575  0214                     	;# 
  1576  0215                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0216                     	;# 
  1580  0216                     	;# 
  1581  0217                     	;# 
  1582  0217                     	;# 
  1583  0391                     	;# 
  1584  0392                     	;# 
  1585  0393                     	;# 
  1586  0394                     	;# 
  1587  0395                     	;# 
  1588  0396                     	;# 
  1589  0611                     	;# 
  1590  0612                     	;# 
  1591  0613                     	;# 
  1592  0613                     	;# 
  1593  0614                     	;# 
  1594  0615                     	;# 
  1595  0616                     	;# 
  1596  0616                     	;# 
  1597  0711                     	;# 
  1598  0711                     	;# 
  1599  0711                     	;# 
  1600  0712                     	;# 
  1601  0712                     	;# 
  1602  0713                     	;# 
  1603  0713                     	;# 
  1604  0713                     	;# 
  1605  0714                     	;# 
  1606  0714                     	;# 
  1607  0714                     	;# 
  1608  0715                     	;# 
  1609  0715                     	;# 
  1610  0716                     	;# 
  1611  0716                     	;# 
  1612  0716                     	;# 
  1613  0716                     	;# 
  1614  0717                     	;# 
  1615  0717                     	;# 
  1616  0717                     	;# 
  1617  0717                     	;# 
  1618  0718                     	;# 
  1619  0718                     	;# 
  1620  0718                     	;# 
  1621  0719                     	;# 
  1622  0719                     	;# 
  1623  0719                     	;# 
  1624  0719                     	;# 
  1625  071A                     	;# 
  1626  071A                     	;# 
  1627  071A                     	;# 
  1628  071A                     	;# 
  1629  071A                     	;# 
  1630  071B                     	;# 
  1631  071B                     	;# 
  1632  071C                     	;# 
  1633  071C                     	;# 
  1634  071C                     	;# 
  1635  071C                     	;# 
  1636  071C                     	;# 
  1637  071D                     	;# 
  1638  071D                     	;# 
  1639  071E                     	;# 
  1640  071E                     	;# 
  1641  0791                     	;# 
  1642  0791                     	;# 
  1643  0793                     	;# 
  1644  0793                     	;# 
  1645  0794                     	;# 
  1646  0794                     	;# 
  1647  0796                     	;# 
  1648  0796                     	;# 
  1649  0796                     	;# 
  1650  0797                     	;# 
  1651  0797                     	;# 
  1652  0797                     	;# 
  1653  0798                     	;# 
  1654  0798                     	;# 
  1655  0799                     	;# 
  1656  0799                     	;# 
  1657  0799                     	;# 
  1658  079A                     	;# 
  1659  079A                     	;# 
  1660  079A                     	;# 
  1661  079B                     	;# 
  1662  079C                     	;# 
  1663  079C                     	;# 
  1664  079C                     	;# 
  1665  079D                     	;# 
  1666  079E                     	;# 
  1667  079E                     	;# 
  1668  0F8C                     	;# 
  1669  0F8D                     	;# 
  1670  0F91                     	;# 
  1671  0F96                     	;# 
  1672  0F97                     	;# 
  1673  0F9C                     	;# 
  1674  0F9D                     	;# 
  1675  0F9E                     	;# 
  1676  0FE3                     	;# 
  1677  0FE4                     	;# 
  1678  0FE5                     	;# 
  1679  0FE6                     	;# 
  1680  0FE7                     	;# 
  1681  0FE8                     	;# 
  1682  0FE9                     	;# 
  1683  0FEA                     	;# 
  1684  0FEB                     	;# 
  1685  0FED                     	;# 
  1686  0FEE                     	;# 
  1687  0FEF                     	;# 
  1688  0000                     	;# 
  1689  0001                     	;# 
  1690  0002                     	;# 
  1691  0003                     	;# 
  1692  0004                     	;# 
  1693  0005                     	;# 
  1694  0006                     	;# 
  1695  0007                     	;# 
  1696  0008                     	;# 
  1697  0009                     	;# 
  1698  000A                     	;# 
  1699  000B                     	;# 
  1700  000C                     	;# 
  1701  000D                     	;# 
  1702  000E                     	;# 
  1703  0011                     	;# 
  1704  0012                     	;# 
  1705  0015                     	;# 
  1706  0016                     	;# 
  1707  0016                     	;# 
  1708  0017                     	;# 
  1709  0018                     	;# 
  1710  0019                     	;# 
  1711  001A                     	;# 
  1712  001B                     	;# 
  1713  001C                     	;# 
  1714  008C                     	;# 
  1715  008D                     	;# 
  1716  008E                     	;# 
  1717  0091                     	;# 
  1718  0092                     	;# 
  1719  0095                     	;# 
  1720  0096                     	;# 
  1721  0097                     	;# 
  1722  0099                     	;# 
  1723  009A                     	;# 
  1724  009B                     	;# 
  1725  009B                     	;# 
  1726  009C                     	;# 
  1727  009D                     	;# 
  1728  009E                     	;# 
  1729  009F                     	;# 
  1730  010C                     	;# 
  1731  010D                     	;# 
  1732  010E                     	;# 
  1733  0116                     	;# 
  1734  0117                     	;# 
  1735  011D                     	;# 
  1736  018C                     	;# 
  1737  018D                     	;# 
  1738  018E                     	;# 
  1739  0191                     	;# 
  1740  0191                     	;# 
  1741  0192                     	;# 
  1742  0193                     	;# 
  1743  0193                     	;# 
  1744  0194                     	;# 
  1745  0195                     	;# 
  1746  0196                     	;# 
  1747  0199                     	;# 
  1748  019A                     	;# 
  1749  019B                     	;# 
  1750  019B                     	;# 
  1751  019C                     	;# 
  1752  019D                     	;# 
  1753  019E                     	;# 
  1754  019F                     	;# 
  1755  020C                     	;# 
  1756  020D                     	;# 
  1757  0211                     	;# 
  1758  0211                     	;# 
  1759  0212                     	;# 
  1760  0212                     	;# 
  1761  0213                     	;# 
  1762  0213                     	;# 
  1763  0214                     	;# 
  1764  0214                     	;# 
  1765  0215                     	;# 
  1766  0215                     	;# 
  1767  0215                     	;# 
  1768  0216                     	;# 
  1769  0216                     	;# 
  1770  0217                     	;# 
  1771  0217                     	;# 
  1772  0391                     	;# 
  1773  0392                     	;# 
  1774  0393                     	;# 
  1775  0394                     	;# 
  1776  0395                     	;# 
  1777  0396                     	;# 
  1778  0611                     	;# 
  1779  0612                     	;# 
  1780  0613                     	;# 
  1781  0613                     	;# 
  1782  0614                     	;# 
  1783  0615                     	;# 
  1784  0616                     	;# 
  1785  0616                     	;# 
  1786  0711                     	;# 
  1787  0711                     	;# 
  1788  0711                     	;# 
  1789  0712                     	;# 
  1790  0712                     	;# 
  1791  0713                     	;# 
  1792  0713                     	;# 
  1793  0713                     	;# 
  1794  0714                     	;# 
  1795  0714                     	;# 
  1796  0714                     	;# 
  1797  0715                     	;# 
  1798  0715                     	;# 
  1799  0716                     	;# 
  1800  0716                     	;# 
  1801  0716                     	;# 
  1802  0716                     	;# 
  1803  0717                     	;# 
  1804  0717                     	;# 
  1805  0717                     	;# 
  1806  0717                     	;# 
  1807  0718                     	;# 
  1808  0718                     	;# 
  1809  0718                     	;# 
  1810  0719                     	;# 
  1811  0719                     	;# 
  1812  0719                     	;# 
  1813  0719                     	;# 
  1814  071A                     	;# 
  1815  071A                     	;# 
  1816  071A                     	;# 
  1817  071A                     	;# 
  1818  071A                     	;# 
  1819  071B                     	;# 
  1820  071B                     	;# 
  1821  071C                     	;# 
  1822  071C                     	;# 
  1823  071C                     	;# 
  1824  071C                     	;# 
  1825  071C                     	;# 
  1826  071D                     	;# 
  1827  071D                     	;# 
  1828  071E                     	;# 
  1829  071E                     	;# 
  1830  0791                     	;# 
  1831  0791                     	;# 
  1832  0793                     	;# 
  1833  0793                     	;# 
  1834  0794                     	;# 
  1835  0794                     	;# 
  1836  0796                     	;# 
  1837  0796                     	;# 
  1838  0796                     	;# 
  1839  0797                     	;# 
  1840  0797                     	;# 
  1841  0797                     	;# 
  1842  0798                     	;# 
  1843  0798                     	;# 
  1844  0799                     	;# 
  1845  0799                     	;# 
  1846  0799                     	;# 
  1847  079A                     	;# 
  1848  079A                     	;# 
  1849  079A                     	;# 
  1850  079B                     	;# 
  1851  079C                     	;# 
  1852  079C                     	;# 
  1853  079C                     	;# 
  1854  079D                     	;# 
  1855  079E                     	;# 
  1856  079E                     	;# 
  1857  0F8C                     	;# 
  1858  0F8D                     	;# 
  1859  0F91                     	;# 
  1860  0F96                     	;# 
  1861  0F97                     	;# 
  1862  0F9C                     	;# 
  1863  0F9D                     	;# 
  1864  0F9E                     	;# 
  1865  0FE3                     	;# 
  1866  0FE4                     	;# 
  1867  0FE5                     	;# 
  1868  0FE6                     	;# 
  1869  0FE7                     	;# 
  1870  0FE8                     	;# 
  1871  0FE9                     	;# 
  1872  0FEA                     	;# 
  1873  0FEB                     	;# 
  1874  0FED                     	;# 
  1875  0FEE                     	;# 
  1876  0FEF                     	;# 
  1877  0000                     	;# 
  1878  0001                     	;# 
  1879  0002                     	;# 
  1880  0003                     	;# 
  1881  0004                     	;# 
  1882  0005                     	;# 
  1883  0006                     	;# 
  1884  0007                     	;# 
  1885  0008                     	;# 
  1886  0009                     	;# 
  1887  000A                     	;# 
  1888  000B                     	;# 
  1889  000C                     	;# 
  1890  000D                     	;# 
  1891  000E                     	;# 
  1892  0011                     	;# 
  1893  0012                     	;# 
  1894  0015                     	;# 
  1895  0016                     	;# 
  1896  0016                     	;# 
  1897  0017                     	;# 
  1898  0018                     	;# 
  1899  0019                     	;# 
  1900  001A                     	;# 
  1901  001B                     	;# 
  1902  001C                     	;# 
  1903  008C                     	;# 
  1904  008D                     	;# 
  1905  008E                     	;# 
  1906  0091                     	;# 
  1907  0092                     	;# 
  1908  0095                     	;# 
  1909  0096                     	;# 
  1910  0097                     	;# 
  1911  0099                     	;# 
  1912  009A                     	;# 
  1913  009B                     	;# 
  1914  009B                     	;# 
  1915  009C                     	;# 
  1916  009D                     	;# 
  1917  009E                     	;# 
  1918  009F                     	;# 
  1919  010C                     	;# 
  1920  010D                     	;# 
  1921  010E                     	;# 
  1922  0116                     	;# 
  1923  0117                     	;# 
  1924  011D                     	;# 
  1925  018C                     	;# 
  1926  018D                     	;# 
  1927  018E                     	;# 
  1928  0191                     	;# 
  1929  0191                     	;# 
  1930  0192                     	;# 
  1931  0193                     	;# 
  1932  0193                     	;# 
  1933  0194                     	;# 
  1934  0195                     	;# 
  1935  0196                     	;# 
  1936  0199                     	;# 
  1937  019A                     	;# 
  1938  019B                     	;# 
  1939  019B                     	;# 
  1940  019C                     	;# 
  1941  019D                     	;# 
  1942  019E                     	;# 
  1943  019F                     	;# 
  1944  020C                     	;# 
  1945  020D                     	;# 
  1946  0211                     	;# 
  1947  0211                     	;# 
  1948  0212                     	;# 
  1949  0212                     	;# 
  1950  0213                     	;# 
  1951  0213                     	;# 
  1952  0214                     	;# 
  1953  0214                     	;# 
  1954  0215                     	;# 
  1955  0215                     	;# 
  1956  0215                     	;# 
  1957  0216                     	;# 
  1958  0216                     	;# 
  1959  0217                     	;# 
  1960  0217                     	;# 
  1961  0391                     	;# 
  1962  0392                     	;# 
  1963  0393                     	;# 
  1964  0394                     	;# 
  1965  0395                     	;# 
  1966  0396                     	;# 
  1967  0611                     	;# 
  1968  0612                     	;# 
  1969  0613                     	;# 
  1970  0613                     	;# 
  1971  0614                     	;# 
  1972  0615                     	;# 
  1973  0616                     	;# 
  1974  0616                     	;# 
  1975  0711                     	;# 
  1976  0711                     	;# 
  1977  0711                     	;# 
  1978  0712                     	;# 
  1979  0712                     	;# 
  1980  0713                     	;# 
  1981  0713                     	;# 
  1982  0713                     	;# 
  1983  0714                     	;# 
  1984  0714                     	;# 
  1985  0714                     	;# 
  1986  0715                     	;# 
  1987  0715                     	;# 
  1988  0716                     	;# 
  1989  0716                     	;# 
  1990  0716                     	;# 
  1991  0716                     	;# 
  1992  0717                     	;# 
  1993  0717                     	;# 
  1994  0717                     	;# 
  1995  0717                     	;# 
  1996  0718                     	;# 
  1997  0718                     	;# 
  1998  0718                     	;# 
  1999  0719                     	;# 
  2000  0719                     	;# 
  2001  0719                     	;# 
  2002  0719                     	;# 
  2003  071A                     	;# 
  2004  071A                     	;# 
  2005  071A                     	;# 
  2006  071A                     	;# 
  2007  071A                     	;# 
  2008  071B                     	;# 
  2009  071B                     	;# 
  2010  071C                     	;# 
  2011  071C                     	;# 
  2012  071C                     	;# 
  2013  071C                     	;# 
  2014  071C                     	;# 
  2015  071D                     	;# 
  2016  071D                     	;# 
  2017  071E                     	;# 
  2018  071E                     	;# 
  2019  0791                     	;# 
  2020  0791                     	;# 
  2021  0793                     	;# 
  2022  0793                     	;# 
  2023  0794                     	;# 
  2024  0794                     	;# 
  2025  0796                     	;# 
  2026  0796                     	;# 
  2027  0796                     	;# 
  2028  0797                     	;# 
  2029  0797                     	;# 
  2030  0797                     	;# 
  2031  0798                     	;# 
  2032  0798                     	;# 
  2033  0799                     	;# 
  2034  0799                     	;# 
  2035  0799                     	;# 
  2036  079A                     	;# 
  2037  079A                     	;# 
  2038  079A                     	;# 
  2039  079B                     	;# 
  2040  079C                     	;# 
  2041  079C                     	;# 
  2042  079C                     	;# 
  2043  079D                     	;# 
  2044  079E                     	;# 
  2045  079E                     	;# 
  2046  0F8C                     	;# 
  2047  0F8D                     	;# 
  2048  0F91                     	;# 
  2049  0F96                     	;# 
  2050  0F97                     	;# 
  2051  0F9C                     	;# 
  2052  0F9D                     	;# 
  2053  0F9E                     	;# 
  2054  0FE3                     	;# 
  2055  0FE4                     	;# 
  2056  0FE5                     	;# 
  2057  0FE6                     	;# 
  2058  0FE7                     	;# 
  2059  0FE8                     	;# 
  2060  0FE9                     	;# 
  2061  0FEA                     	;# 
  2062  0FEB                     	;# 
  2063  0FED                     	;# 
  2064  0FEE                     	;# 
  2065  0FEF                     	;# 
  2066  0000                     	;# 
  2067  0001                     	;# 
  2068  0002                     	;# 
  2069  0003                     	;# 
  2070  0004                     	;# 
  2071  0005                     	;# 
  2072  0006                     	;# 
  2073  0007                     	;# 
  2074  0008                     	;# 
  2075  0009                     	;# 
  2076  000A                     	;# 
  2077  000B                     	;# 
  2078  000C                     	;# 
  2079  000D                     	;# 
  2080  000E                     	;# 
  2081  0011                     	;# 
  2082  0012                     	;# 
  2083  0015                     	;# 
  2084  0016                     	;# 
  2085  0016                     	;# 
  2086  0017                     	;# 
  2087  0018                     	;# 
  2088  0019                     	;# 
  2089  001A                     	;# 
  2090  001B                     	;# 
  2091  001C                     	;# 
  2092  008C                     	;# 
  2093  008D                     	;# 
  2094  008E                     	;# 
  2095  0091                     	;# 
  2096  0092                     	;# 
  2097  0095                     	;# 
  2098  0096                     	;# 
  2099  0097                     	;# 
  2100  0099                     	;# 
  2101  009A                     	;# 
  2102  009B                     	;# 
  2103  009B                     	;# 
  2104  009C                     	;# 
  2105  009D                     	;# 
  2106  009E                     	;# 
  2107  009F                     	;# 
  2108  010C                     	;# 
  2109  010D                     	;# 
  2110  010E                     	;# 
  2111  0116                     	;# 
  2112  0117                     	;# 
  2113  011D                     	;# 
  2114  018C                     	;# 
  2115  018D                     	;# 
  2116  018E                     	;# 
  2117  0191                     	;# 
  2118  0191                     	;# 
  2119  0192                     	;# 
  2120  0193                     	;# 
  2121  0193                     	;# 
  2122  0194                     	;# 
  2123  0195                     	;# 
  2124  0196                     	;# 
  2125  0199                     	;# 
  2126  019A                     	;# 
  2127  019B                     	;# 
  2128  019B                     	;# 
  2129  019C                     	;# 
  2130  019D                     	;# 
  2131  019E                     	;# 
  2132  019F                     	;# 
  2133  020C                     	;# 
  2134  020D                     	;# 
  2135  0211                     	;# 
  2136  0211                     	;# 
  2137  0212                     	;# 
  2138  0212                     	;# 
  2139  0213                     	;# 
  2140  0213                     	;# 
  2141  0214                     	;# 
  2142  0214                     	;# 
  2143  0215                     	;# 
  2144  0215                     	;# 
  2145  0215                     	;# 
  2146  0216                     	;# 
  2147  0216                     	;# 
  2148  0217                     	;# 
  2149  0217                     	;# 
  2150  0391                     	;# 
  2151  0392                     	;# 
  2152  0393                     	;# 
  2153  0394                     	;# 
  2154  0395                     	;# 
  2155  0396                     	;# 
  2156  0611                     	;# 
  2157  0612                     	;# 
  2158  0613                     	;# 
  2159  0613                     	;# 
  2160  0614                     	;# 
  2161  0615                     	;# 
  2162  0616                     	;# 
  2163  0616                     	;# 
  2164  0711                     	;# 
  2165  0711                     	;# 
  2166  0711                     	;# 
  2167  0712                     	;# 
  2168  0712                     	;# 
  2169  0713                     	;# 
  2170  0713                     	;# 
  2171  0713                     	;# 
  2172  0714                     	;# 
  2173  0714                     	;# 
  2174  0714                     	;# 
  2175  0715                     	;# 
  2176  0715                     	;# 
  2177  0716                     	;# 
  2178  0716                     	;# 
  2179  0716                     	;# 
  2180  0716                     	;# 
  2181  0717                     	;# 
  2182  0717                     	;# 
  2183  0717                     	;# 
  2184  0717                     	;# 
  2185  0718                     	;# 
  2186  0718                     	;# 
  2187  0718                     	;# 
  2188  0719                     	;# 
  2189  0719                     	;# 
  2190  0719                     	;# 
  2191  0719                     	;# 
  2192  071A                     	;# 
  2193  071A                     	;# 
  2194  071A                     	;# 
  2195  071A                     	;# 
  2196  071A                     	;# 
  2197  071B                     	;# 
  2198  071B                     	;# 
  2199  071C                     	;# 
  2200  071C                     	;# 
  2201  071C                     	;# 
  2202  071C                     	;# 
  2203  071C                     	;# 
  2204  071D                     	;# 
  2205  071D                     	;# 
  2206  071E                     	;# 
  2207  071E                     	;# 
  2208  0791                     	;# 
  2209  0791                     	;# 
  2210  0793                     	;# 
  2211  0793                     	;# 
  2212  0794                     	;# 
  2213  0794                     	;# 
  2214  0796                     	;# 
  2215  0796                     	;# 
  2216  0796                     	;# 
  2217  0797                     	;# 
  2218  0797                     	;# 
  2219  0797                     	;# 
  2220  0798                     	;# 
  2221  0798                     	;# 
  2222  0799                     	;# 
  2223  0799                     	;# 
  2224  0799                     	;# 
  2225  079A                     	;# 
  2226  079A                     	;# 
  2227  079A                     	;# 
  2228  079B                     	;# 
  2229  079C                     	;# 
  2230  079C                     	;# 
  2231  079C                     	;# 
  2232  079D                     	;# 
  2233  079E                     	;# 
  2234  079E                     	;# 
  2235  0F8C                     	;# 
  2236  0F8D                     	;# 
  2237  0F91                     	;# 
  2238  0F96                     	;# 
  2239  0F97                     	;# 
  2240  0F9C                     	;# 
  2241  0F9D                     	;# 
  2242  0F9E                     	;# 
  2243  0FE3                     	;# 
  2244  0FE4                     	;# 
  2245  0FE5                     	;# 
  2246  0FE6                     	;# 
  2247  0FE7                     	;# 
  2248  0FE8                     	;# 
  2249  0FE9                     	;# 
  2250  0FEA                     	;# 
  2251  0FEB                     	;# 
  2252  0FED                     	;# 
  2253  0FEE                     	;# 
  2254  0FEF                     	;# 
  2255                           
  2256                           	psect	idataBANK0
  2257  1481                     __pidataBANK0:	
  2258                           
  2259                           ;initializer for _callback_notPressed
  2260  1481  3471               	retlw	low _Button_DefaultCallback
  2261  1482  3414               	retlw	high _Button_DefaultCallback
  2262                           
  2263                           ;initializer for _sample_period
  2264  1483  34AE               	retlw	174
  2265                           
  2266                           	psect	idataBANK1
  2267  1525                     __pidataBANK1:	
  2268                           
  2269                           ;initializer for _Button_StateMachine
  2270  1525  34AD               	retlw	low _Button_State_Initializing
  2271  1526  340C               	retlw	high _Button_State_Initializing
  2272  1527  34A3               	retlw	low _Button_State_NotPressed
  2273  1528  3406               	retlw	high _Button_State_NotPressed
  2274  1529  340F               	retlw	low _Button_State_Pressed
  2275  152A  340D               	retlw	high _Button_State_Pressed
  2276                           
  2277                           ;initializer for _callback_pressed
  2278  152B  3471               	retlw	low _Button_DefaultCallback
  2279  152C  3414               	retlw	high _Button_DefaultCallback
  2280                           
  2281                           ;initializer for _callback_sampled
  2282  152D  34FF               	retlw	low _Sensor_DefaultCallback
  2283  152E  3407               	retlw	high _Sensor_DefaultCallback
  2284                           
  2285                           	psect	idataBANK2
  2286  16FD                     __pidataBANK2:	
  2287                           
  2288                           ;initializer for _mtouch_sensor
  2289  16FD  3400               	retlw	0
  2290  16FE  3469               	retlw	105
  2291  16FF  3430               	retlw	48
  2292  1700  3410               	retlw	16
  2293  1701  3420               	retlw	32
  2294  1702  3400               	retlw	0
  2295  1703  3400               	retlw	0
  2296  1704  3400               	retlw	0
  2297  1705  3400               	retlw	0
  2298  1706  3401               	retlw	1
  2299  1707  345D               	retlw	93
  2300  1708  3430               	retlw	48
  2301  1709  3410               	retlw	16
  2302  170A  3420               	retlw	32
  2303  170B  3400               	retlw	0
  2304  170C  3400               	retlw	0
  2305  170D  3400               	retlw	0
  2306  170E  3400               	retlw	0
  2307  170F  3402               	retlw	2
  2308  1710  3435               	retlw	53
  2309  1711  3430               	retlw	48
  2310  1712  3410               	retlw	16
  2311  1713  3420               	retlw	32
  2312  1714  3400               	retlw	0
  2313  1715  3400               	retlw	0
  2314  1716  3400               	retlw	0
  2315  1717  3400               	retlw	0
  2316                           
  2317                           	psect	stringtext1
  2318  180F                     __pstringtext1:	
  2319  180F                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2320  180F  3400               	retlw	0
  2321  1810  340D               	retlw	13
  2322  1811  341C               	retlw	28
  2323  1812  341E               	retlw	30
  2324  1813  3417               	retlw	23
  2325  1814                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2326                           
  2327                           	psect	stringtext2
  2328  183C                     __pstringtext2:	
  2329  183C                     _sensor_scan_group:	
  2330  183C  3462               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2331  183D  3450               	retlw	low (_mtouch_sensor| (0+256))
  2332  183E  3400               	retlw	0
  2333  183F  3459               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2334  1840                     __end_of_sensor_scan_group:	
  2335                           
  2336                           	psect	stringtext3
  2337  1000                     __pstringtext3:	
  2338  1000                     _mtouch_button_init:	
  2339  1000  3400               	retlw	0
  2340  1001  3402               	retlw	2
  2341  1002  3400               	retlw	0
  2342  1003  3400               	retlw	0
  2343  1004  3400               	retlw	0
  2344  1005  3400               	retlw	0
  2345  1006  3400               	retlw	0
  2346  1007  3400               	retlw	0
  2347  1008  3400               	retlw	0
  2348  1009  3400               	retlw	0
  2349  100A  3400               	retlw	0
  2350  100B  3400               	retlw	0
  2351  100C  3400               	retlw	0
  2352  100D  3400               	retlw	0
  2353  100E  3464               	retlw	100
  2354  100F  3401               	retlw	1
  2355  1010  3401               	retlw	1
  2356  1011  3401               	retlw	1
  2357  1012  3400               	retlw	0
  2358  1013  3400               	retlw	0
  2359  1014  3400               	retlw	0
  2360  1015  3400               	retlw	0
  2361  1016  3400               	retlw	0
  2362  1017  3400               	retlw	0
  2363  1018  3400               	retlw	0
  2364  1019  3400               	retlw	0
  2365  101A  3400               	retlw	0
  2366  101B  3400               	retlw	0
  2367  101C  3400               	retlw	0
  2368  101D  3400               	retlw	0
  2369  101E  3464               	retlw	100
  2370  101F  3401               	retlw	1
  2371  1020  3402               	retlw	2
  2372  1021  3400               	retlw	0
  2373  1022  3400               	retlw	0
  2374  1023  3400               	retlw	0
  2375  1024  3400               	retlw	0
  2376  1025  3400               	retlw	0
  2377  1026  3400               	retlw	0
  2378  1027  3400               	retlw	0
  2379  1028  3400               	retlw	0
  2380  1029  3400               	retlw	0
  2381  102A  3400               	retlw	0
  2382  102B  3400               	retlw	0
  2383  102C  3400               	retlw	0
  2384  102D  3400               	retlw	0
  2385  102E  3464               	retlw	100
  2386  102F  3401               	retlw	1
  2387  1030                     __end_of_mtouch_button_init:	
  2388                           
  2389                           	psect	nvBANK1
  2390  00C4                     __pnvBANK1:	
  2391  00C4                     _EUSART_ErrorHandler:	
  2392  00C4                     	ds	2
  2393  00C6                     _EUSART_OverrunErrorHandler:	
  2394  00C6                     	ds	2
  2395  00C8                     _EUSART_FramingErrorHandler:	
  2396  00C8                     	ds	2
  2397  00CA                     _EUSART_RxDefaultInterruptHandler:	
  2398  00CA                     	ds	2
  2399  00CC                     _EUSART_TxDefaultInterruptHandler:	
  2400  00CC                     	ds	2
  2401  00CE                     _eusartTxBufferRemaining:	
  2402  00CE                     	ds	1
  2403  001C                     _T2CON	set	28
  2404  001A                     _TMR2	set	26
  2405  001B                     _PR2	set	27
  2406  000B                     _INTCONbits	set	11
  2407  0012                     _PIR2bits	set	18
  2408  0011                     _PIR1bits	set	17
  2409  001C                     _T2CONbits	set	28
  2410  005F                     _GIE	set	95
  2411  0095                     _OPTION_REGbits	set	149
  2412  008E                     _TRISC	set	142
  2413  008D                     _TRISB	set	141
  2414  008C                     _TRISA	set	140
  2415  0097                     _WDTCON	set	151
  2416  0099                     _OSCCON	set	153
  2417  0091                     _PIE1bits	set	145
  2418  010D                     _LATBbits	set	269
  2419  010E                     _LATCbits	set	270
  2420  010C                     _LATAbits	set	268
  2421  011D                     _APFCON	set	285
  2422  010E                     _LATC	set	270
  2423  010D                     _LATB	set	269
  2424  010C                     _LATA	set	268
  2425  0116                     _BORCON	set	278
  2426  011D                     _APFCONbits	set	285
  2427  018C                     _ANSELA	set	396
  2428  018D                     _ANSELB	set	397
  2429  018E                     _ANSELC	set	398
  2430  0199                     _RCREG	set	409
  2431  019D                     _RCSTAbits	set	413
  2432  019A                     _TXREG	set	410
  2433  019E                     _TXSTAbits	set	414
  2434  019C                     _SPBRGH	set	412
  2435  019B                     _SPBRGL	set	411
  2436  019E                     _TXSTA	set	414
  2437  019D                     _RCSTA	set	413
  2438  019F                     _BAUDCON	set	415
  2439  020C                     _WPUA	set	524
  2440  020D                     _WPUB	set	525
  2441  071A                     _AAD1RES0	set	1818
  2442  0711                     _AD1CON0bits	set	1809
  2443  0714                     _AAD1CON3	set	1812
  2444  0713                     _AD1CON2	set	1811
  2445  0717                     _AD1ACQCON	set	1815
  2446  0716                     _AD1PRECON	set	1814
  2447  0718                     _AAD1GRD	set	1816
  2448  0713                     _AAD1CON2	set	1811
  2449  0719                     _AAD1CAP	set	1817
  2450  0714                     _AD1CON3	set	1812
  2451  0712                     _ADCOMCON	set	1810
  2452  0711                     _AD1CON0	set	1809
  2453  079A                     _AAD2RES0	set	1946
  2454  0791                     _AD2CON0bits	set	1937
  2455  0797                     _AD2ACQCON	set	1943
  2456  0796                     _AD2PRECON	set	1942
  2457  0794                     _AAD2CON3	set	1940
  2458  0798                     _AAD2GRD	set	1944
  2459  0793                     _AD2CON2	set	1939
  2460  0794                     _AD2CON3	set	1940
  2461  0791                     _AD2CON0	set	1937
  2462                           
  2463                           	psect	stringtext4
  2464  1800                     __pstringtext4:	
  2465  1800                     STR_1:	
  2466  1800  3450               	retlw	80	;'P'
  2467  1801  3449               	retlw	73	;'I'
  2468  1802  3443               	retlw	67	;'C'
  2469  1803  3453               	retlw	83	;'S'
  2470  1804  344D               	retlw	77	;'M'
  2471  1805  3441               	retlw	65	;'A'
  2472  1806  3452               	retlw	82	;'R'
  2473  1807  3454               	retlw	84	;'T'
  2474  1808  3400               	retlw	0
  2475                           
  2476                           	psect	stringtext5
  2477  1809                     __pstringtext5:	
  2478  1809                     STR_2:	
  2479  1809  3452               	retlw	82	;'R'
  2480  180A  3455               	retlw	85	;'U'
  2481  180B  344E               	retlw	78	;'N'
  2482  180C  340D               	retlw	13
  2483  180D  340A               	retlw	10
  2484  180E  3400               	retlw	0
  2485                           
  2486                           	psect	stringtext6
  2487  1814                     __pstringtext6:	
  2488  1814                     STR_3:	
  2489  1814  3450               	retlw	80	;'P'
  2490  1815  3449               	retlw	73	;'I'
  2491  1816  3443               	retlw	67	;'C'
  2492  1817  3430               	retlw	48	;'0'
  2493  1818  3400               	retlw	0
  2494                           
  2495                           	psect	stringtext7
  2496  1819                     __pstringtext7:	
  2497  1819                     STR_4:	
  2498  1819  3450               	retlw	80	;'P'
  2499  181A  3449               	retlw	73	;'I'
  2500  181B  3443               	retlw	67	;'C'
  2501  181C  3431               	retlw	49	;'1'
  2502  181D  3400               	retlw	0
  2503                           
  2504                           	psect	stringtext8
  2505  181E                     __pstringtext8:	
  2506  181E                     STR_5:	
  2507  181E  3450               	retlw	80	;'P'
  2508  181F  3449               	retlw	73	;'I'
  2509  1820  3443               	retlw	67	;'C'
  2510  1821  3432               	retlw	50	;'2'
  2511  1822  3400               	retlw	0
  2512                           
  2513                           	psect	stringtext9
  2514  1823                     __pstringtext9:	
  2515  1823                     STR_6:	
  2516  1823  3450               	retlw	80	;'P'
  2517  1824  3449               	retlw	73	;'I'
  2518  1825  3443               	retlw	67	;'C'
  2519  1826  3433               	retlw	51	;'3'
  2520  1827  3400               	retlw	0
  2521                           
  2522                           	psect	stringtext10
  2523  1828                     __pstringtext10:	
  2524  1828                     STR_7:	
  2525  1828  3450               	retlw	80	;'P'
  2526  1829  3449               	retlw	73	;'I'
  2527  182A  3443               	retlw	67	;'C'
  2528  182B  3434               	retlw	52	;'4'
  2529  182C  3400               	retlw	0
  2530                           
  2531                           	psect	stringtext11
  2532  182D                     __pstringtext11:	
  2533  182D                     STR_8:	
  2534  182D  3450               	retlw	80	;'P'
  2535  182E  3449               	retlw	73	;'I'
  2536  182F  3443               	retlw	67	;'C'
  2537  1830  3435               	retlw	53	;'5'
  2538  1831  3400               	retlw	0
  2539                           
  2540                           	psect	stringtext12
  2541  1832                     __pstringtext12:	
  2542  1832                     STR_9:	
  2543  1832  3450               	retlw	80	;'P'
  2544  1833  3449               	retlw	73	;'I'
  2545  1834  3443               	retlw	67	;'C'
  2546  1835  3436               	retlw	54	;'6'
  2547  1836  3400               	retlw	0
  2548                           
  2549                           	psect	stringtext13
  2550  1837                     __pstringtext13:	
  2551  1837                     STR_10:	
  2552  1837  3450               	retlw	80	;'P'
  2553  1838  3449               	retlw	73	;'I'
  2554  1839  3443               	retlw	67	;'C'
  2555  183A  3437               	retlw	55	;'7'
  2556  183B  3400               	retlw	0
  2557                           
  2558                           	psect	stringtext14
  2559  1840                     __pstringtext14:	
  2560  1840                     STR_11:	
  2561  1840  3425               	retlw	37	;'%'
  2562  1841  3463               	retlw	99	;'c'
  2563  1842  3400               	retlw	0
  2564                           
  2565                           	psect	stringtext15
  2566  0000                     __pstringtext15:	
  2567                           
  2568                           ; #config settings
  2569  0000                     
  2570                           	psect	cinit
  2571  0025                     start_initialization:	
  2572  0025                     __initialization:	
  2573                           
  2574                           ; Initialize objects allocated to BANK0
  2575  0025  3081               	movlw	low __pidataBANK0
  2576  0026  0084               	movwf	4
  2577  0027  3094               	movlw	(high __pidataBANK0)| (0+128)
  2578  0028  0085               	movwf	5
  2579  0029  306C               	movlw	low __pdataBANK0
  2580  002A  0086               	movwf	6
  2581  002B  3000               	movlw	high __pdataBANK0
  2582  002C  0087               	movwf	7
  2583  002D  3003               	movlw	3
  2584  002E  3194  24E4  3180   	fcall	init_ram
  2585                           
  2586                           ; Initialize objects allocated to BANK1
  2587  0031  3025               	movlw	low __pidataBANK1
  2588  0032  0084               	movwf	4
  2589  0033  3095               	movlw	(high __pidataBANK1)| (0+128)
  2590  0034  0085               	movwf	5
  2591  0035  30CF               	movlw	low __pdataBANK1
  2592  0036  0086               	movwf	6
  2593  0037  3000               	movlw	high __pdataBANK1
  2594  0038  0087               	movwf	7
  2595  0039  300A               	movlw	10
  2596  003A  3194  24E4  3180   	fcall	init_ram
  2597                           
  2598                           ; Initialize objects allocated to BANK2
  2599  003D  30FD               	movlw	low __pidataBANK2
  2600  003E  0084               	movwf	4
  2601  003F  3096               	movlw	(high __pidataBANK2)| (0+128)
  2602  0040  0085               	movwf	5
  2603  0041  3050               	movlw	low __pdataBANK2
  2604  0042  0086               	movwf	6
  2605  0043  3001               	movlw	high __pdataBANK2
  2606  0044  0087               	movwf	7
  2607  0045  301B               	movlw	27
  2608  0046  3194  24E4  3180   	fcall	init_ram
  2609                           
  2610                           ; Clear objects allocated to COMMON
  2611  0049  01FC               	clrf	__pbssCOMMON& (0+127)
  2612                           
  2613                           ; Clear objects allocated to BANK0
  2614  004A  3053               	movlw	low __pbssBANK0
  2615  004B  0084               	movwf	4
  2616  004C  3000               	movlw	high __pbssBANK0
  2617  004D  0085               	movwf	5
  2618  004E  3019               	movlw	25
  2619  004F  3194  24DE  3180   	fcall	clear_ram0
  2620                           
  2621                           ; Clear objects allocated to BANK1
  2622  0052  30A0               	movlw	low __pbssBANK1
  2623  0053  0084               	movwf	4
  2624  0054  3000               	movlw	high __pbssBANK1
  2625  0055  0085               	movwf	5
  2626  0056  3024               	movlw	36
  2627  0057  3194  24DE  3180   	fcall	clear_ram0
  2628                           
  2629                           ; Clear objects allocated to BANK2
  2630  005A  3020               	movlw	low __pbssBANK2
  2631  005B  0084               	movwf	4
  2632  005C  3001               	movlw	high __pbssBANK2
  2633  005D  0085               	movwf	5
  2634  005E  3030               	movlw	48
  2635  005F  3194  24DE  3180   	fcall	clear_ram0
  2636                           
  2637                           ; Clear objects allocated to BANK3
  2638  0062  30A0               	movlw	low __pbssBANK3
  2639  0063  0084               	movwf	4
  2640  0064  3001               	movlw	high __pbssBANK3
  2641  0065  0085               	movwf	5
  2642  0066  3020               	movlw	32
  2643  0067  3194  24DE         	fcall	clear_ram0
  2644  0069                     end_of_initialization:	
  2645                           ;End of C runtime variable initialization code
  2646                           
  2647  0069                     __end_of__initialization:	
  2648  0069  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2649  006A  0020               	movlb	0
  2650  006B  3180  286D         	ljmp	_main	;jump to C main() function
  2651                           
  2652                           	psect	bssCOMMON
  2653  007C                     __pbssCOMMON:	
  2654  007C                     _eusartRxHead:	
  2655  007C                     	ds	1
  2656                           
  2657                           	psect	bssBANK0
  2658  0053                     __pbssBANK0:	
  2659  0053                     _packet_sample:	
  2660  0053                     	ds	4
  2661  0057                     _width:	
  2662  0057                     	ds	2
  2663  0059                     _last_touch_status:	
  2664  0059                     	ds	2
  2665  005B                     _packet_noise:	
  2666  005B                     	ds	2
  2667  005D                     _update_state_flag:	
  2668  005D                     	ds	1
  2669  005E                     _blink_count:	
  2670  005E                     	ds	1
  2671  005F                     _blink:	
  2672  005F                     	ds	1
  2673  0060                     _check_request:	
  2674  0060                     	ds	1
  2675  0061                     _config_status:	
  2676  0061                     	ds	1
  2677  0062                     _prcData:	
  2678  0062                     	ds	1
  2679  0063                     _rxData:	
  2680  0063                     	ds	1
  2681  0064                     _eusartRxLastError:	
  2682  0064                     	ds	1
  2683  0065                     _eusartRxCount:	
  2684  0065                     	ds	1
  2685  0066                     _eusartRxTail:	
  2686  0066                     	ds	1
  2687  0067                     _eusartTxTail:	
  2688  0067                     	ds	1
  2689  0068                     _eusartTxHead:	
  2690  0068                     	ds	1
  2691  0069                     _sensor_globalFlags:	
  2692  0069                     	ds	1
  2693  006A                     _lowpowerActivated:	
  2694  006A                     	ds	1
  2695  006B                     _mtouch_time_toScan:	
  2696  006B                     	ds	1
  2697                           
  2698                           	psect	dataBANK0
  2699  006C                     __pdataBANK0:	
  2700  006C                     _callback_notPressed:	
  2701  006C                     	ds	2
  2702  006E                     _sample_period:	
  2703  006E                     	ds	1
  2704                           
  2705                           	psect	bssBANK1
  2706  00A0                     __pbssBANK1:	
  2707  00A0                     _eusartRxStatusBuffer:	
  2708  00A0                     	ds	8
  2709  00A8                     _eusartRxBuffer:	
  2710  00A8                     	ds	8
  2711  00B0                     _eusartTxBuffer:	
  2712  00B0                     	ds	8
  2713  00B8                     _timeout_count:	
  2714  00B8                     	ds	4
  2715  00BC                     _nout:	
  2716  00BC                     	ds	2
  2717  00BE                     _prec:	
  2718  00BE                     	ds	2
  2719  00C0                     _flags:	
  2720  00C0                     	ds	2
  2721  00C2                     _count_conf:	
  2722  00C2                     	ds	2
  2723                           
  2724                           	psect	dataBANK1
  2725  00CF                     __pdataBANK1:	
  2726  00CF                     _Button_StateMachine:	
  2727  00CF                     	ds	6
  2728  00D5                     _callback_pressed:	
  2729  00D5                     	ds	2
  2730  00D7                     _callback_sampled:	
  2731  00D7                     	ds	2
  2732                           
  2733                           	psect	bssBANK2
  2734  0120                     __pbssBANK2:	
  2735  0120                     _mtouch_button:	
  2736  0120                     	ds	48
  2737                           
  2738                           	psect	dataBANK2
  2739  0150                     __pdataBANK2:	
  2740  0150                     _mtouch_sensor:	
  2741  0150                     	ds	27
  2742                           
  2743                           	psect	bssBANK3
  2744  01A0                     __pbssBANK3:	
  2745  01A0                     _dbuf:	
  2746  01A0                     	ds	32
  2747                           
  2748                           	psect	inittext
  2749  14E4                     init_ram:	
  2750  14E4  00FE               	movwf	126
  2751  14E5                     initloop:	
  2752  14E5  0012               	moviw fsr0++
  2753  14E6  001E               	movwi fsr1++
  2754  14E7  0BFE               	decfsz	126,f
  2755  14E8  2CE5               	goto	initloop
  2756  14E9  3400               	retlw	0
  2757                           
  2758                           	psect	clrtext
  2759  14DE                     clear_ram0:	
  2760                           ;	Called with FSR0 containing the base address, and
  2761                           ;	WREG with the size to clear
  2762                           
  2763  14DE  0064               	clrwdt	;clear the watchdog before getting into this loop
  2764  14DF                     clrloop0:	
  2765  14DF  0180               	clrf	0	;clear RAM location pointed to by FSR
  2766  14E0  3101               	addfsr 0,1
  2767  14E1  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2768  14E2  2CDF               	goto	clrloop0	;have we reached the end yet?
  2769  14E3  3400               	retlw	0	;all done for this memory range, return
  2770                           
  2771                           	psect	cstackBANK1
  2772  00D9                     __pcstackBANK1:	
  2773  00D9                     ??_main:	
  2774                           
  2775                           ; 1 bytes @ 0x0
  2776  00D9                     	ds	2
  2777                           
  2778                           	psect	cstackCOMMON
  2779  0070                     __pcstackCOMMON:	
  2780  0070                     ?_MTOUCH_Service_Mainloop:	
  2781  0070                     ?_MTOUCH_Button_isPressed:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ?_MTOUCH_Button_InitializeAll:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0070                     ?_MTOUCH_Button_ServiceAll:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802  0070                     ?_MTOUCH_needReburst:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805  0070                     ?_MTOUCH_Tick:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     ?_MTOUCH_Button_Tick:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_MTOUCH_Sensor_Enable:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ?_Sensor_Sampled_Reset:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0070                     ?_Sensor_Service:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0070                     ?_Sensor_isEnabled:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0070                     ?_Sensor_RawSample_Update:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829  0070                     ?_Sensor_setSampled:	
  2830                           ; 1 bytes @ 0x0
  2831                           
  2832  0070                     ?_Sensor_postAcquisitionProcess:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0070                     ?_Sensor_isActive:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0070                     ?_Sensor_isCalibrated:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0070                     ?_Sensor_setActive:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0070                     ?_Sensor_setInactive:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0070                     ?_Sensor_isCalibratingAcqTime:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0070                     ?_TMR2_LoadPeriodRegister:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0070                     ?_TMR2_StartTimer:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0070                     ?_TMR2_StopTimer:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0070                     ?_Sensor_autoCalibration:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0070                     ?_Sensor_setCalibratAcqTime:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ?_Sensor_setCalibrated:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?_Button_Service:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ?_Button_Reading_Update:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ?_Button_Deviation_Update:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ?_Button_Baseline_Initialize:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ?_Button_Baseline_Update:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?_Button_Tick_helper:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ?_Button_Reading_Update_Helper:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_EUSART_Receive_ISR:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_EUSART_Transmit_ISR:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ??_EUSART_Transmit_ISR:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_EUSART_DefaultErrorHandler:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_EUSART_RxDataHandler:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ??_EUSART_RxDataHandler:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_PIN_MANAGER_Initialize:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_OSCILLATOR_Initialize:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_WDT_Initialize:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_LED_PROCESS:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_RELAY_PROCESS:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_update_state:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_check_data:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_check_message:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_DATA_PROCESS:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_MTOUCH_Initialize:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_MTOUCH_Sensor_Initialize:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_Sensor_getScanGroupIndex:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_MTOUCH_Button_Initialize:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_EUSART_Initialize:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_EUSART_is_rx_ready:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_EUSART_Read:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_EUSART_Write:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0070                     ?_putch:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0070                     ?_TMR2_Initialize:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0070                     ?_INTERRUPT_InterruptManager:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0070                     ?_SYSTEM_Initialize:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0070                     ?_main:	
  2989                           ; 1 bytes @ 0x0
  2990                           
  2991  0070                     ?_LED_2_SetHigh:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994  0070                     ?_LED_2_SetLow:	
  2995                           ; 1 bytes @ 0x0
  2996                           
  2997  0070                     ?_LED_1_SetHigh:	
  2998                           ; 1 bytes @ 0x0
  2999                           
  3000  0070                     ?_LED_1_SetLow:	
  3001                           ; 1 bytes @ 0x0
  3002                           
  3003  0070                     ?_LED_0_SetHigh:	
  3004                           ; 1 bytes @ 0x0
  3005                           
  3006  0070                     ?_LED_0_SetLow:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009                           
  3010                           ; 1 bytes @ 0x0
  3011  0070                     	ds	1
  3012  0071                     ??_MTOUCH_Button_isPressed:	
  3013  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3014                           ; 1 bytes @ 0x1
  3015                           
  3016  0071                     ??_MTOUCH_needReburst:	
  3017                           ; 1 bytes @ 0x1
  3018                           
  3019  0071                     ?_Sensor_DefaultCallback:	
  3020                           ; 1 bytes @ 0x1
  3021                           
  3022  0071                     ??_Sensor_Sampled_Reset:	
  3023                           ; 1 bytes @ 0x1
  3024                           
  3025  0071                     ??_Sensor_isEnabled:	
  3026                           ; 1 bytes @ 0x1
  3027                           
  3028  0071                     ??_Sensor_setSampled:	
  3029                           ; 1 bytes @ 0x1
  3030                           
  3031  0071                     ??_Sensor_isActive:	
  3032                           ; 1 bytes @ 0x1
  3033                           
  3034  0071                     ??_Sensor_isCalibrated:	
  3035                           ; 1 bytes @ 0x1
  3036                           
  3037  0071                     ??_Sensor_setActive:	
  3038                           ; 1 bytes @ 0x1
  3039                           
  3040  0071                     ??_Sensor_setInactive:	
  3041                           ; 1 bytes @ 0x1
  3042                           
  3043  0071                     ??_Sensor_isCalibratingAcqTime:	
  3044                           ; 1 bytes @ 0x1
  3045                           
  3046  0071                     ??_TMR2_LoadPeriodRegister:	
  3047                           ; 1 bytes @ 0x1
  3048                           
  3049  0071                     ??_TMR2_StartTimer:	
  3050                           ; 1 bytes @ 0x1
  3051                           
  3052  0071                     ??_TMR2_StopTimer:	
  3053                           ; 1 bytes @ 0x1
  3054                           
  3055  0071                     ??_Sensor_setCalibratAcqTime:	
  3056                           ; 1 bytes @ 0x1
  3057                           
  3058  0071                     ??_Sensor_setCalibrated:	
  3059                           ; 1 bytes @ 0x1
  3060                           
  3061  0071                     ?_memcpy:	
  3062                           ; 1 bytes @ 0x1
  3063                           
  3064  0071                     ??_Button_Deviation_Update:	
  3065                           ; 1 bytes @ 0x1
  3066                           
  3067  0071                     ??_Button_Baseline_Update:	
  3068                           ; 1 bytes @ 0x1
  3069                           
  3070  0071                     ??_Button_Tick_helper:	
  3071                           ; 1 bytes @ 0x1
  3072                           
  3073  0071                     ?_EUSART_SetRxInterruptHandler:	
  3074                           ; 1 bytes @ 0x1
  3075                           
  3076  0071                     ??_EUSART_Receive_ISR:	
  3077                           ; 1 bytes @ 0x1
  3078                           
  3079  0071                     ?_EUSART_SetTxInterruptHandler:	
  3080                           ; 1 bytes @ 0x1
  3081                           
  3082  0071                     ?_EUSART_SetFramingErrorHandler:	
  3083                           ; 1 bytes @ 0x1
  3084                           
  3085  0071                     ?_EUSART_SetOverrunErrorHandler:	
  3086                           ; 1 bytes @ 0x1
  3087                           
  3088  0071                     ?_EUSART_SetErrorHandler:	
  3089                           ; 1 bytes @ 0x1
  3090                           
  3091  0071                     ??_EUSART_DefaultErrorHandler:	
  3092                           ; 1 bytes @ 0x1
  3093                           
  3094  0071                     ??_PIN_MANAGER_Initialize:	
  3095                           ; 1 bytes @ 0x1
  3096                           
  3097  0071                     ??_OSCILLATOR_Initialize:	
  3098                           ; 1 bytes @ 0x1
  3099                           
  3100  0071                     ??_WDT_Initialize:	
  3101                           ; 1 bytes @ 0x1
  3102                           
  3103  0071                     ??_LED_PROCESS:	
  3104                           ; 1 bytes @ 0x1
  3105                           
  3106  0071                     ??_RELAY_PROCESS:	
  3107                           ; 1 bytes @ 0x1
  3108                           
  3109  0071                     ??_check_data:	
  3110                           ; 1 bytes @ 0x1
  3111                           
  3112  0071                     ??_Sensor_getScanGroupIndex:	
  3113                           ; 1 bytes @ 0x1
  3114                           
  3115  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0071                     ??_EUSART_is_rx_ready:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0071                     ??_EUSART_Read:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0071                     ??_EUSART_Write:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0071                     ??_TMR2_Initialize:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133  0071                     ??_INTERRUPT_InterruptManager:	
  3134                           ; 1 bytes @ 0x1
  3135                           
  3136  0071                     ??_LED_2_SetHigh:	
  3137                           ; 1 bytes @ 0x1
  3138                           
  3139  0071                     ??_LED_2_SetLow:	
  3140                           ; 1 bytes @ 0x1
  3141                           
  3142  0071                     ??_LED_1_SetHigh:	
  3143                           ; 1 bytes @ 0x1
  3144                           
  3145  0071                     ??_LED_1_SetLow:	
  3146                           ; 1 bytes @ 0x1
  3147                           
  3148  0071                     ??_LED_0_SetHigh:	
  3149                           ; 1 bytes @ 0x1
  3150                           
  3151  0071                     ??_LED_0_SetLow:	
  3152                           ; 1 bytes @ 0x1
  3153                           
  3154  0071                     ?___bmul:	
  3155                           ; 1 bytes @ 0x1
  3156                           
  3157  0071                     ?_abs:	
  3158                           ; 1 bytes @ 0x1
  3159                           
  3160  0071                     ?_strlen:	
  3161                           ; 2 bytes @ 0x1
  3162                           
  3163  0071                     Sensor_DefaultCallback@sensor:	
  3164                           ; 2 bytes @ 0x1
  3165                           
  3166  0071                     Sensor_setActive@sensor:	
  3167                           ; 1 bytes @ 0x1
  3168                           
  3169  0071                     Sensor_setInactive@sensor:	
  3170                           ; 1 bytes @ 0x1
  3171                           
  3172  0071                     Sensor_isActive@sensor:	
  3173                           ; 1 bytes @ 0x1
  3174                           
  3175  0071                     Sensor_isCalibrated@sensor:	
  3176                           ; 1 bytes @ 0x1
  3177                           
  3178  0071                     Sensor_setCalibrated@sensor:	
  3179                           ; 1 bytes @ 0x1
  3180                           
  3181  0071                     Sensor_setCalibratAcqTime@sensor:	
  3182                           ; 1 bytes @ 0x1
  3183                           
  3184  0071                     Sensor_isCalibratingAcqTime@sensor:	
  3185                           ; 1 bytes @ 0x1
  3186                           
  3187  0071                     Sensor_Sampled_Reset@sensor:	
  3188                           ; 1 bytes @ 0x1
  3189                           
  3190  0071                     Sensor_setSampled@sensor:	
  3191                           ; 1 bytes @ 0x1
  3192                           
  3193  0071                     TMR2_LoadPeriodRegister@periodVal:	
  3194                           ; 1 bytes @ 0x1
  3195                           
  3196  0071                     ___bmul@multiplicand:	
  3197                           ; 1 bytes @ 0x1
  3198                           
  3199  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  3200                           ; 1 bytes @ 0x1
  3201                           
  3202  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3203                           ; 2 bytes @ 0x1
  3204                           
  3205  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3206                           ; 2 bytes @ 0x1
  3207                           
  3208  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3209                           ; 2 bytes @ 0x1
  3210                           
  3211  0071                     EUSART_SetErrorHandler@interruptHandler:	
  3212                           ; 2 bytes @ 0x1
  3213                           
  3214  0071                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3215                           ; 2 bytes @ 0x1
  3216                           
  3217  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3218                           ; 2 bytes @ 0x1
  3219                           
  3220  0071                     abs@a:	
  3221                           ; 2 bytes @ 0x1
  3222                           
  3223  0071                     memcpy@s1:	
  3224                           ; 2 bytes @ 0x1
  3225                           
  3226                           
  3227                           ; 2 bytes @ 0x1
  3228  0071                     	ds	1
  3229  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3230  0072                     ??_Sensor_DefaultCallback:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0072                     ?_Sensor_loadADCSettings:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0072                     ??___bmul:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239  0072                     Sensor_loadADCSettings@adc_index:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242  0072                     Sensor_isEnabled@sensor:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245  0072                     MTOUCH_Button_isPressed@name:	
  3246                           ; 1 bytes @ 0x2
  3247                           
  3248  0072                     EUSART_Read@readValue:	
  3249                           ; 1 bytes @ 0x2
  3250                           
  3251  0072                     EUSART_Write@txData:	
  3252                           ; 1 bytes @ 0x2
  3253                           
  3254                           
  3255                           ; 1 bytes @ 0x2
  3256  0072                     	ds	1
  3257  0073                     ??_abs:	
  3258  0073                     ??_EUSART_SetRxInterruptHandler:	
  3259                           ; 1 bytes @ 0x3
  3260                           
  3261  0073                     ??_EUSART_SetTxInterruptHandler:	
  3262                           ; 1 bytes @ 0x3
  3263                           
  3264  0073                     ??_EUSART_SetFramingErrorHandler:	
  3265                           ; 1 bytes @ 0x3
  3266                           
  3267  0073                     ??_EUSART_SetOverrunErrorHandler:	
  3268                           ; 1 bytes @ 0x3
  3269                           
  3270  0073                     ??_EUSART_SetErrorHandler:	
  3271                           ; 1 bytes @ 0x3
  3272                           
  3273  0073                     ??_strlen:	
  3274                           ; 1 bytes @ 0x3
  3275                           
  3276  0073                     ??_Sensor_loadADCSettings:	
  3277                           ; 1 bytes @ 0x3
  3278                           
  3279  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  3280                           ; 1 bytes @ 0x3
  3281                           
  3282  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3283                           ; 1 bytes @ 0x3
  3284                           
  3285  0073                     ??_EUSART_Initialize:	
  3286                           ; 1 bytes @ 0x3
  3287                           
  3288  0073                     ??_putch:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291  0073                     Sensor_getScanGroupIndex@sensor:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297  0073                     Button_Tick_helper@button:	
  3298                           ; 1 bytes @ 0x3
  3299                           
  3300  0073                     putch@txData:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0073                     check_data@x:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306  0073                     LED_PROCESS@x:	
  3307                           ; 1 bytes @ 0x3
  3308                           
  3309  0073                     RELAY_PROCESS@x:	
  3310                           ; 1 bytes @ 0x3
  3311                           
  3312  0073                     ___bmul@product:	
  3313                           ; 1 bytes @ 0x3
  3314                           
  3315  0073                     memcpy@n:	
  3316                           ; 1 bytes @ 0x3
  3317                           
  3318                           
  3319                           ; 2 bytes @ 0x3
  3320  0073                     	ds	1
  3321  0074                     ??_MTOUCH_Button_Tick:	
  3322  0074                     ?_Button_DefaultCallback:	
  3323                           ; 1 bytes @ 0x4
  3324                           
  3325  0074                     ?_myButtonPressedCallback:	
  3326                           ; 1 bytes @ 0x4
  3327                           
  3328  0074                     ?_myButtonReleasedCallback:	
  3329                           ; 1 bytes @ 0x4
  3330                           
  3331  0074                     ??_DATA_PROCESS:	
  3332                           ; 1 bytes @ 0x4
  3333                           
  3334  0074                     ?_fputc:	
  3335                           ; 1 bytes @ 0x4
  3336                           
  3337  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3338                           ; 2 bytes @ 0x4
  3339                           
  3340  0074                     Button_DefaultCallback@button:	
  3341                           ; 1 bytes @ 0x4
  3342                           
  3343  0074                     myButtonPressedCallback@button:	
  3344                           ; 1 bytes @ 0x4
  3345                           
  3346  0074                     myButtonReleasedCallback@button:	
  3347                           ; 1 bytes @ 0x4
  3348                           
  3349  0074                     ___bmul@multiplier:	
  3350                           ; 1 bytes @ 0x4
  3351                           
  3352  0074                     strlen@a:	
  3353                           ; 1 bytes @ 0x4
  3354                           
  3355  0074                     fputc@c:	
  3356                           ; 1 bytes @ 0x4
  3357                           
  3358                           
  3359                           ; 2 bytes @ 0x4
  3360  0074                     	ds	1
  3361  0075                     ??_MTOUCH_Sensor_Enable:	
  3362  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3363                           ; 1 bytes @ 0x5
  3364                           
  3365  0075                     ??_Sensor_RawSample_Update:	
  3366                           ; 1 bytes @ 0x5
  3367                           
  3368  0075                     ??_Sensor_postAcquisitionProcess:	
  3369                           ; 1 bytes @ 0x5
  3370                           
  3371  0075                     ??_Sensor_autoCalibration:	
  3372                           ; 1 bytes @ 0x5
  3373                           
  3374  0075                     ??_Button_DefaultCallback:	
  3375                           ; 1 bytes @ 0x5
  3376                           
  3377  0075                     ??_memcpy:	
  3378                           ; 1 bytes @ 0x5
  3379                           
  3380  0075                     ??_myButtonPressedCallback:	
  3381                           ; 1 bytes @ 0x5
  3382                           
  3383  0075                     ??_myButtonReleasedCallback:	
  3384                           ; 1 bytes @ 0x5
  3385                           
  3386  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3387                           ; 1 bytes @ 0x5
  3388                           
  3389  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3390                           ; 1 bytes @ 0x5
  3391                           
  3392  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3393                           ; 1 bytes @ 0x5
  3394                           
  3395  0075                     MTOUCH_Button_Tick@i:	
  3396                           ; 2 bytes @ 0x5
  3397                           
  3398  0075                     strlen@s:	
  3399                           ; 1 bytes @ 0x5
  3400                           
  3401                           
  3402                           ; 1 bytes @ 0x5
  3403  0075                     	ds	1
  3404  0076                     ??_MTOUCH_Tick:	
  3405  0076                     Sensor_RawSample_Update@adcIndex:	
  3406                           ; 1 bytes @ 0x6
  3407                           
  3408  0076                     MTOUCH_Sensor_Enable@sensor:	
  3409                           ; 1 bytes @ 0x6
  3410                           
  3411  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3412                           ; 1 bytes @ 0x6
  3413                           
  3414  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3415                           ; 1 bytes @ 0x6
  3416                           
  3417  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3418                           ; 1 bytes @ 0x6
  3419                           
  3420  0076                     DATA_PROCESS@x:	
  3421                           ; 1 bytes @ 0x6
  3422                           
  3423  0076                     memcpy@tmp:	
  3424                           ; 1 bytes @ 0x6
  3425                           
  3426  0076                     fputc@fp:	
  3427                           ; 1 bytes @ 0x6
  3428                           
  3429  0076                     Sensor_postAcquisitionProcess@deviation:	
  3430                           ; 1 bytes @ 0x6
  3431                           
  3432  0076                     _Sensor_loadADCSettings$562:	
  3433                           ; 2 bytes @ 0x6
  3434                           
  3435                           
  3436                           ; 2 bytes @ 0x6
  3437  0076                     	ds	1
  3438  0077                     ??_fputc:	
  3439  0077                     ??_MTOUCH_Sensor_Initialize:	
  3440                           ; 1 bytes @ 0x7
  3441                           
  3442  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3443                           ; 1 bytes @ 0x7
  3444                           
  3445  0077                     ??_MTOUCH_Button_Initialize:	
  3446                           ; 1 bytes @ 0x7
  3447                           
  3448  0077                     Sensor_RawSample_Update@sensor:	
  3449                           ; 1 bytes @ 0x7
  3450                           
  3451  0077                     Button_Baseline_Update@button:	
  3452                           ; 1 bytes @ 0x7
  3453                           
  3454  0077                     memcpy@s:	
  3455                           ; 1 bytes @ 0x7
  3456                           
  3457                           
  3458                           ; 2 bytes @ 0x7
  3459  0077                     	ds	1
  3460  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3461  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  3462                           ; 1 bytes @ 0x8
  3463                           
  3464  0078                     Sensor_loadADCSettings@addressOffset:	
  3465                           ; 1 bytes @ 0x8
  3466                           
  3467  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3468                           ; 1 bytes @ 0x8
  3469                           
  3470                           
  3471                           ; 1 bytes @ 0x8
  3472  0078                     	ds	1
  3473  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3474  0079                     ??_Button_Reading_Update_Helper:	
  3475                           ; 1 bytes @ 0x9
  3476                           
  3477  0079                     Sensor_postAcquisitionProcess@sensor:	
  3478                           ; 1 bytes @ 0x9
  3479                           
  3480  0079                     Sensor_loadADCSettings@sensor:	
  3481                           ; 1 bytes @ 0x9
  3482                           
  3483  0079                     Sensor_autoCalibration@adcIndex:	
  3484                           ; 1 bytes @ 0x9
  3485                           
  3486  0079                     MTOUCH_Button_Initialize@name:	
  3487                           ; 1 bytes @ 0x9
  3488                           
  3489  0079                     Button_Baseline_Initialize@button:	
  3490                           ; 1 bytes @ 0x9
  3491                           
  3492  0079                     memcpy@d1:	
  3493                           ; 1 bytes @ 0x9
  3494                           
  3495                           
  3496                           ; 1 bytes @ 0x9
  3497  0079                     	ds	1
  3498  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3499  007A                     Sensor_autoCalibration@sensor:	
  3500                           ; 1 bytes @ 0xA
  3501                           
  3502  007A                     MTOUCH_Button_Initialize@button:	
  3503                           ; 1 bytes @ 0xA
  3504                           
  3505  007A                     memcpy@d:	
  3506                           ; 1 bytes @ 0xA
  3507                           
  3508                           
  3509                           ; 1 bytes @ 0xA
  3510  007A                     	ds	1
  3511  007B                     ??_MTOUCH_Button_InitializeAll:	
  3512  007B                     ?_Sensor_Acq_ExecutePacket:	
  3513                           ; 1 bytes @ 0xB
  3514                           
  3515  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3516                           ; 1 bytes @ 0xB
  3517                           
  3518  007B                     Button_Reading_Update_Helper@button:	
  3519                           ; 1 bytes @ 0xB
  3520                           
  3521                           
  3522                           ; 1 bytes @ 0xB
  3523  007B                     	ds	1
  3524  007C                     ??_Button_Reading_Update:	
  3525  007C                     ??_update_state:	
  3526                           ; 1 bytes @ 0xC
  3527                           
  3528  007C                     ??_MTOUCH_Initialize:	
  3529                           ; 1 bytes @ 0xC
  3530                           
  3531  007C                     ??_SYSTEM_Initialize:	
  3532                           ; 1 bytes @ 0xC
  3533                           
  3534                           
  3535                           	psect	cstackBANK0
  3536  0020                     __pcstackBANK0:	
  3537                           ; 1 bytes @ 0xC
  3538                           
  3539  0020                     ??_Sensor_Acq_ExecutePacket:	
  3540  0020                     ??_Button_Baseline_Initialize:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543  0020                     ?_fputs:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546  0020                     MTOUCH_Button_InitializeAll@button:	
  3547                           ; 2 bytes @ 0x0
  3548                           
  3549  0020                     Button_Deviation_Update@button:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552  0020                     Button_Reading_Update@button:	
  3553                           ; 1 bytes @ 0x0
  3554                           
  3555  0020                     fputs@fp:	
  3556                           ; 1 bytes @ 0x0
  3557                           
  3558                           
  3559                           ; 1 bytes @ 0x0
  3560  0020                     	ds	1
  3561  0021                     ??_fputs:	
  3562  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3563                           ; 1 bytes @ 0x1
  3564                           
  3565  0021                     Button_Deviation_Update@deviation:	
  3566                           ; 1 bytes @ 0x1
  3567                           
  3568                           
  3569                           ; 4 bytes @ 0x1
  3570  0021                     	ds	1
  3571  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3572                           
  3573                           ; 1 bytes @ 0x2
  3574  0022                     	ds	1
  3575  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3576                           
  3577                           ; 1 bytes @ 0x3
  3578  0023                     	ds	1
  3579  0024                     ?_Button_State_Initializing:	
  3580  0024                     ?_Button_State_NotPressed:	
  3581                           ; 1 bytes @ 0x4
  3582                           
  3583  0024                     ?_Button_State_Pressed:	
  3584                           ; 1 bytes @ 0x4
  3585                           
  3586  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3587                           ; 1 bytes @ 0x4
  3588                           
  3589  0024                     Button_State_Initializing@button:	
  3590                           ; 1 bytes @ 0x4
  3591                           
  3592  0024                     Button_State_NotPressed@button:	
  3593                           ; 1 bytes @ 0x4
  3594                           
  3595  0024                     Button_State_Pressed@button:	
  3596                           ; 1 bytes @ 0x4
  3597                           
  3598  0024                     fputs@c:	
  3599                           ; 1 bytes @ 0x4
  3600                           
  3601                           
  3602                           ; 1 bytes @ 0x4
  3603  0024                     	ds	1
  3604  0025                     ??_Button_State_Initializing:	
  3605  0025                     ??_Button_State_NotPressed:	
  3606                           ; 1 bytes @ 0x5
  3607                           
  3608  0025                     ??_Button_State_Pressed:	
  3609                           ; 1 bytes @ 0x5
  3610                           
  3611  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3612                           ; 1 bytes @ 0x5
  3613                           
  3614  0025                     fputs@i:	
  3615                           ; 1 bytes @ 0x5
  3616                           
  3617                           
  3618                           ; 2 bytes @ 0x5
  3619  0025                     	ds	1
  3620  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3621                           
  3622                           ; 1 bytes @ 0x6
  3623  0026                     	ds	1
  3624  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3625  0027                     fputs@s:	
  3626                           ; 1 bytes @ 0x7
  3627                           
  3628                           
  3629                           ; 1 bytes @ 0x7
  3630  0027                     	ds	1
  3631  0028                     ?_pad:	
  3632  0028                     pad@buf:	
  3633                           ; 2 bytes @ 0x8
  3634                           
  3635  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3636                           ; 1 bytes @ 0x8
  3637                           
  3638                           
  3639                           ; 2 bytes @ 0x8
  3640  0028                     	ds	1
  3641  0029                     ??_Button_Service:	
  3642  0029                     pad@p:	
  3643                           ; 1 bytes @ 0x9
  3644                           
  3645                           
  3646                           ; 2 bytes @ 0x9
  3647  0029                     	ds	1
  3648  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3649                           
  3650                           ; 2 bytes @ 0xA
  3651  002A                     	ds	1
  3652  002B                     ??_pad:	
  3653  002B                     Button_Service@name:	
  3654                           ; 1 bytes @ 0xB
  3655                           
  3656                           
  3657                           ; 1 bytes @ 0xB
  3658  002B                     	ds	1
  3659  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3660  002C                     Button_Service@button:	
  3661                           ; 1 bytes @ 0xC
  3662                           
  3663  002C                     pad@i:	
  3664                           ; 1 bytes @ 0xC
  3665                           
  3666                           
  3667                           ; 2 bytes @ 0xC
  3668  002C                     	ds	1
  3669  002D                     ??_MTOUCH_Button_ServiceAll:	
  3670  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3671                           ; 1 bytes @ 0xD
  3672                           
  3673                           
  3674                           ; 1 bytes @ 0xD
  3675  002D                     	ds	1
  3676  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3677  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3678                           ; 1 bytes @ 0xE
  3679                           
  3680  002E                     MTOUCH_Button_ServiceAll@button:	
  3681                           ; 1 bytes @ 0xE
  3682                           
  3683  002E                     pad@w:	
  3684                           ; 1 bytes @ 0xE
  3685                           
  3686                           
  3687                           ; 2 bytes @ 0xE
  3688  002E                     	ds	1
  3689  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3690                           
  3691                           ; 1 bytes @ 0xF
  3692  002F                     	ds	1
  3693  0030                     pad@fp:	
  3694                           
  3695                           ; 1 bytes @ 0x10
  3696  0030                     	ds	1
  3697  0031                     ?_ctoa:	
  3698  0031                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3699                           ; 2 bytes @ 0x11
  3700                           
  3701  0031                     ctoa@c:	
  3702                           ; 1 bytes @ 0x11
  3703                           
  3704                           
  3705                           ; 1 bytes @ 0x11
  3706  0031                     	ds	1
  3707  0032                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3708                           
  3709                           ; 2 bytes @ 0x12
  3710  0032                     	ds	1
  3711  0033                     ??_ctoa:	
  3712                           
  3713                           ; 1 bytes @ 0x13
  3714  0033                     	ds	1
  3715  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3716  0034                     ctoa@w:	
  3717                           ; 1 bytes @ 0x14
  3718                           
  3719                           
  3720                           ; 2 bytes @ 0x14
  3721  0034                     	ds	1
  3722  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3723                           
  3724                           ; 1 bytes @ 0x15
  3725  0035                     	ds	1
  3726  0036                     ctoa@fp:	
  3727  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3728                           ; 1 bytes @ 0x16
  3729                           
  3730                           
  3731                           ; 4 bytes @ 0x16
  3732  0036                     	ds	1
  3733  0037                     ?_vfpfcnvrt:	
  3734  0037                     vfpfcnvrt@fmt:	
  3735                           ; 2 bytes @ 0x17
  3736                           
  3737                           
  3738                           ; 1 bytes @ 0x17
  3739  0037                     	ds	1
  3740  0038                     vfpfcnvrt@ap:	
  3741                           
  3742                           ; 1 bytes @ 0x18
  3743  0038                     	ds	1
  3744  0039                     ??_vfpfcnvrt:	
  3745                           
  3746                           ; 1 bytes @ 0x19
  3747  0039                     	ds	1
  3748  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3749                           
  3750                           ; 1 bytes @ 0x1A
  3751  003A                     	ds	1
  3752  003B                     ?_Sensor_Acquisition:	
  3753  003B                     Sensor_Acquisition@sensor_adc2:	
  3754                           ; 1 bytes @ 0x1B
  3755                           
  3756                           
  3757                           ; 1 bytes @ 0x1B
  3758  003B                     	ds	1
  3759  003C                     ??_Sensor_Acquisition:	
  3760                           
  3761                           ; 1 bytes @ 0x1C
  3762  003C                     	ds	1
  3763  003D                     Sensor_Acquisition@retry:	
  3764                           
  3765                           ; 1 bytes @ 0x1D
  3766  003D                     	ds	1
  3767  003E                     Sensor_Acquisition@sensor_adc1:	
  3768  003E                     vfpfcnvrt@c:	
  3769                           ; 1 bytes @ 0x1E
  3770                           
  3771                           
  3772                           ; 1 bytes @ 0x1E
  3773  003E                     	ds	1
  3774  003F                     ??_Sensor_Service:	
  3775  003F                     vfpfcnvrt@fp:	
  3776                           ; 1 bytes @ 0x1F
  3777                           
  3778                           
  3779                           ; 1 bytes @ 0x1F
  3780  003F                     	ds	1
  3781  0040                     ?_vfprintf:	
  3782  0040                     vfprintf@fmt:	
  3783                           ; 2 bytes @ 0x20
  3784                           
  3785                           
  3786                           ; 2 bytes @ 0x20
  3787  0040                     	ds	2
  3788  0042                     Sensor_Service@scanGroup:	
  3789  0042                     vfprintf@ap:	
  3790                           ; 1 bytes @ 0x22
  3791                           
  3792                           
  3793                           ; 1 bytes @ 0x22
  3794  0042                     	ds	1
  3795  0043                     ??_vfprintf:	
  3796  0043                     Sensor_Service@error:	
  3797                           ; 1 bytes @ 0x23
  3798                           
  3799                           
  3800                           ; 1 bytes @ 0x23
  3801  0043                     	ds	1
  3802  0044                     Sensor_Service@sensor_adc1:	
  3803                           
  3804                           ; 1 bytes @ 0x24
  3805  0044                     	ds	1
  3806  0045                     Sensor_Service@sensor_adc2:	
  3807  0045                     vfprintf@fp:	
  3808                           ; 1 bytes @ 0x25
  3809                           
  3810                           
  3811                           ; 1 bytes @ 0x25
  3812  0045                     	ds	1
  3813  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3814  0046                     vfprintf@cfmt:	
  3815                           ; 1 bytes @ 0x26
  3816                           
  3817                           
  3818                           ; 2 bytes @ 0x26
  3819  0046                     	ds	1
  3820  0047                     MTOUCH_Sensor_SampleAll@group:	
  3821                           
  3822                           ; 1 bytes @ 0x27
  3823  0047                     	ds	1
  3824  0048                     ??_MTOUCH_Service_Mainloop:	
  3825  0048                     ?_printf:	
  3826                           ; 1 bytes @ 0x28
  3827                           
  3828  0048                     printf@fmt:	
  3829                           ; 2 bytes @ 0x28
  3830                           
  3831                           
  3832                           ; 2 bytes @ 0x28
  3833  0048                     	ds	4
  3834  004C                     ??_printf:	
  3835                           
  3836                           ; 1 bytes @ 0x2C
  3837  004C                     	ds	3
  3838  004F                     printf@ap:	
  3839                           
  3840                           ; 1 bytes @ 0x2F
  3841  004F                     	ds	1
  3842  0050                     ??_check_message:	
  3843                           
  3844                           ; 1 bytes @ 0x30
  3845  0050                     	ds	2
  3846  0052                     check_message@x:	
  3847                           
  3848                           ; 1 bytes @ 0x32
  3849  0052                     	ds	1
  3850                           
  3851                           	psect	maintext
  3852  006D                     __pmaintext:	
  3853 ;;
  3854 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3855 ;;
  3856 ;; *************** function _main *****************
  3857 ;; Defined at:
  3858 ;;		line 17 in file "main.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;		None
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : B1F/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3872 ;;      Params:         0       0       0       0       0       0       0       0
  3873 ;;      Locals:         0       0       0       0       0       0       0       0
  3874 ;;      Temps:          0       0       2       0       0       0       0       0
  3875 ;;      Totals:         0       0       2       0       0       0       0       0
  3876 ;;Total ram usage:        2 bytes
  3877 ;; Hardware stack levels required when called:   14
  3878 ;; This function calls:
  3879 ;;		_DATA_PROCESS
  3880 ;;		_EUSART_Read
  3881 ;;		_EUSART_is_rx_ready
  3882 ;;		_LED_PROCESS
  3883 ;;		_MTOUCH_Button_SetNotPressedCallback
  3884 ;;		_MTOUCH_Button_SetPressedCallback
  3885 ;;		_MTOUCH_Button_isPressed
  3886 ;;		_MTOUCH_Service_Mainloop
  3887 ;;		_RELAY_PROCESS
  3888 ;;		_SYSTEM_Initialize
  3889 ;;		_check_data
  3890 ;;		_check_message
  3891 ;;		_printf
  3892 ;;		_update_state
  3893 ;; This function is called by:
  3894 ;;		Startup code after reset
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           
  3899                           ;psect for function _main
  3900  006D                     _main:	
  3901                           
  3902                           ;main.c: 20:     SYSTEM_Initialize();
  3903                           
  3904                           ;incstack = 0
  3905                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3906  006D  3196  2608  3180   	fcall	_SYSTEM_Initialize
  3907                           
  3908                           ;main.c: 21:     (INTCONbits.GIE = 1);
  3909  0070  178B               	bsf	11,7	;volatile
  3910                           
  3911                           ;main.c: 22:     (INTCONbits.PEIE = 1);
  3912  0071  170B               	bsf	11,6	;volatile
  3913                           
  3914                           ;main.c: 23:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3915  0072  30B4               	movlw	low _myButtonPressedCallback
  3916  0073  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3917  0074  3017               	movlw	high _myButtonPressedCallback
  3918  0075  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3919  0076  3194  24B4  3180   	fcall	_MTOUCH_Button_SetPressedCallback
  3920                           
  3921                           ;main.c: 24:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3922  0079  306F               	movlw	low _myButtonReleasedCallback
  3923  007A  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3924  007B  3017               	movlw	high _myButtonReleasedCallback
  3925  007C  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3926  007D  3194  24AE  3180   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3927  0080  0022               	movlb	2	; select bank2
  3928  0081  110C               	bcf	12,2	;volatile
  3929                           
  3930                           ;main.c: 26:     config_status = 0;
  3931  0082  0020               	movlb	0	; select bank0
  3932  0083  01E1               	clrf	_config_status
  3933                           
  3934                           ;main.c: 27:     last_touch_status.full_status = 0x00;
  3935  0084  01D9               	clrf	_last_touch_status
  3936  0085  01DA               	clrf	_last_touch_status+1
  3937                           
  3938                           ;main.c: 28:     LED_PROCESS(last_touch_status.full_status);
  3939  0086  0859               	movf	_last_touch_status,w
  3940  0087  318D  2575  3180   	fcall	_LED_PROCESS
  3941                           
  3942                           ;main.c: 29:     RELAY_PROCESS(last_touch_status.full_status);
  3943  008A  0020               	movlb	0	; select bank0
  3944  008B  0859               	movf	_last_touch_status,w
  3945  008C  318A  22B8  3180   	fcall	_RELAY_PROCESS
  3946                           
  3947                           ;main.c: 30:     timeout_count = 0;
  3948  008F  3000               	movlw	0
  3949  0090  0021               	movlb	1	; select bank1
  3950  0091  00BB               	movwf	(_timeout_count+3)^(0+128)
  3951  0092  3000               	movlw	0
  3952  0093  00BA               	movwf	(_timeout_count+2)^(0+128)
  3953  0094  3000               	movlw	0
  3954  0095  00B9               	movwf	(_timeout_count+1)^(0+128)
  3955  0096  3000               	movlw	0
  3956  0097  00B8               	movwf	_timeout_count^(0+128)
  3957  0098                     l6453:	
  3958                           
  3959                           ;main.c: 32:     {;main.c: 33:         if(update_state_flag == 1)
  3960  0098  0020               	movlb	0	; select bank0
  3961  0099  035D               	decf	_update_state_flag,w
  3962  009A  1D03               	btfss	3,2
  3963  009B  28A0               	goto	l6459
  3964                           
  3965                           ;main.c: 34:         {;main.c: 35:             update_state_flag = 0;
  3966  009C  01DD               	clrf	_update_state_flag
  3967                           
  3968                           ;main.c: 36:             update_state();
  3969  009D  318B  23F7  3180   	fcall	_update_state
  3970  00A0                     l6459:	
  3971                           
  3972                           ;main.c: 38:         if(EUSART_is_rx_ready())
  3973  00A0  3194  2475  3180   	fcall	_EUSART_is_rx_ready
  3974  00A3  3A00               	xorlw	0
  3975  00A4  1903               	skipnz
  3976  00A5  29A6               	goto	l6529
  3977                           
  3978                           ;main.c: 39:         {;main.c: 40:             rxData = EUSART_Read();
  3979  00A6  3197  278F  3180   	fcall	_EUSART_Read
  3980  00A9  0021               	movlb	1	; select bank1
  3981  00AA  00D9               	movwf	??_main^(0+128)
  3982  00AB  0859               	movf	??_main^(0+128),w
  3983  00AC  0020               	movlb	0	; select bank0
  3984  00AD  00E3               	movwf	_rxData
  3985                           
  3986                           ;main.c: 41:             if(check_data(rxData))
  3987  00AE  0863               	movf	_rxData,w
  3988  00AF  3189  21A2  3180   	fcall	_check_data
  3989  00B2  3A00               	xorlw	0
  3990  00B3  1903               	skipnz
  3991  00B4  29A6               	goto	l6529
  3992                           
  3993                           ;main.c: 42:             {;main.c: 43:                 if(check_request == 0)
  3994  00B5  0020               	movlb	0	; select bank0
  3995  00B6  0860               	movf	_check_request,w
  3996  00B7  1D03               	btfss	3,2
  3997  00B8  28C4               	goto	l6471
  3998                           
  3999                           ;main.c: 44:                 {;main.c: 45:                     prcData = rxData;
  4000  00B9  0863               	movf	_rxData,w
  4001  00BA  0021               	movlb	1	; select bank1
  4002  00BB  00D9               	movwf	??_main^(0+128)
  4003  00BC  0859               	movf	??_main^(0+128),w
  4004  00BD  0020               	movlb	0	; select bank0
  4005  00BE  00E2               	movwf	_prcData
  4006                           
  4007                           ;main.c: 46:                     check_message(rxData);
  4008  00BF  0863               	movf	_rxData,w
  4009  00C0  3188  2043  3180   	fcall	_check_message
  4010                           
  4011                           ;main.c: 47:                 }
  4012  00C3  29A6               	goto	l6529
  4013  00C4                     l6471:	
  4014                           
  4015                           ;main.c: 49:                 {;main.c: 50:                     if(config_status == 1)
  4016  00C4  0361               	decf	_config_status,w
  4017  00C5  1D03               	btfss	3,2
  4018  00C6  2999               	goto	l6521
  4019                           
  4020                           ;main.c: 51:                     {;main.c: 52:                         if(rxData == 'T')
  4021  00C7  3054               	movlw	84
  4022  00C8  0663               	xorwf	_rxData,w
  4023  00C9  1D03               	btfss	3,2
  4024  00CA  292F               	goto	l6497
  4025                           
  4026                           ;main.c: 53:                         {;main.c: 54:                             LED_PROCE
      +                          SS(7);
  4027  00CB  3007               	movlw	7
  4028  00CC  318D  2575  3180   	fcall	_LED_PROCESS
  4029                           
  4030                           ;main.c: 55:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4031  00CF  3015               	movlw	21
  4032  00D0  0021               	movlb	1	; select bank1
  4033  00D1  00DA               	movwf	(??_main^(0+128)+1)
  4034  00D2  304B               	movlw	75
  4035  00D3  00D9               	movwf	??_main^(0+128)
  4036  00D4  30BE               	movlw	190
  4037  00D5                     u5567:	
  4038  00D5  0B89               	decfsz	9,f
  4039  00D6  28D5               	goto	u5567
  4040  00D7  0BD9               	decfsz	??_main^(0+128),f
  4041  00D8  28D5               	goto	u5567
  4042  00D9  0BDA               	decfsz	(??_main^(0+128)+1),f
  4043  00DA  28D5               	goto	u5567
  4044  00DB  0000               	nop
  4045                           
  4046                           ;main.c: 56:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4047  00DC  3015               	movlw	21
  4048  00DD  0021               	movlb	1	; select bank1
  4049  00DE  00DA               	movwf	(??_main^(0+128)+1)
  4050  00DF  304B               	movlw	75
  4051  00E0  00D9               	movwf	??_main^(0+128)
  4052  00E1  30BE               	movlw	190
  4053  00E2                     u5577:	
  4054  00E2  0B89               	decfsz	9,f
  4055  00E3  28E2               	goto	u5577
  4056  00E4  0BD9               	decfsz	??_main^(0+128),f
  4057  00E5  28E2               	goto	u5577
  4058  00E6  0BDA               	decfsz	(??_main^(0+128)+1),f
  4059  00E7  28E2               	goto	u5577
  4060  00E8  0000               	nop
  4061                           
  4062                           ;main.c: 57:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4063  00E9  3015               	movlw	21
  4064  00EA  0021               	movlb	1	; select bank1
  4065  00EB  00DA               	movwf	(??_main^(0+128)+1)
  4066  00EC  304B               	movlw	75
  4067  00ED  00D9               	movwf	??_main^(0+128)
  4068  00EE  30BE               	movlw	190
  4069  00EF                     u5587:	
  4070  00EF  0B89               	decfsz	9,f
  4071  00F0  28EF               	goto	u5587
  4072  00F1  0BD9               	decfsz	??_main^(0+128),f
  4073  00F2  28EF               	goto	u5587
  4074  00F3  0BDA               	decfsz	(??_main^(0+128)+1),f
  4075  00F4  28EF               	goto	u5587
  4076  00F5  0000               	nop
  4077                           
  4078                           ;main.c: 58:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4079  00F6  3015               	movlw	21
  4080  00F7  0021               	movlb	1	; select bank1
  4081  00F8  00DA               	movwf	(??_main^(0+128)+1)
  4082  00F9  304B               	movlw	75
  4083  00FA  00D9               	movwf	??_main^(0+128)
  4084  00FB  30BE               	movlw	190
  4085  00FC                     u5597:	
  4086  00FC  0B89               	decfsz	9,f
  4087  00FD  28FC               	goto	u5597
  4088  00FE  0BD9               	decfsz	??_main^(0+128),f
  4089  00FF  28FC               	goto	u5597
  4090  0100  0BDA               	decfsz	(??_main^(0+128)+1),f
  4091  0101  28FC               	goto	u5597
  4092  0102  0000               	nop
  4093                           
  4094                           ;main.c: 59:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4095  0103  3015               	movlw	21
  4096  0104  0021               	movlb	1	; select bank1
  4097  0105  00DA               	movwf	(??_main^(0+128)+1)
  4098  0106  304B               	movlw	75
  4099  0107  00D9               	movwf	??_main^(0+128)
  4100  0108  30BE               	movlw	190
  4101  0109                     u5607:	
  4102  0109  0B89               	decfsz	9,f
  4103  010A  2909               	goto	u5607
  4104  010B  0BD9               	decfsz	??_main^(0+128),f
  4105  010C  2909               	goto	u5607
  4106  010D  0BDA               	decfsz	(??_main^(0+128)+1),f
  4107  010E  2909               	goto	u5607
  4108  010F  0000               	nop
  4109                           
  4110                           ;main.c: 60:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4111  0110  3015               	movlw	21
  4112  0111  0021               	movlb	1	; select bank1
  4113  0112  00DA               	movwf	(??_main^(0+128)+1)
  4114  0113  304B               	movlw	75
  4115  0114  00D9               	movwf	??_main^(0+128)
  4116  0115  30BE               	movlw	190
  4117  0116                     u5617:	
  4118  0116  0B89               	decfsz	9,f
  4119  0117  2916               	goto	u5617
  4120  0118  0BD9               	decfsz	??_main^(0+128),f
  4121  0119  2916               	goto	u5617
  4122  011A  0BDA               	decfsz	(??_main^(0+128)+1),f
  4123  011B  2916               	goto	u5617
  4124  011C  0000               	nop
  4125                           
  4126                           ;main.c: 61:                             config_status = 0;
  4127  011D  0020               	movlb	0	; select bank0
  4128  011E  01E1               	clrf	_config_status
  4129                           
  4130                           ;main.c: 62:                             check_request = 0;
  4131  011F  01E0               	clrf	_check_request
  4132                           
  4133                           ;main.c: 63:                             timeout_count = 0;
  4134  0120  3000               	movlw	0
  4135  0121  0021               	movlb	1	; select bank1
  4136  0122  00BB               	movwf	(_timeout_count+3)^(0+128)
  4137  0123  3000               	movlw	0
  4138  0124  00BA               	movwf	(_timeout_count+2)^(0+128)
  4139  0125  3000               	movlw	0
  4140  0126  00B9               	movwf	(_timeout_count+1)^(0+128)
  4141  0127  3000               	movlw	0
  4142  0128  00B8               	movwf	_timeout_count^(0+128)
  4143                           
  4144                           ;main.c: 64:                             LED_PROCESS(last_touch_status.full_status);
  4145  0129  0020               	movlb	0	; select bank0
  4146  012A  0859               	movf	_last_touch_status,w
  4147  012B  318D  2575  3180   	fcall	_LED_PROCESS
  4148  012E  0001               	reset	;# 
  4149  012F                     l6497:	
  4150                           
  4151                           ;main.c: 67:                         if(rxData == 'F')
  4152  012F  3046               	movlw	70
  4153  0130  0020               	movlb	0	; select bank0
  4154  0131  0663               	xorwf	_rxData,w
  4155  0132  1D03               	btfss	3,2
  4156  0133  29A6               	goto	l6529
  4157                           
  4158                           ;main.c: 68:                         {;main.c: 69:                             LED_PROCE
      +                          SS(0);
  4159  0134  3000               	movlw	0
  4160  0135  318D  2575  3180   	fcall	_LED_PROCESS
  4161                           
  4162                           ;main.c: 70:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4163  0138  3015               	movlw	21
  4164  0139  0021               	movlb	1	; select bank1
  4165  013A  00DA               	movwf	(??_main^(0+128)+1)
  4166  013B  304B               	movlw	75
  4167  013C  00D9               	movwf	??_main^(0+128)
  4168  013D  30BE               	movlw	190
  4169  013E                     u5627:	
  4170  013E  0B89               	decfsz	9,f
  4171  013F  293E               	goto	u5627
  4172  0140  0BD9               	decfsz	??_main^(0+128),f
  4173  0141  293E               	goto	u5627
  4174  0142  0BDA               	decfsz	(??_main^(0+128)+1),f
  4175  0143  293E               	goto	u5627
  4176  0144  0000               	nop
  4177                           
  4178                           ;main.c: 71:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4179  0145  3015               	movlw	21
  4180  0146  0021               	movlb	1	; select bank1
  4181  0147  00DA               	movwf	(??_main^(0+128)+1)
  4182  0148  304B               	movlw	75
  4183  0149  00D9               	movwf	??_main^(0+128)
  4184  014A  30BE               	movlw	190
  4185  014B                     u5637:	
  4186  014B  0B89               	decfsz	9,f
  4187  014C  294B               	goto	u5637
  4188  014D  0BD9               	decfsz	??_main^(0+128),f
  4189  014E  294B               	goto	u5637
  4190  014F  0BDA               	decfsz	(??_main^(0+128)+1),f
  4191  0150  294B               	goto	u5637
  4192  0151  0000               	nop
  4193                           
  4194                           ;main.c: 72:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4195  0152  3015               	movlw	21
  4196  0153  0021               	movlb	1	; select bank1
  4197  0154  00DA               	movwf	(??_main^(0+128)+1)
  4198  0155  304B               	movlw	75
  4199  0156  00D9               	movwf	??_main^(0+128)
  4200  0157  30BE               	movlw	190
  4201  0158                     u5647:	
  4202  0158  0B89               	decfsz	9,f
  4203  0159  2958               	goto	u5647
  4204  015A  0BD9               	decfsz	??_main^(0+128),f
  4205  015B  2958               	goto	u5647
  4206  015C  0BDA               	decfsz	(??_main^(0+128)+1),f
  4207  015D  2958               	goto	u5647
  4208  015E  0000               	nop
  4209                           
  4210                           ;main.c: 73:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4211  015F  3015               	movlw	21
  4212  0160  0021               	movlb	1	; select bank1
  4213  0161  00DA               	movwf	(??_main^(0+128)+1)
  4214  0162  304B               	movlw	75
  4215  0163  00D9               	movwf	??_main^(0+128)
  4216  0164  30BE               	movlw	190
  4217  0165                     u5657:	
  4218  0165  0B89               	decfsz	9,f
  4219  0166  2965               	goto	u5657
  4220  0167  0BD9               	decfsz	??_main^(0+128),f
  4221  0168  2965               	goto	u5657
  4222  0169  0BDA               	decfsz	(??_main^(0+128)+1),f
  4223  016A  2965               	goto	u5657
  4224  016B  0000               	nop
  4225                           
  4226                           ;main.c: 74:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4227  016C  3015               	movlw	21
  4228  016D  0021               	movlb	1	; select bank1
  4229  016E  00DA               	movwf	(??_main^(0+128)+1)
  4230  016F  304B               	movlw	75
  4231  0170  00D9               	movwf	??_main^(0+128)
  4232  0171  30BE               	movlw	190
  4233  0172                     u5667:	
  4234  0172  0B89               	decfsz	9,f
  4235  0173  2972               	goto	u5667
  4236  0174  0BD9               	decfsz	??_main^(0+128),f
  4237  0175  2972               	goto	u5667
  4238  0176  0BDA               	decfsz	(??_main^(0+128)+1),f
  4239  0177  2972               	goto	u5667
  4240  0178  0000               	nop
  4241                           
  4242                           ;main.c: 75:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4243  0179  3015               	movlw	21
  4244  017A  0021               	movlb	1	; select bank1
  4245  017B  00DA               	movwf	(??_main^(0+128)+1)
  4246  017C  304B               	movlw	75
  4247  017D  00D9               	movwf	??_main^(0+128)
  4248  017E  30BE               	movlw	190
  4249  017F                     u5677:	
  4250  017F  0B89               	decfsz	9,f
  4251  0180  297F               	goto	u5677
  4252  0181  0BD9               	decfsz	??_main^(0+128),f
  4253  0182  297F               	goto	u5677
  4254  0183  0BDA               	decfsz	(??_main^(0+128)+1),f
  4255  0184  297F               	goto	u5677
  4256  0185  0000               	nop
  4257                           
  4258                           ;main.c: 76:                             config_status = 0;
  4259  0186  0020               	movlb	0	; select bank0
  4260  0187  01E1               	clrf	_config_status
  4261                           
  4262                           ;main.c: 77:                             check_request = 0;
  4263  0188  01E0               	clrf	_check_request
  4264                           
  4265                           ;main.c: 78:                             timeout_count = 0;
  4266  0189  3000               	movlw	0
  4267  018A  0021               	movlb	1	; select bank1
  4268  018B  00BB               	movwf	(_timeout_count+3)^(0+128)
  4269  018C  3000               	movlw	0
  4270  018D  00BA               	movwf	(_timeout_count+2)^(0+128)
  4271  018E  3000               	movlw	0
  4272  018F  00B9               	movwf	(_timeout_count+1)^(0+128)
  4273  0190  3000               	movlw	0
  4274  0191  00B8               	movwf	_timeout_count^(0+128)
  4275                           
  4276                           ;main.c: 79:                             LED_PROCESS(last_touch_status.full_status);
  4277  0192  0020               	movlb	0	; select bank0
  4278  0193  0859               	movf	_last_touch_status,w
  4279  0194  318D  2575  3180   	fcall	_LED_PROCESS
  4280  0197  0001               	reset	;# 
  4281  0198  29A6               	goto	l6529
  4282  0199                     l6521:	
  4283                           
  4284                           ;main.c: 84:                     {;main.c: 85:                         if(rxData == 'T')
  4285  0199  3054               	movlw	84
  4286  019A  0663               	xorwf	_rxData,w
  4287  019B  1D03               	btfss	3,2
  4288  019C  29A1               	goto	l6525
  4289                           
  4290                           ;main.c: 86:                         {;main.c: 87:                             DATA_PROC
      +                          ESS(prcData);
  4291  019D  0862               	movf	_prcData,w
  4292  019E  3185  25FC  3180   	fcall	_DATA_PROCESS
  4293  01A1                     l6525:	
  4294                           
  4295                           ;main.c: 89:                         if(rxData == 'F')
  4296  01A1  3046               	movlw	70
  4297  01A2  0020               	movlb	0	; select bank0
  4298  01A3  0663               	xorwf	_rxData,w
  4299  01A4  1903               	btfsc	3,2
  4300                           
  4301                           ;main.c: 90:                         {;main.c: 91:                             check_req
      +                          uest = 0;
  4302  01A5  01E0               	clrf	_check_request
  4303  01A6                     l6529:	
  4304                           ;main.c: 95:             }
  4305                           
  4306                           
  4307                           ;main.c: 97:         if(MTOUCH_Service_Mainloop())
  4308  01A6  3197  2718  3180   	fcall	_MTOUCH_Service_Mainloop
  4309  01A9  3A00               	xorlw	0
  4310  01AA  1903               	skipnz
  4311  01AB  2898               	goto	l6453
  4312                           
  4313                           ;main.c: 98:         {;main.c: 99:             if(config_status == 0)
  4314  01AC  0020               	movlb	0	; select bank0
  4315  01AD  0861               	movf	_config_status,w
  4316  01AE  1D03               	btfss	3,2
  4317  01AF  2A80               	goto	l6587
  4318                           
  4319                           ;main.c: 100:             {;main.c: 101:                 if(check_request == 1)
  4320  01B0  0360               	decf	_check_request,w
  4321  01B1  1D03               	btfss	3,2
  4322  01B2  29CD               	goto	l6543
  4323                           
  4324                           ;main.c: 102:                 {;main.c: 103:                     timeout_count++;
  4325  01B3  3001               	movlw	1
  4326  01B4  0021               	movlb	1	; select bank1
  4327  01B5  07B8               	addwf	_timeout_count^(0+128),f
  4328  01B6  3000               	movlw	0
  4329  01B7  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4330  01B8  3000               	movlw	0
  4331  01B9  3DBA               	addwfc	(_timeout_count+2)^(0+128),f
  4332  01BA  3000               	movlw	0
  4333  01BB  3DBB               	addwfc	(_timeout_count+3)^(0+128),f
  4334                           
  4335                           ;main.c: 104:                     if(timeout_count == 30)
  4336  01BC  301E               	movlw	30
  4337  01BD  0638               	xorwf	_timeout_count^(0+128),w
  4338  01BE  0439               	iorwf	(_timeout_count+1)^(0+128),w
  4339  01BF  043A               	iorwf	(_timeout_count+2)^(0+128),w
  4340  01C0  043B               	iorwf	(_timeout_count+3)^(0+128),w
  4341  01C1  1D03               	btfss	3,2
  4342  01C2  29CD               	goto	l6543
  4343                           
  4344                           ;main.c: 105:                     {;main.c: 106:                         timeout_count =
      +                           0;
  4345  01C3  3000               	movlw	0
  4346  01C4  00BB               	movwf	(_timeout_count+3)^(0+128)
  4347  01C5  3000               	movlw	0
  4348  01C6  00BA               	movwf	(_timeout_count+2)^(0+128)
  4349  01C7  3000               	movlw	0
  4350  01C8  00B9               	movwf	(_timeout_count+1)^(0+128)
  4351  01C9  3000               	movlw	0
  4352  01CA  00B8               	movwf	_timeout_count^(0+128)
  4353                           
  4354                           ;main.c: 107:                         check_request = 0;
  4355  01CB  0020               	movlb	0	; select bank0
  4356  01CC  01E0               	clrf	_check_request
  4357  01CD                     l6543:	
  4358                           
  4359                           ;main.c: 110:                 if(MTOUCH_Button_isPressed(0) == 0 && MTOUCH_Button_isPres
      +                          sed(1) == 1 && MTOUCH_Button_isPressed(2) == 1)
  4360  01CD  3000               	movlw	0
  4361  01CE  3196  26E2  3180   	fcall	_MTOUCH_Button_isPressed
  4362  01D1  3A00               	xorlw	0
  4363  01D2  1D03               	skipz
  4364  01D3  2A7C               	goto	l6585
  4365  01D4  3001               	movlw	1
  4366  01D5  3196  26E2  3180   	fcall	_MTOUCH_Button_isPressed
  4367  01D8  3A01               	xorlw	1
  4368  01D9  1D03               	skipz
  4369  01DA  2A7C               	goto	l6585
  4370  01DB  3002               	movlw	2
  4371  01DC  3196  26E2  3180   	fcall	_MTOUCH_Button_isPressed
  4372  01DF  3A01               	xorlw	1
  4373  01E0  1D03               	skipz
  4374  01E1  2A7C               	goto	l6585
  4375                           
  4376                           ;main.c: 111:                 {;main.c: 112:                     count_conf++;
  4377  01E2  3001               	movlw	1
  4378  01E3  0021               	movlb	1	; select bank1
  4379  01E4  07C2               	addwf	_count_conf^(0+128),f
  4380  01E5  3000               	movlw	0
  4381  01E6  3DC3               	addwfc	(_count_conf+1)^(0+128),f
  4382                           
  4383                           ;main.c: 113:                     if(count_conf == 1800)
  4384  01E7  3008               	movlw	8
  4385  01E8  0642               	xorwf	_count_conf^(0+128),w
  4386  01E9  3007               	movlw	7
  4387  01EA  1903               	skipnz
  4388  01EB  0643               	xorwf	(_count_conf+1)^(0+128),w
  4389  01EC  1D03               	btfss	3,2
  4390  01ED  2898               	goto	l6453
  4391                           
  4392                           ;main.c: 114:                     {;main.c: 115:                         count_conf = 0;
  4393  01EE  01C2               	clrf	_count_conf^(0+128)
  4394  01EF  01C3               	clrf	(_count_conf+1)^(0+128)
  4395                           
  4396                           ;main.c: 116:                         printf("PICSMART");
  4397  01F0  3000               	movlw	low (STR_1| (0+32768))
  4398  01F1  0020               	movlb	0	; select bank0
  4399  01F2  00C8               	movwf	printf@fmt
  4400  01F3  3098               	movlw	high (STR_1| (0+32768))
  4401  01F4  00C9               	movwf	printf@fmt+1
  4402  01F5  3195  25D3  3180   	fcall	_printf
  4403                           
  4404                           ;main.c: 117:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4405  01F8  3015               	movlw	21
  4406  01F9  0021               	movlb	1	; select bank1
  4407  01FA  00DA               	movwf	(??_main^(0+128)+1)
  4408  01FB  304B               	movlw	75
  4409  01FC  00D9               	movwf	??_main^(0+128)
  4410  01FD  30BE               	movlw	190
  4411  01FE                     u5687:	
  4412  01FE  0B89               	decfsz	9,f
  4413  01FF  29FE               	goto	u5687
  4414  0200  0BD9               	decfsz	??_main^(0+128),f
  4415  0201  29FE               	goto	u5687
  4416  0202  0BDA               	decfsz	(??_main^(0+128)+1),f
  4417  0203  29FE               	goto	u5687
  4418  0204  0000               	nop
  4419                           
  4420                           ;main.c: 118:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4421  0205  3015               	movlw	21
  4422  0206  0021               	movlb	1	; select bank1
  4423  0207  00DA               	movwf	(??_main^(0+128)+1)
  4424  0208  304B               	movlw	75
  4425  0209  00D9               	movwf	??_main^(0+128)
  4426  020A  30BE               	movlw	190
  4427  020B                     u5697:	
  4428  020B  0B89               	decfsz	9,f
  4429  020C  2A0B               	goto	u5697
  4430  020D  0BD9               	decfsz	??_main^(0+128),f
  4431  020E  2A0B               	goto	u5697
  4432  020F  0BDA               	decfsz	(??_main^(0+128)+1),f
  4433  0210  2A0B               	goto	u5697
  4434  0211  0000               	nop
  4435                           
  4436                           ;main.c: 119:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4437  0212  3015               	movlw	21
  4438  0213  0021               	movlb	1	; select bank1
  4439  0214  00DA               	movwf	(??_main^(0+128)+1)
  4440  0215  304B               	movlw	75
  4441  0216  00D9               	movwf	??_main^(0+128)
  4442  0217  30BE               	movlw	190
  4443  0218                     u5707:	
  4444  0218  0B89               	decfsz	9,f
  4445  0219  2A18               	goto	u5707
  4446  021A  0BD9               	decfsz	??_main^(0+128),f
  4447  021B  2A18               	goto	u5707
  4448  021C  0BDA               	decfsz	(??_main^(0+128)+1),f
  4449  021D  2A18               	goto	u5707
  4450  021E  0000               	nop
  4451                           
  4452                           ;main.c: 120:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4453  021F  3015               	movlw	21
  4454  0220  0021               	movlb	1	; select bank1
  4455  0221  00DA               	movwf	(??_main^(0+128)+1)
  4456  0222  304B               	movlw	75
  4457  0223  00D9               	movwf	??_main^(0+128)
  4458  0224  30BE               	movlw	190
  4459  0225                     u5717:	
  4460  0225  0B89               	decfsz	9,f
  4461  0226  2A25               	goto	u5717
  4462  0227  0BD9               	decfsz	??_main^(0+128),f
  4463  0228  2A25               	goto	u5717
  4464  0229  0BDA               	decfsz	(??_main^(0+128)+1),f
  4465  022A  2A25               	goto	u5717
  4466  022B  0000               	nop
  4467                           
  4468                           ;main.c: 121:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4469  022C  3015               	movlw	21
  4470  022D  0021               	movlb	1	; select bank1
  4471  022E  00DA               	movwf	(??_main^(0+128)+1)
  4472  022F  304B               	movlw	75
  4473  0230  00D9               	movwf	??_main^(0+128)
  4474  0231  30BE               	movlw	190
  4475  0232                     u5727:	
  4476  0232  0B89               	decfsz	9,f
  4477  0233  2A32               	goto	u5727
  4478  0234  0BD9               	decfsz	??_main^(0+128),f
  4479  0235  2A32               	goto	u5727
  4480  0236  0BDA               	decfsz	(??_main^(0+128)+1),f
  4481  0237  2A32               	goto	u5727
  4482  0238  0000               	nop
  4483                           
  4484                           ;main.c: 122:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4485  0239  3015               	movlw	21
  4486  023A  0021               	movlb	1	; select bank1
  4487  023B  00DA               	movwf	(??_main^(0+128)+1)
  4488  023C  304B               	movlw	75
  4489  023D  00D9               	movwf	??_main^(0+128)
  4490  023E  30BE               	movlw	190
  4491  023F                     u5737:	
  4492  023F  0B89               	decfsz	9,f
  4493  0240  2A3F               	goto	u5737
  4494  0241  0BD9               	decfsz	??_main^(0+128),f
  4495  0242  2A3F               	goto	u5737
  4496  0243  0BDA               	decfsz	(??_main^(0+128)+1),f
  4497  0244  2A3F               	goto	u5737
  4498  0245  0000               	nop
  4499                           
  4500                           ;main.c: 123:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4501  0246  3015               	movlw	21
  4502  0247  0021               	movlb	1	; select bank1
  4503  0248  00DA               	movwf	(??_main^(0+128)+1)
  4504  0249  304B               	movlw	75
  4505  024A  00D9               	movwf	??_main^(0+128)
  4506  024B  30BE               	movlw	190
  4507  024C                     u5747:	
  4508  024C  0B89               	decfsz	9,f
  4509  024D  2A4C               	goto	u5747
  4510  024E  0BD9               	decfsz	??_main^(0+128),f
  4511  024F  2A4C               	goto	u5747
  4512  0250  0BDA               	decfsz	(??_main^(0+128)+1),f
  4513  0251  2A4C               	goto	u5747
  4514  0252  0000               	nop
  4515                           
  4516                           ;main.c: 124:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4517  0253  3015               	movlw	21
  4518  0254  0021               	movlb	1	; select bank1
  4519  0255  00DA               	movwf	(??_main^(0+128)+1)
  4520  0256  304B               	movlw	75
  4521  0257  00D9               	movwf	??_main^(0+128)
  4522  0258  30BE               	movlw	190
  4523  0259                     u5757:	
  4524  0259  0B89               	decfsz	9,f
  4525  025A  2A59               	goto	u5757
  4526  025B  0BD9               	decfsz	??_main^(0+128),f
  4527  025C  2A59               	goto	u5757
  4528  025D  0BDA               	decfsz	(??_main^(0+128)+1),f
  4529  025E  2A59               	goto	u5757
  4530  025F  0000               	nop
  4531                           
  4532                           ;main.c: 125:                         printf("RUN\r\n");
  4533  0260  3009               	movlw	low (STR_2| (0+32768))
  4534  0261  0020               	movlb	0	; select bank0
  4535  0262  00C8               	movwf	printf@fmt
  4536  0263  3098               	movlw	high (STR_2| (0+32768))
  4537  0264  00C9               	movwf	printf@fmt+1
  4538  0265  3195  25D3  3180   	fcall	_printf
  4539                           
  4540                           ;main.c: 126:                         config_status = 1;
  4541  0268  0020               	movlb	0	; select bank0
  4542  0269  01E1               	clrf	_config_status
  4543  026A  0AE1               	incf	_config_status,f
  4544                           
  4545                           ;main.c: 127:                         check_request = 1;
  4546  026B  01E0               	clrf	_check_request
  4547  026C  0AE0               	incf	_check_request,f
  4548                           
  4549                           ;main.c: 128:                         timeout_count = 0;
  4550  026D  3000               	movlw	0
  4551  026E  0021               	movlb	1	; select bank1
  4552  026F  00BB               	movwf	(_timeout_count+3)^(0+128)
  4553  0270  3000               	movlw	0
  4554  0271  00BA               	movwf	(_timeout_count+2)^(0+128)
  4555  0272  3000               	movlw	0
  4556  0273  00B9               	movwf	(_timeout_count+1)^(0+128)
  4557  0274  3000               	movlw	0
  4558  0275  00B8               	movwf	_timeout_count^(0+128)
  4559                           
  4560                           ;main.c: 129:                         LED_PROCESS(0);
  4561  0276  3000               	movlw	0
  4562  0277  318D  2575  3180   	fcall	_LED_PROCESS
  4563                           
  4564                           ;main.c: 130:                         blink = 0;
  4565  027A  0020               	movlb	0	; select bank0
  4566  027B  2AD8               	goto	L1
  4567  027C                     l6585:	
  4568                           
  4569                           ;main.c: 134:                 {;main.c: 135:                     count_conf = 0;
  4570  027C  0021               	movlb	1	; select bank1
  4571  027D  01C2               	clrf	_count_conf^(0+128)
  4572  027E  01C3               	clrf	(_count_conf+1)^(0+128)
  4573                           
  4574                           ;main.c: 137:             }
  4575                           
  4576                           ;main.c: 136:                 }
  4577  027F  2898               	goto	l6453
  4578  0280                     l6587:	
  4579                           
  4580                           ;main.c: 139:             {;main.c: 140:                 if(check_request == 1)
  4581  0280  0360               	decf	_check_request,w
  4582  0281  1D03               	btfss	3,2
  4583  0282  2898               	goto	l6453
  4584                           
  4585                           ;main.c: 141:                 {;main.c: 142:                     timeout_count++;
  4586  0283  3001               	movlw	1
  4587  0284  0021               	movlb	1	; select bank1
  4588  0285  07B8               	addwf	_timeout_count^(0+128),f
  4589  0286  3000               	movlw	0
  4590  0287  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4591  0288  3000               	movlw	0
  4592  0289  3DBA               	addwfc	(_timeout_count+2)^(0+128),f
  4593  028A  3000               	movlw	0
  4594  028B  3DBB               	addwfc	(_timeout_count+3)^(0+128),f
  4595                           
  4596                           ;main.c: 143:                     if(timeout_count >= 30000)
  4597  028C  083B               	movf	(_timeout_count+3)^(0+128),w
  4598  028D  1D03               	btfss	3,2
  4599  028E  2A98               	goto	l6593
  4600  028F  083A               	movf	(_timeout_count+2)^(0+128),w
  4601  0290  1D03               	btfss	3,2
  4602  0291  2A98               	goto	l6593
  4603  0292  3030               	movlw	48
  4604  0293  0238               	subwf	_timeout_count^(0+128),w
  4605  0294  3075               	movlw	117
  4606  0295  3B39               	subwfb	(_timeout_count+1)^(0+128),w
  4607  0296  1C03               	btfss	3,0
  4608  0297  2AB9               	goto	l6605
  4609  0298                     l6593:	
  4610                           
  4611                           ;main.c: 144:                     {;main.c: 146:                         LED_PROCESS(0);
  4612  0298  3000               	movlw	0
  4613  0299  318D  2575  3180   	fcall	_LED_PROCESS
  4614                           
  4615                           ;main.c: 148:                         if(timeout_count >= 32000)
  4616  029C  0021               	movlb	1	; select bank1
  4617  029D  083B               	movf	(_timeout_count+3)^(0+128),w
  4618  029E  1D03               	btfss	3,2
  4619  029F  2AA7               	goto	l6597
  4620  02A0  083A               	movf	(_timeout_count+2)^(0+128),w
  4621  02A1  1D03               	btfss	3,2
  4622  02A2  2AA7               	goto	l6597
  4623  02A3  307D               	movlw	125
  4624  02A4  0239               	subwf	(_timeout_count+1)^(0+128),w
  4625  02A5  1C03               	btfss	3,0
  4626  02A6  2898               	goto	l6453
  4627  02A7                     l6597:	
  4628                           
  4629                           ;main.c: 149:                         {;main.c: 150:                             timeout
      +                          _count = 0;
  4630  02A7  3000               	movlw	0
  4631  02A8  00BB               	movwf	(_timeout_count+3)^(0+128)
  4632  02A9  3000               	movlw	0
  4633  02AA  00BA               	movwf	(_timeout_count+2)^(0+128)
  4634  02AB  3000               	movlw	0
  4635  02AC  00B9               	movwf	(_timeout_count+1)^(0+128)
  4636  02AD  3000               	movlw	0
  4637  02AE  00B8               	movwf	_timeout_count^(0+128)
  4638                           
  4639                           ;main.c: 151:                             LED_PROCESS(last_touch_status.full_status);
  4640  02AF  0020               	movlb	0	; select bank0
  4641  02B0  0859               	movf	_last_touch_status,w
  4642  02B1  318D  2575  3180   	fcall	_LED_PROCESS
  4643                           
  4644                           ;main.c: 152:                             check_request = 0;
  4645  02B4  0020               	movlb	0	; select bank0
  4646  02B5  01E0               	clrf	_check_request
  4647                           
  4648                           ;main.c: 153:                             config_status = 0;
  4649  02B6  01E1               	clrf	_config_status
  4650  02B7  0001               	reset	;# 
  4651  02B8  2898               	goto	l6453
  4652  02B9                     l6605:	
  4653                           
  4654                           ;main.c: 158:                     {;main.c: 159:                         blink_count++;
  4655  02B9  3001               	movlw	1
  4656  02BA  00D9               	movwf	??_main^(0+128)
  4657  02BB  0859               	movf	??_main^(0+128),w
  4658  02BC  0020               	movlb	0	; select bank0
  4659  02BD  07DE               	addwf	_blink_count,f
  4660                           
  4661                           ;main.c: 160:                         if(blink == 0)
  4662  02BE  085F               	movf	_blink,w
  4663  02BF  1D03               	btfss	3,2
  4664  02C0  2ACE               	goto	l6615
  4665                           
  4666                           ;main.c: 161:                         {;main.c: 162:                             LED_PRO
      +                          CESS(0);
  4667  02C1  3000               	movlw	0
  4668  02C2  318D  2575  3180   	fcall	_LED_PROCESS
  4669                           
  4670                           ;main.c: 163:                             if(blink_count == 200)
  4671  02C5  30C8               	movlw	200
  4672  02C6  0020               	movlb	0	; select bank0
  4673  02C7  065E               	xorwf	_blink_count,w
  4674  02C8  1D03               	btfss	3,2
  4675  02C9  2898               	goto	l6453
  4676                           
  4677                           ;main.c: 164:                             {;main.c: 165:                                
      +                           blink_count = 0;
  4678  02CA  01DE               	clrf	_blink_count
  4679                           
  4680                           ;main.c: 166:                                 blink = 1;
  4681  02CB  01DF               	clrf	_blink
  4682  02CC  0ADF               	incf	_blink,f
  4683  02CD  2898               	goto	l6453
  4684  02CE                     l6615:	
  4685                           
  4686                           ;main.c: 170:                         {;main.c: 171:                             LED_PRO
      +                          CESS(7);
  4687  02CE  3007               	movlw	7
  4688  02CF  318D  2575  3180   	fcall	_LED_PROCESS
  4689                           
  4690                           ;main.c: 172:                             if(blink_count == 200)
  4691  02D2  30C8               	movlw	200
  4692  02D3  0020               	movlb	0	; select bank0
  4693  02D4  065E               	xorwf	_blink_count,w
  4694  02D5  1D03               	btfss	3,2
  4695  02D6  2898               	goto	l6453
  4696                           
  4697                           ;main.c: 173:                             {;main.c: 174:                                
      +                           blink_count = 0;
  4698  02D7  01DE               	clrf	_blink_count
  4699  02D8                     L1:	
  4700                           
  4701                           ;main.c: 175:                                 blink = 0;
  4702  02D8  01DF               	clrf	_blink
  4703  02D9  2898               	goto	l6453
  4704  02DA                     __end_of_main:	
  4705                           
  4706                           	psect	text1
  4707  0BF7                     __ptext1:	
  4708 ;; *************** function _update_state *****************
  4709 ;; Defined at:
  4710 ;;		line 212 in file "main.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;		None
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;		None
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  1    wreg      void 
  4717 ;; Registers used:
  4718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4724 ;;      Params:         0       0       0       0       0       0       0       0
  4725 ;;      Locals:         0       0       0       0       0       0       0       0
  4726 ;;      Temps:          0       0       0       0       0       0       0       0
  4727 ;;      Totals:         0       0       0       0       0       0       0       0
  4728 ;;Total ram usage:        0 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:   13
  4731 ;; This function calls:
  4732 ;;		_printf
  4733 ;; This function is called by:
  4734 ;;		_main
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           
  4739                           ;psect for function _update_state
  4740  0BF7                     _update_state:	
  4741                           
  4742                           ;main.c: 214:     switch(last_touch_status.full_status)
  4743                           
  4744                           ;incstack = 0
  4745                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4746  0BF7  2C30               	goto	l6331
  4747  0BF8                     l6313:	
  4748  0BF8  3014               	movlw	low (STR_3| (0+32768))
  4749  0BF9  00C8               	movwf	printf@fmt
  4750  0BFA  3098               	movlw	high (STR_3| (0+32768))
  4751  0BFB  00C9               	movwf	printf@fmt+1
  4752  0BFC  3195  25D3         	fcall	_printf
  4753  0BFE  0008               	return
  4754  0BFF                     l6315:	
  4755  0BFF  3019               	movlw	low (STR_4| (0+32768))
  4756  0C00  00C8               	movwf	printf@fmt
  4757  0C01  3098               	movlw	high (STR_4| (0+32768))
  4758  0C02  00C9               	movwf	printf@fmt+1
  4759  0C03  3195  25D3         	fcall	_printf
  4760  0C05  0008               	return
  4761  0C06                     l6317:	
  4762  0C06  301E               	movlw	low (STR_5| (0+32768))
  4763  0C07  00C8               	movwf	printf@fmt
  4764  0C08  3098               	movlw	high (STR_5| (0+32768))
  4765  0C09  00C9               	movwf	printf@fmt+1
  4766  0C0A  3195  25D3         	fcall	_printf
  4767  0C0C  0008               	return
  4768  0C0D                     l6319:	
  4769  0C0D  3023               	movlw	low (STR_6| (0+32768))
  4770  0C0E  00C8               	movwf	printf@fmt
  4771  0C0F  3098               	movlw	high (STR_6| (0+32768))
  4772  0C10  00C9               	movwf	printf@fmt+1
  4773  0C11  3195  25D3         	fcall	_printf
  4774  0C13  0008               	return
  4775  0C14                     l6321:	
  4776  0C14  3028               	movlw	low (STR_7| (0+32768))
  4777  0C15  00C8               	movwf	printf@fmt
  4778  0C16  3098               	movlw	high (STR_7| (0+32768))
  4779  0C17  00C9               	movwf	printf@fmt+1
  4780  0C18  3195  25D3         	fcall	_printf
  4781  0C1A  0008               	return
  4782  0C1B                     l6323:	
  4783  0C1B  302D               	movlw	low (STR_8| (0+32768))
  4784  0C1C  00C8               	movwf	printf@fmt
  4785  0C1D  3098               	movlw	high (STR_8| (0+32768))
  4786  0C1E  00C9               	movwf	printf@fmt+1
  4787  0C1F  3195  25D3         	fcall	_printf
  4788  0C21  0008               	return
  4789  0C22                     l6325:	
  4790  0C22  3032               	movlw	low (STR_9| (0+32768))
  4791  0C23  00C8               	movwf	printf@fmt
  4792  0C24  3098               	movlw	high (STR_9| (0+32768))
  4793  0C25  00C9               	movwf	printf@fmt+1
  4794  0C26  3195  25D3         	fcall	_printf
  4795  0C28  0008               	return
  4796  0C29                     l6327:	
  4797  0C29  3037               	movlw	low (STR_10| (0+32768))
  4798  0C2A  00C8               	movwf	printf@fmt
  4799  0C2B  3098               	movlw	high (STR_10| (0+32768))
  4800  0C2C  00C9               	movwf	printf@fmt+1
  4801  0C2D  3195  25D3         	fcall	_printf
  4802  0C2F  0008               	return
  4803  0C30                     l6331:	
  4804                           
  4805                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4806                           ; Switch size 1, requested type "simple"
  4807                           ; Number of cases is 1, Range of values is 0 to 0
  4808                           ; switch strategies available:
  4809                           ; Name         Instructions Cycles
  4810                           ; simple_byte            4     3 (average)
  4811                           ; direct_byte            8     6 (fixed)
  4812                           ; jumptable            260     6 (fixed)
  4813                           ;	Chosen strategy is simple_byte
  4814  0C30  0020               	movlb	0	; select bank0
  4815  0C31  085A               	movf	_last_touch_status+1,w
  4816  0C32  3A00               	xorlw	0	; case 0
  4817  0C33  1903               	skipnz
  4818  0C34  2C36               	goto	l6801
  4819  0C35  2C50               	goto	l1032
  4820  0C36                     l6801:	
  4821                           
  4822                           ; Switch size 1, requested type "simple"
  4823                           ; Number of cases is 8, Range of values is 0 to 7
  4824                           ; switch strategies available:
  4825                           ; Name         Instructions Cycles
  4826                           ; direct_byte           22     6 (fixed)
  4827                           ; simple_byte           25    13 (average)
  4828                           ; jumptable            260     6 (fixed)
  4829                           ;	Chosen strategy is simple_byte
  4830  0C36  0859               	movf	_last_touch_status,w
  4831  0C37  3A00               	xorlw	0	; case 0
  4832  0C38  1903               	skipnz
  4833  0C39  2BF8               	goto	l6313
  4834  0C3A  3A01               	xorlw	1	; case 1
  4835  0C3B  1903               	skipnz
  4836  0C3C  2BFF               	goto	l6315
  4837  0C3D  3A03               	xorlw	3	; case 2
  4838  0C3E  1903               	skipnz
  4839  0C3F  2C06               	goto	l6317
  4840  0C40  3A01               	xorlw	1	; case 3
  4841  0C41  1903               	skipnz
  4842  0C42  2C0D               	goto	l6319
  4843  0C43  3A07               	xorlw	7	; case 4
  4844  0C44  1903               	skipnz
  4845  0C45  2C14               	goto	l6321
  4846  0C46  3A01               	xorlw	1	; case 5
  4847  0C47  1903               	skipnz
  4848  0C48  2C1B               	goto	l6323
  4849  0C49  3A03               	xorlw	3	; case 6
  4850  0C4A  1903               	skipnz
  4851  0C4B  2C22               	goto	l6325
  4852  0C4C  3A01               	xorlw	1	; case 7
  4853  0C4D  1903               	skipnz
  4854  0C4E  2C29               	goto	l6327
  4855  0C4F  2C50               	goto	l1032
  4856  0C50                     l1032:	
  4857  0C50  0008               	return
  4858  0C51                     __end_of_update_state:	
  4859                           
  4860                           	psect	text2
  4861  0843                     __ptext2:	
  4862 ;; *************** function _check_message *****************
  4863 ;; Defined at:
  4864 ;;		line 308 in file "main.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;  x               1    wreg     unsigned char 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  x               1   50[BANK0 ] unsigned char 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      void 
  4871 ;; Registers used:
  4872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4878 ;;      Params:         0       0       0       0       0       0       0       0
  4879 ;;      Locals:         0       1       0       0       0       0       0       0
  4880 ;;      Temps:          0       2       0       0       0       0       0       0
  4881 ;;      Totals:         0       3       0       0       0       0       0       0
  4882 ;;Total ram usage:        3 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:   13
  4885 ;; This function calls:
  4886 ;;		_printf
  4887 ;; This function is called by:
  4888 ;;		_main
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           
  4893                           ;psect for function _check_message
  4894  0843                     _check_message:	
  4895                           
  4896                           ;incstack = 0
  4897                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4898                           ;check_message@x stored from wreg
  4899  0843  0020               	movlb	0	; select bank0
  4900  0844  00D2               	movwf	check_message@x
  4901                           
  4902                           ;main.c: 308: void check_message(uint8_t x);main.c: 309: {;main.c: 310:     switch (x)
  4903  0845  2859               	goto	l6349
  4904  0846                     l6339:	
  4905                           
  4906                           ;main.c: 313:         {;main.c: 314:             check_request = 0;
  4907  0846  01E0               	clrf	_check_request
  4908                           
  4909                           ;main.c: 315:             break;
  4910  0847  0008               	return
  4911  0848                     l6343:	
  4912                           
  4913                           ;main.c: 323:         {;main.c: 324:             printf("%c",x);
  4914  0848  3040               	movlw	low (STR_11| (0+32768))
  4915  0849  00C8               	movwf	printf@fmt
  4916  084A  3098               	movlw	high (STR_11| (0+32768))
  4917  084B  00C9               	movwf	printf@fmt+1
  4918  084C  0852               	movf	check_message@x,w
  4919  084D  00D0               	movwf	??_check_message
  4920  084E  01D1               	clrf	??_check_message+1
  4921  084F  0850               	movf	??_check_message,w
  4922  0850  00CA               	movwf	?_printf+2
  4923  0851  0851               	movf	??_check_message+1,w
  4924  0852  00CB               	movwf	?_printf+3
  4925  0853  3195  25D3         	fcall	_printf
  4926                           
  4927                           ;main.c: 325:             check_request = 1;
  4928  0855  0020               	movlb	0	; select bank0
  4929  0856  01E0               	clrf	_check_request
  4930  0857  0AE0               	incf	_check_request,f
  4931                           
  4932                           ;main.c: 326:             break;
  4933  0858  0008               	return
  4934  0859                     l6349:	
  4935  0859  0852               	movf	check_message@x,w
  4936  085A  00D0               	movwf	??_check_message
  4937  085B  01D1               	clrf	??_check_message+1
  4938                           
  4939                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4940                           ; Switch size 1, requested type "simple"
  4941                           ; Number of cases is 1, Range of values is 0 to 0
  4942                           ; switch strategies available:
  4943                           ; Name         Instructions Cycles
  4944                           ; simple_byte            4     3 (average)
  4945                           ; direct_byte            8     6 (fixed)
  4946                           ; jumptable            260     6 (fixed)
  4947                           ;	Chosen strategy is simple_byte
  4948  085C  0851               	movf	??_check_message+1,w
  4949  085D  3A00               	xorlw	0	; case 0
  4950  085E  1903               	skipnz
  4951  085F  2861               	goto	l6803
  4952  0860  2848               	goto	l6343
  4953  0861                     l6803:	
  4954                           
  4955                           ; Switch size 1, requested type "simple"
  4956                           ; Number of cases is 2, Range of values is 70 to 84
  4957                           ; switch strategies available:
  4958                           ; Name         Instructions Cycles
  4959                           ; simple_byte            7     4 (average)
  4960                           ; direct_byte           39     9 (fixed)
  4961                           ; jumptable            263     9 (fixed)
  4962                           ;	Chosen strategy is simple_byte
  4963  0861  0850               	movf	??_check_message,w
  4964  0862  3A46               	xorlw	70	; case 70
  4965  0863  1903               	skipnz
  4966  0864  2846               	goto	l6339
  4967  0865  3A12               	xorlw	18	; case 84
  4968  0866  1903               	skipnz
  4969  0867  2846               	goto	l6339
  4970  0868  2848               	goto	l6343
  4971  0869  0008               	return
  4972  086A                     __end_of_check_message:	
  4973                           
  4974                           	psect	text3
  4975  15D3                     __ptext3:	
  4976 ;; *************** function _printf *****************
  4977 ;; Defined at:
  4978 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;  fmt             2   40[BANK0 ] PTR const unsigned char 
  4981 ;;		 -> STR_11(3), STR_10(5), STR_9(5), STR_8(5), 
  4982 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  4983 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  ret             2    0        int 
  4986 ;;  ap              1   47[BANK0 ] PTR void [1]
  4987 ;;		 -> ?_printf(2), 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  2   40[BANK0 ] int 
  4990 ;; Registers used:
  4991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4997 ;;      Params:         0       4       0       0       0       0       0       0
  4998 ;;      Locals:         0       3       0       0       0       0       0       0
  4999 ;;      Temps:          0       1       0       0       0       0       0       0
  5000 ;;      Totals:         0       8       0       0       0       0       0       0
  5001 ;;Total ram usage:        8 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:   12
  5004 ;; This function calls:
  5005 ;;		_vfprintf
  5006 ;; This function is called by:
  5007 ;;		_main
  5008 ;;		_update_state
  5009 ;;		_check_message
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           
  5014                           ;psect for function _printf
  5015  15D3                     _printf:	
  5016                           
  5017                           ;incstack = 0
  5018                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5019  15D3  304A               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5020  15D4  0020               	movlb	0	; select bank0
  5021  15D5  00CC               	movwf	??_printf
  5022  15D6  084C               	movf	??_printf,w
  5023  15D7  00CF               	movwf	printf@ap
  5024  15D8  0849               	movf	printf@fmt+1,w
  5025  15D9  00C1               	movwf	vfprintf@fmt+1
  5026  15DA  0848               	movf	printf@fmt,w
  5027  15DB  00C0               	movwf	vfprintf@fmt
  5028  15DC  304F               	movlw	(low (printf@ap| 0))& (0+255)
  5029  15DD  00CC               	movwf	??_printf
  5030  15DE  084C               	movf	??_printf,w
  5031  15DF  00C2               	movwf	vfprintf@ap
  5032  15E0  3000               	movlw	0
  5033  15E1  3189  2141         	fcall	_vfprintf
  5034  15E3  0008               	return
  5035  15E4                     __end_of_printf:	
  5036                           
  5037                           	psect	text4
  5038  0941                     __ptext4:	
  5039 ;; *************** function _vfprintf *****************
  5040 ;; Defined at:
  5041 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;  fp              1    wreg     PTR struct _IO_FILE
  5044 ;;		 -> NULL(0), 
  5045 ;;  fmt             2   32[BANK0 ] PTR const unsigned char 
  5046 ;;		 -> STR_11(3), STR_10(5), STR_9(5), STR_8(5), 
  5047 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5048 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5049 ;;  ap              1   34[BANK0 ] PTR PTR void 
  5050 ;;		 -> printf@ap(1), 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  fp              1   37[BANK0 ] PTR struct _IO_FILE
  5053 ;;		 -> NULL(0), 
  5054 ;;  cfmt            2   38[BANK0 ] PTR unsigned char 
  5055 ;;		 -> STR_11(3), STR_10(5), STR_9(5), STR_8(5), 
  5056 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5057 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  2   32[BANK0 ] int 
  5060 ;; Registers used:
  5061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5067 ;;      Params:         0       3       0       0       0       0       0       0
  5068 ;;      Locals:         0       3       0       0       0       0       0       0
  5069 ;;      Temps:          0       2       0       0       0       0       0       0
  5070 ;;      Totals:         0       8       0       0       0       0       0       0
  5071 ;;Total ram usage:        8 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:   11
  5074 ;; This function calls:
  5075 ;;		_vfpfcnvrt
  5076 ;; This function is called by:
  5077 ;;		_printf
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           
  5082                           ;psect for function _vfprintf
  5083  0941                     _vfprintf:	
  5084                           
  5085                           ;incstack = 0
  5086                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5087                           ;vfprintf@fp stored from wreg
  5088  0941  0020               	movlb	0	; select bank0
  5089  0942  00C5               	movwf	vfprintf@fp
  5090                           
  5091                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  5092  0943  0841               	movf	vfprintf@fmt+1,w
  5093  0944  00C7               	movwf	vfprintf@cfmt+1
  5094  0945  0840               	movf	vfprintf@fmt,w
  5095  0946  00C6               	movwf	vfprintf@cfmt
  5096                           
  5097                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  5098  0947  0021               	movlb	1	; select bank1
  5099  0948  01BC               	clrf	_nout^(0+128)
  5100  0949  01BD               	clrf	(_nout+1)^(0+128)
  5101  094A                     l6211:	
  5102                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5103                           
  5104                           
  5105                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5106  094A  0020               	movlb	0	; select bank0
  5107  094B  0846               	movf	vfprintf@cfmt,w
  5108  094C  0084               	movwf	4
  5109  094D  0847               	movf	vfprintf@cfmt+1,w
  5110  094E  0085               	movwf	5
  5111  094F  0012               	moviw fsr0++
  5112  0950  1903               	btfsc	3,2
  5113  0951  2967               	goto	l6213
  5114                           
  5115                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  5116  0952  3046               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  5117  0953  00C3               	movwf	??_vfprintf
  5118  0954  0843               	movf	??_vfprintf,w
  5119  0955  00B7               	movwf	vfpfcnvrt@fmt
  5120  0956  0842               	movf	vfprintf@ap,w
  5121  0957  00C4               	movwf	??_vfprintf+1
  5122  0958  0844               	movf	??_vfprintf+1,w
  5123  0959  00B8               	movwf	vfpfcnvrt@ap
  5124  095A  0845               	movf	vfprintf@fp,w
  5125  095B  3185  2554  3189   	fcall	_vfpfcnvrt
  5126  095E  0020               	movlb	0	; select bank0
  5127  095F  0837               	movf	?_vfpfcnvrt,w
  5128  0960  0021               	movlb	1	; select bank1
  5129  0961  07BC               	addwf	_nout^(0+128),f
  5130  0962  0020               	movlb	0	; select bank0
  5131  0963  0838               	movf	?_vfpfcnvrt+1,w
  5132  0964  0021               	movlb	1	; select bank1
  5133  0965  3DBD               	addwfc	(_nout+1)^(0+128),f
  5134  0966  294A               	goto	l6211
  5135  0967                     l6213:	
  5136                           
  5137                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  5138  0967  0021               	movlb	1	; select bank1
  5139  0968  083D               	movf	(_nout+1)^(0+128),w
  5140  0969  0020               	movlb	0	; select bank0
  5141  096A  00C1               	movwf	?_vfprintf+1
  5142  096B  0021               	movlb	1	; select bank1
  5143  096C  083C               	movf	_nout^(0+128),w
  5144  096D  0020               	movlb	0	; select bank0
  5145  096E  00C0               	movwf	?_vfprintf
  5146  096F  0008               	return
  5147  0970                     __end_of_vfprintf:	
  5148                           
  5149                           	psect	text5
  5150  0554                     __ptext5:	
  5151 ;; *************** function _vfpfcnvrt *****************
  5152 ;; Defined at:
  5153 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;  fp              1    wreg     PTR struct _IO_FILE
  5156 ;;		 -> NULL(0), 
  5157 ;;  fmt             1   23[BANK0 ] PTR PTR unsigned char 
  5158 ;;		 -> vfprintf@cfmt(2), 
  5159 ;;  ap              1   24[BANK0 ] PTR PTR void 
  5160 ;;		 -> printf@ap(1), 
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;  fp              1   31[BANK0 ] PTR struct _IO_FILE
  5163 ;;		 -> NULL(0), 
  5164 ;;  llu             8    0        unsigned long long 
  5165 ;;  ll              8    0        long long 
  5166 ;;  f               4    0        long long 
  5167 ;;  ct              3    0        unsigned char [3]
  5168 ;;  vp              2    0        PTR void 
  5169 ;;  i               2    0        int 
  5170 ;;  done            2    0        int 
  5171 ;;  cp              2    0        PTR unsigned char 
  5172 ;;  c               1   30[BANK0 ] unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;                  2   23[BANK0 ] int 
  5175 ;; Registers used:
  5176 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5182 ;;      Params:         0       2       0       0       0       0       0       0
  5183 ;;      Locals:         0       2       0       0       0       0       0       0
  5184 ;;      Temps:          0       5       0       0       0       0       0       0
  5185 ;;      Totals:         0       9       0       0       0       0       0       0
  5186 ;;Total ram usage:        9 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:   10
  5189 ;; This function calls:
  5190 ;;		_ctoa
  5191 ;;		_fputc
  5192 ;; This function is called by:
  5193 ;;		_vfprintf
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           
  5198                           ;psect for function _vfpfcnvrt
  5199  0554                     _vfpfcnvrt:	
  5200                           
  5201                           ;incstack = 0
  5202                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5203                           ;vfpfcnvrt@fp stored from wreg
  5204  0554  0020               	movlb	0	; select bank0
  5205  0555  00BF               	movwf	vfpfcnvrt@fp
  5206                           
  5207                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  5208  0556  0837               	movf	vfpfcnvrt@fmt,w
  5209  0557  0086               	movwf	6
  5210  0558  0187               	clrf	7
  5211  0559  3F40               	moviw [0]fsr1
  5212  055A  00B9               	movwf	??_vfpfcnvrt
  5213  055B  3F41               	moviw [1]fsr1
  5214  055C  00BA               	movwf	??_vfpfcnvrt+1
  5215  055D  0839               	movf	??_vfpfcnvrt,w
  5216  055E  0084               	movwf	4
  5217  055F  083A               	movf	??_vfpfcnvrt+1,w
  5218  0560  0085               	movwf	5
  5219  0561  0012               	moviw fsr0++
  5220  0562  3A25               	xorlw	37
  5221  0563  1D03               	btfss	3,2
  5222  0564  2DD9               	goto	l6117
  5223                           
  5224                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  5225  0565  0837               	movf	vfpfcnvrt@fmt,w
  5226  0566  0086               	movwf	6
  5227  0567  0187               	clrf	7
  5228  0568  3001               	movlw	1
  5229  0569  0781               	addwf	1,f
  5230  056A  3141               	addfsr 1,1
  5231  056B  1803               	skipnc
  5232  056C  0A81               	incf	1,f
  5233                           
  5234                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  5235  056D  01D7               	clrf	_width
  5236  056E  01D8               	clrf	_width+1
  5237  056F  0021               	movlb	1	; select bank1
  5238  0570  01C0               	clrf	_flags^(0+128)
  5239  0571  01C1               	clrf	(_flags+1)^(0+128)
  5240                           
  5241                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  5242  0572  30FF               	movlw	255
  5243  0573  00BE               	movwf	_prec^(0+128)
  5244  0574  30FF               	movlw	255
  5245  0575  00BF               	movwf	(_prec^(0+128)+1)
  5246                           
  5247                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  5248  0576  0020               	movlb	0	; select bank0
  5249  0577  0837               	movf	vfpfcnvrt@fmt,w
  5250  0578  0086               	movwf	6
  5251  0579  0187               	clrf	7
  5252  057A  3F40               	moviw [0]fsr1
  5253  057B  00B9               	movwf	??_vfpfcnvrt
  5254  057C  3F41               	moviw [1]fsr1
  5255  057D  00BA               	movwf	??_vfpfcnvrt+1
  5256  057E  0839               	movf	??_vfpfcnvrt,w
  5257  057F  0084               	movwf	4
  5258  0580  083A               	movf	??_vfpfcnvrt+1,w
  5259  0581  0085               	movwf	5
  5260  0582  0012               	moviw fsr0++
  5261  0583  3A63               	xorlw	99
  5262  0584  1D03               	btfss	3,2
  5263  0585  2DA7               	goto	l6101
  5264                           
  5265                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  5266  0586  0837               	movf	vfpfcnvrt@fmt,w
  5267  0587  0086               	movwf	6
  5268  0588  0187               	clrf	7
  5269  0589  3001               	movlw	1
  5270  058A  0781               	addwf	1,f
  5271  058B  3141               	addfsr 1,1
  5272  058C  1803               	skipnc
  5273  058D  0A81               	incf	1,f
  5274                           
  5275                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5276  058E  0838               	movf	vfpfcnvrt@ap,w
  5277  058F  0086               	movwf	6
  5278  0590  0187               	clrf	7
  5279  0591  0801               	movf	1,w
  5280  0592  0084               	movwf	4
  5281  0593  0185               	clrf	5
  5282  0594  3002               	movlw	2
  5283  0595  0781               	addwf	1,f
  5284  0596  0800               	movf	0,w
  5285  0597  00B9               	movwf	??_vfpfcnvrt
  5286  0598  0839               	movf	??_vfpfcnvrt,w
  5287  0599  00BE               	movwf	vfpfcnvrt@c
  5288                           
  5289                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  5290  059A  083E               	movf	vfpfcnvrt@c,w
  5291  059B  00B9               	movwf	??_vfpfcnvrt
  5292  059C  0839               	movf	??_vfpfcnvrt,w
  5293  059D  00B1               	movwf	ctoa@c
  5294  059E  083F               	movf	vfpfcnvrt@fp,w
  5295  059F  3188  2092         	fcall	_ctoa
  5296  05A1  0020               	movlb	0	; select bank0
  5297  05A2  0832               	movf	?_ctoa+1,w
  5298  05A3  00B8               	movwf	?_vfpfcnvrt+1
  5299  05A4  0831               	movf	?_ctoa,w
  5300  05A5  00B7               	movwf	?_vfpfcnvrt
  5301  05A6  0008               	return
  5302  05A7                     l6101:	
  5303                           
  5304                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  5305  05A7  0837               	movf	vfpfcnvrt@fmt,w
  5306  05A8  0086               	movwf	6
  5307  05A9  0187               	clrf	7
  5308  05AA  3F40               	moviw [0]fsr1
  5309  05AB  00B9               	movwf	??_vfpfcnvrt
  5310  05AC  3F41               	moviw [1]fsr1
  5311  05AD  00BA               	movwf	??_vfpfcnvrt+1
  5312  05AE  0839               	movf	??_vfpfcnvrt,w
  5313  05AF  0084               	movwf	4
  5314  05B0  083A               	movf	??_vfpfcnvrt+1,w
  5315  05B1  0085               	movwf	5
  5316  05B2  0012               	moviw fsr0++
  5317  05B3  3A25               	xorlw	37
  5318  05B4  1D03               	btfss	3,2
  5319  05B5  2DCE               	goto	l6111
  5320                           
  5321                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  5322  05B6  0837               	movf	vfpfcnvrt@fmt,w
  5323  05B7  0086               	movwf	6
  5324  05B8  0187               	clrf	7
  5325  05B9  3001               	movlw	1
  5326  05BA  0781               	addwf	1,f
  5327  05BB  3141               	addfsr 1,1
  5328  05BC  1803               	skipnc
  5329  05BD  0A81               	incf	1,f
  5330                           
  5331                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  5332  05BE  3025               	movlw	37
  5333  05BF  00F4               	movwf	fputc@c
  5334  05C0  3000               	movlw	0
  5335  05C1  00F5               	movwf	fputc@c+1
  5336  05C2  083F               	movf	vfpfcnvrt@fp,w
  5337  05C3  00B9               	movwf	??_vfpfcnvrt
  5338  05C4  0839               	movf	??_vfpfcnvrt,w
  5339  05C5  00F6               	movwf	fputc@fp
  5340  05C6  3189  21D4         	fcall	_fputc
  5341  05C8                     l6107:	
  5342                           
  5343                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  5344  05C8  3001               	movlw	1
  5345  05C9  0020               	movlb	0	; select bank0
  5346  05CA  00B7               	movwf	?_vfpfcnvrt
  5347  05CB  3000               	movlw	0
  5348  05CC  00B8               	movwf	?_vfpfcnvrt+1
  5349  05CD  0008               	return
  5350  05CE                     l6111:	
  5351                           
  5352                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  5353  05CE  0837               	movf	vfpfcnvrt@fmt,w
  5354  05CF  0086               	movwf	6
  5355  05D0  0187               	clrf	7
  5356  05D1  3001               	movlw	1
  5357  05D2  0781               	addwf	1,f
  5358  05D3  3141               	addfsr 1,1
  5359  05D4  1803               	skipnc
  5360  05D5  0A81               	incf	1,f
  5361                           
  5362                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  5363  05D6  01B7               	clrf	?_vfpfcnvrt
  5364  05D7  01B8               	clrf	?_vfpfcnvrt+1
  5365  05D8  0008               	return
  5366  05D9                     l6117:	
  5367                           
  5368                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  5369  05D9  0837               	movf	vfpfcnvrt@fmt,w
  5370  05DA  0086               	movwf	6
  5371  05DB  0187               	clrf	7
  5372  05DC  3F40               	moviw [0]fsr1
  5373  05DD  00B9               	movwf	??_vfpfcnvrt
  5374  05DE  3F41               	moviw [1]fsr1
  5375  05DF  00BA               	movwf	??_vfpfcnvrt+1
  5376  05E0  0839               	movf	??_vfpfcnvrt,w
  5377  05E1  0084               	movwf	4
  5378  05E2  083A               	movf	??_vfpfcnvrt+1,w
  5379  05E3  0085               	movwf	5
  5380  05E4  0800               	movf	0,w	;code access
  5381  05E5  00BB               	movwf	??_vfpfcnvrt+2
  5382  05E6  01BC               	clrf	??_vfpfcnvrt+3
  5383  05E7  083B               	movf	??_vfpfcnvrt+2,w
  5384  05E8  00F4               	movwf	fputc@c
  5385  05E9  083C               	movf	??_vfpfcnvrt+3,w
  5386  05EA  00F5               	movwf	fputc@c+1
  5387  05EB  083F               	movf	vfpfcnvrt@fp,w
  5388  05EC  00BD               	movwf	??_vfpfcnvrt+4
  5389  05ED  083D               	movf	??_vfpfcnvrt+4,w
  5390  05EE  00F6               	movwf	fputc@fp
  5391  05EF  3189  21D4  3185   	fcall	_fputc
  5392                           
  5393                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  5394  05F2  0020               	movlb	0	; select bank0
  5395  05F3  0837               	movf	vfpfcnvrt@fmt,w
  5396  05F4  0086               	movwf	6
  5397  05F5  0187               	clrf	7
  5398  05F6  3001               	movlw	1
  5399  05F7  0781               	addwf	1,f
  5400  05F8  3141               	addfsr 1,1
  5401  05F9  1803               	skipnc
  5402  05FA  0A81               	incf	1,f
  5403  05FB  2DC8               	goto	l6107
  5404  05FC                     __end_of_vfpfcnvrt:	
  5405                           
  5406                           	psect	text6
  5407  0892                     __ptext6:	
  5408 ;; *************** function _ctoa *****************
  5409 ;; Defined at:
  5410 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  fp              1    wreg     PTR struct _IO_FILE
  5413 ;;		 -> NULL(0), 
  5414 ;;  c               1   17[BANK0 ] unsigned char 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  fp              1   22[BANK0 ] PTR struct _IO_FILE
  5417 ;;		 -> NULL(0), 
  5418 ;;  w               2   20[BANK0 ] int 
  5419 ;;  l               2    0        int 
  5420 ;; Return value:  Size  Location     Type
  5421 ;;                  2   17[BANK0 ] int 
  5422 ;; Registers used:
  5423 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5424 ;; Tracked objects:
  5425 ;;		On entry : 0/0
  5426 ;;		On exit  : 0/0
  5427 ;;		Unchanged: 0/0
  5428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5429 ;;      Params:         0       2       0       0       0       0       0       0
  5430 ;;      Locals:         0       3       0       0       0       0       0       0
  5431 ;;      Temps:          0       1       0       0       0       0       0       0
  5432 ;;      Totals:         0       6       0       0       0       0       0       0
  5433 ;;Total ram usage:        6 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; Hardware stack levels required when called:    9
  5436 ;; This function calls:
  5437 ;;		_pad
  5438 ;; This function is called by:
  5439 ;;		_vfpfcnvrt
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _ctoa
  5445  0892                     _ctoa:	
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5449                           ;ctoa@fp stored from wreg
  5450  0892  0020               	movlb	0	; select bank0
  5451  0893  00B6               	movwf	ctoa@fp
  5452                           
  5453                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  5454  0894  0857               	movf	_width,w
  5455  0895  0458               	iorwf	_width+1,w
  5456  0896  1D03               	btfss	3,2
  5457  0897  289D               	goto	l5947
  5458  0898  0858               	movf	_width+1,w
  5459  0899  00B5               	movwf	ctoa@w+1
  5460  089A  0857               	movf	_width,w
  5461  089B  00B4               	movwf	ctoa@w
  5462  089C  28A3               	goto	l5949
  5463  089D                     l5947:	
  5464  089D  0857               	movf	_width,w
  5465  089E  3EFF               	addlw	255
  5466  089F  00B4               	movwf	ctoa@w
  5467  08A0  30FF               	movlw	255
  5468  08A1  3D58               	addwfc	_width+1,w
  5469  08A2  00B5               	movwf	ctoa@w+1
  5470  08A3                     l5949:	
  5471                           
  5472                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  5473  08A3  0831               	movf	ctoa@c,w
  5474  08A4  00B3               	movwf	??_ctoa
  5475  08A5  0833               	movf	??_ctoa,w
  5476  08A6  0023               	movlb	3	; select bank3
  5477  08A7  00A0               	movwf	_dbuf^(0+384)
  5478                           
  5479                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  5480  08A8  01A1               	clrf	(_dbuf^(0+384)+1)
  5481                           
  5482                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  5483  08A9  30A0               	movlw	(low (_dbuf| (0+256)))& (0+255)
  5484  08AA  0020               	movlb	0	; select bank0
  5485  08AB  00B3               	movwf	??_ctoa
  5486  08AC  0833               	movf	??_ctoa,w
  5487  08AD  00A8               	movwf	pad@buf
  5488  08AE  0835               	movf	ctoa@w+1,w
  5489  08AF  00AA               	movwf	pad@p+1
  5490  08B0  0834               	movf	ctoa@w,w
  5491  08B1  00A9               	movwf	pad@p
  5492  08B2  0836               	movf	ctoa@fp,w
  5493  08B3  318B  2352         	fcall	_pad
  5494  08B5  0020               	movlb	0	; select bank0
  5495  08B6  0829               	movf	?_pad+1,w
  5496  08B7  00B2               	movwf	?_ctoa+1
  5497  08B8  0828               	movf	?_pad,w
  5498  08B9  00B1               	movwf	?_ctoa
  5499  08BA  0008               	return
  5500  08BB                     __end_of_ctoa:	
  5501                           
  5502                           	psect	text7
  5503  0B52                     __ptext7:	
  5504 ;; *************** function _pad *****************
  5505 ;; Defined at:
  5506 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;  fp              1    wreg     PTR struct _IO_FILE
  5509 ;;		 -> NULL(0), 
  5510 ;;  buf             1    8[BANK0 ] PTR unsigned char 
  5511 ;;		 -> dbuf(32), 
  5512 ;;  p               2    9[BANK0 ] int 
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
  5515 ;;		 -> NULL(0), 
  5516 ;;  w               2   14[BANK0 ] int 
  5517 ;;  i               2   12[BANK0 ] int 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  2    8[BANK0 ] int 
  5520 ;; Registers used:
  5521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5527 ;;      Params:         0       3       0       0       0       0       0       0
  5528 ;;      Locals:         0       5       0       0       0       0       0       0
  5529 ;;      Temps:          0       1       0       0       0       0       0       0
  5530 ;;      Totals:         0       9       0       0       0       0       0       0
  5531 ;;Total ram usage:        9 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    8
  5534 ;; This function calls:
  5535 ;;		_fputc
  5536 ;;		_fputs
  5537 ;;		_strlen
  5538 ;; This function is called by:
  5539 ;;		_ctoa
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           
  5544                           ;psect for function _pad
  5545  0B52                     _pad:	
  5546                           
  5547                           ;incstack = 0
  5548                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5549                           ;pad@fp stored from wreg
  5550  0B52  0020               	movlb	0	; select bank0
  5551  0B53  00B0               	movwf	pad@fp
  5552                           
  5553                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  5554  0B54  0021               	movlb	1	; select bank1
  5555  0B55  1C40               	btfss	_flags^(0+128),0
  5556  0B56  2B60               	goto	l5855
  5557                           
  5558                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  5559  0B57  0020               	movlb	0	; select bank0
  5560  0B58  0830               	movf	pad@fp,w
  5561  0B59  00AB               	movwf	??_pad
  5562  0B5A  082B               	movf	??_pad,w
  5563  0B5B  00A0               	movwf	fputs@fp
  5564  0B5C  0828               	movf	pad@buf,w
  5565  0B5D  3197  27DA  318B   	fcall	_fputs
  5566  0B60                     l5855:	
  5567                           
  5568                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  5569  0B60  0020               	movlb	0	; select bank0
  5570  0B61  1BAA               	btfsc	pad@p+1,7
  5571  0B62  2B68               	goto	l5859
  5572  0B63  082A               	movf	pad@p+1,w
  5573  0B64  00AF               	movwf	pad@w+1
  5574  0B65  0829               	movf	pad@p,w
  5575  0B66  00AE               	movwf	pad@w
  5576  0B67  2B6A               	goto	l1305
  5577  0B68                     l5859:	
  5578  0B68  01AE               	clrf	pad@w
  5579  0B69  01AF               	clrf	pad@w+1
  5580  0B6A                     l1305:	
  5581                           
  5582                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  5583  0B6A  01AC               	clrf	pad@i
  5584  0B6B  01AD               	clrf	pad@i+1
  5585  0B6C                     l5865:	
  5586                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5587                           
  5588                           
  5589                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5590  0B6C  082D               	movf	pad@i+1,w
  5591  0B6D  3A80               	xorlw	128
  5592  0B6E  00AB               	movwf	??_pad
  5593  0B6F  082F               	movf	pad@w+1,w
  5594  0B70  3A80               	xorlw	128
  5595  0B71  022B               	subwf	??_pad,w
  5596  0B72  1D03               	skipz
  5597  0B73  2B76               	goto	u4665
  5598  0B74  082E               	movf	pad@w,w
  5599  0B75  022C               	subwf	pad@i,w
  5600  0B76                     u4665:	
  5601  0B76  1803               	btfsc	3,0
  5602  0B77  2B8A               	goto	l1308
  5603                           
  5604                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  5605  0B78  3020               	movlw	32
  5606  0B79  00F4               	movwf	fputc@c
  5607  0B7A  3000               	movlw	0
  5608  0B7B  00F5               	movwf	fputc@c+1
  5609  0B7C  0020               	movlb	0	; select bank0
  5610  0B7D  0830               	movf	pad@fp,w
  5611  0B7E  00AB               	movwf	??_pad
  5612  0B7F  082B               	movf	??_pad,w
  5613  0B80  00F6               	movwf	fputc@fp
  5614  0B81  3189  21D4  318B   	fcall	_fputc
  5615                           
  5616                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  5617  0B84  3001               	movlw	1
  5618  0B85  0020               	movlb	0	; select bank0
  5619  0B86  07AC               	addwf	pad@i,f
  5620  0B87  3000               	movlw	0
  5621  0B88  3DAD               	addwfc	pad@i+1,f
  5622  0B89  2B6C               	goto	l5865
  5623  0B8A                     l1308:	
  5624                           
  5625                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  5626  0B8A  0021               	movlb	1	; select bank1
  5627  0B8B  1840               	btfsc	_flags^(0+128),0
  5628  0B8C  2B96               	goto	l1309
  5629                           
  5630                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  5631  0B8D  0020               	movlb	0	; select bank0
  5632  0B8E  0830               	movf	pad@fp,w
  5633  0B8F  00AB               	movwf	??_pad
  5634  0B90  082B               	movf	??_pad,w
  5635  0B91  00A0               	movwf	fputs@fp
  5636  0B92  0828               	movf	pad@buf,w
  5637  0B93  3197  27DA  318B   	fcall	_fputs
  5638  0B96                     l1309:	
  5639                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
  5640                           
  5641                           
  5642                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  5643  0B96  0020               	movlb	0	; select bank0
  5644  0B97  0828               	movf	pad@buf,w
  5645  0B98  3196  26CA         	fcall	_strlen
  5646  0B9A  0020               	movlb	0	; select bank0
  5647  0B9B  082E               	movf	pad@w,w
  5648  0B9C  0771               	addwf	?_strlen,w
  5649  0B9D  00A8               	movwf	?_pad
  5650  0B9E  082F               	movf	pad@w+1,w
  5651  0B9F  3D72               	addwfc	?_strlen+1,w
  5652  0BA0  00A9               	movwf	?_pad+1
  5653  0BA1  0008               	return
  5654  0BA2                     __end_of_pad:	
  5655                           
  5656                           	psect	text8
  5657  16CA                     __ptext8:	
  5658 ;; *************** function _strlen *****************
  5659 ;; Defined at:
  5660 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  s               1    wreg     PTR const unsigned char 
  5663 ;;		 -> dbuf(32), 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  s               1    5[COMMON] PTR const unsigned char 
  5666 ;;		 -> dbuf(32), 
  5667 ;;  a               1    4[COMMON] PTR const unsigned char 
  5668 ;;		 -> dbuf(32), 
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  2    1[COMMON] unsigned int 
  5671 ;; Registers used:
  5672 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5678 ;;      Params:         2       0       0       0       0       0       0       0
  5679 ;;      Locals:         2       0       0       0       0       0       0       0
  5680 ;;      Temps:          1       0       0       0       0       0       0       0
  5681 ;;      Totals:         5       0       0       0       0       0       0       0
  5682 ;;Total ram usage:        5 bytes
  5683 ;; Hardware stack levels used:    1
  5684 ;; Hardware stack levels required when called:    4
  5685 ;; This function calls:
  5686 ;;		Nothing
  5687 ;; This function is called by:
  5688 ;;		_pad
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           
  5693                           ;psect for function _strlen
  5694  16CA                     _strlen:	
  5695                           
  5696                           ;incstack = 0
  5697                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5698                           ;strlen@s stored from wreg
  5699  16CA  00F5               	movwf	strlen@s
  5700  16CB  0875               	movf	strlen@s,w
  5701  16CC  00F3               	movwf	??_strlen
  5702  16CD  0873               	movf	??_strlen,w
  5703  16CE  00F4               	movwf	strlen@a
  5704  16CF                     l3923:	
  5705  16CF  0875               	movf	strlen@s,w
  5706  16D0  0086               	movwf	6
  5707  16D1  3001               	movlw	1	; select bank2/3
  5708  16D2  0087               	movwf	7
  5709  16D3  0801               	movf	1,w
  5710  16D4  1903               	btfsc	3,2
  5711  16D5  2EDB               	goto	l3925
  5712  16D6  3001               	movlw	1
  5713  16D7  00F3               	movwf	??_strlen
  5714  16D8  0873               	movf	??_strlen,w
  5715  16D9  07F5               	addwf	strlen@s,f
  5716  16DA  2ECF               	goto	l3923
  5717  16DB                     l3925:	
  5718  16DB  0874               	movf	strlen@a,w
  5719  16DC  0275               	subwf	strlen@s,w
  5720  16DD  00F1               	movwf	?_strlen
  5721  16DE  01F2               	clrf	?_strlen+1
  5722  16DF  1BF1               	btfsc	?_strlen,7
  5723  16E0  03F2               	decf	?_strlen+1,f
  5724  16E1  0008               	return
  5725  16E2                     __end_of_strlen:	
  5726                           
  5727                           	psect	text9
  5728  17DA                     __ptext9:	
  5729 ;; *************** function _fputs *****************
  5730 ;; Defined at:
  5731 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;  s               1    wreg     PTR const unsigned char 
  5734 ;;		 -> dbuf(32), 
  5735 ;;  fp              1    0[BANK0 ] PTR struct _IO_FILE
  5736 ;;		 -> NULL(0), 
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  5739 ;;		 -> dbuf(32), 
  5740 ;;  i               2    5[BANK0 ] int 
  5741 ;;  c               1    4[BANK0 ] unsigned char 
  5742 ;; Return value:  Size  Location     Type
  5743 ;;                  2    0[BANK0 ] int 
  5744 ;; Registers used:
  5745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5751 ;;      Params:         0       1       0       0       0       0       0       0
  5752 ;;      Locals:         0       4       0       0       0       0       0       0
  5753 ;;      Temps:          0       3       0       0       0       0       0       0
  5754 ;;      Totals:         0       8       0       0       0       0       0       0
  5755 ;;Total ram usage:        8 bytes
  5756 ;; Hardware stack levels used:    1
  5757 ;; Hardware stack levels required when called:    7
  5758 ;; This function calls:
  5759 ;;		_fputc
  5760 ;; This function is called by:
  5761 ;;		_pad
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           
  5766                           ;psect for function _fputs
  5767  17DA                     _fputs:	
  5768                           
  5769                           ;incstack = 0
  5770                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5771                           ;fputs@s stored from wreg
  5772  17DA  0020               	movlb	0	; select bank0
  5773  17DB  00A7               	movwf	fputs@s
  5774  17DC  01A5               	clrf	fputs@i
  5775  17DD  01A6               	clrf	fputs@i+1
  5776  17DE                     l5617:	
  5777  17DE  0825               	movf	fputs@i,w
  5778  17DF  0727               	addwf	fputs@s,w
  5779  17E0  00A1               	movwf	??_fputs
  5780  17E1  0821               	movf	??_fputs,w
  5781  17E2  0086               	movwf	6
  5782  17E3  3001               	movlw	1	; select bank2/3
  5783  17E4  0087               	movwf	7
  5784  17E5  0801               	movf	1,w
  5785  17E6  00A2               	movwf	??_fputs+1
  5786  17E7  0822               	movf	??_fputs+1,w
  5787  17E8  00A4               	movwf	fputs@c
  5788  17E9  0824               	movf	fputs@c,w
  5789  17EA  1903               	btfsc	3,2
  5790  17EB  0008               	return
  5791  17EC  0824               	movf	fputs@c,w
  5792  17ED  00A1               	movwf	??_fputs
  5793  17EE  01A2               	clrf	??_fputs+1
  5794  17EF  0821               	movf	??_fputs,w
  5795  17F0  00F4               	movwf	fputc@c
  5796  17F1  0822               	movf	??_fputs+1,w
  5797  17F2  00F5               	movwf	fputc@c+1
  5798  17F3  0820               	movf	fputs@fp,w
  5799  17F4  00A3               	movwf	??_fputs+2
  5800  17F5  0823               	movf	??_fputs+2,w
  5801  17F6  00F6               	movwf	fputc@fp
  5802  17F7  3189  21D4  3197   	fcall	_fputc
  5803  17FA  3001               	movlw	1
  5804  17FB  0020               	movlb	0	; select bank0
  5805  17FC  07A5               	addwf	fputs@i,f
  5806  17FD  3000               	movlw	0
  5807  17FE  3DA6               	addwfc	fputs@i+1,f
  5808  17FF  2FDE               	goto	l5617
  5809  1800                     __end_of_fputs:	
  5810                           
  5811                           	psect	text10
  5812  09D4                     __ptext10:	
  5813 ;; *************** function _fputc *****************
  5814 ;; Defined at:
  5815 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  c               2    4[COMMON] int 
  5818 ;;  fp              1    6[COMMON] PTR struct _IO_FILE
  5819 ;;		 -> NULL(0), 
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;		None
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  2    4[COMMON] int 
  5824 ;; Registers used:
  5825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5831 ;;      Params:         3       0       0       0       0       0       0       0
  5832 ;;      Locals:         0       0       0       0       0       0       0       0
  5833 ;;      Temps:          5       0       0       0       0       0       0       0
  5834 ;;      Totals:         8       0       0       0       0       0       0       0
  5835 ;;Total ram usage:        8 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    6
  5838 ;; This function calls:
  5839 ;;		_putch
  5840 ;; This function is called by:
  5841 ;;		_pad
  5842 ;;		_vfpfcnvrt
  5843 ;;		_fputs
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           
  5848                           ;psect for function _fputc
  5849  09D4                     _fputc:	
  5850                           
  5851                           ;incstack = 0
  5852                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5853  09D4  0876               	movf	fputc@fp,w
  5854  09D5  1D03               	btfss	3,2
  5855  09D6  0876               	movf	fputc@fp,w
  5856  09D7  1D03               	btfss	3,2
  5857  09D8  29DD               	goto	l3809
  5858  09D9  0874               	movf	fputc@c,w
  5859  09DA  3194  24A9         	fcall	_putch
  5860  09DC  0008               	return
  5861  09DD                     l3809:	
  5862  09DD  0876               	movf	fputc@fp,w
  5863  09DE  3E03               	addlw	3
  5864  09DF  0086               	movwf	6
  5865  09E0  0187               	clrf	7
  5866  09E1  0016               	moviw fsr1++
  5867  09E2  0401               	iorwf	1,w
  5868  09E3  1903               	btfsc	3,2
  5869  09E4  2A00               	goto	l3813
  5870  09E5  0876               	movf	fputc@fp,w
  5871  09E6  3E03               	addlw	3
  5872  09E7  0086               	movwf	6
  5873  09E8  0187               	clrf	7
  5874  09E9  3F40               	moviw [0]fsr1
  5875  09EA  00F7               	movwf	??_fputc
  5876  09EB  3F41               	moviw [1]fsr1
  5877  09EC  00F8               	movwf	??_fputc+1
  5878  09ED  0A76               	incf	fputc@fp,w
  5879  09EE  0086               	movwf	6
  5880  09EF  0187               	clrf	7
  5881  09F0  3F40               	moviw [0]fsr1
  5882  09F1  00F9               	movwf	??_fputc+2
  5883  09F2  3F41               	moviw [1]fsr1
  5884  09F3  00FA               	movwf	??_fputc+3
  5885  09F4  087A               	movf	??_fputc+3,w
  5886  09F5  3A80               	xorlw	128
  5887  09F6  00FB               	movwf	??_fputc+4
  5888  09F7  0878               	movf	??_fputc+1,w
  5889  09F8  3A80               	xorlw	128
  5890  09F9  027B               	subwf	??_fputc+4,w
  5891  09FA  1D03               	skipz
  5892  09FB  29FE               	goto	u2235
  5893  09FC  0877               	movf	??_fputc,w
  5894  09FD  0279               	subwf	??_fputc+2,w
  5895  09FE                     u2235:	
  5896  09FE  1803               	skipnc
  5897  09FF  0008               	return
  5898  0A00                     l3813:	
  5899  0A00  0A76               	incf	fputc@fp,w
  5900  0A01  0086               	movwf	6
  5901  0A02  0187               	clrf	7
  5902  0A03  3001               	movlw	1
  5903  0A04  0781               	addwf	1,f
  5904  0A05  3141               	addfsr 1,1
  5905  0A06  1803               	skipnc
  5906  0A07  0A81               	incf	1,f
  5907  0A08  0008               	return
  5908  0A09                     __end_of_fputc:	
  5909                           
  5910                           	psect	text11
  5911  14A9                     __ptext11:	
  5912 ;; *************** function _putch *****************
  5913 ;; Defined at:
  5914 ;;		line 198 in file "mcc_generated_files/eusart.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;  txData          1    wreg     unsigned char 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;  txData          1    3[COMMON] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      void 
  5921 ;; Registers used:
  5922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5928 ;;      Params:         0       0       0       0       0       0       0       0
  5929 ;;      Locals:         1       0       0       0       0       0       0       0
  5930 ;;      Temps:          0       0       0       0       0       0       0       0
  5931 ;;      Totals:         1       0       0       0       0       0       0       0
  5932 ;;Total ram usage:        1 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    5
  5935 ;; This function calls:
  5936 ;;		_EUSART_Write
  5937 ;; This function is called by:
  5938 ;;		_fputc
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           
  5943                           ;psect for function _putch
  5944  14A9                     _putch:	
  5945                           
  5946                           ;incstack = 0
  5947                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5948                           ;putch@txData stored from wreg
  5949  14A9  00F3               	movwf	putch@txData
  5950                           
  5951                           ;mcc_generated_files/eusart.c: 198: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 199: {;mcc_generated_files/eusart.c: 200:     EUSART_Write(txData);
  5952  14AA  0873               	movf	putch@txData,w
  5953  14AB  3187  27DC         	fcall	_EUSART_Write
  5954  14AD  0008               	return
  5955  14AE                     __end_of_putch:	
  5956                           
  5957                           	psect	text12
  5958  07DC                     __ptext12:	
  5959 ;; *************** function _EUSART_Write *****************
  5960 ;; Defined at:
  5961 ;;		line 170 in file "mcc_generated_files/eusart.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;  txData          1    wreg     unsigned char 
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;  txData          1    2[COMMON] unsigned char 
  5966 ;; Return value:  Size  Location     Type
  5967 ;;                  1    wreg      void 
  5968 ;; Registers used:
  5969 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5970 ;; Tracked objects:
  5971 ;;		On entry : 0/0
  5972 ;;		On exit  : 0/0
  5973 ;;		Unchanged: 0/0
  5974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5975 ;;      Params:         0       0       0       0       0       0       0       0
  5976 ;;      Locals:         1       0       0       0       0       0       0       0
  5977 ;;      Temps:          1       0       0       0       0       0       0       0
  5978 ;;      Totals:         2       0       0       0       0       0       0       0
  5979 ;;Total ram usage:        2 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    4
  5982 ;; This function calls:
  5983 ;;		Nothing
  5984 ;; This function is called by:
  5985 ;;		_putch
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           
  5990                           ;psect for function _EUSART_Write
  5991  07DC                     _EUSART_Write:	
  5992                           
  5993                           ;incstack = 0
  5994                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5995                           ;EUSART_Write@txData stored from wreg
  5996  07DC  00F2               	movwf	EUSART_Write@txData
  5997  07DD                     l3743:	
  5998                           ;mcc_generated_files/eusart.c: 170: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 171: {;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemai
      +                          ning)
  5999                           
  6000                           
  6001                           ;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemaining)
  6002  07DD  0021               	movlb	1	; select bank1
  6003  07DE  084E               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6004  07DF  1903               	btfsc	3,2
  6005  07E0  2FDD               	goto	l3743
  6006                           
  6007                           ;mcc_generated_files/eusart.c: 176:     if(0 == PIE1bits.TXIE)
  6008  07E1  1A11               	btfsc	17,4	;volatile
  6009  07E2  2FE7               	goto	l742
  6010                           
  6011                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = txData;
  6012  07E3  0872               	movf	EUSART_Write@txData,w
  6013  07E4  0023               	movlb	3	; select bank3
  6014  07E5  009A               	movwf	26	;volatile
  6015                           
  6016                           ;mcc_generated_files/eusart.c: 179:     }
  6017  07E6  2FFC               	goto	l3757
  6018  07E7                     l742:	
  6019                           ;mcc_generated_files/eusart.c: 180:     else
  6020                           
  6021                           
  6022                           ;mcc_generated_files/eusart.c: 181:     {;mcc_generated_files/eusart.c: 182:         PIE
      +                          1bits.TXIE = 0;
  6023  07E7  1211               	bcf	17,4	;volatile
  6024                           
  6025                           ;mcc_generated_files/eusart.c: 183:         eusartTxBuffer[eusartTxHead++] = txData;
  6026  07E8  0872               	movf	EUSART_Write@txData,w
  6027  07E9  00F1               	movwf	??_EUSART_Write
  6028  07EA  0020               	movlb	0	; select bank0
  6029  07EB  0868               	movf	_eusartTxHead,w
  6030  07EC  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6031  07ED  0086               	movwf	6
  6032  07EE  0187               	clrf	7
  6033  07EF  0871               	movf	??_EUSART_Write,w
  6034  07F0  0081               	movwf	1
  6035  07F1  3001               	movlw	1
  6036  07F2  00F1               	movwf	??_EUSART_Write
  6037  07F3  0871               	movf	??_EUSART_Write,w
  6038  07F4  07E8               	addwf	_eusartTxHead,f	;volatile
  6039                           
  6040                           ;mcc_generated_files/eusart.c: 184:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6041  07F5  3008               	movlw	8
  6042  07F6  0268               	subwf	_eusartTxHead,w	;volatile
  6043  07F7  1803               	btfsc	3,0
  6044                           
  6045                           ;mcc_generated_files/eusart.c: 185:         {;mcc_generated_files/eusart.c: 186:        
      +                               eusartTxHead = 0;
  6046  07F8  01E8               	clrf	_eusartTxHead	;volatile
  6047                           
  6048                           ;mcc_generated_files/eusart.c: 188:         eusartTxBufferRemaining--;
  6049  07F9  3001               	movlw	1
  6050  07FA  0021               	movlb	1	; select bank1
  6051  07FB  02CE               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  6052  07FC                     l3757:	
  6053                           
  6054                           ;mcc_generated_files/eusart.c: 190:     PIE1bits.TXIE = 1;
  6055  07FC  0021               	movlb	1	; select bank1
  6056  07FD  1611               	bsf	17,4	;volatile
  6057  07FE  0008               	return
  6058  07FF                     __end_of_EUSART_Write:	
  6059                           
  6060                           	psect	text13
  6061  09A2                     __ptext13:	
  6062 ;; *************** function _check_data *****************
  6063 ;; Defined at:
  6064 ;;		line 330 in file "main.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  x               1    wreg     unsigned char 
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;  x               1    3[COMMON] unsigned char 
  6069 ;; Return value:  Size  Location     Type
  6070 ;;                  1    wreg      _Bool 
  6071 ;; Registers used:
  6072 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6073 ;; Tracked objects:
  6074 ;;		On entry : 0/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6078 ;;      Params:         0       0       0       0       0       0       0       0
  6079 ;;      Locals:         1       0       0       0       0       0       0       0
  6080 ;;      Temps:          2       0       0       0       0       0       0       0
  6081 ;;      Totals:         3       0       0       0       0       0       0       0
  6082 ;;Total ram usage:        3 bytes
  6083 ;; Hardware stack levels used:    1
  6084 ;; Hardware stack levels required when called:    4
  6085 ;; This function calls:
  6086 ;;		Nothing
  6087 ;; This function is called by:
  6088 ;;		_main
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           
  6093                           ;psect for function _check_data
  6094  09A2                     _check_data:	
  6095                           
  6096                           ;incstack = 0
  6097                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  6098                           ;check_data@x stored from wreg
  6099  09A2  00F3               	movwf	check_data@x
  6100                           
  6101                           ;main.c: 330: _Bool check_data(uint8_t x);main.c: 331: {;main.c: 332:     switch(x)
  6102  09A3  29A8               	goto	l5013
  6103  09A4                     l4963:	
  6104  09A4  3001               	movlw	1
  6105  09A5  0008               	return
  6106  09A6                     l5007:	
  6107  09A6  3000               	movlw	0
  6108  09A7  0008               	return
  6109  09A8                     l5013:	
  6110  09A8  0873               	movf	check_data@x,w
  6111  09A9  00F1               	movwf	??_check_data
  6112  09AA  01F2               	clrf	??_check_data+1
  6113                           
  6114                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6115                           ; Switch size 1, requested type "simple"
  6116                           ; Number of cases is 1, Range of values is 0 to 0
  6117                           ; switch strategies available:
  6118                           ; Name         Instructions Cycles
  6119                           ; simple_byte            4     3 (average)
  6120                           ; direct_byte            8     6 (fixed)
  6121                           ; jumptable            260     6 (fixed)
  6122                           ;	Chosen strategy is simple_byte
  6123  09AB  0872               	movf	??_check_data+1,w
  6124  09AC  3A00               	xorlw	0	; case 0
  6125  09AD  1903               	skipnz
  6126  09AE  29B0               	goto	l6805
  6127  09AF  29A6               	goto	l5007
  6128  09B0                     l6805:	
  6129                           
  6130                           ; Switch size 1, requested type "simple"
  6131                           ; Number of cases is 11, Range of values is 48 to 85
  6132                           ; switch strategies available:
  6133                           ; Name         Instructions Cycles
  6134                           ; simple_byte           34    18 (average)
  6135                           ; direct_byte           85     9 (fixed)
  6136                           ; jumptable            263     9 (fixed)
  6137                           ;	Chosen strategy is simple_byte
  6138  09B0  0871               	movf	??_check_data,w
  6139  09B1  3A30               	xorlw	48	; case 48
  6140  09B2  1903               	skipnz
  6141  09B3  29A4               	goto	l4963
  6142  09B4  3A01               	xorlw	1	; case 49
  6143  09B5  1903               	skipnz
  6144  09B6  29A4               	goto	l4963
  6145  09B7  3A03               	xorlw	3	; case 50
  6146  09B8  1903               	skipnz
  6147  09B9  29A4               	goto	l4963
  6148  09BA  3A01               	xorlw	1	; case 51
  6149  09BB  1903               	skipnz
  6150  09BC  29A4               	goto	l4963
  6151  09BD  3A07               	xorlw	7	; case 52
  6152  09BE  1903               	skipnz
  6153  09BF  29A4               	goto	l4963
  6154  09C0  3A01               	xorlw	1	; case 53
  6155  09C1  1903               	skipnz
  6156  09C2  29A4               	goto	l4963
  6157  09C3  3A03               	xorlw	3	; case 54
  6158  09C4  1903               	skipnz
  6159  09C5  29A4               	goto	l4963
  6160  09C6  3A01               	xorlw	1	; case 55
  6161  09C7  1903               	skipnz
  6162  09C8  29A4               	goto	l4963
  6163  09C9  3A71               	xorlw	113	; case 70
  6164  09CA  1903               	skipnz
  6165  09CB  29A4               	goto	l4963
  6166  09CC  3A12               	xorlw	18	; case 84
  6167  09CD  1903               	skipnz
  6168  09CE  29A4               	goto	l4963
  6169  09CF  3A01               	xorlw	1	; case 85
  6170  09D0  1903               	skipnz
  6171  09D1  29A4               	goto	l4963
  6172  09D2  29A6               	goto	l5007
  6173  09D3  0008               	return
  6174  09D4                     __end_of_check_data:	
  6175                           
  6176                           	psect	text14
  6177  1608                     __ptext14:	
  6178 ;; *************** function _SYSTEM_Initialize *****************
  6179 ;; Defined at:
  6180 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;		None
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;		None
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  1    wreg      void 
  6187 ;; Registers used:
  6188 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6194 ;;      Params:         0       0       0       0       0       0       0       0
  6195 ;;      Locals:         0       0       0       0       0       0       0       0
  6196 ;;      Temps:          0       0       0       0       0       0       0       0
  6197 ;;      Totals:         0       0       0       0       0       0       0       0
  6198 ;;Total ram usage:        0 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; Hardware stack levels required when called:    9
  6201 ;; This function calls:
  6202 ;;		_EUSART_Initialize
  6203 ;;		_MTOUCH_Initialize
  6204 ;;		_OSCILLATOR_Initialize
  6205 ;;		_PIN_MANAGER_Initialize
  6206 ;;		_TMR2_Initialize
  6207 ;;		_WDT_Initialize
  6208 ;; This function is called by:
  6209 ;;		_main
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           
  6214                           ;psect for function _SYSTEM_Initialize
  6215  1608                     _SYSTEM_Initialize:	
  6216                           
  6217                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  6218                           
  6219                           ;incstack = 0
  6220                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6221  1608  3197  2734  3196   	fcall	_PIN_MANAGER_Initialize
  6222                           
  6223                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  6224  160B  3194  24D8  3196   	fcall	_OSCILLATOR_Initialize
  6225                           
  6226                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  6227  160E  3194  24A0  3196   	fcall	_WDT_Initialize
  6228                           
  6229                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  6230  1611  3195  250A  3196   	fcall	_TMR2_Initialize
  6231                           
  6232                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  6233  1614  318A  2277  3196   	fcall	_EUSART_Initialize
  6234                           
  6235                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  6236  1617  3195  252F         	fcall	_MTOUCH_Initialize
  6237  1619  0008               	return
  6238  161A                     __end_of_SYSTEM_Initialize:	
  6239                           
  6240                           	psect	text15
  6241  14A0                     __ptext15:	
  6242 ;; *************** function _WDT_Initialize *****************
  6243 ;; Defined at:
  6244 ;;		line 69 in file "mcc_generated_files/mcc.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;		None
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;		None
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6258 ;;      Params:         0       0       0       0       0       0       0       0
  6259 ;;      Locals:         0       0       0       0       0       0       0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0       0
  6261 ;;      Totals:         0       0       0       0       0       0       0       0
  6262 ;;Total ram usage:        0 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    4
  6265 ;; This function calls:
  6266 ;;		Nothing
  6267 ;; This function is called by:
  6268 ;;		_SYSTEM_Initialize
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           
  6273                           ;psect for function _WDT_Initialize
  6274  14A0                     _WDT_Initialize:	
  6275                           
  6276                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  6277                           
  6278                           ;incstack = 0
  6279                           ; Regs used in _WDT_Initialize: [wreg]
  6280  14A0  3016               	movlw	22
  6281  14A1  0021               	movlb	1	; select bank1
  6282  14A2  0097               	movwf	23	;volatile
  6283  14A3  0008               	return
  6284  14A4                     __end_of_WDT_Initialize:	
  6285                           
  6286                           	psect	text16
  6287  150A                     __ptext16:	
  6288 ;; *************** function _TMR2_Initialize *****************
  6289 ;; Defined at:
  6290 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;		None
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;		None
  6295 ;; Return value:  Size  Location     Type
  6296 ;;                  1    wreg      void 
  6297 ;; Registers used:
  6298 ;;		wreg, status,2
  6299 ;; Tracked objects:
  6300 ;;		On entry : 0/0
  6301 ;;		On exit  : 0/0
  6302 ;;		Unchanged: 0/0
  6303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6304 ;;      Params:         0       0       0       0       0       0       0       0
  6305 ;;      Locals:         0       0       0       0       0       0       0       0
  6306 ;;      Temps:          0       0       0       0       0       0       0       0
  6307 ;;      Totals:         0       0       0       0       0       0       0       0
  6308 ;;Total ram usage:        0 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; Hardware stack levels required when called:    4
  6311 ;; This function calls:
  6312 ;;		Nothing
  6313 ;; This function is called by:
  6314 ;;		_SYSTEM_Initialize
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           
  6319                           ;psect for function _TMR2_Initialize
  6320  150A                     _TMR2_Initialize:	
  6321                           
  6322                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  6323                           
  6324                           ;incstack = 0
  6325                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6326  150A  30FF               	movlw	255
  6327  150B  0020               	movlb	0	; select bank0
  6328  150C  009B               	movwf	27	;volatile
  6329                           
  6330                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  6331  150D  019A               	clrf	26	;volatile
  6332                           
  6333                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  6334  150E  1091               	bcf	17,1	;volatile
  6335                           
  6336                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  6337  150F  3004               	movlw	4
  6338  1510  009C               	movwf	28	;volatile
  6339  1511  0008               	return
  6340  1512                     __end_of_TMR2_Initialize:	
  6341                           
  6342                           	psect	text17
  6343  1734                     __ptext17:	
  6344 ;; *************** function _PIN_MANAGER_Initialize *****************
  6345 ;; Defined at:
  6346 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;		None
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;		None
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1    wreg      void 
  6353 ;; Registers used:
  6354 ;;		wreg, status,2
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6360 ;;      Params:         0       0       0       0       0       0       0       0
  6361 ;;      Locals:         0       0       0       0       0       0       0       0
  6362 ;;      Temps:          0       0       0       0       0       0       0       0
  6363 ;;      Totals:         0       0       0       0       0       0       0       0
  6364 ;;Total ram usage:        0 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    4
  6367 ;; This function calls:
  6368 ;;		Nothing
  6369 ;; This function is called by:
  6370 ;;		_SYSTEM_Initialize
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           
  6375                           ;psect for function _PIN_MANAGER_Initialize
  6376  1734                     _PIN_MANAGER_Initialize:	
  6377                           
  6378                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  6379                           
  6380                           ;incstack = 0
  6381                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6382  1734  3037               	movlw	55
  6383  1735  0022               	movlb	2	; select bank2
  6384  1736  008C               	movwf	12	;volatile
  6385                           
  6386                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x60;
  6387  1737  3060               	movlw	96
  6388  1738  008D               	movwf	13	;volatile
  6389                           
  6390                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xAC;
  6391  1739  30AC               	movlw	172
  6392  173A  008E               	movwf	14	;volatile
  6393                           
  6394                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  6395  173B  3008               	movlw	8
  6396  173C  0021               	movlb	1	; select bank1
  6397  173D  008C               	movwf	12	;volatile
  6398                           
  6399                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x20;
  6400  173E  3020               	movlw	32
  6401  173F  008D               	movwf	13	;volatile
  6402                           
  6403                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x40;
  6404  1740  3040               	movlw	64
  6405  1741  008E               	movwf	14	;volatile
  6406                           
  6407                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xEC;
  6408  1742  30EC               	movlw	236
  6409  1743  0023               	movlb	3	; select bank3
  6410  1744  008E               	movwf	14	;volatile
  6411                           
  6412                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  6413  1745  3040               	movlw	64
  6414  1746  008D               	movwf	13	;volatile
  6415                           
  6416                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  6417  1747  3037               	movlw	55
  6418  1748  008C               	movwf	12	;volatile
  6419                           
  6420                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  6421  1749  0024               	movlb	4	; select bank4
  6422  174A  018D               	clrf	13	;volatile
  6423                           
  6424                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  6425  174B  018C               	clrf	12	;volatile
  6426                           
  6427                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  6428  174C  0021               	movlb	1	; select bank1
  6429  174D  1795               	bsf	21,7	;volatile
  6430                           
  6431                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  6432  174E  0022               	movlb	2	; select bank2
  6433  174F  019D               	clrf	29	;volatile
  6434  1750  0008               	return
  6435  1751                     __end_of_PIN_MANAGER_Initialize:	
  6436                           
  6437                           	psect	text18
  6438  14D8                     __ptext18:	
  6439 ;; *************** function _OSCILLATOR_Initialize *****************
  6440 ;; Defined at:
  6441 ;;		line 61 in file "mcc_generated_files/mcc.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;		None
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;		None
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  1    wreg      void 
  6448 ;; Registers used:
  6449 ;;		wreg, status,2
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6455 ;;      Params:         0       0       0       0       0       0       0       0
  6456 ;;      Locals:         0       0       0       0       0       0       0       0
  6457 ;;      Temps:          0       0       0       0       0       0       0       0
  6458 ;;      Totals:         0       0       0       0       0       0       0       0
  6459 ;;Total ram usage:        0 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    4
  6462 ;; This function calls:
  6463 ;;		Nothing
  6464 ;; This function is called by:
  6465 ;;		_SYSTEM_Initialize
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           
  6470                           ;psect for function _OSCILLATOR_Initialize
  6471  14D8                     _OSCILLATOR_Initialize:	
  6472                           
  6473                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  6474                           
  6475                           ;incstack = 0
  6476                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6477  14D8  30F0               	movlw	240
  6478  14D9  0021               	movlb	1	; select bank1
  6479  14DA  0099               	movwf	25	;volatile
  6480                           
  6481                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  6482  14DB  0022               	movlb	2	; select bank2
  6483  14DC  0196               	clrf	22	;volatile
  6484  14DD  0008               	return
  6485  14DE                     __end_of_OSCILLATOR_Initialize:	
  6486                           
  6487                           	psect	text19
  6488  152F                     __ptext19:	
  6489 ;; *************** function _MTOUCH_Initialize *****************
  6490 ;; Defined at:
  6491 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;		None
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;		None
  6496 ;; Return value:  Size  Location     Type
  6497 ;;                  1    wreg      void 
  6498 ;; Registers used:
  6499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6500 ;; Tracked objects:
  6501 ;;		On entry : 0/0
  6502 ;;		On exit  : 0/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6505 ;;      Params:         0       0       0       0       0       0       0       0
  6506 ;;      Locals:         0       0       0       0       0       0       0       0
  6507 ;;      Temps:          0       0       0       0       0       0       0       0
  6508 ;;      Totals:         0       0       0       0       0       0       0       0
  6509 ;;Total ram usage:        0 bytes
  6510 ;; Hardware stack levels used:    1
  6511 ;; Hardware stack levels required when called:    8
  6512 ;; This function calls:
  6513 ;;		_MTOUCH_Button_InitializeAll
  6514 ;;		_MTOUCH_Sensor_InitializeAll
  6515 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6516 ;;		_MTOUCH_Sensor_Scan_Initialize
  6517 ;; This function is called by:
  6518 ;;		_SYSTEM_Initialize
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           
  6523                           ;psect for function _MTOUCH_Initialize
  6524  152F                     _MTOUCH_Initialize:	
  6525                           
  6526                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  6527                           
  6528                           ;incstack = 0
  6529                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6530  152F  3195  2565  3195   	fcall	_MTOUCH_Sensor_InitializeAll
  6531                           
  6532                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  6533  1532  3188  2000  3195   	fcall	_MTOUCH_Button_InitializeAll
  6534                           
  6535                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  6536  1535  3196  261A  3195   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6537                           
  6538                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  6539  1538  3195  25A1         	fcall	_MTOUCH_Sensor_Scan_Initialize
  6540  153A  0008               	return
  6541  153B                     __end_of_MTOUCH_Initialize:	
  6542                           
  6543                           	psect	text20
  6544  1565                     __ptext20:	
  6545 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  6546 ;; Defined at:
  6547 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;		None
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  sensor          1   10[COMMON] enum E2854
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6561 ;;      Params:         0       0       0       0       0       0       0       0
  6562 ;;      Locals:         1       0       0       0       0       0       0       0
  6563 ;;      Temps:          1       0       0       0       0       0       0       0
  6564 ;;      Totals:         2       0       0       0       0       0       0       0
  6565 ;;Total ram usage:        2 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    7
  6568 ;; This function calls:
  6569 ;;		_MTOUCH_Sensor_Initialize
  6570 ;; This function is called by:
  6571 ;;		_MTOUCH_Initialize
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           
  6576                           ;psect for function _MTOUCH_Sensor_InitializeAll
  6577  1565                     _MTOUCH_Sensor_InitializeAll:	
  6578                           
  6579                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 225:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 227:     for (sensor = 0; sensor < 3u; sensor
      +                          ++)
  6580                           
  6581                           ;incstack = 0
  6582                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6583  1565  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  6584  1566                     l6131:	
  6585                           
  6586                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 229:         MTOUCH_Sensor_Initialize(sensor);
  6587  1566  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  6588  1567  3196  262D  3195   	fcall	_MTOUCH_Sensor_Initialize
  6589                           
  6590                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     }
  6591  156A  3001               	movlw	1
  6592  156B  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  6593  156C  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  6594  156D  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  6595  156E  3003               	movlw	3
  6596  156F  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  6597  1570  1803               	btfsc	3,0
  6598  1571  0008               	return
  6599  1572  2D66               	goto	l6131
  6600  1573                     __end_of_MTOUCH_Sensor_InitializeAll:	
  6601                           
  6602                           	psect	text21
  6603  162D                     __ptext21:	
  6604 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  6605 ;; Defined at:
  6606 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;  sensor          1    wreg     enum E2854
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;  sensor          1    8[COMMON] enum E2854
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      enum E2858
  6613 ;; Registers used:
  6614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6620 ;;      Params:         0       0       0       0       0       0       0       0
  6621 ;;      Locals:         1       0       0       0       0       0       0       0
  6622 ;;      Temps:          1       0       0       0       0       0       0       0
  6623 ;;      Totals:         2       0       0       0       0       0       0       0
  6624 ;;Total ram usage:        2 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    6
  6627 ;; This function calls:
  6628 ;;		_MTOUCH_Sensor_Calibrate
  6629 ;;		_MTOUCH_Sensor_Enable
  6630 ;;		_Sensor_Sampled_Reset
  6631 ;;		___bmul
  6632 ;; This function is called by:
  6633 ;;		_MTOUCH_Sensor_InitializeAll
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           
  6638                           ;psect for function _MTOUCH_Sensor_Initialize
  6639  162D                     _MTOUCH_Sensor_Initialize:	
  6640                           
  6641                           ;incstack = 0
  6642                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6643                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  6644  162D  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  6645                           
  6646                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           209: {;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     MTOUCH_Sensor_Enable(sensor
      +                          );
  6647  162E  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6648  162F  3195  25F6  3196   	fcall	_MTOUCH_Sensor_Enable
  6649                           
  6650                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 212:     MTOUCH_Sensor_Calibrate(sensor);
  6651  1632  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6652  1633  3195  25E4  3196   	fcall	_MTOUCH_Sensor_Calibrate
  6653                           
  6654                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  6655  1636  3009               	movlw	9
  6656  1637  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  6657  1638  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  6658  1639  00F1               	movwf	___bmul@multiplicand
  6659  163A  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6660  163B  3195  25B1  3196   	fcall	___bmul
  6661  163E  3E50               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  6662  163F  3195  2502         	fcall	_Sensor_Sampled_Reset
  6663  1641  0008               	return
  6664  1642                     __end_of_MTOUCH_Sensor_Initialize:	
  6665                           
  6666                           	psect	text22
  6667  15F6                     __ptext22:	
  6668 ;; *************** function _MTOUCH_Sensor_Enable *****************
  6669 ;; Defined at:
  6670 ;;		line 841 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;  sensor          1    wreg     enum E2854
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;  sensor          1    6[COMMON] enum E2854
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      void 
  6677 ;; Registers used:
  6678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6684 ;;      Params:         0       0       0       0       0       0       0       0
  6685 ;;      Locals:         1       0       0       0       0       0       0       0
  6686 ;;      Temps:          1       0       0       0       0       0       0       0
  6687 ;;      Totals:         2       0       0       0       0       0       0       0
  6688 ;;Total ram usage:        2 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    5
  6691 ;; This function calls:
  6692 ;;		___bmul
  6693 ;; This function is called by:
  6694 ;;		_MTOUCH_Sensor_Initialize
  6695 ;; This function uses a non-reentrant model
  6696 ;;
  6697                           
  6698                           
  6699                           ;psect for function _MTOUCH_Sensor_Enable
  6700  15F6                     _MTOUCH_Sensor_Enable:	
  6701                           
  6702                           ;incstack = 0
  6703                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6704                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  6705  15F6  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  6706                           
  6707                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 842: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 843:     if(sensor < 3u)
  6708  15F7  3003               	movlw	3
  6709  15F8  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  6710  15F9  1803               	skipnc
  6711  15FA  0008               	return
  6712                           
  6713                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 844:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  6714  15FB  3009               	movlw	9
  6715  15FC  00F5               	movwf	??_MTOUCH_Sensor_Enable
  6716  15FD  0875               	movf	??_MTOUCH_Sensor_Enable,w
  6717  15FE  00F1               	movwf	___bmul@multiplicand
  6718  15FF  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  6719  1600  3195  25B1         	fcall	___bmul
  6720  1602  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  6721  1603  0086               	movwf	6
  6722  1604  3001               	movlw	1	; select bank2/3
  6723  1605  0087               	movwf	7
  6724  1606  1581               	bsf	1,3
  6725  1607  0008               	return
  6726  1608                     __end_of_MTOUCH_Sensor_Enable:	
  6727                           
  6728                           	psect	text23
  6729  0800                     __ptext23:	
  6730 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  6731 ;; Defined at:
  6732 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;		None
  6735 ;; Auto vars:     Size  Location     Type
  6736 ;;  button          1    0[BANK0 ] enum E3069
  6737 ;; Return value:  Size  Location     Type
  6738 ;;                  1    wreg      void 
  6739 ;; Registers used:
  6740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6741 ;; Tracked objects:
  6742 ;;		On entry : 0/0
  6743 ;;		On exit  : 0/0
  6744 ;;		Unchanged: 0/0
  6745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6746 ;;      Params:         0       0       0       0       0       0       0       0
  6747 ;;      Locals:         0       1       0       0       0       0       0       0
  6748 ;;      Temps:          1       0       0       0       0       0       0       0
  6749 ;;      Totals:         1       1       0       0       0       0       0       0
  6750 ;;Total ram usage:        2 bytes
  6751 ;; Hardware stack levels used:    1
  6752 ;; Hardware stack levels required when called:    7
  6753 ;; This function calls:
  6754 ;;		_MTOUCH_Button_Initialize
  6755 ;;		_memcpy
  6756 ;; This function is called by:
  6757 ;;		_MTOUCH_Initialize
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           
  6762                           ;psect for function _MTOUCH_Button_InitializeAll
  6763  0800                     _MTOUCH_Button_InitializeAll:	
  6764                           
  6765                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 175:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  6766                           
  6767                           ;incstack = 0
  6768                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6769  0800  3000               	movlw	low (_mtouch_button_init| (0+32768))
  6770  0801  00F1               	movwf	memcpy@s1
  6771  0802  3090               	movlw	high (_mtouch_button_init| (0+32768))
  6772  0803  00F2               	movwf	memcpy@s1+1
  6773  0804  3030               	movlw	48
  6774  0805  00F3               	movwf	memcpy@n
  6775  0806  3000               	movlw	0
  6776  0807  00F4               	movwf	memcpy@n+1
  6777  0808  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  6778  0809  3188  20BB  3188   	fcall	_memcpy
  6779                           
  6780                           ;mcc_generated_files/mtouch/mtouch_button.c: 177:     for (button = 0; button < 3u; butt
      +                          on++)
  6781  080C  0020               	movlb	0	; select bank0
  6782  080D  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  6783  080E                     l6145:	
  6784                           
  6785                           ;mcc_generated_files/mtouch/mtouch_button.c: 178:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 179:         MTOUCH_Button_Initialize(button);
  6786  080E  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  6787  080F  318A  2209  3188   	fcall	_MTOUCH_Button_Initialize
  6788                           
  6789                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     }
  6790  0812  3001               	movlw	1
  6791  0813  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  6792  0814  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  6793  0815  0020               	movlb	0	; select bank0
  6794  0816  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  6795  0817  3003               	movlw	3
  6796  0818  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  6797  0819  1803               	btfsc	3,0
  6798  081A  0008               	return
  6799  081B  280E               	goto	l6145
  6800  081C                     __end_of_MTOUCH_Button_InitializeAll:	
  6801                           
  6802                           	psect	text24
  6803  08BB                     __ptext24:	
  6804 ;; *************** function _memcpy *****************
  6805 ;; Defined at:
  6806 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;  d1              1    wreg     PTR void 
  6809 ;;		 -> mtouch_button(48), 
  6810 ;;  s1              2    1[COMMON] PTR const void 
  6811 ;;		 -> mtouch_button_init(48), 
  6812 ;;  n               2    3[COMMON] unsigned int 
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;  d1              1    9[COMMON] PTR void 
  6815 ;;		 -> mtouch_button(48), 
  6816 ;;  s               2    7[COMMON] PTR const unsigned char 
  6817 ;;		 -> mtouch_button_init(48), 
  6818 ;;  d               1   10[COMMON] PTR unsigned char 
  6819 ;;		 -> mtouch_button(48), 
  6820 ;;  tmp             1    6[COMMON] unsigned char 
  6821 ;; Return value:  Size  Location     Type
  6822 ;;                  1    wreg      PTR void 
  6823 ;; Registers used:
  6824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6825 ;; Tracked objects:
  6826 ;;		On entry : 0/0
  6827 ;;		On exit  : 0/0
  6828 ;;		Unchanged: 0/0
  6829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6830 ;;      Params:         4       0       0       0       0       0       0       0
  6831 ;;      Locals:         5       0       0       0       0       0       0       0
  6832 ;;      Temps:          1       0       0       0       0       0       0       0
  6833 ;;      Totals:        10       0       0       0       0       0       0       0
  6834 ;;Total ram usage:       10 bytes
  6835 ;; Hardware stack levels used:    1
  6836 ;; Hardware stack levels required when called:    4
  6837 ;; This function calls:
  6838 ;;		Nothing
  6839 ;; This function is called by:
  6840 ;;		_MTOUCH_Button_InitializeAll
  6841 ;; This function uses a non-reentrant model
  6842 ;;
  6843                           
  6844                           
  6845                           ;psect for function _memcpy
  6846  08BB                     _memcpy:	
  6847                           
  6848                           ;incstack = 0
  6849                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  6850                           ;memcpy@d1 stored from wreg
  6851  08BB  00F9               	movwf	memcpy@d1
  6852  08BC  0872               	movf	memcpy@s1+1,w
  6853  08BD  00F8               	movwf	memcpy@s+1
  6854  08BE  0871               	movf	memcpy@s1,w
  6855  08BF  00F7               	movwf	memcpy@s
  6856  08C0  0879               	movf	memcpy@d1,w
  6857  08C1  00F5               	movwf	??_memcpy
  6858  08C2  0875               	movf	??_memcpy,w
  6859  08C3  00FA               	movwf	memcpy@d
  6860  08C4                     l6029:	
  6861  08C4  3001               	movlw	1
  6862  08C5  02F3               	subwf	memcpy@n,f
  6863  08C6  3000               	movlw	0
  6864  08C7  3BF4               	subwfb	memcpy@n+1,f
  6865  08C8  0A73               	incf	memcpy@n,w
  6866  08C9  1903               	btfsc	3,2
  6867  08CA  0A74               	incf	memcpy@n+1,w
  6868  08CB  1903               	btfsc	3,2
  6869  08CC  0008               	return
  6870  08CD  0877               	movf	memcpy@s,w
  6871  08CE  0084               	movwf	4
  6872  08CF  0878               	movf	memcpy@s+1,w
  6873  08D0  0085               	movwf	5
  6874  08D1  0800               	movf	0,w	;code access
  6875  08D2  00F5               	movwf	??_memcpy
  6876  08D3  0875               	movf	??_memcpy,w
  6877  08D4  00F6               	movwf	memcpy@tmp
  6878  08D5  3001               	movlw	1
  6879  08D6  07F7               	addwf	memcpy@s,f
  6880  08D7  3000               	movlw	0
  6881  08D8  3DF8               	addwfc	memcpy@s+1,f
  6882  08D9  0876               	movf	memcpy@tmp,w
  6883  08DA  00F5               	movwf	??_memcpy
  6884  08DB  087A               	movf	memcpy@d,w
  6885  08DC  0086               	movwf	6
  6886  08DD  3001               	movlw	1	; select bank2/3
  6887  08DE  0087               	movwf	7
  6888  08DF  0875               	movf	??_memcpy,w
  6889  08E0  0081               	movwf	1
  6890  08E1  3001               	movlw	1
  6891  08E2  00F5               	movwf	??_memcpy
  6892  08E3  0875               	movf	??_memcpy,w
  6893  08E4  07FA               	addwf	memcpy@d,f
  6894  08E5  28C4               	goto	l6029
  6895  08E6                     __end_of_memcpy:	
  6896                           
  6897                           	psect	text25
  6898  0A77                     __ptext25:	
  6899 ;; *************** function _EUSART_Initialize *****************
  6900 ;; Defined at:
  6901 ;;		line 85 in file "mcc_generated_files/eusart.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;		None
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;		None
  6906 ;; Return value:  Size  Location     Type
  6907 ;;                  1    wreg      void 
  6908 ;; Registers used:
  6909 ;;		wreg, status,2, status,0, pclath, cstack
  6910 ;; Tracked objects:
  6911 ;;		On entry : 0/0
  6912 ;;		On exit  : 0/0
  6913 ;;		Unchanged: 0/0
  6914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6915 ;;      Params:         0       0       0       0       0       0       0       0
  6916 ;;      Locals:         0       0       0       0       0       0       0       0
  6917 ;;      Temps:          1       0       0       0       0       0       0       0
  6918 ;;      Totals:         1       0       0       0       0       0       0       0
  6919 ;;Total ram usage:        1 bytes
  6920 ;; Hardware stack levels used:    1
  6921 ;; Hardware stack levels required when called:    5
  6922 ;; This function calls:
  6923 ;;		_EUSART_SetErrorHandler
  6924 ;;		_EUSART_SetFramingErrorHandler
  6925 ;;		_EUSART_SetOverrunErrorHandler
  6926 ;;		_EUSART_SetRxInterruptHandler
  6927 ;;		_EUSART_SetTxInterruptHandler
  6928 ;; This function is called by:
  6929 ;;		_SYSTEM_Initialize
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           
  6934                           ;psect for function _EUSART_Initialize
  6935  0A77                     _EUSART_Initialize:	
  6936                           
  6937                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
  6938                           
  6939                           ;incstack = 0
  6940                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6941  0A77  0021               	movlb	1	; select bank1
  6942  0A78  1291               	bcf	17,5	;volatile
  6943                           
  6944                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  6945  0A79  3070               	movlw	low _EUSART_Receive_ISR
  6946  0A7A  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  6947  0A7B  3009               	movlw	high _EUSART_Receive_ISR
  6948  0A7C  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  6949  0A7D  3194  24CC  318A   	fcall	_EUSART_SetRxInterruptHandler
  6950                           
  6951                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
  6952  0A80  0021               	movlb	1	; select bank1
  6953  0A81  1211               	bcf	17,4	;volatile
  6954                           
  6955                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  6956  0A82  3051               	movlw	low _EUSART_Transmit_ISR
  6957  0A83  00F1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  6958  0A84  3017               	movlw	high _EUSART_Transmit_ISR
  6959  0A85  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  6960  0A86  3194  24D2  318A   	fcall	_EUSART_SetTxInterruptHandler
  6961                           
  6962                           ;mcc_generated_files/eusart.c: 95:     BAUDCON = 0x0A;
  6963  0A89  300A               	movlw	10
  6964  0A8A  0023               	movlb	3	; select bank3
  6965  0A8B  009F               	movwf	31	;volatile
  6966                           
  6967                           ;mcc_generated_files/eusart.c: 98:     RCSTA = 0x90;
  6968  0A8C  3090               	movlw	144
  6969  0A8D  009D               	movwf	29	;volatile
  6970                           
  6971                           ;mcc_generated_files/eusart.c: 101:     TXSTA = 0x24;
  6972  0A8E  3024               	movlw	36
  6973  0A8F  009E               	movwf	30	;volatile
  6974                           
  6975                           ;mcc_generated_files/eusart.c: 104:     SPBRGL = 0x40;
  6976  0A90  3040               	movlw	64
  6977  0A91  009B               	movwf	27	;volatile
  6978                           
  6979                           ;mcc_generated_files/eusart.c: 107:     SPBRGH = 0x03;
  6980  0A92  3003               	movlw	3
  6981  0A93  009C               	movwf	28	;volatile
  6982                           
  6983                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  6984  0A94  3070               	movlw	low _EUSART_DefaultFramingErrorHandler
  6985  0A95  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6986  0A96  3014               	movlw	high _EUSART_DefaultFramingErrorHandler
  6987  0A97  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6988  0A98  3194  24C0  318A   	fcall	_EUSART_SetFramingErrorHandler
  6989                           
  6990                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  6991  0A9B  3084               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6992  0A9C  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6993  0A9D  3014               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6994  0A9E  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6995  0A9F  3194  24C6  318A   	fcall	_EUSART_SetOverrunErrorHandler
  6996                           
  6997                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  6998  0AA2  3072               	movlw	low _EUSART_DefaultErrorHandler
  6999  0AA3  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  7000  0AA4  3014               	movlw	high _EUSART_DefaultErrorHandler
  7001  0AA5  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  7002  0AA6  3194  24BA         	fcall	_EUSART_SetErrorHandler
  7003                           
  7004                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
  7005  0AA8  0020               	movlb	0	; select bank0
  7006  0AA9  01E4               	clrf	_eusartRxLastError	;volatile
  7007                           
  7008                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
  7009  0AAA  01E8               	clrf	_eusartTxHead	;volatile
  7010                           
  7011                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
  7012  0AAB  01E7               	clrf	_eusartTxTail	;volatile
  7013                           
  7014                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  7015  0AAC  3008               	movlw	8
  7016  0AAD  00F3               	movwf	??_EUSART_Initialize
  7017  0AAE  0873               	movf	??_EUSART_Initialize,w
  7018  0AAF  0021               	movlb	1	; select bank1
  7019  0AB0  00CE               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  7020                           
  7021                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
  7022  0AB1  01FC               	clrf	_eusartRxHead	;volatile
  7023                           
  7024                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
  7025  0AB2  0020               	movlb	0	; select bank0
  7026  0AB3  01E6               	clrf	_eusartRxTail	;volatile
  7027                           
  7028                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
  7029  0AB4  01E5               	clrf	_eusartRxCount	;volatile
  7030                           
  7031                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
  7032  0AB5  0021               	movlb	1	; select bank1
  7033  0AB6  1691               	bsf	17,5	;volatile
  7034  0AB7  0008               	return
  7035  0AB8                     __end_of_EUSART_Initialize:	
  7036                           
  7037                           	psect	text26
  7038  14D2                     __ptext26:	
  7039 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  7040 ;; Defined at:
  7041 ;;		line 282 in file "mcc_generated_files/eusart.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7044 ;;		 -> EUSART_Transmit_ISR(1), 
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;		None
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  1    wreg      void 
  7049 ;; Registers used:
  7050 ;;		wreg
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7056 ;;      Params:         2       0       0       0       0       0       0       0
  7057 ;;      Locals:         0       0       0       0       0       0       0       0
  7058 ;;      Temps:          0       0       0       0       0       0       0       0
  7059 ;;      Totals:         2       0       0       0       0       0       0       0
  7060 ;;Total ram usage:        2 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    4
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		_EUSART_Initialize
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           
  7071                           ;psect for function _EUSART_SetTxInterruptHandler
  7072  14D2                     _EUSART_SetTxInterruptHandler:	
  7073                           
  7074                           ;mcc_generated_files/eusart.c: 283:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  7075                           
  7076                           ;incstack = 0
  7077                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  7078  14D2  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  7079  14D3  0021               	movlb	1	; select bank1
  7080  14D4  00CD               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  7081  14D5  0871               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  7082  14D6  00CC               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  7083  14D7  0008               	return
  7084  14D8                     __end_of_EUSART_SetTxInterruptHandler:	
  7085                           
  7086                           	psect	text27
  7087  14CC                     __ptext27:	
  7088 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  7089 ;; Defined at:
  7090 ;;		line 286 in file "mcc_generated_files/eusart.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7093 ;;		 -> EUSART_Receive_ISR(1), 
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;		None
  7096 ;; Return value:  Size  Location     Type
  7097 ;;                  1    wreg      void 
  7098 ;; Registers used:
  7099 ;;		wreg
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7105 ;;      Params:         2       0       0       0       0       0       0       0
  7106 ;;      Locals:         0       0       0       0       0       0       0       0
  7107 ;;      Temps:          0       0       0       0       0       0       0       0
  7108 ;;      Totals:         2       0       0       0       0       0       0       0
  7109 ;;Total ram usage:        2 bytes
  7110 ;; Hardware stack levels used:    1
  7111 ;; Hardware stack levels required when called:    4
  7112 ;; This function calls:
  7113 ;;		Nothing
  7114 ;; This function is called by:
  7115 ;;		_EUSART_Initialize
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           
  7120                           ;psect for function _EUSART_SetRxInterruptHandler
  7121  14CC                     _EUSART_SetRxInterruptHandler:	
  7122                           
  7123                           ;mcc_generated_files/eusart.c: 287:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  7124                           
  7125                           ;incstack = 0
  7126                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  7127  14CC  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  7128  14CD  0021               	movlb	1	; select bank1
  7129  14CE  00CB               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  7130  14CF  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  7131  14D0  00CA               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  7132  14D1  0008               	return
  7133  14D2                     __end_of_EUSART_SetRxInterruptHandler:	
  7134                           
  7135                           	psect	text28
  7136  14C6                     __ptext28:	
  7137 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7138 ;; Defined at:
  7139 ;;		line 274 in file "mcc_generated_files/eusart.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7142 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;		None
  7145 ;; Return value:  Size  Location     Type
  7146 ;;                  1    wreg      void 
  7147 ;; Registers used:
  7148 ;;		wreg
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7154 ;;      Params:         2       0       0       0       0       0       0       0
  7155 ;;      Locals:         0       0       0       0       0       0       0       0
  7156 ;;      Temps:          0       0       0       0       0       0       0       0
  7157 ;;      Totals:         2       0       0       0       0       0       0       0
  7158 ;;Total ram usage:        2 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:    4
  7161 ;; This function calls:
  7162 ;;		Nothing
  7163 ;; This function is called by:
  7164 ;;		_EUSART_Initialize
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           
  7169                           ;psect for function _EUSART_SetOverrunErrorHandler
  7170  14C6                     _EUSART_SetOverrunErrorHandler:	
  7171                           
  7172                           ;mcc_generated_files/eusart.c: 275:     EUSART_OverrunErrorHandler = interruptHandler;
  7173                           
  7174                           ;incstack = 0
  7175                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7176  14C6  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  7177  14C7  0021               	movlb	1	; select bank1
  7178  14C8  00C7               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  7179  14C9  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  7180  14CA  00C6               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  7181  14CB  0008               	return
  7182  14CC                     __end_of_EUSART_SetOverrunErrorHandler:	
  7183                           
  7184                           	psect	text29
  7185  14C0                     __ptext29:	
  7186 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7187 ;; Defined at:
  7188 ;;		line 270 in file "mcc_generated_files/eusart.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7191 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7203 ;;      Params:         2       0       0       0       0       0       0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0       0
  7205 ;;      Temps:          0       0       0       0       0       0       0       0
  7206 ;;      Totals:         2       0       0       0       0       0       0       0
  7207 ;;Total ram usage:        2 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    4
  7210 ;; This function calls:
  7211 ;;		Nothing
  7212 ;; This function is called by:
  7213 ;;		_EUSART_Initialize
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           
  7218                           ;psect for function _EUSART_SetFramingErrorHandler
  7219  14C0                     _EUSART_SetFramingErrorHandler:	
  7220                           
  7221                           ;mcc_generated_files/eusart.c: 271:     EUSART_FramingErrorHandler = interruptHandler;
  7222                           
  7223                           ;incstack = 0
  7224                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7225  14C0  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  7226  14C1  0021               	movlb	1	; select bank1
  7227  14C2  00C9               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  7228  14C3  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  7229  14C4  00C8               	movwf	_EUSART_FramingErrorHandler^(0+128)
  7230  14C5  0008               	return
  7231  14C6                     __end_of_EUSART_SetFramingErrorHandler:	
  7232                           
  7233                           	psect	text30
  7234  14BA                     __ptext30:	
  7235 ;; *************** function _EUSART_SetErrorHandler *****************
  7236 ;; Defined at:
  7237 ;;		line 278 in file "mcc_generated_files/eusart.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7240 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;		None
  7243 ;; Return value:  Size  Location     Type
  7244 ;;                  1    wreg      void 
  7245 ;; Registers used:
  7246 ;;		wreg
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7252 ;;      Params:         2       0       0       0       0       0       0       0
  7253 ;;      Locals:         0       0       0       0       0       0       0       0
  7254 ;;      Temps:          0       0       0       0       0       0       0       0
  7255 ;;      Totals:         2       0       0       0       0       0       0       0
  7256 ;;Total ram usage:        2 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:    4
  7259 ;; This function calls:
  7260 ;;		Nothing
  7261 ;; This function is called by:
  7262 ;;		_EUSART_Initialize
  7263 ;; This function uses a non-reentrant model
  7264 ;;
  7265                           
  7266                           
  7267                           ;psect for function _EUSART_SetErrorHandler
  7268  14BA                     _EUSART_SetErrorHandler:	
  7269                           
  7270                           ;mcc_generated_files/eusart.c: 279:     EUSART_ErrorHandler = interruptHandler;
  7271                           
  7272                           ;incstack = 0
  7273                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7274  14BA  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7275  14BB  0021               	movlb	1	; select bank1
  7276  14BC  00C5               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  7277  14BD  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7278  14BE  00C4               	movwf	_EUSART_ErrorHandler^(0+128)
  7279  14BF  0008               	return
  7280  14C0                     __end_of_EUSART_SetErrorHandler:	
  7281                           
  7282                           	psect	text31
  7283  1718                     __ptext31:	
  7284 ;; *************** function _MTOUCH_Service_Mainloop *****************
  7285 ;; Defined at:
  7286 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;		None
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;		None
  7291 ;; Return value:  Size  Location     Type
  7292 ;;                  1    wreg      _Bool 
  7293 ;; Registers used:
  7294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7300 ;;      Params:         0       0       0       0       0       0       0       0
  7301 ;;      Locals:         0       0       0       0       0       0       0       0
  7302 ;;      Temps:          0       1       0       0       0       0       0       0
  7303 ;;      Totals:         0       1       0       0       0       0       0       0
  7304 ;;Total ram usage:        1 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; Hardware stack levels required when called:   11
  7307 ;; This function calls:
  7308 ;;		_MTOUCH_Button_ServiceAll
  7309 ;;		_MTOUCH_Sensor_SampleAll
  7310 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7311 ;;		_MTOUCH_Tick
  7312 ;;		_MTOUCH_needReburst
  7313 ;; This function is called by:
  7314 ;;		_main
  7315 ;;		_touch_example
  7316 ;; This function uses a non-reentrant model
  7317 ;;
  7318                           
  7319                           
  7320                           ;psect for function _MTOUCH_Service_Mainloop
  7321  1718                     _MTOUCH_Service_Mainloop:	
  7322                           
  7323                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  7324                           
  7325                           ;incstack = 0
  7326                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7327  1718  0020               	movlb	0	; select bank0
  7328  1719  01EB               	clrf	_mtouch_time_toScan
  7329  171A  0AEB               	incf	_mtouch_time_toScan,f
  7330                           
  7331                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  7332                           
  7333                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  7334  171B  3196  2658  3197   	fcall	_MTOUCH_Sensor_SampleAll
  7335  171E  3A00               	xorlw	0
  7336  171F  1D03               	skipz
  7337  1720  2F23               	goto	l6273
  7338                           
  7339                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  7340  1721  3000               	movlw	0
  7341  1722  0008               	return
  7342  1723                     l6273:	
  7343                           
  7344                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  7345  1723  3195  2591  3197   	fcall	_MTOUCH_Button_ServiceAll
  7346                           
  7347                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  7348  1726  3180  2002  3197   	fcall	_MTOUCH_needReburst
  7349  1729  0020               	movlb	0	; select bank0
  7350  172A  00C8               	movwf	??_MTOUCH_Service_Mainloop
  7351  172B  0848               	movf	??_MTOUCH_Service_Mainloop,w
  7352  172C  00EB               	movwf	_mtouch_time_toScan
  7353                           
  7354                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  7355  172D  3196  261A  3197   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  7356                           
  7357                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  7358  1730  3194  247E         	fcall	_MTOUCH_Tick
  7359                           
  7360                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  7361  1732  3001               	movlw	1
  7362  1733  0008               	return
  7363  1734                     __end_of_MTOUCH_Service_Mainloop:	
  7364                           
  7365                           	psect	text32
  7366  0002                     __ptext32:	
  7367 ;; *************** function _MTOUCH_needReburst *****************
  7368 ;; Defined at:
  7369 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;		None
  7372 ;; Auto vars:     Size  Location     Type
  7373 ;;  needReburst     1    0        _Bool 
  7374 ;; Return value:  Size  Location     Type
  7375 ;;                  1    wreg      _Bool 
  7376 ;; Registers used:
  7377 ;;		wreg, status,2
  7378 ;; Tracked objects:
  7379 ;;		On entry : 0/0
  7380 ;;		On exit  : 0/0
  7381 ;;		Unchanged: 0/0
  7382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7383 ;;      Params:         0       0       0       0       0       0       0       0
  7384 ;;      Locals:         1       0       0       0       0       0       0       0
  7385 ;;      Temps:          0       0       0       0       0       0       0       0
  7386 ;;      Totals:         1       0       0       0       0       0       0       0
  7387 ;;Total ram usage:        1 bytes
  7388 ;; Hardware stack levels used:    1
  7389 ;; Hardware stack levels required when called:    4
  7390 ;; This function calls:
  7391 ;;		Nothing
  7392 ;; This function is called by:
  7393 ;;		_MTOUCH_Service_Mainloop
  7394 ;; This function uses a non-reentrant model
  7395 ;;
  7396                           
  7397                           
  7398                           ;psect for function _MTOUCH_needReburst
  7399  0002                     _MTOUCH_needReburst:	
  7400                           
  7401                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  7402                           
  7403                           ;incstack = 0
  7404                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  7405  0002  3000               	movlw	0
  7406  0003  0008               	return
  7407  0004                     __end_of_MTOUCH_needReburst:	
  7408                           
  7409                           	psect	text33
  7410  147E                     __ptext33:	
  7411 ;; *************** function _MTOUCH_Tick *****************
  7412 ;; Defined at:
  7413 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;		None
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;		None
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      void 
  7420 ;; Registers used:
  7421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7427 ;;      Params:         0       0       0       0       0       0       0       0
  7428 ;;      Locals:         0       0       0       0       0       0       0       0
  7429 ;;      Temps:          0       0       0       0       0       0       0       0
  7430 ;;      Totals:         0       0       0       0       0       0       0       0
  7431 ;;Total ram usage:        0 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; Hardware stack levels required when called:    6
  7434 ;; This function calls:
  7435 ;;		_MTOUCH_Button_Tick
  7436 ;; This function is called by:
  7437 ;;		_MTOUCH_Service_Mainloop
  7438 ;; This function uses a non-reentrant model
  7439 ;;
  7440                           
  7441                           
  7442                           ;psect for function _MTOUCH_Tick
  7443  147E                     _MTOUCH_Tick:	
  7444                           
  7445                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  7446                           
  7447                           ;incstack = 0
  7448                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7449  147E  3196  266E         	fcall	_MTOUCH_Button_Tick
  7450  1480  0008               	return
  7451  1481                     __end_of_MTOUCH_Tick:	
  7452                           
  7453                           	psect	text34
  7454  166E                     __ptext34:	
  7455 ;; *************** function _MTOUCH_Button_Tick *****************
  7456 ;; Defined at:
  7457 ;;		line 297 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;		None
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;  i               1    5[COMMON] unsigned char 
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1    wreg      void 
  7464 ;; Registers used:
  7465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7471 ;;      Params:         0       0       0       0       0       0       0       0
  7472 ;;      Locals:         1       0       0       0       0       0       0       0
  7473 ;;      Temps:          1       0       0       0       0       0       0       0
  7474 ;;      Totals:         2       0       0       0       0       0       0       0
  7475 ;;Total ram usage:        2 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    5
  7478 ;; This function calls:
  7479 ;;		_Button_Tick_helper
  7480 ;; This function is called by:
  7481 ;;		_MTOUCH_Tick
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485                           
  7486                           ;psect for function _MTOUCH_Button_Tick
  7487  166E                     _MTOUCH_Button_Tick:	
  7488                           
  7489                           ;mcc_generated_files/mtouch/mtouch_button.c: 299:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 300:     for (i = 0; i < 3u; i++)
  7490                           
  7491                           ;incstack = 0
  7492                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7493  166E  01F5               	clrf	MTOUCH_Button_Tick@i
  7494  166F                     l4619:	
  7495                           
  7496                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 302:         Button_Tick_helper(&mtouch_button[i]);
  7497  166F  0875               	movf	MTOUCH_Button_Tick@i,w
  7498  1670  00F4               	movwf	??_MTOUCH_Button_Tick
  7499  1671  3003               	movlw	3
  7500  1672                     u3455:	
  7501  1672  35F4               	lslf	??_MTOUCH_Button_Tick,f
  7502  1673  3EFF               	addlw	-1
  7503  1674  1D03               	skipz
  7504  1675  2E72               	goto	u3455
  7505  1676  3574               	lslf	??_MTOUCH_Button_Tick,w
  7506  1677  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  7507  1678  3188  201C  3196   	fcall	_Button_Tick_helper
  7508                           
  7509                           ;mcc_generated_files/mtouch/mtouch_button.c: 303:     }
  7510  167B  3001               	movlw	1
  7511  167C  00F4               	movwf	??_MTOUCH_Button_Tick
  7512  167D  0874               	movf	??_MTOUCH_Button_Tick,w
  7513  167E  07F5               	addwf	MTOUCH_Button_Tick@i,f
  7514  167F  3003               	movlw	3
  7515  1680  0275               	subwf	MTOUCH_Button_Tick@i,w
  7516  1681  1803               	btfsc	3,0
  7517  1682  0008               	return
  7518  1683  2E6F               	goto	l4619
  7519  1684                     __end_of_MTOUCH_Button_Tick:	
  7520                           
  7521                           	psect	text35
  7522  081C                     __ptext35:	
  7523 ;; *************** function _Button_Tick_helper *****************
  7524 ;; Defined at:
  7525 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7526 ;; Parameters:    Size  Location     Type
  7527 ;;  button          1    wreg     PTR struct .
  7528 ;;		 -> mtouch_button(48), 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;  button          1    3[COMMON] PTR struct .
  7531 ;;		 -> mtouch_button(48), 
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  1    wreg      void 
  7534 ;; Registers used:
  7535 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7541 ;;      Params:         0       0       0       0       0       0       0       0
  7542 ;;      Locals:         1       0       0       0       0       0       0       0
  7543 ;;      Temps:          2       0       0       0       0       0       0       0
  7544 ;;      Totals:         3       0       0       0       0       0       0       0
  7545 ;;Total ram usage:        3 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    4
  7548 ;; This function calls:
  7549 ;;		Nothing
  7550 ;; This function is called by:
  7551 ;;		_MTOUCH_Button_Tick
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           
  7556                           ;psect for function _Button_Tick_helper
  7557  081C                     _Button_Tick_helper:	
  7558                           
  7559                           ;incstack = 0
  7560                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  7561                           ;Button_Tick_helper@button stored from wreg
  7562  081C  00F3               	movwf	Button_Tick_helper@button
  7563                           
  7564                           ;mcc_generated_files/mtouch/mtouch_button.c: 305: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 306: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 308:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  7565  081D  0873               	movf	Button_Tick_helper@button,w
  7566  081E  3E02               	addlw	2
  7567  081F  0086               	movwf	6
  7568  0820  3001               	movlw	1	; select bank2/3
  7569  0821  0087               	movwf	7
  7570  0822  3002               	movlw	2
  7571  0823  0601               	xorwf	1,w
  7572  0824  1D03               	btfss	3,2
  7573  0825  0008               	return
  7574                           
  7575                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         (button->counter)++;
  7576  0826  0873               	movf	Button_Tick_helper@button,w
  7577  0827  3E0A               	addlw	10
  7578  0828  0086               	movwf	6
  7579  0829  3001               	movlw	1	; select bank2/3
  7580  082A  0087               	movwf	7
  7581  082B  3001               	movlw	1
  7582  082C  0781               	addwf	1,f
  7583  082D  3141               	addfsr 1,1
  7584  082E  1803               	skipnc
  7585  082F  0A81               	incf	1,f
  7586                           
  7587                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  7588  0830  0873               	movf	Button_Tick_helper@button,w
  7589  0831  3E0A               	addlw	10
  7590  0832  0086               	movwf	6
  7591  0833  3001               	movlw	1	; select bank2/3
  7592  0834  0087               	movwf	7
  7593  0835  0016               	moviw fsr1++
  7594  0836  0401               	iorwf	1,w
  7595  0837  1D03               	btfss	3,2
  7596  0838  0008               	return
  7597                           
  7598                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 313:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  7599  0839  0873               	movf	Button_Tick_helper@button,w
  7600  083A  3E0A               	addlw	10
  7601  083B  0086               	movwf	6
  7602  083C  3001               	movlw	1	; select bank2/3
  7603  083D  0087               	movwf	7
  7604  083E  30FF               	movlw	255
  7605  083F  3FC0               	movwi [0]fsr1
  7606  0840  30FF               	movlw	255
  7607  0841  3FC1               	movwi [1]fsr1
  7608  0842  0008               	return
  7609  0843                     __end_of_Button_Tick_helper:	
  7610                           
  7611                           	psect	text36
  7612  161A                     __ptext36:	
  7613 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  7614 ;; Defined at:
  7615 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7616 ;; Parameters:    Size  Location     Type
  7617 ;;		None
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;  sensor          1    3[COMMON] PTR struct .
  7620 ;;		 -> mtouch_sensor(27), 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  1    wreg      void 
  7623 ;; Registers used:
  7624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7630 ;;      Params:         0       0       0       0       0       0       0       0
  7631 ;;      Locals:         1       0       0       0       0       0       0       0
  7632 ;;      Temps:          1       0       0       0       0       0       0       0
  7633 ;;      Totals:         2       0       0       0       0       0       0       0
  7634 ;;Total ram usage:        2 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    5
  7637 ;; This function calls:
  7638 ;;		_Sensor_Sampled_Reset
  7639 ;; This function is called by:
  7640 ;;		_MTOUCH_Initialize
  7641 ;;		_MTOUCH_Service_Mainloop
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           
  7646                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  7647  161A                     _MTOUCH_Sensor_Sampled_ResetAll:	
  7648                           
  7649                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 953:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[3u -1];sensor++)
  7650                           
  7651                           ;incstack = 0
  7652                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  7653  161A  3050               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  7654  161B  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7655  161C  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7656  161D  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  7657  161E                     L2:	
  7658  161E  3062               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
  7659  161F  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7660  1620  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7661  1621  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7662  1622  1C03               	btfss	3,0
  7663  1623  0008               	return
  7664                           
  7665                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 955:         Sensor_Sampled_Reset(sensor);
  7666  1624  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7667  1625  3195  2502  3196   	fcall	_Sensor_Sampled_Reset
  7668                           
  7669                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 956:     }
  7670  1628  3009               	movlw	9
  7671  1629  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7672  162A  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7673  162B  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  7674  162C  2E1E               	goto	L2
  7675  162D                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  7676                           
  7677                           	psect	text37
  7678  1502                     __ptext37:	
  7679 ;; *************** function _Sensor_Sampled_Reset *****************
  7680 ;; Defined at:
  7681 ;;		line 964 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;  sensor          1    wreg     PTR struct .
  7684 ;;		 -> mtouch_sensor(27), 
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;  sensor          1    1[COMMON] PTR struct .
  7687 ;;		 -> mtouch_sensor(27), 
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  1    wreg      void 
  7690 ;; Registers used:
  7691 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7697 ;;      Params:         0       0       0       0       0       0       0       0
  7698 ;;      Locals:         1       0       0       0       0       0       0       0
  7699 ;;      Temps:          0       0       0       0       0       0       0       0
  7700 ;;      Totals:         1       0       0       0       0       0       0       0
  7701 ;;Total ram usage:        1 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; Hardware stack levels required when called:    4
  7704 ;; This function calls:
  7705 ;;		Nothing
  7706 ;; This function is called by:
  7707 ;;		_MTOUCH_Sensor_Initialize
  7708 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           
  7713                           ;psect for function _Sensor_Sampled_Reset
  7714  1502                     _Sensor_Sampled_Reset:	
  7715                           
  7716                           ;incstack = 0
  7717                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7718                           ;Sensor_Sampled_Reset@sensor stored from wreg
  7719  1502  00F1               	movwf	Sensor_Sampled_Reset@sensor
  7720                           
  7721                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          965: {;mcc_generated_files/mtouch/mtouch_sensor.c: 966:     sensor->sampled = 0;
  7722  1503  0871               	movf	Sensor_Sampled_Reset@sensor,w
  7723  1504  3E08               	addlw	8
  7724  1505  0086               	movwf	6
  7725  1506  3001               	movlw	1	; select bank2/3
  7726  1507  0087               	movwf	7
  7727  1508  1001               	bcf	1,0
  7728  1509  0008               	return
  7729  150A                     __end_of_Sensor_Sampled_Reset:	
  7730                           
  7731                           	psect	text38
  7732  1658                     __ptext38:	
  7733 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  7734 ;; Defined at:
  7735 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;		None
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;  group           1   39[BANK0 ] unsigned char 
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  1    wreg      _Bool 
  7742 ;; Registers used:
  7743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7749 ;;      Params:         0       0       0       0       0       0       0       0
  7750 ;;      Locals:         0       1       0       0       0       0       0       0
  7751 ;;      Temps:          0       1       0       0       0       0       0       0
  7752 ;;      Totals:         0       2       0       0       0       0       0       0
  7753 ;;Total ram usage:        2 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:   10
  7756 ;; This function calls:
  7757 ;;		_Sensor_Service
  7758 ;; This function is called by:
  7759 ;;		_MTOUCH_Service_Mainloop
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           
  7764                           ;psect for function _MTOUCH_Sensor_SampleAll
  7765  1658                     _MTOUCH_Sensor_SampleAll:	
  7766                           
  7767                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 261:     for (group = 0; group < 2u; group++)
  7768                           
  7769                           ;incstack = 0
  7770                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7771  1658  0020               	movlb	0	; select bank0
  7772  1659  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  7773  165A                     l6231:	
  7774                           
  7775                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 263:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  7776  165A  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  7777  165B  3187  2747  3196   	fcall	_Sensor_Service
  7778  165E  3A00               	xorlw	0
  7779  165F  1903               	skipnz
  7780  1660  2E63               	goto	l6237
  7781                           
  7782                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 264:             return 0;
  7783  1661  3000               	movlw	0
  7784  1662  0008               	return
  7785  1663                     l6237:	
  7786                           
  7787                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 265:     }
  7788  1663  3001               	movlw	1
  7789  1664  0020               	movlb	0	; select bank0
  7790  1665  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  7791  1666  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  7792  1667  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  7793  1668  3002               	movlw	2
  7794  1669  0247               	subwf	MTOUCH_Sensor_SampleAll@group,w
  7795  166A  1C03               	skipc
  7796  166B  2E5A               	goto	l6231
  7797                           
  7798                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 266:     return 1;
  7799  166C  3001               	movlw	1
  7800  166D  0008               	return
  7801  166E                     __end_of_MTOUCH_Sensor_SampleAll:	
  7802                           
  7803                           	psect	text39
  7804  0747                     __ptext39:	
  7805 ;; *************** function _Sensor_Service *****************
  7806 ;; Defined at:
  7807 ;;		line 303 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;  scanGroup       1    wreg     unsigned char 
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  7812 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  7813 ;;		 -> mtouch_sensor(27), 
  7814 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  7815 ;;		 -> NULL(0), mtouch_sensor(27), 
  7816 ;;  error           1   35[BANK0 ] enum E2858
  7817 ;; Return value:  Size  Location     Type
  7818 ;;                  1    wreg      enum E2858
  7819 ;; Registers used:
  7820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7821 ;; Tracked objects:
  7822 ;;		On entry : 0/0
  7823 ;;		On exit  : 0/0
  7824 ;;		Unchanged: 0/0
  7825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7826 ;;      Params:         0       0       0       0       0       0       0       0
  7827 ;;      Locals:         0       4       0       0       0       0       0       0
  7828 ;;      Temps:          0       3       0       0       0       0       0       0
  7829 ;;      Totals:         0       7       0       0       0       0       0       0
  7830 ;;Total ram usage:        7 bytes
  7831 ;; Hardware stack levels used:    1
  7832 ;; Hardware stack levels required when called:    9
  7833 ;; This function calls:
  7834 ;;		_Sensor_Acquisition
  7835 ;;		_Sensor_DefaultCallback
  7836 ;;		_Sensor_RawSample_Update
  7837 ;;		_Sensor_isEnabled
  7838 ;;		_Sensor_setSampled
  7839 ;; This function is called by:
  7840 ;;		_MTOUCH_Sensor_SampleAll
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           
  7845                           ;psect for function _Sensor_Service
  7846  0747                     _Sensor_Service:	
  7847                           
  7848                           ;incstack = 0
  7849                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7850                           ;Sensor_Service@scanGroup stored from wreg
  7851  0747  0020               	movlb	0	; select bank0
  7852  0748  00C2               	movwf	Sensor_Service@scanGroup
  7853                           
  7854                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 303: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 304: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 305:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 306:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 308:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  7855  0749  0842               	movf	Sensor_Service@scanGroup,w
  7856  074A  00BF               	movwf	??_Sensor_Service
  7857  074B  01C0               	clrf	??_Sensor_Service+1
  7858  074C  35BF               	lslf	??_Sensor_Service,f
  7859  074D  0DC0               	rlf	??_Sensor_Service+1,f
  7860  074E  303C               	movlw	low (_sensor_scan_group| (0+32768))
  7861  074F  073F               	addwf	??_Sensor_Service,w
  7862  0750  0084               	movwf	4
  7863  0751  3098               	movlw	high (_sensor_scan_group| (0+32768))
  7864  0752  3D40               	addwfc	??_Sensor_Service+1,w
  7865  0753  0085               	movwf	5
  7866  0754  0800               	movf	0,w	;code access
  7867  0755  00C1               	movwf	??_Sensor_Service+2
  7868  0756  0841               	movf	??_Sensor_Service+2,w
  7869  0757  00C4               	movwf	Sensor_Service@sensor_adc1
  7870                           
  7871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 309:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  7872  0758  0842               	movf	Sensor_Service@scanGroup,w
  7873  0759  00BF               	movwf	??_Sensor_Service
  7874  075A  01C0               	clrf	??_Sensor_Service+1
  7875  075B  35BF               	lslf	??_Sensor_Service,f
  7876  075C  0DC0               	rlf	??_Sensor_Service+1,f
  7877  075D  303D               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  7878  075E  073F               	addwf	??_Sensor_Service,w
  7879  075F  0084               	movwf	4
  7880  0760  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  7881  0761  3D40               	addwfc	??_Sensor_Service+1,w
  7882  0762  0085               	movwf	5
  7883  0763  0800               	movf	0,w	;code access
  7884  0764  00C1               	movwf	??_Sensor_Service+2
  7885  0765  0841               	movf	??_Sensor_Service+2,w
  7886  0766  00C5               	movwf	Sensor_Service@sensor_adc2
  7887                           
  7888                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  7889  0767  0845               	movf	Sensor_Service@sensor_adc2,w
  7890  0768  00BF               	movwf	??_Sensor_Service
  7891  0769  083F               	movf	??_Sensor_Service,w
  7892  076A  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  7893  076B  0844               	movf	Sensor_Service@sensor_adc1,w
  7894  076C  318C  2451  3187   	fcall	_Sensor_Acquisition
  7895  076F  0020               	movlb	0	; select bank0
  7896  0770  00C0               	movwf	??_Sensor_Service+1
  7897  0771  0840               	movf	??_Sensor_Service+1,w
  7898  0772  00C3               	movwf	Sensor_Service@error
  7899                           
  7900                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:     switch(error)
  7901  0773  2FB6               	goto	l6177
  7902  0774                     l6155:	
  7903                           
  7904                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 318:             if(Sensor_isEnabled(sensor_adc1))
  7905  0774  0844               	movf	Sensor_Service@sensor_adc1,w
  7906  0775  3195  25C2  3187   	fcall	_Sensor_isEnabled
  7907  0778  3A00               	xorlw	0
  7908  0779  1903               	skipnz
  7909  077A  2F94               	goto	l6165
  7910                           
  7911                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  7912  077B  0020               	movlb	0	; select bank0
  7913  077C  086A               	movf	_lowpowerActivated,w
  7914  077D  1D03               	btfss	3,2
  7915  077E  2F83               	goto	l6161
  7916                           
  7917                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc1);
  7918  077F  0844               	movf	Sensor_Service@sensor_adc1,w
  7919  0780  3188  206A  3187   	fcall	_Sensor_RawSample_Update
  7920  0783                     l6161:	
  7921                           
  7922                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc1);
  7923  0783  0020               	movlb	0	; select bank0
  7924  0784  0844               	movf	Sensor_Service@sensor_adc1,w
  7925  0785  3194  24FA  3187   	fcall	_Sensor_setSampled
  7926                           
  7927                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc1->sensor);
  7928  0788  0020               	movlb	0	; select bank0
  7929  0789  0844               	movf	Sensor_Service@sensor_adc1,w
  7930  078A  0086               	movwf	6
  7931  078B  3001               	movlw	1	; select bank2/3
  7932  078C  0087               	movwf	7
  7933  078D  0801               	movf	1,w
  7934  078E  00BF               	movwf	??_Sensor_Service
  7935  078F  083F               	movf	??_Sensor_Service,w
  7936  0790  00F1               	movwf	Sensor_DefaultCallback@sensor
  7937  0791  3187  27FF  3187   	fcall	_Sensor_DefaultCallback
  7938  0794                     l6165:	
  7939                           
  7940                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  7941  0794  0020               	movlb	0	; select bank0
  7942  0795  0845               	movf	Sensor_Service@sensor_adc2,w
  7943  0796  3195  25C2  3187   	fcall	_Sensor_isEnabled
  7944  0799  3A00               	xorlw	0
  7945  079A  1903               	skipnz
  7946  079B  2FD9               	goto	l6179
  7947                           
  7948                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 332:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 333:                 if(!lowpowerActivated)
  7949  079C  0020               	movlb	0	; select bank0
  7950  079D  086A               	movf	_lowpowerActivated,w
  7951  079E  1D03               	btfss	3,2
  7952  079F  2FA4               	goto	l6171
  7953                           
  7954                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 335:                     Sensor_RawSample_Update(sensor_adc2);
  7955  07A0  0845               	movf	Sensor_Service@sensor_adc2,w
  7956  07A1  3188  206A  3187   	fcall	_Sensor_RawSample_Update
  7957  07A4                     l6171:	
  7958                           
  7959                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 Sensor_setSampled(sens
      +                          or_adc2);
  7960  07A4  0020               	movlb	0	; select bank0
  7961  07A5  0845               	movf	Sensor_Service@sensor_adc2,w
  7962  07A6  3194  24FA  3187   	fcall	_Sensor_setSampled
  7963                           
  7964                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 338:                 callback_sampled(senso
      +                          r_adc2->sensor);
  7965  07A9  0020               	movlb	0	; select bank0
  7966  07AA  0845               	movf	Sensor_Service@sensor_adc2,w
  7967  07AB  0086               	movwf	6
  7968  07AC  3001               	movlw	1	; select bank2/3
  7969  07AD  0087               	movwf	7
  7970  07AE  0801               	movf	1,w
  7971  07AF  00BF               	movwf	??_Sensor_Service
  7972  07B0  083F               	movf	??_Sensor_Service,w
  7973  07B1  00F1               	movwf	Sensor_DefaultCallback@sensor
  7974  07B2  3187  27FF  3187   	fcall	_Sensor_DefaultCallback
  7975  07B5  2FD9               	goto	l6179
  7976  07B6                     l6177:	
  7977  07B6  0843               	movf	Sensor_Service@error,w
  7978  07B7  00BF               	movwf	??_Sensor_Service
  7979  07B8  01C0               	clrf	??_Sensor_Service+1
  7980  07B9  1BBF               	btfsc	??_Sensor_Service,7
  7981  07BA  03C0               	decf	??_Sensor_Service+1,f
  7982                           
  7983                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7984                           ; Switch size 1, requested type "simple"
  7985                           ; Number of cases is 2, Range of values is 0 to 255
  7986                           ; switch strategies available:
  7987                           ; Name         Instructions Cycles
  7988                           ; simple_byte            7     4 (average)
  7989                           ; jumptable            260     6 (fixed)
  7990                           ;	Chosen strategy is simple_byte
  7991  07BB  0840               	movf	??_Sensor_Service+1,w
  7992  07BC  3A00               	xorlw	0	; case 0
  7993  07BD  1903               	skipnz
  7994  07BE  2FC3               	goto	l6807
  7995  07BF  3AFF               	xorlw	255	; case 255
  7996  07C0  1903               	skipnz
  7997  07C1  2FC8               	goto	l6809
  7998  07C2  2FD9               	goto	l6179
  7999  07C3                     l6807:	
  8000                           
  8001                           ; Switch size 1, requested type "simple"
  8002                           ; Number of cases is 1, Range of values is 0 to 0
  8003                           ; switch strategies available:
  8004                           ; Name         Instructions Cycles
  8005                           ; simple_byte            4     3 (average)
  8006                           ; direct_byte            8     6 (fixed)
  8007                           ; jumptable            260     6 (fixed)
  8008                           ;	Chosen strategy is simple_byte
  8009  07C3  083F               	movf	??_Sensor_Service,w
  8010  07C4  3A00               	xorlw	0	; case 0
  8011  07C5  1903               	skipnz
  8012  07C6  2F74               	goto	l6155
  8013  07C7  2FD9               	goto	l6179
  8014  07C8                     l6809:	
  8015                           
  8016                           ; Switch size 1, requested type "simple"
  8017                           ; Number of cases is 5, Range of values is 251 to 255
  8018                           ; switch strategies available:
  8019                           ; Name         Instructions Cycles
  8020                           ; direct_byte           15     5 (fixed)
  8021                           ; simple_byte           16     9 (average)
  8022                           ; jumptable            263     9 (fixed)
  8023                           ;	Chosen strategy is simple_byte
  8024  07C8  083F               	movf	??_Sensor_Service,w
  8025  07C9  3AFB               	xorlw	251	; case 251
  8026  07CA  1903               	skipnz
  8027  07CB  2FD9               	goto	l6179
  8028  07CC  3A07               	xorlw	7	; case 252
  8029  07CD  1903               	skipnz
  8030  07CE  2FD9               	goto	l6179
  8031  07CF  3A01               	xorlw	1	; case 253
  8032  07D0  1903               	skipnz
  8033  07D1  2FD9               	goto	l6179
  8034  07D2  3A03               	xorlw	3	; case 254
  8035  07D3  1903               	skipnz
  8036  07D4  2FD9               	goto	l6179
  8037  07D5  3A01               	xorlw	1	; case 255
  8038  07D6  1903               	skipnz
  8039  07D7  2FD9               	goto	l6179
  8040  07D8  2FD9               	goto	l6179
  8041  07D9                     l6179:	
  8042                           
  8043                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     return error;
  8044  07D9  0020               	movlb	0	; select bank0
  8045  07DA  0843               	movf	Sensor_Service@error,w
  8046  07DB  0008               	return
  8047  07DC                     __end_of_Sensor_Service:	
  8048                           
  8049                           	psect	text40
  8050  14FA                     __ptext40:	
  8051 ;; *************** function _Sensor_setSampled *****************
  8052 ;; Defined at:
  8053 ;;		line 969 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;  sensor          1    wreg     PTR struct .
  8056 ;;		 -> NULL(0), mtouch_sensor(27), 
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;  sensor          1    1[COMMON] PTR struct .
  8059 ;;		 -> NULL(0), mtouch_sensor(27), 
  8060 ;; Return value:  Size  Location     Type
  8061 ;;                  1    wreg      void 
  8062 ;; Registers used:
  8063 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8064 ;; Tracked objects:
  8065 ;;		On entry : 0/0
  8066 ;;		On exit  : 0/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8069 ;;      Params:         0       0       0       0       0       0       0       0
  8070 ;;      Locals:         1       0       0       0       0       0       0       0
  8071 ;;      Temps:          0       0       0       0       0       0       0       0
  8072 ;;      Totals:         1       0       0       0       0       0       0       0
  8073 ;;Total ram usage:        1 bytes
  8074 ;; Hardware stack levels used:    1
  8075 ;; Hardware stack levels required when called:    4
  8076 ;; This function calls:
  8077 ;;		Nothing
  8078 ;; This function is called by:
  8079 ;;		_Sensor_Service
  8080 ;; This function uses a non-reentrant model
  8081 ;;
  8082                           
  8083                           
  8084                           ;psect for function _Sensor_setSampled
  8085  14FA                     _Sensor_setSampled:	
  8086                           
  8087                           ;incstack = 0
  8088                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8089                           ;Sensor_setSampled@sensor stored from wreg
  8090  14FA  00F1               	movwf	Sensor_setSampled@sensor
  8091                           
  8092                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 969: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 970
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 971:     sensor->sampled = 1;
  8093  14FB  0871               	movf	Sensor_setSampled@sensor,w
  8094  14FC  3E08               	addlw	8
  8095  14FD  0086               	movwf	6
  8096  14FE  3001               	movlw	1	; select bank2/3
  8097  14FF  0087               	movwf	7
  8098  1500  1401               	bsf	1,0
  8099  1501  0008               	return
  8100  1502                     __end_of_Sensor_setSampled:	
  8101                           
  8102                           	psect	text41
  8103  086A                     __ptext41:	
  8104 ;; *************** function _Sensor_RawSample_Update *****************
  8105 ;; Defined at:
  8106 ;;		line 802 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;  sensor          1    wreg     PTR struct .
  8109 ;;		 -> NULL(0), mtouch_sensor(27), 
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;  sensor          1    7[COMMON] PTR struct .
  8112 ;;		 -> NULL(0), mtouch_sensor(27), 
  8113 ;;  adcIndex        1    6[COMMON] unsigned char 
  8114 ;; Return value:  Size  Location     Type
  8115 ;;                  1    wreg      void 
  8116 ;; Registers used:
  8117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8118 ;; Tracked objects:
  8119 ;;		On entry : 0/0
  8120 ;;		On exit  : 0/0
  8121 ;;		Unchanged: 0/0
  8122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8123 ;;      Params:         0       0       0       0       0       0       0       0
  8124 ;;      Locals:         2       0       0       0       0       0       0       0
  8125 ;;      Temps:          1       0       0       0       0       0       0       0
  8126 ;;      Totals:         3       0       0       0       0       0       0       0
  8127 ;;Total ram usage:        3 bytes
  8128 ;; Hardware stack levels used:    1
  8129 ;; Hardware stack levels required when called:    5
  8130 ;; This function calls:
  8131 ;;		_Sensor_getScanGroupIndex
  8132 ;; This function is called by:
  8133 ;;		_Sensor_Service
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function _Sensor_RawSample_Update
  8139  086A                     _Sensor_RawSample_Update:	
  8140                           
  8141                           ;incstack = 0
  8142                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8143                           ;Sensor_RawSample_Update@sensor stored from wreg
  8144  086A  00F7               	movwf	Sensor_RawSample_Update@sensor
  8145                           
  8146                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 803: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 804:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  8147  086B  0877               	movf	Sensor_RawSample_Update@sensor,w
  8148  086C  3188  20E6  3188   	fcall	_Sensor_getScanGroupIndex
  8149  086F  00F5               	movwf	??_Sensor_RawSample_Update
  8150  0870  0875               	movf	??_Sensor_RawSample_Update,w
  8151  0871  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  8152                           
  8153                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 806:     if (INTCONbits.GIE == (uint8_t)1)
  8154  0872  1F8B               	btfss	11,7	;volatile
  8155  0873  2884               	goto	l4433
  8156                           
  8157                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 808:         INTCONbits.GIE = (uint8_t)0;
  8158  0874  138B               	bcf	11,7	;volatile
  8159                           
  8160                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 809:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  8161  0875  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  8162  0876  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8163  0877  0086               	movwf	6
  8164  0878  0187               	clrf	7
  8165  0879  0877               	movf	Sensor_RawSample_Update@sensor,w
  8166  087A  3E06               	addlw	6
  8167  087B  0084               	movwf	4
  8168  087C  3001               	movlw	1	; select bank2/3
  8169  087D  0085               	movwf	5
  8170  087E  3F40               	moviw [0]fsr1
  8171  087F  3F80               	movwi [0]fsr0
  8172  0880  3F41               	moviw [1]fsr1
  8173  0881  3F81               	movwi [1]fsr0
  8174                           
  8175                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810:         INTCONbits.GIE = (uint8_t)1;
  8176  0882  178B               	bsf	11,7	;volatile
  8177                           
  8178                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 811:     }
  8179  0883  0008               	return
  8180  0884                     l4433:	
  8181                           
  8182                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 813:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 814:         sensor->rawSample = packet_sample[adcIndex];
  8183  0884  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  8184  0885  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8185  0886  0086               	movwf	6
  8186  0887  0187               	clrf	7
  8187  0888  0877               	movf	Sensor_RawSample_Update@sensor,w
  8188  0889  3E06               	addlw	6
  8189  088A  0084               	movwf	4
  8190  088B  3001               	movlw	1	; select bank2/3
  8191  088C  0085               	movwf	5
  8192  088D  3F40               	moviw [0]fsr1
  8193  088E  3F80               	movwi [0]fsr0
  8194  088F  3F41               	moviw [1]fsr1
  8195  0890  3F81               	movwi [1]fsr0
  8196  0891  0008               	return
  8197  0892                     __end_of_Sensor_RawSample_Update:	
  8198                           
  8199                           	psect	text42
  8200  07FF                     __ptext42:	
  8201 ;; *************** function _Sensor_DefaultCallback *****************
  8202 ;; Defined at:
  8203 ;;		line 823 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  sensor          1    1[COMMON] enum E2854
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;		None
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  1    wreg      void 
  8210 ;; Registers used:
  8211 ;;		None
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8217 ;;      Params:         1       0       0       0       0       0       0       0
  8218 ;;      Locals:         0       0       0       0       0       0       0       0
  8219 ;;      Temps:          0       0       0       0       0       0       0       0
  8220 ;;      Totals:         1       0       0       0       0       0       0       0
  8221 ;;Total ram usage:        1 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    4
  8224 ;; This function calls:
  8225 ;;		Nothing
  8226 ;; This function is called by:
  8227 ;;		_Sensor_Service
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           
  8232                           ;psect for function _Sensor_DefaultCallback
  8233  07FF                     _Sensor_DefaultCallback:	
  8234                           
  8235                           ;incstack = 0
  8236                           ; Regs used in _Sensor_DefaultCallback: []
  8237  07FF  0008               	return
  8238  0800                     __end_of_Sensor_DefaultCallback:	
  8239                           
  8240                           	psect	text43
  8241  0C51                     __ptext43:	
  8242 ;; *************** function _Sensor_Acquisition *****************
  8243 ;; Defined at:
  8244 ;;		line 372 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;  sensor_adc1     1    wreg     PTR struct .
  8247 ;;		 -> NULL(0), mtouch_sensor(27), 
  8248 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  8249 ;;		 -> mtouch_sensor(27), 
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  8252 ;;		 -> NULL(0), mtouch_sensor(27), 
  8253 ;;  retry           1   29[BANK0 ] unsigned char 
  8254 ;; Return value:  Size  Location     Type
  8255 ;;                  1    wreg      enum E2858
  8256 ;; Registers used:
  8257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8258 ;; Tracked objects:
  8259 ;;		On entry : 0/0
  8260 ;;		On exit  : 0/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8263 ;;      Params:         0       1       0       0       0       0       0       0
  8264 ;;      Locals:         0       2       0       0       0       0       0       0
  8265 ;;      Temps:          0       1       0       0       0       0       0       0
  8266 ;;      Totals:         0       4       0       0       0       0       0       0
  8267 ;;Total ram usage:        4 bytes
  8268 ;; Hardware stack levels used:    1
  8269 ;; Hardware stack levels required when called:    8
  8270 ;; This function calls:
  8271 ;;		_Sensor_Acq_ExecutePacket
  8272 ;;		_Sensor_Scanfrequency_Evaluation
  8273 ;;		_Sensor_isActive
  8274 ;;		_Sensor_isCalibrated
  8275 ;;		_Sensor_postAcquisitionProcess
  8276 ;; This function is called by:
  8277 ;;		_Sensor_Service
  8278 ;; This function uses a non-reentrant model
  8279 ;;
  8280                           
  8281                           
  8282                           ;psect for function _Sensor_Acquisition
  8283  0C51                     _Sensor_Acquisition:	
  8284                           
  8285                           ;incstack = 0
  8286                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8287                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  8288  0C51  0020               	movlb	0	; select bank0
  8289  0C52  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  8290                           
  8291                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 372: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 373: {;mcc_generated_files/mtouch/mtouch_sensor.c: 374:     
      +                          uint8_t retry = (uint8_t)5;
  8292  0C53  3005               	movlw	5
  8293  0C54  00BC               	movwf	??_Sensor_Acquisition
  8294  0C55  083C               	movf	??_Sensor_Acquisition,w
  8295  0C56  00BD               	movwf	Sensor_Acquisition@retry
  8296                           
  8297                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 377:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  8298  0C57  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8299  0C58  1D03               	btfss	3,2
  8300  0C59  2C67               	goto	l5977
  8301  0C5A  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8302  0C5B  1D03               	btfss	3,2
  8303  0C5C  2C67               	goto	l5977
  8304                           
  8305                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 379:         return MTOUCH_SENSOR_ERROR_invalid_index;
  8306  0C5D  30FF               	movlw	255
  8307  0C5E  0008               	return
  8308  0C5F                     l5971:	
  8309                           
  8310                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         retry--;
  8311  0C5F  3001               	movlw	1
  8312  0C60  0020               	movlb	0	; select bank0
  8313  0C61  02BD               	subwf	Sensor_Acquisition@retry,f
  8314                           
  8315                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:         if(retry == 0)
  8316  0C62  083D               	movf	Sensor_Acquisition@retry,w
  8317  0C63  1D03               	btfss	3,2
  8318  0C64  2C67               	goto	l5977
  8319                           
  8320                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 392:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8321  0C65  30FC               	movlw	252
  8322  0C66  0008               	return
  8323  0C67                     l5977:	
  8324                           
  8325                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  8326  0C67  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8327  0C68  00BC               	movwf	??_Sensor_Acquisition
  8328  0C69  083C               	movf	??_Sensor_Acquisition,w
  8329  0C6A  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8330  0C6B  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8331  0C6C  3182  22DA  318C   	fcall	_Sensor_Acq_ExecutePacket
  8332  0C6F  3A00               	xorlw	0
  8333  0C70  1D03               	skipz
  8334  0C71  2C5F               	goto	l5971
  8335                           
  8336                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_adc1 != ((void*)0))
  8337  0C72  0020               	movlb	0	; select bank0
  8338  0C73  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8339  0C74  1903               	btfsc	3,2
  8340  0C75  2C7A               	goto	l5983
  8341                           
  8342                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 398:         Sensor_postAcquisitionProcess(sensor_adc1);
  8343  0C76  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8344  0C77  318A  223F  318C   	fcall	_Sensor_postAcquisitionProcess
  8345  0C7A                     l5983:	
  8346                           
  8347                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 401:     if(sensor_adc2 !=((void*)0))
  8348  0C7A  0020               	movlb	0	; select bank0
  8349  0C7B  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8350  0C7C  1903               	btfsc	3,2
  8351  0C7D  2C82               	goto	l5987
  8352                           
  8353                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 403:         Sensor_postAcquisitionProcess(sensor_adc2);
  8354  0C7E  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8355  0C7F  318A  223F  318C   	fcall	_Sensor_postAcquisitionProcess
  8356  0C82                     l5987:	
  8357                           
  8358                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  8359  0C82  0020               	movlb	0	; select bank0
  8360  0C83  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8361  0C84  3195  2557  318C   	fcall	_Sensor_isActive
  8362  0C87  3A00               	xorlw	0
  8363  0C88  1903               	skipnz
  8364  0C89  2C92               	goto	l5991
  8365  0C8A  0020               	movlb	0	; select bank0
  8366  0C8B  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8367  0C8C  3195  251B  318C   	fcall	_Sensor_isCalibrated
  8368  0C8F  3A00               	xorlw	0
  8369  0C90  1D03               	skipz
  8370  0C91  2CA2               	goto	l5995
  8371  0C92                     l5991:	
  8372  0C92  0020               	movlb	0	; select bank0
  8373  0C93  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8374  0C94  3195  2557  318C   	fcall	_Sensor_isActive
  8375  0C97  3A00               	xorlw	0
  8376  0C98  1903               	skipnz
  8377  0C99  2CAB               	goto	l5999
  8378  0C9A  0020               	movlb	0	; select bank0
  8379  0C9B  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8380  0C9C  3195  251B  318C   	fcall	_Sensor_isCalibrated
  8381  0C9F  3A00               	xorlw	0
  8382  0CA0  1903               	skipnz
  8383  0CA1  2CAB               	goto	l5999
  8384  0CA2                     l5995:	
  8385                           
  8386                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 409:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  8387  0CA2  0020               	movlb	0	; select bank0
  8388  0CA3  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8389  0CA4  00BC               	movwf	??_Sensor_Acquisition
  8390  0CA5  083C               	movf	??_Sensor_Acquisition,w
  8391  0CA6  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  8392  0CA7  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8393  0CA8  318D  25E2         	fcall	_Sensor_Scanfrequency_Evaluation
  8394  0CAA  0008               	return
  8395  0CAB                     l5999:	
  8396                           
  8397                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:     return MTOUCH_SENSOR_ERROR_none;
  8398  0CAB  3000               	movlw	0
  8399  0CAC  0008               	return
  8400  0CAD                     __end_of_Sensor_Acquisition:	
  8401                           
  8402                           	psect	text44
  8403  0A3F                     __ptext44:	
  8404 ;; *************** function _Sensor_postAcquisitionProcess *****************
  8405 ;; Defined at:
  8406 ;;		line 415 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8407 ;; Parameters:    Size  Location     Type
  8408 ;;  sensor          1    wreg     PTR struct .
  8409 ;;		 -> NULL(0), mtouch_sensor(27), 
  8410 ;; Auto vars:     Size  Location     Type
  8411 ;;  sensor          1    9[COMMON] PTR struct .
  8412 ;;		 -> NULL(0), mtouch_sensor(27), 
  8413 ;;  deviation       2    6[COMMON] unsigned short 
  8414 ;;  adcIndex        1    8[COMMON] unsigned char 
  8415 ;; Return value:  Size  Location     Type
  8416 ;;                  1    wreg      void 
  8417 ;; Registers used:
  8418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8419 ;; Tracked objects:
  8420 ;;		On entry : 0/0
  8421 ;;		On exit  : 0/0
  8422 ;;		Unchanged: 0/0
  8423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8424 ;;      Params:         0       0       0       0       0       0       0       0
  8425 ;;      Locals:         4       0       0       0       0       0       0       0
  8426 ;;      Temps:          1       0       0       0       0       0       0       0
  8427 ;;      Totals:         5       0       0       0       0       0       0       0
  8428 ;;Total ram usage:        5 bytes
  8429 ;; Hardware stack levels used:    1
  8430 ;; Hardware stack levels required when called:    5
  8431 ;; This function calls:
  8432 ;;		_Sensor_getScanGroupIndex
  8433 ;;		_Sensor_isEnabled
  8434 ;;		_Sensor_setActive
  8435 ;;		_Sensor_setInactive
  8436 ;;		_abs
  8437 ;; This function is called by:
  8438 ;;		_Sensor_Acquisition
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           
  8443                           ;psect for function _Sensor_postAcquisitionProcess
  8444  0A3F                     _Sensor_postAcquisitionProcess:	
  8445                           
  8446                           ;incstack = 0
  8447                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8448                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  8449  0A3F  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  8450                           
  8451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 415: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 416: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 417:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 418:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  8452  0A40  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8453  0A41  3188  20E6  318A   	fcall	_Sensor_getScanGroupIndex
  8454  0A44  00F5               	movwf	??_Sensor_postAcquisitionProcess
  8455  0A45  0875               	movf	??_Sensor_postAcquisitionProcess,w
  8456  0A46  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  8457                           
  8458                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     if(Sensor_isEnabled(sensor))
  8459  0A47  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8460  0A48  3195  25C2  318A   	fcall	_Sensor_isEnabled
  8461  0A4B  3A00               	xorlw	0
  8462  0A4C  1903               	skipnz
  8463  0A4D  2A66               	goto	l4245
  8464                           
  8465                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  8466  0A4E  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8467  0A4F  3E06               	addlw	6
  8468  0A50  0086               	movwf	6
  8469  0A51  3001               	movlw	1	; select bank2/3
  8470  0A52  0087               	movwf	7
  8471  0A53  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  8472  0A54  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8473  0A55  0084               	movwf	4
  8474  0A56  0185               	clrf	5
  8475  0A57  3F40               	moviw [0]fsr1
  8476  0A58  0200               	subwf	0,w
  8477  0A59  00F1               	movwf	abs@a
  8478  0A5A  3101               	addfsr 0,1
  8479  0A5B  3F41               	moviw [1]fsr1
  8480  0A5C  3B00               	subwfb	0,w
  8481  0A5D  00F2               	movwf	abs@a+1
  8482  0A5E  3196  269B  318A   	fcall	_abs
  8483  0A61  0872               	movf	?_abs+1,w
  8484  0A62  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  8485  0A63  0871               	movf	?_abs,w
  8486  0A64  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  8487  0A65  2A68               	goto	l4247
  8488  0A66                     l4245:	
  8489                           
  8490                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423:         deviation = 0;
  8491  0A66  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  8492  0A67  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  8493  0A68                     l4247:	
  8494                           
  8495                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     if(deviation > 100u)
  8496  0A68  3000               	movlw	0
  8497  0A69  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  8498  0A6A  3065               	movlw	101
  8499  0A6B  1903               	skipnz
  8500  0A6C  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  8501  0A6D  1C03               	skipc
  8502  0A6E  2A73               	goto	l4251
  8503                           
  8504                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:         Sensor_setActive(sensor);
  8505  0A6F  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8506  0A70  3194  24EA         	fcall	_Sensor_setActive
  8507  0A72  0008               	return
  8508  0A73                     l4251:	
  8509                           
  8510                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:         Sensor_setInactive(sensor);
  8511  0A73  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8512  0A74  3194  24F2         	fcall	_Sensor_setInactive
  8513  0A76  0008               	return
  8514  0A77                     __end_of_Sensor_postAcquisitionProcess:	
  8515                           
  8516                           	psect	text45
  8517  14F2                     __ptext45:	
  8518 ;; *************** function _Sensor_setInactive *****************
  8519 ;; Defined at:
  8520 ;;		line 877 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;  sensor          1    wreg     PTR struct .
  8523 ;;		 -> NULL(0), mtouch_sensor(27), 
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;  sensor          1    1[COMMON] PTR struct .
  8526 ;;		 -> NULL(0), mtouch_sensor(27), 
  8527 ;; Return value:  Size  Location     Type
  8528 ;;                  1    wreg      void 
  8529 ;; Registers used:
  8530 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8531 ;; Tracked objects:
  8532 ;;		On entry : 0/0
  8533 ;;		On exit  : 0/0
  8534 ;;		Unchanged: 0/0
  8535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8536 ;;      Params:         0       0       0       0       0       0       0       0
  8537 ;;      Locals:         1       0       0       0       0       0       0       0
  8538 ;;      Temps:          0       0       0       0       0       0       0       0
  8539 ;;      Totals:         1       0       0       0       0       0       0       0
  8540 ;;Total ram usage:        1 bytes
  8541 ;; Hardware stack levels used:    1
  8542 ;; Hardware stack levels required when called:    4
  8543 ;; This function calls:
  8544 ;;		Nothing
  8545 ;; This function is called by:
  8546 ;;		_Sensor_postAcquisitionProcess
  8547 ;; This function uses a non-reentrant model
  8548 ;;
  8549                           
  8550                           
  8551                           ;psect for function _Sensor_setInactive
  8552  14F2                     _Sensor_setInactive:	
  8553                           
  8554                           ;incstack = 0
  8555                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8556                           ;Sensor_setInactive@sensor stored from wreg
  8557  14F2  00F1               	movwf	Sensor_setInactive@sensor
  8558                           
  8559                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 877: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 87
      +                          8: {;mcc_generated_files/mtouch/mtouch_sensor.c: 879:     sensor->active = 0;
  8560  14F3  0871               	movf	Sensor_setInactive@sensor,w
  8561  14F4  3E08               	addlw	8
  8562  14F5  0086               	movwf	6
  8563  14F6  3001               	movlw	1	; select bank2/3
  8564  14F7  0087               	movwf	7
  8565  14F8  1081               	bcf	1,1
  8566  14F9  0008               	return
  8567  14FA                     __end_of_Sensor_setInactive:	
  8568                           
  8569                           	psect	text46
  8570  14EA                     __ptext46:	
  8571 ;; *************** function _Sensor_setActive *****************
  8572 ;; Defined at:
  8573 ;;		line 872 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8574 ;; Parameters:    Size  Location     Type
  8575 ;;  sensor          1    wreg     PTR struct .
  8576 ;;		 -> NULL(0), mtouch_sensor(27), 
  8577 ;; Auto vars:     Size  Location     Type
  8578 ;;  sensor          1    1[COMMON] PTR struct .
  8579 ;;		 -> NULL(0), mtouch_sensor(27), 
  8580 ;; Return value:  Size  Location     Type
  8581 ;;                  1    wreg      void 
  8582 ;; Registers used:
  8583 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8584 ;; Tracked objects:
  8585 ;;		On entry : 0/0
  8586 ;;		On exit  : 0/0
  8587 ;;		Unchanged: 0/0
  8588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8589 ;;      Params:         0       0       0       0       0       0       0       0
  8590 ;;      Locals:         1       0       0       0       0       0       0       0
  8591 ;;      Temps:          0       0       0       0       0       0       0       0
  8592 ;;      Totals:         1       0       0       0       0       0       0       0
  8593 ;;Total ram usage:        1 bytes
  8594 ;; Hardware stack levels used:    1
  8595 ;; Hardware stack levels required when called:    4
  8596 ;; This function calls:
  8597 ;;		Nothing
  8598 ;; This function is called by:
  8599 ;;		_Sensor_postAcquisitionProcess
  8600 ;; This function uses a non-reentrant model
  8601 ;;
  8602                           
  8603                           
  8604                           ;psect for function _Sensor_setActive
  8605  14EA                     _Sensor_setActive:	
  8606                           
  8607                           ;incstack = 0
  8608                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8609                           ;Sensor_setActive@sensor stored from wreg
  8610  14EA  00F1               	movwf	Sensor_setActive@sensor
  8611                           
  8612                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 872: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 873:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 874:     sensor->active = 1;
  8613  14EB  0871               	movf	Sensor_setActive@sensor,w
  8614  14EC  3E08               	addlw	8
  8615  14ED  0086               	movwf	6
  8616  14EE  3001               	movlw	1	; select bank2/3
  8617  14EF  0087               	movwf	7
  8618  14F0  1481               	bsf	1,1
  8619  14F1  0008               	return
  8620  14F2                     __end_of_Sensor_setActive:	
  8621                           
  8622                           	psect	text47
  8623  0DE2                     __ptext47:	
  8624 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  8625 ;; Defined at:
  8626 ;;		line 733 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8627 ;; Parameters:    Size  Location     Type
  8628 ;;  sensor_adc1     1    wreg     PTR struct .
  8629 ;;		 -> NULL(0), mtouch_sensor(27), 
  8630 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  8631 ;;		 -> mtouch_sensor(27), 
  8632 ;; Auto vars:     Size  Location     Type
  8633 ;;  sensor_adc1     1   17[BANK0 ] PTR struct .
  8634 ;;		 -> NULL(0), mtouch_sensor(27), 
  8635 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  8636 ;;  packet_noise    2   18[BANK0 ] unsigned short 
  8637 ;;  i               1   26[BANK0 ] unsigned char 
  8638 ;;  retry           1   21[BANK0 ] unsigned char 
  8639 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  1    wreg      enum E2858
  8642 ;; Registers used:
  8643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8649 ;;      Params:         0       1       0       0       0       0       0       0
  8650 ;;      Locals:         0      10       0       0       0       0       0       0
  8651 ;;      Temps:          0       2       0       0       0       0       0       0
  8652 ;;      Totals:         0      13       0       0       0       0       0       0
  8653 ;;Total ram usage:       13 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:    7
  8656 ;; This function calls:
  8657 ;;		_Sensor_Acq_ExecutePacket
  8658 ;; This function is called by:
  8659 ;;		_Sensor_Acquisition
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           
  8664                           ;psect for function _Sensor_Scanfrequency_Evaluation
  8665  0DE2                     _Sensor_Scanfrequency_Evaluation:	
  8666                           
  8667                           ;incstack = 0
  8668                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8669                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  8670  0DE2  0020               	movlb	0	; select bank0
  8671  0DE3  00B1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  8672                           
  8673                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 734: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 735:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 737:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 738:     mtouch_sensor_sampleperiod_t best_sample_period;
  8674  0DE4  085C               	movf	_packet_noise+1,w
  8675  0DE5  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  8676  0DE6  085B               	movf	_packet_noise,w
  8677  0DE7  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8678  0DE8  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8679  0DE9  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8680  0DEA  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8681  0DEB  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8682  0DEC  085B               	movf	_packet_noise,w
  8683  0DED  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  8684  0DEE  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8685  0DEF  085C               	movf	_packet_noise+1,w
  8686  0DF0  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  8687  0DF1  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8688                           
  8689                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:     best_sample_period = sample_period
      +                          ;
  8690  0DF2  086E               	movf	_sample_period,w
  8691  0DF3  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8692  0DF4  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8693  0DF5  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8694                           
  8695                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  8696  0DF6  0854               	movf	_packet_sample+1,w
  8697  0DF7  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8698  0DF8  0853               	movf	_packet_sample,w
  8699  0DF9  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8700                           
  8701                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  8702  0DFA  0856               	movf	_packet_sample+3,w
  8703  0DFB  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8704  0DFC  0855               	movf	_packet_sample+2,w
  8705  0DFD  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8706                           
  8707                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  8708  0DFE  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  8709  0DFF                     l5889:	
  8710                           
  8711                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 749:         sample_period += frequency_hop[i];
  8712  0DFF  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  8713  0E00  3E0F               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8714  0E01  0084               	movwf	4
  8715  0E02  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8716  0E03  1803               	skipnc
  8717  0E04  3E01               	addlw	1
  8718  0E05  0085               	movwf	5
  8719  0E06  0800               	movf	0,w	;code access
  8720  0E07  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8721  0E08  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8722  0E09  07EE               	addwf	_sample_period,f
  8723                           
  8724                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  8725  0E0A  30AE               	movlw	174
  8726  0E0B  026E               	subwf	_sample_period,w
  8727  0E0C  1803               	skipnc
  8728  0E0D  2E12               	goto	l5897
  8729                           
  8730                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  8731  0E0E  30AE               	movlw	174
  8732  0E0F  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8733  0E10  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8734  0E11  07EE               	addwf	_sample_period,f
  8735  0E12                     l5897:	
  8736                           
  8737                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:         retry = (uint8_t)5;
  8738  0E12  3005               	movlw	5
  8739  0E13  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8740  0E14  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8741  0E15  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  8742  0E16                     l5905:	
  8743                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8744                           
  8745                           
  8746                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8747  0E16  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  8748  0E17  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8749  0E18  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8750  0E19  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8751  0E1A  0831               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  8752  0E1B  3182  22DA  318D   	fcall	_Sensor_Acq_ExecutePacket
  8753  0E1E  3A00               	xorlw	0
  8754  0E1F  1903               	btfsc	3,2
  8755  0E20  2E29               	goto	l5907
  8756                           
  8757                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             retry--;
  8758  0E21  3001               	movlw	1
  8759  0E22  0020               	movlb	0	; select bank0
  8760  0E23  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  8761                           
  8762                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             if(retry == 0)
  8763  0E24  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  8764  0E25  1D03               	btfss	3,2
  8765  0E26  2E16               	goto	l5905
  8766                           
  8767                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 767:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8768  0E27  30FC               	movlw	252
  8769  0E28  0008               	return
  8770  0E29                     l5907:	
  8771                           
  8772                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         if(packet_noise_Max < packet_n
      +                          oise)
  8773  0E29  0020               	movlb	0	; select bank0
  8774  0E2A  085C               	movf	_packet_noise+1,w
  8775  0E2B  0233               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  8776  0E2C  1D03               	skipz
  8777  0E2D  2E30               	goto	u4725
  8778  0E2E  085B               	movf	_packet_noise,w
  8779  0E2F  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  8780  0E30                     u4725:	
  8781  0E30  1803               	skipnc
  8782  0E31  2E42               	goto	l5911
  8783                           
  8784                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 773:             packet_noise_Max = packet_noise;
  8785  0E32  085C               	movf	_packet_noise+1,w
  8786  0E33  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8787  0E34  085B               	movf	_packet_noise,w
  8788  0E35  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8789                           
  8790                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             best_sample_period = sampl
      +                          e_period;
  8791  0E36  086E               	movf	_sample_period,w
  8792  0E37  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8793  0E38  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8794  0E39  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8795                           
  8796                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  8797  0E3A  0854               	movf	_packet_sample+1,w
  8798  0E3B  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8799  0E3C  0853               	movf	_packet_sample,w
  8800  0E3D  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8801                           
  8802                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  8803  0E3E  0856               	movf	_packet_sample+3,w
  8804  0E3F  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8805  0E40  0855               	movf	_packet_sample+2,w
  8806  0E41  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8807  0E42                     l5911:	
  8808                           
  8809                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     }
  8810  0E42  3001               	movlw	1
  8811  0E43  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8812  0E44  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8813  0E45  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  8814  0E46  3005               	movlw	5
  8815  0E47  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  8816  0E48  1C03               	skipc
  8817  0E49  2DFF               	goto	l5889
  8818                           
  8819                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:     sample_period = best_sample_period
      +                          ;
  8820  0E4A  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  8821  0E4B  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8822  0E4C  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8823  0E4D  00EE               	movwf	_sample_period
  8824                           
  8825                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 781:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  8826  0E4E  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  8827  0E4F  00D4               	movwf	_packet_sample+1
  8828  0E50  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  8829  0E51  00D3               	movwf	_packet_sample
  8830                           
  8831                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  8832  0E52  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  8833  0E53  00D6               	movwf	_packet_sample+3
  8834  0E54  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  8835  0E55  00D5               	movwf	_packet_sample+2
  8836                           
  8837                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:     return MTOUCH_SENSOR_ERROR_none;
  8838  0E56  3000               	movlw	0
  8839  0E57  0008               	return
  8840  0E58                     __end_of_Sensor_Scanfrequency_Evaluation:	
  8841                           
  8842                           	psect	text48
  8843  02DA                     __ptext48:	
  8844 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  8845 ;; Defined at:
  8846 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;  sensor_adc1     1    wreg     PTR struct .
  8849 ;;		 -> NULL(0), mtouch_sensor(27), 
  8850 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  8851 ;;		 -> mtouch_sensor(27), 
  8852 ;; Auto vars:     Size  Location     Type
  8853 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  8854 ;;		 -> NULL(0), mtouch_sensor(27), 
  8855 ;;  last_b          2   10[BANK0 ] unsigned short 
  8856 ;;  last_a          2    8[BANK0 ] unsigned short 
  8857 ;;  packet_count    1   12[BANK0 ] unsigned char 
  8858 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  8859 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  8860 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  8861 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  8862 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  8863 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  8864 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  8865 ;; Return value:  Size  Location     Type
  8866 ;;                  1    wreg      enum E2858
  8867 ;; Registers used:
  8868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8874 ;;      Params:         1       0       0       0       0       0       0       0
  8875 ;;      Locals:         0      13       0       0       0       0       0       0
  8876 ;;      Temps:          0       1       0       0       0       0       0       0
  8877 ;;      Totals:         1      14       0       0       0       0       0       0
  8878 ;;Total ram usage:       15 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; Hardware stack levels required when called:    6
  8881 ;; This function calls:
  8882 ;;		_MTOUCH_Sensor_Scan_Initialize
  8883 ;;		_Sensor_autoCalibration
  8884 ;;		_Sensor_isActive
  8885 ;;		_Sensor_isCalibrated
  8886 ;;		_Sensor_isEnabled
  8887 ;;		_Sensor_loadADCSettings
  8888 ;;		_TMR2_LoadPeriodRegister
  8889 ;;		_TMR2_StartTimer
  8890 ;;		_TMR2_StopTimer
  8891 ;;		_abs
  8892 ;; This function is called by:
  8893 ;;		_Sensor_Acquisition
  8894 ;;		_Sensor_Scanfrequency_Evaluation
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           
  8899                           ;psect for function _Sensor_Acq_ExecutePacket
  8900  02DA                     _Sensor_Acq_ExecutePacket:	
  8901                           
  8902                           ;incstack = 0
  8903                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8904                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  8905  02DA  0020               	movlb	0	; select bank0
  8906  02DB  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  8907                           
  8908                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 476:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  8909  02DC  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  8910  02DD  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  8911                           
  8912                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  8913  02DE  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  8914  02DF  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  8915                           
  8916                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:     uint8_t activeSensor = 0;
  8917  02E0  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  8918                           
  8919                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 481:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 487:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  8920  02E1  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8921  02E2  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8922                           
  8923                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  8924  02E3  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8925  02E4  1903               	btfsc	3,2
  8926  02E5  2B20               	goto	l5669
  8927  02E6  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8928  02E7  1903               	btfsc	3,2
  8929  02E8  2B20               	goto	l5669
  8930                           
  8931                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 490:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  8932  02E9  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8933  02EA  3E08               	addlw	8
  8934  02EB  0086               	movwf	6
  8935  02EC  3001               	movlw	1	; select bank2/3
  8936  02ED  0087               	movwf	7
  8937  02EE  1981               	btfsc	1,3
  8938  02EF  2B00               	goto	l5651
  8939  02F0  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8940  02F1  3E08               	addlw	8
  8941  02F2  0086               	movwf	6
  8942  02F3  3001               	movlw	1	; select bank2/3
  8943  02F4  0087               	movwf	7
  8944  02F5  1D81               	btfss	1,3
  8945  02F6  2B00               	goto	l5651
  8946                           
  8947                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 492:             sensor_adc1->enabled = 1;
  8948  02F7  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8949  02F8  3E08               	addlw	8
  8950  02F9  0086               	movwf	6
  8951  02FA  3001               	movlw	1	; select bank2/3
  8952  02FB  0087               	movwf	7
  8953  02FC  1581               	bsf	1,3
  8954                           
  8955                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:             sensor1ForceEnabled = 1;
  8956  02FD  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8957  02FE  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  8958                           
  8959                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 494:         }
  8960  02FF  2B35               	goto	l5693
  8961  0300                     l5651:	
  8962  0300  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8963  0301  3E08               	addlw	8
  8964  0302  0086               	movwf	6
  8965  0303  3001               	movlw	1	; select bank2/3
  8966  0304  0087               	movwf	7
  8967  0305  1981               	btfsc	1,3
  8968  0306  2B17               	goto	l5659
  8969  0307  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8970  0308  3E08               	addlw	8
  8971  0309  0086               	movwf	6
  8972  030A  3001               	movlw	1	; select bank2/3
  8973  030B  0087               	movwf	7
  8974  030C  1D81               	btfss	1,3
  8975  030D  2B17               	goto	l5659
  8976                           
  8977                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 497:             sensor_adc2->enabled = 1;
  8978  030E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8979  030F  3E08               	addlw	8
  8980  0310  0086               	movwf	6
  8981  0311  3001               	movlw	1	; select bank2/3
  8982  0312  0087               	movwf	7
  8983  0313  1581               	bsf	1,3
  8984                           
  8985                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:             sensor2ForceEnabled = 1;
  8986  0314  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8987  0315  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  8988                           
  8989                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         }
  8990  0316  2B35               	goto	l5693
  8991  0317                     l5659:	
  8992  0317  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8993  0318  3E08               	addlw	8
  8994  0319  0086               	movwf	6
  8995  031A  3001               	movlw	1	; select bank2/3
  8996  031B  0087               	movwf	7
  8997  031C  1981               	btfsc	1,3
  8998  031D  2B35               	goto	l5693
  8999  031E                     l5661:	
  9000  031E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9001  031F  2B2D               	goto	L4
  9002  0320                     l5669:	
  9003                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:     }
  9004                           
  9005  0320  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9006  0321  1D03               	btfss	3,2
  9007  0322  2B26               	goto	l5681
  9008  0323  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9009  0324  1D03               	btfss	3,2
  9010  0325  2B1E               	goto	l5661
  9011  0326                     l5681:	
  9012                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 510:         if(sensor_adc2->enabled == 0)
  9013                           
  9014  0326  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9015  0327  1903               	btfsc	3,2
  9016  0328  2B35               	goto	l5693
  9017  0329  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9018  032A  1D03               	btfss	3,2
  9019  032B  2B35               	goto	l5693
  9020                           
  9021                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 519:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 520:         if(sensor_adc1->enabled == 0)
  9022  032C  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9023  032D                     L4:	
  9024  032D  3E08               	addlw	8
  9025  032E  0086               	movwf	6
  9026  032F  3001               	movlw	1	; select bank2/3
  9027  0330  0087               	movwf	7
  9028  0331  1981               	btfsc	1,3
  9029  0332  2B35               	goto	l5693
  9030  0333                     l5663:	
  9031                           
  9032                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 502:             return MTOUCH_SENSOR_ERROR_none;
  9033  0333  3000               	movlw	0
  9034  0334  0008               	return
  9035  0335                     l5693:	
  9036                           
  9037                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     if(Sensor_isActive(sensor_adc2))
  9038  0335  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9039  0336  3195  2557  3182   	fcall	_Sensor_isActive
  9040  0339  3A00               	xorlw	0
  9041  033A  1903               	skipnz
  9042  033B  2B3F               	goto	l5697
  9043                           
  9044                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         activeSensor = 1;
  9045  033C  0020               	movlb	0	; select bank0
  9046  033D  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  9047  033E  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  9048  033F                     l5697:	
  9049                           
  9050                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     ADCOMCON_temp = ADCOMCON;
  9051  033F  002E               	movlb	14	; select bank14
  9052  0340  0812               	movf	18,w	;volatile
  9053  0341  0020               	movlb	0	; select bank0
  9054  0342  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9055  0343  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9056  0344  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  9057                           
  9058                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     AD1CON2_temp = AD1CON2;
  9059  0345  002E               	movlb	14	; select bank14
  9060  0346  0813               	movf	19,w	;volatile
  9061  0347  0020               	movlb	0	; select bank0
  9062  0348  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9063  0349  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9064  034A  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  9065                           
  9066                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:     AD2CON2_temp = AD2CON2;
  9067  034B  002F               	movlb	15	; select bank15
  9068  034C  0813               	movf	19,w	;volatile
  9069  034D  0020               	movlb	0	; select bank0
  9070  034E  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9071  034F  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9072  0350  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  9073                           
  9074                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:     MTOUCH_Sensor_Scan_Initialize();
  9075  0351  3195  25A1  3182   	fcall	_MTOUCH_Sensor_Scan_Initialize
  9076                           
  9077                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     if(sensor_adc1!=((void*)0))
  9078  0354  0020               	movlb	0	; select bank0
  9079  0355  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9080  0356  1903               	btfsc	3,2
  9081  0357  2B6B               	goto	l5713
  9082                           
  9083                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 548:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9084  0358  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9085  0359  3E04               	addlw	4
  9086  035A  0086               	movwf	6
  9087  035B  3001               	movlw	1	; select bank2/3
  9088  035C  0087               	movwf	7
  9089  035D  0801               	movf	1,w
  9090  035E  3EFF               	addlw	255
  9091  035F  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9092  0360  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9093  0361  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9094                           
  9095                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         ADxIF_flag = 0;
  9096  0362  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9097                           
  9098                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD1GRD = 0b01000000;
  9099  0363  3040               	movlw	64
  9100  0364  002E               	movlb	14	; select bank14
  9101  0365  0098               	movwf	24	;volatile
  9102                           
  9103                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         AAD2GRD = 0b00000000;
  9104  0366  002F               	movlb	15	; select bank15
  9105  0367  0198               	clrf	24	;volatile
  9106                           
  9107                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:         APFCONbits.GRDASEL = 0x0;
  9108  0368  0022               	movlb	2	; select bank2
  9109  0369  101D               	bcf	29,0	;volatile
  9110                           
  9111                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
  9112  036A  2B7E               	goto	l5723
  9113  036B                     l5713:	
  9114                           
  9115                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9116  036B  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9117  036C  3E04               	addlw	4
  9118  036D  0086               	movwf	6
  9119  036E  3001               	movlw	1	; select bank2/3
  9120  036F  0087               	movwf	7
  9121  0370  0801               	movf	1,w
  9122  0371  3EFF               	addlw	255
  9123  0372  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9124  0373  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9125  0374  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9126                           
  9127                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 1;
  9128  0375  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9129  0376  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  9130                           
  9131                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b00000000;
  9132  0377  002E               	movlb	14	; select bank14
  9133  0378  0198               	clrf	24	;volatile
  9134                           
  9135                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b01000000;
  9136  0379  3040               	movlw	64
  9137  037A  002F               	movlb	15	; select bank15
  9138  037B  0098               	movwf	24	;volatile
  9139                           
  9140                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x1;
  9141  037C  0022               	movlb	2	; select bank2
  9142  037D  141D               	bsf	29,0	;volatile
  9143  037E                     l5723:	
  9144                           
  9145                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  9146  037E  01F2               	clrf	Sensor_loadADCSettings@adc_index
  9147  037F  0020               	movlb	0	; select bank0
  9148  0380  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9149  0381  3184  24A4  3182   	fcall	_Sensor_loadADCSettings
  9150                           
  9151                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  9152  0384  01F2               	clrf	Sensor_loadADCSettings@adc_index
  9153  0385  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  9154  0386  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9155  0387  3184  24A4  3182   	fcall	_Sensor_loadADCSettings
  9156                           
  9157                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor_globalFlags.done = 0;
  9158  038A  0020               	movlb	0	; select bank0
  9159  038B  1069               	bcf	_sensor_globalFlags,0	;volatile
  9160                           
  9161                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:     sensor_globalFlags.error = 0;
  9162  038C  1169               	bcf	_sensor_globalFlags,2	;volatile
  9163                           
  9164                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:     sensor_globalFlags.interrupted = 0
      +                          ;
  9165  038D  11E9               	bcf	_sensor_globalFlags,3	;volatile
  9166                           
  9167                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  9168  038E  086E               	movf	_sample_period,w
  9169  038F  3194  24A4  3182   	fcall	_TMR2_LoadPeriodRegister
  9170                           
  9171                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     TMR2_StartTimer();
  9172  0392  3194  2478  3182   	fcall	_TMR2_StartTimer
  9173                           
  9174                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     packet_noise = 0;
  9175  0395  0020               	movlb	0	; select bank0
  9176  0396  01DB               	clrf	_packet_noise
  9177  0397  01DC               	clrf	_packet_noise+1
  9178  0398                     l5739:	
  9179                           
  9180                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 576:         if(ADxIF_flag == 0)
  9181  0398  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  9182  0399  1D03               	btfss	3,2
  9183  039A  2BA1               	goto	l286
  9184                           
  9185                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 578:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9186  039B  1F11               	btfss	17,6	;volatile
  9187  039C  10E9               	bcf	_sensor_globalFlags,1	;volatile
  9188  039D                     l288:	
  9189  039D  1F11               	btfss	17,6	;volatile
  9190  039E  2B9D               	goto	l288
  9191                           
  9192                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             PIR1bits.AD1IF = 0;
  9193  039F  1311               	bcf	17,6	;volatile
  9194                           
  9195                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         }
  9196  03A0  2BA7               	goto	l5747
  9197  03A1                     l286:	
  9198                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         else
  9199                           
  9200                           
  9201                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 584:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9202  03A1  1B12               	btfsc	18,6	;volatile
  9203  03A2  2BA4               	goto	l293
  9204  03A3  10E9               	bcf	_sensor_globalFlags,1	;volatile
  9205  03A4                     l293:	
  9206  03A4  1F12               	btfss	18,6	;volatile
  9207  03A5  2BA4               	goto	l293
  9208                           
  9209                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             PIR2bits.AD2IF = 0;
  9210  03A6  1312               	bcf	18,6	;volatile
  9211  03A7                     l5747:	
  9212                           
  9213                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         AAD1GRD ^= 0b00100001;
  9214  03A7  3021               	movlw	33
  9215  03A8  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9216  03A9  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9217  03AA  002E               	movlb	14	; select bank14
  9218  03AB  0698               	xorwf	24,f	;volatile
  9219                           
  9220                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         AAD2GRD ^= 0b00100001;
  9221  03AC  3021               	movlw	33
  9222  03AD  0020               	movlb	0	; select bank0
  9223  03AE  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9224  03AF  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9225  03B0  002F               	movlb	15	; select bank15
  9226  03B1  0698               	xorwf	24,f	;volatile
  9227                           
  9228                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         AAD1CON3 ^= 0b11000000;
  9229  03B2  30C0               	movlw	192
  9230  03B3  0020               	movlb	0	; select bank0
  9231  03B4  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9232  03B5  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9233  03B6  002E               	movlb	14	; select bank14
  9234  03B7  0694               	xorwf	20,f	;volatile
  9235                           
  9236                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:         AAD2CON3 ^= 0b11000000;
  9237  03B8  30C0               	movlw	192
  9238  03B9  0020               	movlb	0	; select bank0
  9239  03BA  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9240  03BB  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9241  03BC  002F               	movlb	15	; select bank15
  9242  03BD  0694               	xorwf	20,f	;volatile
  9243                           
  9244                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         if ((packet_counter & 0x01) ==
      +                           0)
  9245  03BE  0020               	movlb	0	; select bank0
  9246  03BF  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  9247  03C0  2C07               	goto	l5763
  9248                           
  9249                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 596:             packet_sample[0] += AAD1RES0;
  9250  03C1  002E               	movlb	14	; select bank14
  9251  03C2  081A               	movf	26,w	;volatile
  9252  03C3  0020               	movlb	0	; select bank0
  9253  03C4  07D3               	addwf	_packet_sample,f
  9254  03C5  002E               	movlb	14	; select bank14
  9255  03C6  081B               	movf	27,w	;volatile
  9256  03C7  0020               	movlb	0	; select bank0
  9257  03C8  3DD4               	addwfc	_packet_sample+1,f
  9258                           
  9259                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             packet_sample[1] += AAD2RE
      +                          S0;
  9260  03C9  002F               	movlb	15	; select bank15
  9261  03CA  081A               	movf	26,w	;volatile
  9262  03CB  0020               	movlb	0	; select bank0
  9263  03CC  07D5               	addwf	_packet_sample+2,f
  9264  03CD  002F               	movlb	15	; select bank15
  9265  03CE  081B               	movf	27,w	;volatile
  9266  03CF  0020               	movlb	0	; select bank0
  9267  03D0  3DD6               	addwfc	_packet_sample+3,f
  9268                           
  9269                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             if(activeSensor ==0)
  9270  03D1  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9271  03D2  1D03               	btfss	3,2
  9272  03D3  2BEC               	goto	l5759
  9273                           
  9274                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 600:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  9275  03D4  002E               	movlb	14	; select bank14
  9276  03D5  081A               	movf	26,w	;volatile
  9277  03D6  0020               	movlb	0	; select bank0
  9278  03D7  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9279  03D8  00F1               	movwf	abs@a
  9280  03D9  002E               	movlb	14	; select bank14
  9281  03DA  081B               	movf	27,w	;volatile
  9282  03DB  0020               	movlb	0	; select bank0
  9283  03DC  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9284  03DD  00F2               	movwf	abs@a+1
  9285  03DE  3196  269B  3182   	fcall	_abs
  9286  03E1  0871               	movf	?_abs,w
  9287  03E2  0020               	movlb	0	; select bank0
  9288  03E3  07DB               	addwf	_packet_noise,f
  9289  03E4  0872               	movf	?_abs+1,w
  9290  03E5  3DDC               	addwfc	_packet_noise+1,f
  9291                           
  9292                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:                 last_b = AAD1RES0;
  9293  03E6  002E               	movlb	14	; select bank14
  9294  03E7  081B               	movf	27,w	;volatile
  9295  03E8  0020               	movlb	0	; select bank0
  9296  03E9  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9297  03EA  002E               	movlb	14	; select bank14
  9298  03EB  2C03               	goto	L3
  9299  03EC                     l5759:	
  9300                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             }
  9301                           
  9302                           
  9303                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 605:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  9304  03EC  002F               	movlb	15	; select bank15
  9305  03ED  081A               	movf	26,w	;volatile
  9306  03EE  0020               	movlb	0	; select bank0
  9307  03EF  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9308  03F0  00F1               	movwf	abs@a
  9309  03F1  002F               	movlb	15	; select bank15
  9310  03F2  081B               	movf	27,w	;volatile
  9311  03F3  0020               	movlb	0	; select bank0
  9312  03F4  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9313  03F5  00F2               	movwf	abs@a+1
  9314  03F6  3196  269B  3182   	fcall	_abs
  9315  03F9  0871               	movf	?_abs,w
  9316  03FA  0020               	movlb	0	; select bank0
  9317  03FB  07DB               	addwf	_packet_noise,f
  9318  03FC  0872               	movf	?_abs+1,w
  9319  03FD  3DDC               	addwfc	_packet_noise+1,f
  9320                           
  9321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:                 last_b = AAD2RES0;
  9322  03FE  002F               	movlb	15	; select bank15
  9323  03FF  081B               	movf	27,w	;volatile
  9324  0400  0020               	movlb	0	; select bank0
  9325  0401  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9326  0402  002F               	movlb	15	; select bank15
  9327  0403                     L3:	
  9328  0403  081A               	movf	26,w	;volatile
  9329  0404  0020               	movlb	0	; select bank0
  9330  0405  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  9331  0406  2C3B               	goto	l5775
  9332  0407                     l5763:	
  9333                           
  9334                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 611:             packet_sample[0] -= AAD1RES0;
  9335  0407  002E               	movlb	14	; select bank14
  9336  0408  081A               	movf	26,w	;volatile
  9337  0409  0020               	movlb	0	; select bank0
  9338  040A  02D3               	subwf	_packet_sample,f
  9339  040B  002E               	movlb	14	; select bank14
  9340  040C  081B               	movf	27,w	;volatile
  9341  040D  0020               	movlb	0	; select bank0
  9342  040E  3BD4               	subwfb	_packet_sample+1,f
  9343                           
  9344                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             packet_sample[1] -= AAD2RE
      +                          S0;
  9345  040F  002F               	movlb	15	; select bank15
  9346  0410  081A               	movf	26,w	;volatile
  9347  0411  0020               	movlb	0	; select bank0
  9348  0412  02D5               	subwf	_packet_sample+2,f
  9349  0413  002F               	movlb	15	; select bank15
  9350  0414  081B               	movf	27,w	;volatile
  9351  0415  0020               	movlb	0	; select bank0
  9352  0416  3BD6               	subwfb	_packet_sample+3,f
  9353                           
  9354                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 613:             if(activeSensor ==0)
  9355  0417  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9356  0418  1D03               	btfss	3,2
  9357  0419  2C21               	goto	l5771
  9358                           
  9359                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 615:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  9360  041A  002E               	movlb	14	; select bank14
  9361  041B  081A               	movf	26,w	;volatile
  9362  041C  0020               	movlb	0	; select bank0
  9363  041D  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9364  041E  00F1               	movwf	abs@a
  9365  041F  002E               	movlb	14	; select bank14
  9366  0420  2C27               	goto	L6
  9367  0421                     l5771:	
  9368                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:             }
  9369                           
  9370                           
  9371                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 620:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  9372  0421  002F               	movlb	15	; select bank15
  9373  0422  081A               	movf	26,w	;volatile
  9374  0423  0020               	movlb	0	; select bank0
  9375  0424  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9376  0425  00F1               	movwf	abs@a
  9377  0426  002F               	movlb	15	; select bank15
  9378  0427                     L6:	
  9379  0427  081B               	movf	27,w	;volatile
  9380  0428  0020               	movlb	0	; select bank0
  9381  0429  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  9382  042A  00F2               	movwf	abs@a+1
  9383  042B  3196  269B  3182   	fcall	_abs
  9384  042E  0871               	movf	?_abs,w
  9385  042F  0020               	movlb	0	; select bank0
  9386  0430  07DB               	addwf	_packet_noise,f
  9387  0431  0872               	movf	?_abs+1,w
  9388  0432  3DDC               	addwfc	_packet_noise+1,f
  9389                           
  9390                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:                 last_a = AAD1RES0;
  9391  0433  002E               	movlb	14	; select bank14
  9392  0434  081B               	movf	27,w	;volatile
  9393  0435  0020               	movlb	0	; select bank0
  9394  0436  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  9395  0437  002E               	movlb	14	; select bank14
  9396  0438  081A               	movf	26,w	;volatile
  9397  0439  0020               	movlb	0	; select bank0
  9398  043A  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  9399  043B                     l5775:	
  9400                           
  9401                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:         if (packet_counter == 0)
  9402  043B  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  9403  043C  1903               	btfsc	3,2
  9404                           
  9405                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 629:             sensor_globalFlags.done = (uint8_t)1;
  9406  043D  1469               	bsf	_sensor_globalFlags,0	;volatile
  9407                           
  9408                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:         packet_counter--;
  9409  043E  3001               	movlw	1
  9410  043F  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  9411                           
  9412                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:         if (sensor_globalFlags.check !
      +                          = 0)
  9413  0440  1CE9               	btfss	_sensor_globalFlags,1	;volatile
  9414  0441  2C44               	goto	l303
  9415                           
  9416                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 635:             sensor_globalFlags.error = 1;
  9417  0442  1569               	bsf	_sensor_globalFlags,2	;volatile
  9418                           
  9419                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:             sensor_globalFlags.done = 
      +                          1;
  9420  0443  1469               	bsf	_sensor_globalFlags,0	;volatile
  9421  0444                     l303:	
  9422                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         }
  9423                           
  9424                           
  9425                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:         sensor_globalFlags.check = 1;
  9426  0444  14E9               	bsf	_sensor_globalFlags,1	;volatile
  9427                           
  9428                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:     } while(sensor_globalFlags.done ==
      +                           0);
  9429  0445  1C69               	btfss	_sensor_globalFlags,0	;volatile
  9430  0446  2B98               	goto	l5739
  9431                           
  9432                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     TMR2_StopTimer();
  9433  0447  3194  247B  3182   	fcall	_TMR2_StopTimer
  9434                           
  9435                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     ADCOMCON = ADCOMCON_temp;
  9436  044A  0020               	movlb	0	; select bank0
  9437  044B  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  9438  044C  002E               	movlb	14	; select bank14
  9439  044D  0092               	movwf	18	;volatile
  9440                           
  9441                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     AD1CON2 = AD1CON2_temp;
  9442  044E  0020               	movlb	0	; select bank0
  9443  044F  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  9444  0450  002E               	movlb	14	; select bank14
  9445  0451  0093               	movwf	19	;volatile
  9446                           
  9447                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     AD2CON2 = AD2CON2_temp;
  9448  0452  0020               	movlb	0	; select bank0
  9449  0453  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  9450  0454  002F               	movlb	15	; select bank15
  9451  0455  0093               	movwf	19	;volatile
  9452                           
  9453                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:     if(sensor_globalFlags.error)
  9454  0456  0020               	movlb	0	; select bank0
  9455  0457  1D69               	btfss	_sensor_globalFlags,2	;volatile
  9456  0458  2C5B               	goto	l305
  9457                           
  9458                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 648:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  9459  0459  30FB               	movlw	251
  9460  045A  0008               	return
  9461  045B                     l305:	
  9462                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     }
  9463                           
  9464                           
  9465                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(sensor_globalFlags.interrupted)
  9466  045B  1DE9               	btfss	_sensor_globalFlags,3	;volatile
  9467  045C  2C5F               	goto	l5803
  9468                           
  9469                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 653:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  9470  045D  30FA               	movlw	250
  9471  045E  0008               	return
  9472  045F                     l5803:	
  9473                           
  9474                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     if (sensor1ForceEnabled)
  9475  045F  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  9476  0460  1903               	btfsc	3,2
  9477  0461  2C68               	goto	l5807
  9478                           
  9479                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:         sensor_adc1->enabled = 0;
  9480  0462  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9481  0463  3E08               	addlw	8
  9482  0464  0086               	movwf	6
  9483  0465  3001               	movlw	1	; select bank2/3
  9484  0466  0087               	movwf	7
  9485  0467  1181               	bcf	1,3
  9486  0468                     l5807:	
  9487                           
  9488                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     if (sensor2ForceEnabled)
  9489  0468  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  9490  0469  1903               	btfsc	3,2
  9491  046A  2C71               	goto	l5811
  9492                           
  9493                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:         sensor_adc2->enabled = 0;
  9494  046B  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9495  046C  3E08               	addlw	8
  9496  046D  0086               	movwf	6
  9497  046E  3001               	movlw	1	; select bank2/3
  9498  046F  0087               	movwf	7
  9499  0470  1181               	bcf	1,3
  9500  0471                     l5811:	
  9501                           
  9502                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  9503  0471  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9504  0472  3195  25C2  3182   	fcall	_Sensor_isEnabled
  9505  0475  3A00               	xorlw	0
  9506  0476  1903               	skipnz
  9507  0477  2C85               	goto	l5817
  9508  0478  0020               	movlb	0	; select bank0
  9509  0479  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9510  047A  3195  251B  3182   	fcall	_Sensor_isCalibrated
  9511  047D  3A00               	xorlw	0
  9512  047E  1D03               	skipz
  9513  047F  2C85               	goto	l5817
  9514                           
  9515                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:         Sensor_autoCalibration(sensor_
      +                          adc1);
  9516  0480  0020               	movlb	0	; select bank0
  9517  0481  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9518  0482  318F  276E  3182   	fcall	_Sensor_autoCalibration
  9519  0485                     l5817:	
  9520                           
  9521                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 667:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  9522  0485  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9523  0486  3195  25C2  3182   	fcall	_Sensor_isEnabled
  9524  0489  3A00               	xorlw	0
  9525  048A  1903               	skipnz
  9526  048B  2C97               	goto	l5823
  9527  048C  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9528  048D  3195  251B  3182   	fcall	_Sensor_isCalibrated
  9529  0490  3A00               	xorlw	0
  9530  0491  1D03               	skipz
  9531  0492  2C97               	goto	l5823
  9532                           
  9533                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:         Sensor_autoCalibration(sensor_
      +                          adc2);
  9534  0493  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9535  0494  318F  276E  3182   	fcall	_Sensor_autoCalibration
  9536  0497                     l5823:	
  9537                           
  9538                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 670:     AD1PRECON = 0;
  9539  0497  002E               	movlb	14	; select bank14
  9540  0498  0196               	clrf	22	;volatile
  9541                           
  9542                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671:     AD2PRECON = 0;
  9543  0499  002F               	movlb	15	; select bank15
  9544  049A  0196               	clrf	22	;volatile
  9545                           
  9546                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     AD1ACQCON = 0;
  9547  049B  002E               	movlb	14	; select bank14
  9548  049C  0197               	clrf	23	;volatile
  9549                           
  9550                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:     AD2ACQCON = 0;
  9551  049D  002F               	movlb	15	; select bank15
  9552  049E  0197               	clrf	23	;volatile
  9553                           
  9554                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 674:     AD1CON0bits.ADON = 0;
  9555  049F  002E               	movlb	14	; select bank14
  9556  04A0  1011               	bcf	17,0	;volatile
  9557                           
  9558                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     AD2CON0bits.ADON = 0;
  9559  04A1  002F               	movlb	15	; select bank15
  9560  04A2  1011               	bcf	17,0	;volatile
  9561  04A3  2B33               	goto	l5663
  9562  04A4                     __end_of_Sensor_Acq_ExecutePacket:	
  9563                           
  9564                           	psect	text49
  9565  147B                     __ptext49:	
  9566 ;; *************** function _TMR2_StopTimer *****************
  9567 ;; Defined at:
  9568 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;		None
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;		None
  9573 ;; Return value:  Size  Location     Type
  9574 ;;                  1    wreg      void 
  9575 ;; Registers used:
  9576 ;;		None
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9582 ;;      Params:         0       0       0       0       0       0       0       0
  9583 ;;      Locals:         0       0       0       0       0       0       0       0
  9584 ;;      Temps:          0       0       0       0       0       0       0       0
  9585 ;;      Totals:         0       0       0       0       0       0       0       0
  9586 ;;Total ram usage:        0 bytes
  9587 ;; Hardware stack levels used:    1
  9588 ;; Hardware stack levels required when called:    4
  9589 ;; This function calls:
  9590 ;;		Nothing
  9591 ;; This function is called by:
  9592 ;;		_Sensor_Acq_ExecutePacket
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596                           
  9597                           ;psect for function _TMR2_StopTimer
  9598  147B                     _TMR2_StopTimer:	
  9599                           
  9600                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  9601                           
  9602                           ;incstack = 0
  9603                           ; Regs used in _TMR2_StopTimer: []
  9604  147B  0020               	movlb	0	; select bank0
  9605  147C  111C               	bcf	28,2	;volatile
  9606  147D  0008               	return
  9607  147E                     __end_of_TMR2_StopTimer:	
  9608                           
  9609                           	psect	text50
  9610  1478                     __ptext50:	
  9611 ;; *************** function _TMR2_StartTimer *****************
  9612 ;; Defined at:
  9613 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  9614 ;; Parameters:    Size  Location     Type
  9615 ;;		None
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;		None
  9618 ;; Return value:  Size  Location     Type
  9619 ;;                  1    wreg      void 
  9620 ;; Registers used:
  9621 ;;		None
  9622 ;; Tracked objects:
  9623 ;;		On entry : 0/0
  9624 ;;		On exit  : 0/0
  9625 ;;		Unchanged: 0/0
  9626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9627 ;;      Params:         0       0       0       0       0       0       0       0
  9628 ;;      Locals:         0       0       0       0       0       0       0       0
  9629 ;;      Temps:          0       0       0       0       0       0       0       0
  9630 ;;      Totals:         0       0       0       0       0       0       0       0
  9631 ;;Total ram usage:        0 bytes
  9632 ;; Hardware stack levels used:    1
  9633 ;; Hardware stack levels required when called:    4
  9634 ;; This function calls:
  9635 ;;		Nothing
  9636 ;; This function is called by:
  9637 ;;		_Sensor_Acq_ExecutePacket
  9638 ;; This function uses a non-reentrant model
  9639 ;;
  9640                           
  9641                           
  9642                           ;psect for function _TMR2_StartTimer
  9643  1478                     _TMR2_StartTimer:	
  9644                           
  9645                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  9646                           
  9647                           ;incstack = 0
  9648                           ; Regs used in _TMR2_StartTimer: []
  9649  1478  0020               	movlb	0	; select bank0
  9650  1479  151C               	bsf	28,2	;volatile
  9651  147A  0008               	return
  9652  147B                     __end_of_TMR2_StartTimer:	
  9653                           
  9654                           	psect	text51
  9655  14A4                     __ptext51:	
  9656 ;; *************** function _TMR2_LoadPeriodRegister *****************
  9657 ;; Defined at:
  9658 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;  periodVal       1    wreg     unsigned char 
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;  periodVal       1    1[COMMON] unsigned char 
  9663 ;; Return value:  Size  Location     Type
  9664 ;;                  1    wreg      void 
  9665 ;; Registers used:
  9666 ;;		wreg
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 0/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9672 ;;      Params:         0       0       0       0       0       0       0       0
  9673 ;;      Locals:         1       0       0       0       0       0       0       0
  9674 ;;      Temps:          0       0       0       0       0       0       0       0
  9675 ;;      Totals:         1       0       0       0       0       0       0       0
  9676 ;;Total ram usage:        1 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:    4
  9679 ;; This function calls:
  9680 ;;		Nothing
  9681 ;; This function is called by:
  9682 ;;		_Sensor_Acq_ExecutePacket
  9683 ;; This function uses a non-reentrant model
  9684 ;;
  9685                           
  9686                           
  9687                           ;psect for function _TMR2_LoadPeriodRegister
  9688  14A4                     _TMR2_LoadPeriodRegister:	
  9689                           
  9690                           ;incstack = 0
  9691                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  9692                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  9693  14A4  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  9694                           
  9695                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  9696  14A5  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  9697  14A6  0020               	movlb	0	; select bank0
  9698  14A7  009B               	movwf	27	;volatile
  9699  14A8  0008               	return
  9700  14A9                     __end_of_TMR2_LoadPeriodRegister:	
  9701                           
  9702                           	psect	text52
  9703  04A4                     __ptext52:	
  9704 ;; *************** function _Sensor_loadADCSettings *****************
  9705 ;; Defined at:
  9706 ;;		line 437 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9707 ;; Parameters:    Size  Location     Type
  9708 ;;  sensor          1    wreg     PTR struct .
  9709 ;;		 -> NULL(0), mtouch_sensor(27), 
  9710 ;;  adc_index       1    2[COMMON] unsigned char 
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;  sensor          1    9[COMMON] PTR struct .
  9713 ;;		 -> NULL(0), mtouch_sensor(27), 
  9714 ;;  addressOffse    1    8[COMMON] unsigned char 
  9715 ;; Return value:  Size  Location     Type
  9716 ;;                  1    wreg      void 
  9717 ;; Registers used:
  9718 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9719 ;; Tracked objects:
  9720 ;;		On entry : 0/0
  9721 ;;		On exit  : 0/0
  9722 ;;		Unchanged: 0/0
  9723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9724 ;;      Params:         1       0       0       0       0       0       0       0
  9725 ;;      Locals:         4       0       0       0       0       0       0       0
  9726 ;;      Temps:          3       0       0       0       0       0       0       0
  9727 ;;      Totals:         8       0       0       0       0       0       0       0
  9728 ;;Total ram usage:        8 bytes
  9729 ;; Hardware stack levels used:    1
  9730 ;; Hardware stack levels required when called:    5
  9731 ;; This function calls:
  9732 ;;		_Sensor_isCalibrated
  9733 ;;		_Sensor_isCalibratingAcqTime
  9734 ;; This function is called by:
  9735 ;;		_Sensor_Acq_ExecutePacket
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           
  9740                           ;psect for function _Sensor_loadADCSettings
  9741  04A4                     _Sensor_loadADCSettings:	
  9742                           
  9743                           ;incstack = 0
  9744                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9745                           ;Sensor_loadADCSettings@sensor stored from wreg
  9746  04A4  00F9               	movwf	Sensor_loadADCSettings@sensor
  9747                           
  9748                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 438
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     if (sensor == ((void*)0))
  9749  04A5  0879               	movf	Sensor_loadADCSettings@sensor,w
  9750  04A6  1903               	btfsc	3,2
  9751  04A7  0008               	return
  9752                           
  9753                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  9754  04A8  0872               	movf	Sensor_loadADCSettings@adc_index,w
  9755  04A9  1D03               	btfss	3,2
  9756  04AA  2CAE               	goto	l3859
  9757  04AB  01F6               	clrf	_Sensor_loadADCSettings$562
  9758  04AC  01F7               	clrf	_Sensor_loadADCSettings$562+1
  9759  04AD  2CB2               	goto	l257
  9760  04AE                     l3859:	
  9761  04AE  3080               	movlw	128
  9762  04AF  00F6               	movwf	_Sensor_loadADCSettings$562
  9763  04B0  3000               	movlw	0
  9764  04B1  00F7               	movwf	_Sensor_loadADCSettings$562+1
  9765  04B2                     l257:	
  9766  04B2  0876               	movf	_Sensor_loadADCSettings$562,w
  9767  04B3  00F3               	movwf	??_Sensor_loadADCSettings
  9768  04B4  0873               	movf	??_Sensor_loadADCSettings,w
  9769  04B5  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  9770                           
  9771                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  9772  04B6  0A79               	incf	Sensor_loadADCSettings@sensor,w
  9773  04B7  0086               	movwf	6
  9774  04B8  3001               	movlw	1	; select bank2/3
  9775  04B9  0087               	movwf	7
  9776  04BA  0801               	movf	1,w
  9777  04BB  00F3               	movwf	??_Sensor_loadADCSettings
  9778  04BC  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9779  04BD  3E11               	addlw	17
  9780  04BE  00F4               	movwf	??_Sensor_loadADCSettings+1
  9781  04BF  01F5               	clrf	??_Sensor_loadADCSettings+2
  9782  04C0  3007               	movlw	7
  9783  04C1  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9784  04C2  0874               	movf	??_Sensor_loadADCSettings+1,w
  9785  04C3  0086               	movwf	6
  9786  04C4  0875               	movf	??_Sensor_loadADCSettings+2,w
  9787  04C5  0087               	movwf	7
  9788  04C6  0873               	movf	??_Sensor_loadADCSettings,w
  9789  04C7  0081               	movwf	1
  9790                           
  9791                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  9792  04C8  0879               	movf	Sensor_loadADCSettings@sensor,w
  9793  04C9  3E05               	addlw	5
  9794  04CA  0086               	movwf	6
  9795  04CB  3001               	movlw	1	; select bank2/3
  9796  04CC  0087               	movwf	7
  9797  04CD  0801               	movf	1,w
  9798  04CE  00F3               	movwf	??_Sensor_loadADCSettings
  9799  04CF  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9800  04D0  3E19               	addlw	25
  9801  04D1  00F4               	movwf	??_Sensor_loadADCSettings+1
  9802  04D2  01F5               	clrf	??_Sensor_loadADCSettings+2
  9803  04D3  3007               	movlw	7
  9804  04D4  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9805  04D5  0874               	movf	??_Sensor_loadADCSettings+1,w
  9806  04D6  0086               	movwf	6
  9807  04D7  0875               	movf	??_Sensor_loadADCSettings+2,w
  9808  04D8  0087               	movwf	7
  9809  04D9  0873               	movf	??_Sensor_loadADCSettings,w
  9810  04DA  0081               	movwf	1
  9811                           
  9812                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  9813  04DB  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9814  04DC  3E13               	addlw	19
  9815  04DD  00F3               	movwf	??_Sensor_loadADCSettings
  9816  04DE  01F4               	clrf	??_Sensor_loadADCSettings+1
  9817  04DF  3007               	movlw	7
  9818  04E0  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9819  04E1  0873               	movf	??_Sensor_loadADCSettings,w
  9820  04E2  0086               	movwf	6
  9821  04E3  0874               	movf	??_Sensor_loadADCSettings+1,w
  9822  04E4  0087               	movwf	7
  9823  04E5  3050               	movlw	80
  9824  04E6  0081               	movwf	1
  9825                           
  9826                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  9827  04E7  30FE               	movlw	254
  9828  04E8  00F3               	movwf	??_Sensor_loadADCSettings
  9829  04E9  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9830  04EA  3E18               	addlw	24
  9831  04EB  0086               	movwf	6
  9832  04EC  0187               	clrf	7
  9833  04ED  3007               	movlw	7
  9834  04EE  3D87               	addwfc	7,f
  9835  04EF  0873               	movf	??_Sensor_loadADCSettings,w
  9836  04F0  0581               	andwf	1,f
  9837                           
  9838                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:     if (Sensor_isCalibrated(sensor))
  9839  04F1  0879               	movf	Sensor_loadADCSettings@sensor,w
  9840  04F2  3195  251B  3184   	fcall	_Sensor_isCalibrated
  9841  04F5  3A00               	xorlw	0
  9842  04F6  1903               	skipnz
  9843  04F7  2D0C               	goto	l3873
  9844                           
  9845                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 451:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  9846  04F8  0879               	movf	Sensor_loadADCSettings@sensor,w
  9847  04F9  3E02               	addlw	2
  9848  04FA  0086               	movwf	6
  9849  04FB  3001               	movlw	1	; select bank2/3
  9850  04FC  0087               	movwf	7
  9851  04FD  0801               	movf	1,w
  9852  04FE  00F3               	movwf	??_Sensor_loadADCSettings
  9853  04FF  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9854  0500  3E16               	addlw	22
  9855  0501  00F4               	movwf	??_Sensor_loadADCSettings+1
  9856  0502  01F5               	clrf	??_Sensor_loadADCSettings+2
  9857  0503  3007               	movlw	7
  9858  0504  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9859  0505  0874               	movf	??_Sensor_loadADCSettings+1,w
  9860  0506  0086               	movwf	6
  9861  0507  0875               	movf	??_Sensor_loadADCSettings+2,w
  9862  0508  0087               	movwf	7
  9863  0509  0873               	movf	??_Sensor_loadADCSettings,w
  9864  050A  0081               	movwf	1
  9865  050B  2D1F               	goto	l3877
  9866  050C                     l3873:	
  9867                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     }
  9868                           
  9869                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  9870                           
  9871                           
  9872                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 456:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  9873  050C  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9874  050D  3E16               	addlw	22
  9875  050E  00F3               	movwf	??_Sensor_loadADCSettings
  9876  050F  01F4               	clrf	??_Sensor_loadADCSettings+1
  9877  0510  3007               	movlw	7
  9878  0511  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9879  0512  0873               	movf	??_Sensor_loadADCSettings,w
  9880  0513  0086               	movwf	6
  9881  0514  0874               	movf	??_Sensor_loadADCSettings+1,w
  9882  0515  0087               	movwf	7
  9883  0516  3020               	movlw	32
  9884  0517  0081               	movwf	1
  9885                           
  9886                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  9887  0518  0879               	movf	Sensor_loadADCSettings@sensor,w
  9888  0519  3195  2512  3184   	fcall	_Sensor_isCalibratingAcqTime
  9889  051C  3A00               	xorlw	0
  9890  051D  1903               	skipnz
  9891  051E  2D32               	goto	l3879
  9892  051F                     l3877:	
  9893                           
  9894                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  9895  051F  0879               	movf	Sensor_loadADCSettings@sensor,w
  9896  0520  3E03               	addlw	3
  9897  0521  0086               	movwf	6
  9898  0522  3001               	movlw	1	; select bank2/3
  9899  0523  0087               	movwf	7
  9900  0524  0801               	movf	1,w
  9901  0525  00F3               	movwf	??_Sensor_loadADCSettings
  9902  0526  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9903  0527  3E17               	addlw	23
  9904  0528  00F4               	movwf	??_Sensor_loadADCSettings+1
  9905  0529  01F5               	clrf	??_Sensor_loadADCSettings+2
  9906  052A  3007               	movlw	7
  9907  052B  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9908  052C  0874               	movf	??_Sensor_loadADCSettings+1,w
  9909  052D  0086               	movwf	6
  9910  052E  0875               	movf	??_Sensor_loadADCSettings+2,w
  9911  052F  0087               	movwf	7
  9912  0530  0873               	movf	??_Sensor_loadADCSettings,w
  9913  0531  2D3D               	goto	L7
  9914  0532                     l3879:	
  9915                           
  9916                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  9917  0532  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9918  0533  3E17               	addlw	23
  9919  0534  00F3               	movwf	??_Sensor_loadADCSettings
  9920  0535  01F4               	clrf	??_Sensor_loadADCSettings+1
  9921  0536  3007               	movlw	7
  9922  0537  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9923  0538  0873               	movf	??_Sensor_loadADCSettings,w
  9924  0539  0086               	movwf	6
  9925  053A  0874               	movf	??_Sensor_loadADCSettings+1,w
  9926  053B  0087               	movwf	7
  9927  053C  3020               	movlw	32
  9928  053D                     L7:	
  9929  053D  0081               	movwf	1
  9930                           
  9931                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  9932                           
  9933                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  9934  053E  0879               	movf	Sensor_loadADCSettings@sensor,w
  9935  053F  3E04               	addlw	4
  9936  0540  0086               	movwf	6
  9937  0541  3001               	movlw	1	; select bank2/3
  9938  0542  0087               	movwf	7
  9939  0543  0801               	movf	1,w
  9940  0544  00F3               	movwf	??_Sensor_loadADCSettings
  9941  0545  01F4               	clrf	??_Sensor_loadADCSettings+1
  9942  0546  3009               	movlw	9
  9943  0547                     u2305:	
  9944  0547  35F3               	lslf	??_Sensor_loadADCSettings,f
  9945  0548  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  9946  0549  0B89               	decfsz	9,f
  9947  054A  2D47               	goto	u2305
  9948  054B  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  9949  054C  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  9950  054D  0086               	movwf	6
  9951  054E  0187               	clrf	7
  9952  054F  0873               	movf	??_Sensor_loadADCSettings,w
  9953  0550  3FC0               	movwi [0]fsr1
  9954  0551  0874               	movf	??_Sensor_loadADCSettings+1,w
  9955  0552  3FC1               	movwi [1]fsr1
  9956  0553  0008               	return
  9957  0554                     __end_of_Sensor_loadADCSettings:	
  9958                           
  9959                           	psect	text53
  9960  151B                     __ptext53:	
  9961 ;; *************** function _Sensor_isCalibrated *****************
  9962 ;; Defined at:
  9963 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;  sensor          1    wreg     PTR struct .
  9966 ;;		 -> NULL(0), mtouch_sensor(27), 
  9967 ;; Auto vars:     Size  Location     Type
  9968 ;;  sensor          1    1[COMMON] PTR struct .
  9969 ;;		 -> NULL(0), mtouch_sensor(27), 
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      _Bool 
  9972 ;; Registers used:
  9973 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9979 ;;      Params:         0       0       0       0       0       0       0       0
  9980 ;;      Locals:         1       0       0       0       0       0       0       0
  9981 ;;      Temps:          0       0       0       0       0       0       0       0
  9982 ;;      Totals:         1       0       0       0       0       0       0       0
  9983 ;;Total ram usage:        1 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    4
  9986 ;; This function calls:
  9987 ;;		Nothing
  9988 ;; This function is called by:
  9989 ;;		_Sensor_Acquisition
  9990 ;;		_Sensor_loadADCSettings
  9991 ;;		_Sensor_Acq_ExecutePacket
  9992 ;; This function uses a non-reentrant model
  9993 ;;
  9994                           
  9995                           
  9996                           ;psect for function _Sensor_isCalibrated
  9997  151B                     _Sensor_isCalibrated:	
  9998                           
  9999                           ;incstack = 0
 10000                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10001                           ;Sensor_isCalibrated@sensor stored from wreg
 10002  151B  00F1               	movwf	Sensor_isCalibrated@sensor
 10003                           
 10004                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor->calibr
      +                          ated;
 10005  151C  0871               	movf	Sensor_isCalibrated@sensor,w
 10006  151D  3E08               	addlw	8
 10007  151E  0086               	movwf	6
 10008  151F  3001               	movlw	1	; select bank2/3
 10009  1520  0087               	movwf	7
 10010  1521  0C01               	rrf	1,w
 10011  1522  0C89               	rrf	9,f
 10012  1523  3901               	andlw	1
 10013  1524  0008               	return
 10014  1525                     __end_of_Sensor_isCalibrated:	
 10015                           
 10016                           	psect	text54
 10017  15C2                     __ptext54:	
 10018 ;; *************** function _Sensor_isEnabled *****************
 10019 ;; Defined at:
 10020 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;  sensor          1    wreg     PTR struct .
 10023 ;;		 -> NULL(0), mtouch_sensor(27), 
 10024 ;; Auto vars:     Size  Location     Type
 10025 ;;  sensor          1    2[COMMON] PTR struct .
 10026 ;;		 -> NULL(0), mtouch_sensor(27), 
 10027 ;; Return value:  Size  Location     Type
 10028 ;;                  1    wreg      _Bool 
 10029 ;; Registers used:
 10030 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10036 ;;      Params:         0       0       0       0       0       0       0       0
 10037 ;;      Locals:         1       0       0       0       0       0       0       0
 10038 ;;      Temps:          1       0       0       0       0       0       0       0
 10039 ;;      Totals:         2       0       0       0       0       0       0       0
 10040 ;;Total ram usage:        2 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; Hardware stack levels required when called:    4
 10043 ;; This function calls:
 10044 ;;		Nothing
 10045 ;; This function is called by:
 10046 ;;		_Sensor_Service
 10047 ;;		_Sensor_postAcquisitionProcess
 10048 ;;		_Sensor_Acq_ExecutePacket
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           
 10053                           ;psect for function _Sensor_isEnabled
 10054  15C2                     _Sensor_isEnabled:	
 10055                           
 10056                           ;incstack = 0
 10057                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
 10058                           ;Sensor_isEnabled@sensor stored from wreg
 10059  15C2  00F2               	movwf	Sensor_isEnabled@sensor
 10060                           
 10061                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 857:     if(sensor!=((void*)0))
 10062  15C3  0872               	movf	Sensor_isEnabled@sensor,w
 10063  15C4  1903               	btfsc	3,2
 10064  15C5  2DD1               	goto	l3837
 10065                           
 10066                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 858:         return (_Bool)sensor->enabled;
 10067  15C6  0872               	movf	Sensor_isEnabled@sensor,w
 10068  15C7  3E08               	addlw	8
 10069  15C8  0086               	movwf	6
 10070  15C9  3001               	movlw	1	; select bank2/3
 10071  15CA  0087               	movwf	7
 10072  15CB  0C01               	rrf	1,w
 10073  15CC  00F1               	movwf	??_Sensor_isEnabled
 10074  15CD  0CF1               	rrf	??_Sensor_isEnabled,f
 10075  15CE  0C71               	rrf	??_Sensor_isEnabled,w
 10076  15CF  3901               	andlw	1
 10077  15D0  0008               	return
 10078  15D1                     l3837:	
 10079                           
 10080                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860:         return 0;
 10081  15D1  3000               	movlw	0
 10082  15D2  0008               	return
 10083  15D3                     __end_of_Sensor_isEnabled:	
 10084                           
 10085                           	psect	text55
 10086  1557                     __ptext55:	
 10087 ;; *************** function _Sensor_isActive *****************
 10088 ;; Defined at:
 10089 ;;		line 882 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10090 ;; Parameters:    Size  Location     Type
 10091 ;;  sensor          1    wreg     PTR struct .
 10092 ;;		 -> NULL(0), mtouch_sensor(27), 
 10093 ;; Auto vars:     Size  Location     Type
 10094 ;;  sensor          1    1[COMMON] PTR struct .
 10095 ;;		 -> NULL(0), mtouch_sensor(27), 
 10096 ;; Return value:  Size  Location     Type
 10097 ;;                  1    wreg      _Bool 
 10098 ;; Registers used:
 10099 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10100 ;; Tracked objects:
 10101 ;;		On entry : 0/0
 10102 ;;		On exit  : 0/0
 10103 ;;		Unchanged: 0/0
 10104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10105 ;;      Params:         0       0       0       0       0       0       0       0
 10106 ;;      Locals:         1       0       0       0       0       0       0       0
 10107 ;;      Temps:          0       0       0       0       0       0       0       0
 10108 ;;      Totals:         1       0       0       0       0       0       0       0
 10109 ;;Total ram usage:        1 bytes
 10110 ;; Hardware stack levels used:    1
 10111 ;; Hardware stack levels required when called:    4
 10112 ;; This function calls:
 10113 ;;		Nothing
 10114 ;; This function is called by:
 10115 ;;		_Sensor_Acquisition
 10116 ;;		_Sensor_Acq_ExecutePacket
 10117 ;; This function uses a non-reentrant model
 10118 ;;
 10119                           
 10120                           
 10121                           ;psect for function _Sensor_isActive
 10122  1557                     _Sensor_isActive:	
 10123                           
 10124                           ;incstack = 0
 10125                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
 10126                           ;Sensor_isActive@sensor stored from wreg
 10127  1557  00F1               	movwf	Sensor_isActive@sensor
 10128                           
 10129                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 882: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 883:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 884:     if(sensor == ((void*)0))
 10130  1558  0871               	movf	Sensor_isActive@sensor,w
 10131  1559  1D03               	btfss	3,2
 10132  155A  2D5D               	goto	l3847
 10133                           
 10134                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885:         return 0;
 10135  155B  3000               	movlw	0
 10136  155C  0008               	return
 10137  155D                     l3847:	
 10138                           
 10139                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     return (_Bool)sensor->active;
 10140  155D  0871               	movf	Sensor_isActive@sensor,w
 10141  155E  3E08               	addlw	8
 10142  155F  0086               	movwf	6
 10143  1560  3001               	movlw	1	; select bank2/3
 10144  1561  0087               	movwf	7
 10145  1562  0C01               	rrf	1,w
 10146  1563  3901               	andlw	1
 10147  1564  0008               	return
 10148  1565                     __end_of_Sensor_isActive:	
 10149                           
 10150                           	psect	text56
 10151  0F6E                     __ptext56:	
 10152 ;; *************** function _Sensor_autoCalibration *****************
 10153 ;; Defined at:
 10154 ;;		line 688 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10155 ;; Parameters:    Size  Location     Type
 10156 ;;  sensor          1    wreg     PTR struct .
 10157 ;;		 -> NULL(0), mtouch_sensor(27), 
 10158 ;; Auto vars:     Size  Location     Type
 10159 ;;  sensor          1   10[COMMON] PTR struct .
 10160 ;;		 -> NULL(0), mtouch_sensor(27), 
 10161 ;;  adcIndex        1    9[COMMON] unsigned char 
 10162 ;; Return value:  Size  Location     Type
 10163 ;;                  1    wreg      void 
 10164 ;; Registers used:
 10165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10166 ;; Tracked objects:
 10167 ;;		On entry : 0/0
 10168 ;;		On exit  : 0/0
 10169 ;;		Unchanged: 0/0
 10170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10171 ;;      Params:         0       0       0       0       0       0       0       0
 10172 ;;      Locals:         2       0       0       0       0       0       0       0
 10173 ;;      Temps:          4       0       0       0       0       0       0       0
 10174 ;;      Totals:         6       0       0       0       0       0       0       0
 10175 ;;Total ram usage:        6 bytes
 10176 ;; Hardware stack levels used:    1
 10177 ;; Hardware stack levels required when called:    5
 10178 ;; This function calls:
 10179 ;;		_Sensor_getScanGroupIndex
 10180 ;;		_Sensor_isCalibratingAcqTime
 10181 ;;		_Sensor_setCalibratAcqTime
 10182 ;;		_Sensor_setCalibrated
 10183 ;;		_abs
 10184 ;; This function is called by:
 10185 ;;		_Sensor_Acq_ExecutePacket
 10186 ;; This function uses a non-reentrant model
 10187 ;;
 10188                           
 10189                           
 10190                           ;psect for function _Sensor_autoCalibration
 10191  0F6E                     _Sensor_autoCalibration:	
 10192                           
 10193                           ;incstack = 0
 10194                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10195                           ;Sensor_autoCalibration@sensor stored from wreg
 10196  0F6E  00FA               	movwf	Sensor_autoCalibration@sensor
 10197                           
 10198                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 689: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 690:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
 10199  0F6F  087A               	movf	Sensor_autoCalibration@sensor,w
 10200  0F70  3188  20E6  318F   	fcall	_Sensor_getScanGroupIndex
 10201  0F73  00F5               	movwf	??_Sensor_autoCalibration
 10202  0F74  0875               	movf	??_Sensor_autoCalibration,w
 10203  0F75  00F9               	movwf	Sensor_autoCalibration@adcIndex
 10204                           
 10205                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
 10206  0F76  087A               	movf	Sensor_autoCalibration@sensor,w
 10207  0F77  3195  2512  318F   	fcall	_Sensor_isCalibratingAcqTime
 10208  0F7A  3A00               	xorlw	0
 10209  0F7B  1D03               	skipz
 10210  0F7C  2FAF               	goto	l3899
 10211                           
 10212                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 694:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
 10213  0F7D  3579               	lslf	Sensor_autoCalibration@adcIndex,w
 10214  0F7E  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
 10215  0F7F  0086               	movwf	6
 10216  0F80  0187               	clrf	7
 10217  0F81  3F40               	moviw [0]fsr1
 10218  0F82  00F5               	movwf	??_Sensor_autoCalibration
 10219  0F83  3F41               	moviw [1]fsr1
 10220  0F84  00F6               	movwf	??_Sensor_autoCalibration+1
 10221  0F85  087A               	movf	Sensor_autoCalibration@sensor,w
 10222  0F86  3E04               	addlw	4
 10223  0F87  0086               	movwf	6
 10224  0F88  3001               	movlw	1	; select bank2/3
 10225  0F89  0087               	movwf	7
 10226  0F8A  0801               	movf	1,w
 10227  0F8B  00F7               	movwf	??_Sensor_autoCalibration+2
 10228  0F8C  01F8               	clrf	??_Sensor_autoCalibration+3
 10229  0F8D  3009               	movlw	9
 10230  0F8E                     u2325:	
 10231  0F8E  35F7               	lslf	??_Sensor_autoCalibration+2,f
 10232  0F8F  0DF8               	rlf	??_Sensor_autoCalibration+3,f
 10233  0F90  0B89               	decfsz	9,f
 10234  0F91  2F8E               	goto	u2325
 10235  0F92  0876               	movf	??_Sensor_autoCalibration+1,w
 10236  0F93  0278               	subwf	??_Sensor_autoCalibration+3,w
 10237  0F94  1D03               	skipz
 10238  0F95  2F98               	goto	u2335
 10239  0F96  0875               	movf	??_Sensor_autoCalibration,w
 10240  0F97  0277               	subwf	??_Sensor_autoCalibration+2,w
 10241  0F98                     u2335:	
 10242  0F98  1803               	skipnc
 10243  0F99  2FAB               	goto	l3897
 10244                           
 10245                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 696:             if(++(sensor->addcap) >= (uint8_t)0x0F)
 10246  0F9A  3001               	movlw	1
 10247  0F9B  00F5               	movwf	??_Sensor_autoCalibration
 10248  0F9C  087A               	movf	Sensor_autoCalibration@sensor,w
 10249  0F9D  3E05               	addlw	5
 10250  0F9E  0086               	movwf	6
 10251  0F9F  3001               	movlw	1	; select bank2/3
 10252  0FA0  0087               	movwf	7
 10253  0FA1  0875               	movf	??_Sensor_autoCalibration,w
 10254  0FA2  0781               	addwf	1,f
 10255  0FA3  300F               	movlw	15
 10256  0FA4  0201               	subwf	1,w
 10257  0FA5  1C03               	skipc
 10258  0FA6  0008               	return
 10259                           
 10260                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 697:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
 10261  0FA7  087A               	movf	Sensor_autoCalibration@sensor,w
 10262  0FA8  3195  2582         	fcall	_Sensor_setCalibratAcqTime
 10263  0FAA  0008               	return
 10264  0FAB                     l3897:	
 10265                           
 10266                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 701:              Sensor_setCalibratAcqTime(sensor);
 10267  0FAB  087A               	movf	Sensor_autoCalibration@sensor,w
 10268  0FAC  3195  2582         	fcall	_Sensor_setCalibratAcqTime
 10269  0FAE  0008               	return
 10270  0FAF                     l3899:	
 10271                           
 10272                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 706:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 10273  0FAF  087A               	movf	Sensor_autoCalibration@sensor,w
 10274  0FB0  3E04               	addlw	4
 10275  0FB1  0086               	movwf	6
 10276  0FB2  3001               	movlw	1	; select bank2/3
 10277  0FB3  0087               	movwf	7
 10278  0FB4  0801               	movf	1,w
 10279  0FB5  00F5               	movwf	??_Sensor_autoCalibration
 10280  0FB6  01F6               	clrf	??_Sensor_autoCalibration+1
 10281  0FB7  35F5               	lslf	??_Sensor_autoCalibration,f
 10282  0FB8  0DF6               	rlf	??_Sensor_autoCalibration+1,f
 10283  0FB9  087A               	movf	Sensor_autoCalibration@sensor,w
 10284  0FBA  3E06               	addlw	6
 10285  0FBB  0086               	movwf	6
 10286  0FBC  3001               	movlw	1	; select bank2/3
 10287  0FBD  0087               	movwf	7
 10288  0FBE  3579               	lslf	Sensor_autoCalibration@adcIndex,w
 10289  0FBF  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
 10290  0FC0  0084               	movwf	4
 10291  0FC1  0185               	clrf	5
 10292  0FC2  3F40               	moviw [0]fsr1
 10293  0FC3  0200               	subwf	0,w
 10294  0FC4  00F1               	movwf	abs@a
 10295  0FC5  3101               	addfsr 0,1
 10296  0FC6  3F41               	moviw [1]fsr1
 10297  0FC7  3B00               	subwfb	0,w
 10298  0FC8  00F2               	movwf	abs@a+1
 10299  0FC9  3196  269B  318F   	fcall	_abs
 10300  0FCC  0876               	movf	??_Sensor_autoCalibration+1,w
 10301  0FCD  0272               	subwf	?_abs+1,w
 10302  0FCE  1D03               	skipz
 10303  0FCF  2FD2               	goto	u2355
 10304  0FD0  0875               	movf	??_Sensor_autoCalibration,w
 10305  0FD1  0271               	subwf	?_abs,w
 10306  0FD2                     u2355:	
 10307  0FD2  1803               	skipnc
 10308  0FD3  2FE1               	goto	l3905
 10309                           
 10310                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 707:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 708:             sensor->precharge_time = (mtouch_sensor_time_t)32;
 10311  0FD4  3020               	movlw	32
 10312  0FD5  00F5               	movwf	??_Sensor_autoCalibration
 10313  0FD6  087A               	movf	Sensor_autoCalibration@sensor,w
 10314  0FD7  3E02               	addlw	2
 10315  0FD8  0086               	movwf	6
 10316  0FD9  3001               	movlw	1	; select bank2/3
 10317  0FDA  0087               	movwf	7
 10318  0FDB  0875               	movf	??_Sensor_autoCalibration,w
 10319  0FDC  0081               	movwf	1
 10320                           
 10321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             Sensor_setCalibrated(senso
      +                          r);
 10322  0FDD  087A               	movf	Sensor_autoCalibration@sensor,w
 10323  0FDE  3195  2549         	fcall	_Sensor_setCalibrated
 10324                           
 10325                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 710:         }
 10326  0FE0  0008               	return
 10327  0FE1                     l3905:	
 10328                           
 10329                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 712:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->acquisition_time += (uint8_t)2;
 10330  0FE1  3002               	movlw	2
 10331  0FE2  00F5               	movwf	??_Sensor_autoCalibration
 10332  0FE3  087A               	movf	Sensor_autoCalibration@sensor,w
 10333  0FE4  3E03               	addlw	3
 10334  0FE5  0086               	movwf	6
 10335  0FE6  3001               	movlw	1	; select bank2/3
 10336  0FE7  0087               	movwf	7
 10337  0FE8  0875               	movf	??_Sensor_autoCalibration,w
 10338  0FE9  0781               	addwf	1,f
 10339                           
 10340                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
 10341  0FEA  087A               	movf	Sensor_autoCalibration@sensor,w
 10342  0FEB  3E03               	addlw	3
 10343  0FEC  0086               	movwf	6
 10344  0FED  3001               	movlw	1	; select bank2/3
 10345  0FEE  0087               	movwf	7
 10346  0FEF  3020               	movlw	32
 10347  0FF0  0201               	subwf	1,w
 10348  0FF1  1C03               	skipc
 10349  0FF2  0008               	return
 10350                           
 10351                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 719:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
 10352  0FF3  3020               	movlw	32
 10353  0FF4  00F5               	movwf	??_Sensor_autoCalibration
 10354  0FF5  087A               	movf	Sensor_autoCalibration@sensor,w
 10355  0FF6  3E02               	addlw	2
 10356  0FF7  0086               	movwf	6
 10357  0FF8  3001               	movlw	1	; select bank2/3
 10358  0FF9  0087               	movwf	7
 10359  0FFA  0875               	movf	??_Sensor_autoCalibration,w
 10360  0FFB  0081               	movwf	1
 10361                           
 10362                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:                 Sensor_setCalibrated(s
      +                          ensor);
 10363  0FFC  087A               	movf	Sensor_autoCalibration@sensor,w
 10364  0FFD  3195  2549         	fcall	_Sensor_setCalibrated
 10365  0FFF  0008               	return
 10366  1000                     __end_of_Sensor_autoCalibration:	
 10367                           
 10368                           	psect	text57
 10369  169B                     __ptext57:	
 10370 ;; *************** function _abs *****************
 10371 ;; Defined at:
 10372 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 10373 ;; Parameters:    Size  Location     Type
 10374 ;;  a               2    1[COMMON] int 
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;		None
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  2    1[COMMON] int 
 10379 ;; Registers used:
 10380 ;;		wreg, status,2, status,0
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10386 ;;      Params:         2       0       0       0       0       0       0       0
 10387 ;;      Locals:         0       0       0       0       0       0       0       0
 10388 ;;      Temps:          2       0       0       0       0       0       0       0
 10389 ;;      Totals:         4       0       0       0       0       0       0       0
 10390 ;;Total ram usage:        4 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    4
 10393 ;; This function calls:
 10394 ;;		Nothing
 10395 ;; This function is called by:
 10396 ;;		_Sensor_postAcquisitionProcess
 10397 ;;		_Sensor_Acq_ExecutePacket
 10398 ;;		_Sensor_autoCalibration
 10399 ;; This function uses a non-reentrant model
 10400 ;;
 10401                           
 10402                           
 10403                           ;psect for function _abs
 10404  169B                     _abs:	
 10405                           
 10406                           ;incstack = 0
 10407                           ; Regs used in _abs: [wreg+status,2+status,0]
 10408  169B  0872               	movf	abs@a+1,w
 10409  169C  3A80               	xorlw	128
 10410  169D  00F3               	movwf	??_abs
 10411  169E  3080               	movlw	128
 10412  169F  0273               	subwf	??_abs,w
 10413  16A0  1D03               	skipz
 10414  16A1  2EA4               	goto	u2195
 10415  16A2  3001               	movlw	1
 10416  16A3  0271               	subwf	abs@a,w
 10417  16A4                     u2195:	
 10418  16A4  1803               	skipnc
 10419  16A5  0008               	return
 10420  16A6  0971               	comf	abs@a,w
 10421  16A7  00F3               	movwf	??_abs
 10422  16A8  0972               	comf	abs@a+1,w
 10423  16A9  00F4               	movwf	??_abs+1
 10424  16AA  0AF3               	incf	??_abs,f
 10425  16AB  1903               	skipnz
 10426  16AC  0AF4               	incf	??_abs+1,f
 10427  16AD  0873               	movf	??_abs,w
 10428  16AE  00F1               	movwf	?_abs
 10429  16AF  0874               	movf	??_abs+1,w
 10430  16B0  00F2               	movwf	?_abs+1
 10431  16B1  0008               	return
 10432  16B2                     __end_of_abs:	
 10433                           
 10434                           	psect	text58
 10435  1549                     __ptext58:	
 10436 ;; *************** function _Sensor_setCalibrated *****************
 10437 ;; Defined at:
 10438 ;;		line 925 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10439 ;; Parameters:    Size  Location     Type
 10440 ;;  sensor          1    wreg     PTR struct .
 10441 ;;		 -> NULL(0), mtouch_sensor(27), 
 10442 ;; Auto vars:     Size  Location     Type
 10443 ;;  sensor          1    1[COMMON] PTR struct .
 10444 ;;		 -> NULL(0), mtouch_sensor(27), 
 10445 ;; Return value:  Size  Location     Type
 10446 ;;                  1    wreg      void 
 10447 ;; Registers used:
 10448 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10449 ;; Tracked objects:
 10450 ;;		On entry : 0/0
 10451 ;;		On exit  : 0/0
 10452 ;;		Unchanged: 0/0
 10453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10454 ;;      Params:         0       0       0       0       0       0       0       0
 10455 ;;      Locals:         1       0       0       0       0       0       0       0
 10456 ;;      Temps:          0       0       0       0       0       0       0       0
 10457 ;;      Totals:         1       0       0       0       0       0       0       0
 10458 ;;Total ram usage:        1 bytes
 10459 ;; Hardware stack levels used:    1
 10460 ;; Hardware stack levels required when called:    4
 10461 ;; This function calls:
 10462 ;;		Nothing
 10463 ;; This function is called by:
 10464 ;;		_Sensor_autoCalibration
 10465 ;; This function uses a non-reentrant model
 10466 ;;
 10467                           
 10468                           
 10469                           ;psect for function _Sensor_setCalibrated
 10470  1549                     _Sensor_setCalibrated:	
 10471                           
 10472                           ;incstack = 0
 10473                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10474                           ;Sensor_setCalibrated@sensor stored from wreg
 10475  1549  00F1               	movwf	Sensor_setCalibrated@sensor
 10476                           
 10477                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          926: {;mcc_generated_files/mtouch/mtouch_sensor.c: 927:     sensor->calibrated = 1;
 10478  154A  0871               	movf	Sensor_setCalibrated@sensor,w
 10479  154B  3E08               	addlw	8
 10480  154C  0086               	movwf	6
 10481  154D  3001               	movlw	1	; select bank2/3
 10482  154E  0087               	movwf	7
 10483  154F  1501               	bsf	1,2
 10484                           
 10485                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928:     sensor->acqTime_cal = 0;
 10486  1550  0871               	movf	Sensor_setCalibrated@sensor,w
 10487  1551  3E08               	addlw	8
 10488  1552  0086               	movwf	6
 10489  1553  3001               	movlw	1	; select bank2/3
 10490  1554  0087               	movwf	7
 10491  1555  1201               	bcf	1,4
 10492  1556  0008               	return
 10493  1557                     __end_of_Sensor_setCalibrated:	
 10494                           
 10495                           	psect	text59
 10496  1582                     __ptext59:	
 10497 ;; *************** function _Sensor_setCalibratAcqTime *****************
 10498 ;; Defined at:
 10499 ;;		line 931 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;  sensor          1    wreg     PTR struct .
 10502 ;;		 -> NULL(0), mtouch_sensor(27), 
 10503 ;; Auto vars:     Size  Location     Type
 10504 ;;  sensor          1    1[COMMON] PTR struct .
 10505 ;;		 -> NULL(0), mtouch_sensor(27), 
 10506 ;; Return value:  Size  Location     Type
 10507 ;;                  1    wreg      void 
 10508 ;; Registers used:
 10509 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10515 ;;      Params:         0       0       0       0       0       0       0       0
 10516 ;;      Locals:         1       0       0       0       0       0       0       0
 10517 ;;      Temps:          0       0       0       0       0       0       0       0
 10518 ;;      Totals:         1       0       0       0       0       0       0       0
 10519 ;;Total ram usage:        1 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    4
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_Sensor_autoCalibration
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           
 10530                           ;psect for function _Sensor_setCalibratAcqTime
 10531  1582                     _Sensor_setCalibratAcqTime:	
 10532                           
 10533                           ;incstack = 0
 10534                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10535                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 10536  1582  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
 10537                           
 10538                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 931: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 932: {;mcc_generated_files/mtouch/mtouch_sensor.c: 933:     sensor->acqTime_cal = 1
      +                          ;
 10539  1583  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10540  1584  3E08               	addlw	8
 10541  1585  0086               	movwf	6
 10542  1586  3001               	movlw	1	; select bank2/3
 10543  1587  0087               	movwf	7
 10544  1588  1601               	bsf	1,4
 10545                           
 10546                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 934:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
 10547  1589  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10548  158A  3E03               	addlw	3
 10549  158B  0086               	movwf	6
 10550  158C  3001               	movlw	1	; select bank2/3
 10551  158D  0087               	movwf	7
 10552  158E  0181               	clrf	1
 10553  158F  0A81               	incf	1,f
 10554  1590  0008               	return
 10555  1591                     __end_of_Sensor_setCalibratAcqTime:	
 10556                           
 10557                           	psect	text60
 10558  1512                     __ptext60:	
 10559 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 10560 ;; Defined at:
 10561 ;;		line 937 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;  sensor          1    wreg     PTR struct .
 10564 ;;		 -> NULL(0), mtouch_sensor(27), 
 10565 ;; Auto vars:     Size  Location     Type
 10566 ;;  sensor          1    1[COMMON] PTR struct .
 10567 ;;		 -> NULL(0), mtouch_sensor(27), 
 10568 ;; Return value:  Size  Location     Type
 10569 ;;                  1    wreg      _Bool 
 10570 ;; Registers used:
 10571 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10572 ;; Tracked objects:
 10573 ;;		On entry : 0/0
 10574 ;;		On exit  : 0/0
 10575 ;;		Unchanged: 0/0
 10576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10577 ;;      Params:         0       0       0       0       0       0       0       0
 10578 ;;      Locals:         1       0       0       0       0       0       0       0
 10579 ;;      Temps:          0       0       0       0       0       0       0       0
 10580 ;;      Totals:         1       0       0       0       0       0       0       0
 10581 ;;Total ram usage:        1 bytes
 10582 ;; Hardware stack levels used:    1
 10583 ;; Hardware stack levels required when called:    4
 10584 ;; This function calls:
 10585 ;;		Nothing
 10586 ;; This function is called by:
 10587 ;;		_Sensor_loadADCSettings
 10588 ;;		_Sensor_autoCalibration
 10589 ;; This function uses a non-reentrant model
 10590 ;;
 10591                           
 10592                           
 10593                           ;psect for function _Sensor_isCalibratingAcqTime
 10594  1512                     _Sensor_isCalibratingAcqTime:	
 10595                           
 10596                           ;incstack = 0
 10597                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10598                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 10599  1512  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
 10600                           
 10601                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 938: {;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     return (_Bool)sensor
      +                          ->acqTime_cal;
 10602  1513  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
 10603  1514  3E08               	addlw	8
 10604  1515  0086               	movwf	6
 10605  1516  3001               	movlw	1	; select bank2/3
 10606  1517  0087               	movwf	7
 10607  1518  0E01               	swapf	1,w
 10608  1519  3901               	andlw	1
 10609  151A  0008               	return
 10610  151B                     __end_of_Sensor_isCalibratingAcqTime:	
 10611                           
 10612                           	psect	text61
 10613  08E6                     __ptext61:	
 10614 ;; *************** function _Sensor_getScanGroupIndex *****************
 10615 ;; Defined at:
 10616 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10617 ;; Parameters:    Size  Location     Type
 10618 ;;  sensor          1    wreg     PTR struct .
 10619 ;;		 -> NULL(0), mtouch_sensor(27), 
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;  sensor          1    3[COMMON] PTR struct .
 10622 ;;		 -> NULL(0), mtouch_sensor(27), 
 10623 ;;  sensorGroup     1    4[COMMON] unsigned char 
 10624 ;; Return value:  Size  Location     Type
 10625 ;;                  1    wreg      unsigned char 
 10626 ;; Registers used:
 10627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10628 ;; Tracked objects:
 10629 ;;		On entry : 0/0
 10630 ;;		On exit  : 0/0
 10631 ;;		Unchanged: 0/0
 10632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10633 ;;      Params:         0       0       0       0       0       0       0       0
 10634 ;;      Locals:         2       0       0       0       0       0       0       0
 10635 ;;      Temps:          2       0       0       0       0       0       0       0
 10636 ;;      Totals:         4       0       0       0       0       0       0       0
 10637 ;;Total ram usage:        4 bytes
 10638 ;; Hardware stack levels used:    1
 10639 ;; Hardware stack levels required when called:    4
 10640 ;; This function calls:
 10641 ;;		Nothing
 10642 ;; This function is called by:
 10643 ;;		_Sensor_postAcquisitionProcess
 10644 ;;		_Sensor_autoCalibration
 10645 ;;		_Sensor_RawSample_Update
 10646 ;; This function uses a non-reentrant model
 10647 ;;
 10648                           
 10649                           
 10650                           ;psect for function _Sensor_getScanGroupIndex
 10651  08E6                     _Sensor_getScanGroupIndex:	
 10652                           
 10653                           ;incstack = 0
 10654                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
 10655                           ;Sensor_getScanGroupIndex@sensor stored from wreg
 10656  08E6  00F3               	movwf	Sensor_getScanGroupIndex@sensor
 10657                           
 10658                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 355: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 356:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 357:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
 10659  08E7  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
 10660  08E8                     l3767:	
 10661                           
 10662                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 359:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
 10663  08E8  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10664  08E9  00F1               	movwf	??_Sensor_getScanGroupIndex
 10665  08EA  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10666  08EB  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10667  08EC  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10668  08ED  303C               	movlw	low (_sensor_scan_group| (0+32768))
 10669  08EE  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10670  08EF  0084               	movwf	4
 10671  08F0  3098               	movlw	high (_sensor_scan_group| (0+32768))
 10672  08F1  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10673  08F2  0085               	movwf	5
 10674  08F3  0800               	movf	0,w	;code access
 10675  08F4  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10676  08F5  1D03               	skipz
 10677  08F6  28F9               	goto	l3773
 10678  08F7                     l3769:	
 10679                           
 10680                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:             return 0;
 10681  08F7  3000               	movlw	0
 10682  08F8  0008               	return
 10683  08F9                     l3773:	
 10684                           
 10685                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
 10686  08F9  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10687  08FA  00F1               	movwf	??_Sensor_getScanGroupIndex
 10688  08FB  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10689  08FC  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10690  08FD  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10691  08FE  303D               	movlw	low ((_sensor_scan_group+1)| (0+32768))
 10692  08FF  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10693  0900  0084               	movwf	4
 10694  0901  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
 10695  0902  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10696  0903  0085               	movwf	5
 10697  0904  0800               	movf	0,w	;code access
 10698  0905  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10699  0906  1D03               	skipz
 10700  0907  290A               	goto	l3779
 10701                           
 10702                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:             return 1;
 10703  0908  3001               	movlw	1
 10704  0909  0008               	return
 10705  090A                     l3779:	
 10706                           
 10707                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     }
 10708  090A  3001               	movlw	1
 10709  090B  00F1               	movwf	??_Sensor_getScanGroupIndex
 10710  090C  0871               	movf	??_Sensor_getScanGroupIndex,w
 10711  090D  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
 10712  090E  3002               	movlw	2
 10713  090F  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
 10714  0910  1803               	btfsc	3,0
 10715  0911  28F7               	goto	l3769
 10716  0912  28E8               	goto	l3767
 10717  0913                     __end_of_Sensor_getScanGroupIndex:	
 10718                           
 10719                           	psect	text62
 10720  15A1                     __ptext62:	
 10721 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 10722 ;; Defined at:
 10723 ;;		line 239 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;		None
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;		None
 10728 ;; Return value:  Size  Location     Type
 10729 ;;                  1    wreg      void 
 10730 ;; Registers used:
 10731 ;;		wreg, status,2, status,0
 10732 ;; Tracked objects:
 10733 ;;		On entry : 0/0
 10734 ;;		On exit  : 0/0
 10735 ;;		Unchanged: 0/0
 10736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10737 ;;      Params:         0       0       0       0       0       0       0       0
 10738 ;;      Locals:         0       0       0       0       0       0       0       0
 10739 ;;      Temps:          0       0       0       0       0       0       0       0
 10740 ;;      Totals:         0       0       0       0       0       0       0       0
 10741 ;;Total ram usage:        0 bytes
 10742 ;; Hardware stack levels used:    1
 10743 ;; Hardware stack levels required when called:    4
 10744 ;; This function calls:
 10745 ;;		Nothing
 10746 ;; This function is called by:
 10747 ;;		_MTOUCH_Initialize
 10748 ;;		_Sensor_Acq_ExecutePacket
 10749 ;; This function uses a non-reentrant model
 10750 ;;
 10751                           
 10752                           
 10753                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 10754  15A1                     _MTOUCH_Sensor_Scan_Initialize:	
 10755                           
 10756                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     T2CONbits.T2CKPS = 0x0;
 10757                           
 10758                           ;incstack = 0
 10759                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 10760  15A1  30FC               	movlw	-4
 10761  15A2  0020               	movlb	0	; select bank0
 10762  15A3  059C               	andwf	28,f	;volatile
 10763                           
 10764                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     AD1CON0 = (uint8_t)0;
 10765  15A4  002E               	movlb	14	; select bank14
 10766  15A5  0191               	clrf	17	;volatile
 10767                           
 10768                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     AD2CON0 = (uint8_t)0;
 10769  15A6  002F               	movlb	15	; select bank15
 10770  15A7  0191               	clrf	17	;volatile
 10771                           
 10772                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
 10773  15A8  3090               	movlw	144
 10774  15A9  002E               	movlb	14	; select bank14
 10775  15AA  0092               	movwf	18	;volatile
 10776                           
 10777                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 246:     AD1CON3 = (uint8_t)0b01000000;
 10778  15AB  3040               	movlw	64
 10779  15AC  0094               	movwf	20	;volatile
 10780                           
 10781                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     AD2CON3 = (uint8_t)0b01000000;
 10782  15AD  3040               	movlw	64
 10783  15AE  002F               	movlb	15	; select bank15
 10784  15AF  0094               	movwf	20	;volatile
 10785  15B0  0008               	return
 10786  15B1                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 10787                           
 10788                           	psect	text63
 10789  1591                     __ptext63:	
 10790 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 10791 ;; Defined at:
 10792 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10793 ;; Parameters:    Size  Location     Type
 10794 ;;		None
 10795 ;; Auto vars:     Size  Location     Type
 10796 ;;  button          1   14[BANK0 ] enum E3069
 10797 ;; Return value:  Size  Location     Type
 10798 ;;                  1    wreg      void 
 10799 ;; Registers used:
 10800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10801 ;; Tracked objects:
 10802 ;;		On entry : 0/0
 10803 ;;		On exit  : 0/0
 10804 ;;		Unchanged: 0/0
 10805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10806 ;;      Params:         0       0       0       0       0       0       0       0
 10807 ;;      Locals:         0       1       0       0       0       0       0       0
 10808 ;;      Temps:          0       1       0       0       0       0       0       0
 10809 ;;      Totals:         0       2       0       0       0       0       0       0
 10810 ;;Total ram usage:        2 bytes
 10811 ;; Hardware stack levels used:    1
 10812 ;; Hardware stack levels required when called:    9
 10813 ;; This function calls:
 10814 ;;		_Button_Service
 10815 ;; This function is called by:
 10816 ;;		_MTOUCH_Service_Mainloop
 10817 ;; This function uses a non-reentrant model
 10818 ;;
 10819                           
 10820                           
 10821                           ;psect for function _MTOUCH_Button_ServiceAll
 10822  1591                     _MTOUCH_Button_ServiceAll:	
 10823                           
 10824                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 194:     for (button = 0; button < 3u; button
      +                          ++)
 10825                           
 10826                           ;incstack = 0
 10827                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10828  1591  0020               	movlb	0	; select bank0
 10829  1592  01AE               	clrf	MTOUCH_Button_ServiceAll@button
 10830  1593                     l6251:	
 10831                           
 10832                           ;mcc_generated_files/mtouch/mtouch_button.c: 195:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 196:         Button_Service(button);
 10833  1593  082E               	movf	MTOUCH_Button_ServiceAll@button,w
 10834  1594  318B  23A2  3195   	fcall	_Button_Service
 10835                           
 10836                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     }
 10837  1597  3001               	movlw	1
 10838  1598  0020               	movlb	0	; select bank0
 10839  1599  00AD               	movwf	??_MTOUCH_Button_ServiceAll
 10840  159A  082D               	movf	??_MTOUCH_Button_ServiceAll,w
 10841  159B  07AE               	addwf	MTOUCH_Button_ServiceAll@button,f
 10842  159C  3003               	movlw	3
 10843  159D  022E               	subwf	MTOUCH_Button_ServiceAll@button,w
 10844  159E  1803               	btfsc	3,0
 10845  159F  0008               	return
 10846  15A0  2D93               	goto	l6251
 10847  15A1                     __end_of_MTOUCH_Button_ServiceAll:	
 10848                           
 10849                           	psect	text64
 10850  0BA2                     __ptext64:	
 10851 ;; *************** function _Button_Service *****************
 10852 ;; Defined at:
 10853 ;;		line 200 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10854 ;; Parameters:    Size  Location     Type
 10855 ;;  name            1    wreg     enum E3069
 10856 ;; Auto vars:     Size  Location     Type
 10857 ;;  name            1   11[BANK0 ] enum E3069
 10858 ;;  button          1   12[BANK0 ] PTR struct .
 10859 ;;		 -> mtouch_button(48), 
 10860 ;; Return value:  Size  Location     Type
 10861 ;;                  1    wreg      void 
 10862 ;; Registers used:
 10863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10864 ;; Tracked objects:
 10865 ;;		On entry : 0/0
 10866 ;;		On exit  : 0/0
 10867 ;;		Unchanged: 0/0
 10868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10869 ;;      Params:         0       0       0       0       0       0       0       0
 10870 ;;      Locals:         0       2       0       0       0       0       0       0
 10871 ;;      Temps:          0       2       0       0       0       0       0       0
 10872 ;;      Totals:         0       4       0       0       0       0       0       0
 10873 ;;Total ram usage:        4 bytes
 10874 ;; Hardware stack levels used:    1
 10875 ;; Hardware stack levels required when called:    8
 10876 ;; This function calls:
 10877 ;;		_Button_Deviation_Update
 10878 ;;		_Button_Reading_Update
 10879 ;;		_Button_State_Initializing
 10880 ;;		_Button_State_NotPressed
 10881 ;;		_Button_State_Pressed
 10882 ;;		_MTOUCH_Button_Initialize
 10883 ;;		_MTOUCH_Sensor_isCalibrated
 10884 ;;		_MTOUCH_Sensor_wasSampled
 10885 ;; This function is called by:
 10886 ;;		_MTOUCH_Button_ServiceAll
 10887 ;; This function uses a non-reentrant model
 10888 ;;
 10889                           
 10890                           
 10891                           ;psect for function _Button_Service
 10892  0BA2                     _Button_Service:	
 10893                           
 10894                           ;incstack = 0
 10895                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10896                           ;Button_Service@name stored from wreg
 10897  0BA2  0020               	movlb	0	; select bank0
 10898  0BA3  00AB               	movwf	Button_Service@name
 10899                           
 10900                           ;mcc_generated_files/mtouch/mtouch_button.c: 200: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 201: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 202:     mtouch_button_t* button = &mtouch_button[name];
 10901  0BA4  082B               	movf	Button_Service@name,w
 10902  0BA5  00A9               	movwf	??_Button_Service
 10903  0BA6  3003               	movlw	3
 10904  0BA7                     u5095:	
 10905  0BA7  35A9               	lslf	??_Button_Service,f
 10906  0BA8  3EFF               	addlw	-1
 10907  0BA9  1D03               	skipz
 10908  0BAA  2BA7               	goto	u5095
 10909  0BAB  3529               	lslf	??_Button_Service,w
 10910  0BAC  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 10911  0BAD  00AA               	movwf	??_Button_Service+1
 10912  0BAE  082A               	movf	??_Button_Service+1,w
 10913  0BAF  00AC               	movwf	Button_Service@button
 10914                           
 10915                           ;mcc_generated_files/mtouch/mtouch_button.c: 204:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 10916  0BB0  0A2C               	incf	Button_Service@button,w
 10917  0BB1  0086               	movwf	6
 10918  0BB2  3001               	movlw	1	; select bank2/3
 10919  0BB3  0087               	movwf	7
 10920  0BB4  0801               	movf	1,w
 10921  0BB5  3195  2573  318B   	fcall	_MTOUCH_Sensor_wasSampled
 10922  0BB8  3A00               	xorlw	0
 10923  0BB9  1903               	skipnz
 10924  0BBA  0008               	return
 10925  0BBB  0020               	movlb	0	; select bank0
 10926  0BBC  0A2C               	incf	Button_Service@button,w
 10927  0BBD  0086               	movwf	6
 10928  0BBE  3001               	movlw	1	; select bank2/3
 10929  0BBF  0087               	movwf	7
 10930  0BC0  0801               	movf	1,w
 10931  0BC1  3196  2642  318B   	fcall	_MTOUCH_Sensor_isCalibrated
 10932  0BC4  3A00               	xorlw	0
 10933  0BC5  1903               	skipnz
 10934  0BC6  0008               	return
 10935                           
 10936                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Reading_Update(button);
 10937  0BC7  0020               	movlb	0	; select bank0
 10938  0BC8  082C               	movf	Button_Service@button,w
 10939  0BC9  3195  253B  318B   	fcall	_Button_Reading_Update
 10940                           
 10941                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:         Button_Deviation_Update(button
      +                          );
 10942  0BCC  0020               	movlb	0	; select bank0
 10943  0BCD  082C               	movf	Button_Service@button,w
 10944  0BCE  318E  2658  318B   	fcall	_Button_Deviation_Update
 10945                           
 10946                           ;mcc_generated_files/mtouch/mtouch_button.c: 209:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 10947  0BD1  0020               	movlb	0	; select bank0
 10948  0BD2  082C               	movf	Button_Service@button,w
 10949  0BD3  3E02               	addlw	2
 10950  0BD4  0086               	movwf	6
 10951  0BD5  3001               	movlw	1	; select bank2/3
 10952  0BD6  0087               	movwf	7
 10953  0BD7  3003               	movlw	3
 10954  0BD8  0201               	subwf	1,w
 10955  0BD9  1C03               	skipc
 10956  0BDA  2BE3               	goto	l6203
 10957                           
 10958                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 211:             MTOUCH_Button_Initialize(button->name);
 10959  0BDB  082C               	movf	Button_Service@button,w
 10960  0BDC  0086               	movwf	6
 10961  0BDD  3001               	movlw	1	; select bank2/3
 10962  0BDE  0087               	movwf	7
 10963  0BDF  0801               	movf	1,w
 10964  0BE0  318A  2209  318B   	fcall	_MTOUCH_Button_Initialize
 10965  0BE3                     l6203:	
 10966                           
 10967                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 10968  0BE3  0020               	movlb	0	; select bank0
 10969  0BE4  082C               	movf	Button_Service@button,w
 10970  0BE5  00A9               	movwf	??_Button_Service
 10971  0BE6  0829               	movf	??_Button_Service,w
 10972  0BE7  00A4               	movwf	Button_State_Pressed@button
 10973  0BE8  082C               	movf	Button_Service@button,w
 10974  0BE9  3E02               	addlw	2
 10975  0BEA  0086               	movwf	6
 10976  0BEB  3001               	movlw	1	; select bank2/3
 10977  0BEC  0087               	movwf	7
 10978  0BED  3501               	lslf	1,w
 10979  0BEE  3ECF               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 10980  0BEF  0086               	movwf	6
 10981  0BF0  0187               	clrf	7
 10982  0BF1  3F41               	moviw [1]fsr1
 10983  0BF2  008A               	movwf	10
 10984  0BF3  3F40               	moviw [0]fsr1
 10985  0BF4  000A               	callw
 10986  0BF5  318B               	pagesel	$
 10987  0BF6  0008               	return
 10988  0BF7                     __end_of_Button_Service:	
 10989                           
 10990                           	psect	text65
 10991  1573                     __ptext65:	
 10992 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 10993 ;; Defined at:
 10994 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10995 ;; Parameters:    Size  Location     Type
 10996 ;;  sensor          1    wreg     enum E2854
 10997 ;; Auto vars:     Size  Location     Type
 10998 ;;  sensor          1    6[COMMON] enum E2854
 10999 ;; Return value:  Size  Location     Type
 11000 ;;                  1    wreg      _Bool 
 11001 ;; Registers used:
 11002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11003 ;; Tracked objects:
 11004 ;;		On entry : 0/0
 11005 ;;		On exit  : 0/0
 11006 ;;		Unchanged: 0/0
 11007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11008 ;;      Params:         0       0       0       0       0       0       0       0
 11009 ;;      Locals:         1       0       0       0       0       0       0       0
 11010 ;;      Temps:          1       0       0       0       0       0       0       0
 11011 ;;      Totals:         2       0       0       0       0       0       0       0
 11012 ;;Total ram usage:        2 bytes
 11013 ;; Hardware stack levels used:    1
 11014 ;; Hardware stack levels required when called:    5
 11015 ;; This function calls:
 11016 ;;		___bmul
 11017 ;; This function is called by:
 11018 ;;		_Button_Service
 11019 ;; This function uses a non-reentrant model
 11020 ;;
 11021                           
 11022                           
 11023                           ;psect for function _MTOUCH_Sensor_wasSampled
 11024  1573                     _MTOUCH_Sensor_wasSampled:	
 11025                           
 11026                           ;incstack = 0
 11027                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11028                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 11029  1573  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
 11030                           
 11031                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 959: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 960: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 961:     return (_Bool)mtouch_sensor[sensor].sampled;
 11032  1574  3009               	movlw	9
 11033  1575  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
 11034  1576  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
 11035  1577  00F1               	movwf	___bmul@multiplicand
 11036  1578  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 11037  1579  3195  25B1         	fcall	___bmul
 11038  157B  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11039  157C  0086               	movwf	6
 11040  157D  3001               	movlw	1	; select bank2/3
 11041  157E  0087               	movwf	7
 11042  157F  0801               	movf	1,w
 11043  1580  3901               	andlw	1
 11044  1581  0008               	return
 11045  1582                     __end_of_MTOUCH_Sensor_wasSampled:	
 11046                           
 11047                           	psect	text66
 11048  1642                     __ptext66:	
 11049 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 11050 ;; Defined at:
 11051 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;  sensor          1    wreg     enum E2854
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;  sensor          1    6[COMMON] enum E2854
 11056 ;; Return value:  Size  Location     Type
 11057 ;;                  1    wreg      _Bool 
 11058 ;; Registers used:
 11059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11065 ;;      Params:         0       0       0       0       0       0       0       0
 11066 ;;      Locals:         1       0       0       0       0       0       0       0
 11067 ;;      Temps:          1       0       0       0       0       0       0       0
 11068 ;;      Totals:         2       0       0       0       0       0       0       0
 11069 ;;Total ram usage:        2 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    5
 11072 ;; This function calls:
 11073 ;;		___bmul
 11074 ;; This function is called by:
 11075 ;;		_Button_Service
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           
 11080                           ;psect for function _MTOUCH_Sensor_isCalibrated
 11081  1642                     _MTOUCH_Sensor_isCalibrated:	
 11082                           
 11083                           ;incstack = 0
 11084                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11085                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 11086  1642  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 11087                           
 11088                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 914:     if(sensor < 3u)
 11089  1643  3003               	movlw	3
 11090  1644  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
 11091  1645  1803               	skipnc
 11092  1646  2E56               	goto	l6011
 11093                           
 11094                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
 11095  1647  3009               	movlw	9
 11096  1648  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
 11097  1649  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
 11098  164A  00F1               	movwf	___bmul@multiplicand
 11099  164B  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 11100  164C  3195  25B1         	fcall	___bmul
 11101  164E  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11102  164F  0086               	movwf	6
 11103  1650  3001               	movlw	1	; select bank2/3
 11104  1651  0087               	movwf	7
 11105  1652  0C01               	rrf	1,w
 11106  1653  0C89               	rrf	9,f
 11107  1654  3901               	andlw	1
 11108  1655  0008               	return
 11109  1656                     l6011:	
 11110                           
 11111                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:         return 0;
 11112  1656  3000               	movlw	0
 11113  1657  0008               	return
 11114  1658                     __end_of_MTOUCH_Sensor_isCalibrated:	
 11115                           
 11116                           	psect	text67
 11117  06A3                     __ptext67:	
 11118 ;; *************** function _Button_State_NotPressed *****************
 11119 ;; Defined at:
 11120 ;;		line 237 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;  button          1    4[BANK0 ] PTR struct .
 11123 ;;		 -> mtouch_button(48), 
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;		None
 11126 ;; Return value:  Size  Location     Type
 11127 ;;                  1    wreg      void 
 11128 ;; Registers used:
 11129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11130 ;; Tracked objects:
 11131 ;;		On entry : 0/0
 11132 ;;		On exit  : 0/0
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11135 ;;      Params:         0       1       0       0       0       0       0       0
 11136 ;;      Locals:         0       0       0       0       0       0       0       0
 11137 ;;      Temps:          0       2       0       0       0       0       0       0
 11138 ;;      Totals:         0       3       0       0       0       0       0       0
 11139 ;;Total ram usage:        3 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; Hardware stack levels required when called:    7
 11142 ;; This function calls:
 11143 ;;		_Button_Baseline_Update
 11144 ;;		_Button_DefaultCallback
 11145 ;;		_MTOUCH_Button_Initialize
 11146 ;;		_myButtonPressedCallback
 11147 ;; This function is called by:
 11148 ;;		_Button_Service
 11149 ;; This function uses a non-reentrant model
 11150 ;;
 11151                           
 11152                           
 11153                           ;psect for function _Button_State_NotPressed
 11154  06A3                     _Button_State_NotPressed:	
 11155                           
 11156                           ;mcc_generated_files/mtouch/mtouch_button.c: 237: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 238: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 240:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 11157                           
 11158                           ;incstack = 0
 11159                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11160  06A3  0020               	movlb	0	; select bank0
 11161  06A4  0824               	movf	Button_State_NotPressed@button,w
 11162  06A5  3E09               	addlw	9
 11163  06A6  0086               	movwf	6
 11164  06A7  3001               	movlw	1	; select bank2/3
 11165  06A8  0087               	movwf	7
 11166  06A9  0801               	movf	1,w
 11167  06AA  3A80               	xorlw	128
 11168  06AB  00A5               	movwf	??_Button_State_NotPressed
 11169  06AC  0824               	movf	Button_State_NotPressed@button,w
 11170  06AD  3E0E               	addlw	14
 11171  06AE  0086               	movwf	6
 11172  06AF  3001               	movlw	1	; select bank2/3
 11173  06B0  0087               	movwf	7
 11174  06B1  0301               	decf	1,w
 11175  06B2  3AFF               	xorlw	255
 11176  06B3  3A80               	xorlw	128
 11177  06B4  02A5               	subwf	??_Button_State_NotPressed,f
 11178  06B5  1803               	skipnc
 11179  06B6  2EE2               	goto	l6061
 11180                           
 11181                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 242:         (button->counter)++;
 11182  06B7  0824               	movf	Button_State_NotPressed@button,w
 11183  06B8  3E0A               	addlw	10
 11184  06B9  0086               	movwf	6
 11185  06BA  3001               	movlw	1	; select bank2/3
 11186  06BB  0087               	movwf	7
 11187  06BC  3001               	movlw	1
 11188  06BD  0781               	addwf	1,f
 11189  06BE  3141               	addfsr 1,1
 11190  06BF  1803               	skipnc
 11191  06C0  0A81               	incf	1,f
 11192                           
 11193                           ;mcc_generated_files/mtouch/mtouch_button.c: 243:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 11194  06C1  0824               	movf	Button_State_NotPressed@button,w
 11195  06C2  3E0A               	addlw	10
 11196  06C3  0086               	movwf	6
 11197  06C4  3001               	movlw	1	; select bank2/3
 11198  06C5  0087               	movwf	7
 11199  06C6  3F40               	moviw [0]fsr1
 11200  06C7  00A5               	movwf	??_Button_State_NotPressed
 11201  06C8  3F41               	moviw [1]fsr1
 11202  06C9  00A6               	movwf	??_Button_State_NotPressed+1
 11203  06CA  3000               	movlw	0
 11204  06CB  0226               	subwf	??_Button_State_NotPressed+1,w
 11205  06CC  3041               	movlw	65
 11206  06CD  1903               	skipnz
 11207  06CE  0225               	subwf	??_Button_State_NotPressed,w
 11208  06CF  1C03               	skipc
 11209  06D0  2F24               	goto	l522
 11210                           
 11211                           ;mcc_generated_files/mtouch/mtouch_button.c: 244:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 245:             button->counter = (mtouch_button_statecounter_t)0;
 11212  06D1  0824               	movf	Button_State_NotPressed@button,w
 11213  06D2  3E0A               	addlw	10
 11214  06D3  0086               	movwf	6
 11215  06D4  3001               	movlw	1	; select bank2/3
 11216  06D5  0087               	movwf	7
 11217  06D6  3000               	movlw	0
 11218  06D7  3FC0               	movwi [0]fsr1
 11219  06D8  3FC1               	movwi [1]fsr1
 11220                           
 11221                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 11222  06D9  0824               	movf	Button_State_NotPressed@button,w
 11223  06DA  0086               	movwf	6
 11224  06DB  3001               	movlw	1	; select bank2/3
 11225  06DC  0087               	movwf	7
 11226  06DD  0801               	movf	1,w
 11227  06DE  318A  2209  3186   	fcall	_MTOUCH_Button_Initialize
 11228  06E1  2F24               	goto	l522
 11229  06E2                     l6061:	
 11230  06E2  0824               	movf	Button_State_NotPressed@button,w
 11231  06E3  3E09               	addlw	9
 11232  06E4  0086               	movwf	6
 11233  06E5  3001               	movlw	1	; select bank2/3
 11234  06E6  0087               	movwf	7
 11235  06E7  0801               	movf	1,w
 11236  06E8  00A5               	movwf	??_Button_State_NotPressed
 11237  06E9  01A6               	clrf	??_Button_State_NotPressed+1
 11238  06EA  1BA5               	btfsc	??_Button_State_NotPressed,7
 11239  06EB  03A6               	decf	??_Button_State_NotPressed+1,f
 11240  06EC  0824               	movf	Button_State_NotPressed@button,w
 11241  06ED  3E0E               	addlw	14
 11242  06EE  0086               	movwf	6
 11243  06EF  3001               	movlw	1	; select bank2/3
 11244  06F0  0087               	movwf	7
 11245  06F1  0826               	movf	??_Button_State_NotPressed+1,w
 11246  06F2  3A80               	xorlw	128
 11247  06F3  3C80               	sublw	128
 11248  06F4  1D03               	skipz
 11249  06F5  2EF8               	goto	u4965
 11250  06F6  0825               	movf	??_Button_State_NotPressed,w
 11251  06F7  0201               	subwf	1,w
 11252  06F8                     u4965:	
 11253  06F8  1803               	skipnc
 11254  06F9  2F1B               	goto	l6067
 11255                           
 11256                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 253:         button->state = MTOUCH_BUTTON_STATE_pressed;
 11257  06FA  3002               	movlw	2
 11258  06FB  0020               	movlb	0	; select bank0
 11259  06FC  00A5               	movwf	??_Button_State_NotPressed
 11260  06FD  0824               	movf	Button_State_NotPressed@button,w
 11261  06FE  3E02               	addlw	2
 11262  06FF  0086               	movwf	6
 11263  0700  3001               	movlw	1	; select bank2/3
 11264  0701  0087               	movwf	7
 11265  0702  0825               	movf	??_Button_State_NotPressed,w
 11266  0703  0081               	movwf	1
 11267                           
 11268                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11269  0704  0824               	movf	Button_State_NotPressed@button,w
 11270  0705  3E0A               	addlw	10
 11271  0706  0086               	movwf	6
 11272  0707  3001               	movlw	1	; select bank2/3
 11273  0708  0087               	movwf	7
 11274  0709  3000               	movlw	0
 11275  070A  3FC0               	movwi [0]fsr1
 11276  070B  3FC1               	movwi [1]fsr1
 11277                           
 11278                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:         callback_pressed(button->name)
      +                          ;
 11279  070C  0824               	movf	Button_State_NotPressed@button,w
 11280  070D  0086               	movwf	6
 11281  070E  3001               	movlw	1	; select bank2/3
 11282  070F  0087               	movwf	7
 11283  0710  0801               	movf	1,w
 11284  0711  00A5               	movwf	??_Button_State_NotPressed
 11285  0712  0825               	movf	??_Button_State_NotPressed,w
 11286  0713  00F4               	movwf	myButtonPressedCallback@button
 11287  0714  0021               	movlb	1	; select bank1
 11288  0715  0856               	movf	(_callback_pressed+1)^(0+128),w
 11289  0716  008A               	movwf	10
 11290  0717  0855               	movf	_callback_pressed^(0+128),w
 11291  0718  000A               	callw
 11292  0719  3186               	pagesel	$
 11293                           
 11294                           ;mcc_generated_files/mtouch/mtouch_button.c: 256:     }
 11295  071A  2F24               	goto	l522
 11296  071B                     l6067:	
 11297                           
 11298                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 260:         button->counter = (mtouch_button_statecounter_t)0;
 11299  071B  0020               	movlb	0	; select bank0
 11300  071C  0824               	movf	Button_State_NotPressed@button,w
 11301  071D  3E0A               	addlw	10
 11302  071E  0086               	movwf	6
 11303  071F  3001               	movlw	1	; select bank2/3
 11304  0720  0087               	movwf	7
 11305  0721  3000               	movlw	0
 11306  0722  3FC0               	movwi [0]fsr1
 11307  0723  3FC1               	movwi [1]fsr1
 11308  0724                     l522:	
 11309                           
 11310                           ;mcc_generated_files/mtouch/mtouch_button.c: 265:     (button->baseline_count)++;
 11311  0724  0020               	movlb	0	; select bank0
 11312  0725  0824               	movf	Button_State_NotPressed@button,w
 11313  0726  3E0C               	addlw	12
 11314  0727  0086               	movwf	6
 11315  0728  3001               	movlw	1	; select bank2/3
 11316  0729  0087               	movwf	7
 11317  072A  3001               	movlw	1
 11318  072B  0781               	addwf	1,f
 11319  072C  3141               	addfsr 1,1
 11320  072D  1803               	skipnc
 11321  072E  0A81               	incf	1,f
 11322                           
 11323                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 11324  072F  0824               	movf	Button_State_NotPressed@button,w
 11325  0730  3E0C               	addlw	12
 11326  0731  0086               	movwf	6
 11327  0732  3001               	movlw	1	; select bank2/3
 11328  0733  0087               	movwf	7
 11329  0734  0016               	moviw fsr1++
 11330  0735  3A40               	xorlw	64
 11331  0736  00A5               	movwf	??_Button_State_NotPressed
 11332  0737  0016               	moviw fsr1++
 11333  0738  04A5               	iorwf	??_Button_State_NotPressed,f
 11334  0739  1D03               	btfss	3,2
 11335  073A  0008               	return
 11336                           
 11337                           ;mcc_generated_files/mtouch/mtouch_button.c: 267:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 11338  073B  0824               	movf	Button_State_NotPressed@button,w
 11339  073C  3E0C               	addlw	12
 11340  073D  0086               	movwf	6
 11341  073E  3001               	movlw	1	; select bank2/3
 11342  073F  0087               	movwf	7
 11343  0740  3000               	movlw	0
 11344  0741  3FC0               	movwi [0]fsr1
 11345  0742  3FC1               	movwi [1]fsr1
 11346                           
 11347                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         Button_Baseline_Update(button)
      +                          ;
 11348  0743  0824               	movf	Button_State_NotPressed@button,w
 11349  0744  318E  26DF         	fcall	_Button_Baseline_Update
 11350  0746  0008               	return
 11351  0747                     __end_of_Button_State_NotPressed:	
 11352                           
 11353                           	psect	text68
 11354  0CAD                     __ptext68:	
 11355 ;; *************** function _Button_State_Initializing *****************
 11356 ;; Defined at:
 11357 ;;		line 217 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;  button          1    4[BANK0 ] PTR struct .
 11360 ;;		 -> mtouch_button(48), 
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;		None
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  1    wreg      void 
 11365 ;; Registers used:
 11366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11367 ;; Tracked objects:
 11368 ;;		On entry : 0/0
 11369 ;;		On exit  : 0/0
 11370 ;;		Unchanged: 0/0
 11371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11372 ;;      Params:         0       1       0       0       0       0       0       0
 11373 ;;      Locals:         0       0       0       0       0       0       0       0
 11374 ;;      Temps:          0       4       0       0       0       0       0       0
 11375 ;;      Totals:         0       5       0       0       0       0       0       0
 11376 ;;Total ram usage:        5 bytes
 11377 ;; Hardware stack levels used:    1
 11378 ;; Hardware stack levels required when called:    7
 11379 ;; This function calls:
 11380 ;;		_Button_Baseline_Initialize
 11381 ;;		_Button_Baseline_Update
 11382 ;; This function is called by:
 11383 ;;		_Button_Service
 11384 ;; This function uses a non-reentrant model
 11385 ;;
 11386                           
 11387                           
 11388                           ;psect for function _Button_State_Initializing
 11389  0CAD                     _Button_State_Initializing:	
 11390                           
 11391                           ;mcc_generated_files/mtouch/mtouch_button.c: 217: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 218: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 220:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 11392                           
 11393                           ;incstack = 0
 11394                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11395  0CAD  0020               	movlb	0	; select bank0
 11396  0CAE  0824               	movf	Button_State_Initializing@button,w
 11397  0CAF  3E0A               	addlw	10
 11398  0CB0  0086               	movwf	6
 11399  0CB1  3001               	movlw	1	; select bank2/3
 11400  0CB2  0087               	movwf	7
 11401  0CB3  3F40               	moviw [0]fsr1
 11402  0CB4  00A5               	movwf	??_Button_State_Initializing
 11403  0CB5  3F41               	moviw [1]fsr1
 11404  0CB6  00A6               	movwf	??_Button_State_Initializing+1
 11405  0CB7  3000               	movlw	0
 11406  0CB8  0226               	subwf	??_Button_State_Initializing+1,w
 11407  0CB9  3009               	movlw	9
 11408  0CBA  1903               	skipnz
 11409  0CBB  0225               	subwf	??_Button_State_Initializing,w
 11410  0CBC  1803               	skipnc
 11411  0CBD  2CC3               	goto	l6045
 11412                           
 11413                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 222:         Button_Baseline_Initialize(button);
 11414  0CBE  0824               	movf	Button_State_Initializing@button,w
 11415  0CBF  3189  2113  318C   	fcall	_Button_Baseline_Initialize
 11416                           
 11417                           ;mcc_generated_files/mtouch/mtouch_button.c: 223:     } else {
 11418  0CC2  2CC7               	goto	l6047
 11419  0CC3                     l6045:	
 11420                           
 11421                           ;mcc_generated_files/mtouch/mtouch_button.c: 224:         Button_Baseline_Update(button)
      +                          ;
 11422  0CC3  0824               	movf	Button_State_Initializing@button,w
 11423  0CC4  318E  26DF  318C   	fcall	_Button_Baseline_Update
 11424  0CC7                     l6047:	
 11425                           
 11426                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:     (button->counter)++;
 11427  0CC7  0020               	movlb	0	; select bank0
 11428  0CC8  0824               	movf	Button_State_Initializing@button,w
 11429  0CC9  3E0A               	addlw	10
 11430  0CCA  0086               	movwf	6
 11431  0CCB  3001               	movlw	1	; select bank2/3
 11432  0CCC  0087               	movwf	7
 11433  0CCD  3001               	movlw	1
 11434  0CCE  0781               	addwf	1,f
 11435  0CCF  3141               	addfsr 1,1
 11436  0CD0  1803               	skipnc
 11437  0CD1  0A81               	incf	1,f
 11438                           
 11439                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 11440  0CD2  0824               	movf	Button_State_Initializing@button,w
 11441  0CD3  3E0A               	addlw	10
 11442  0CD4  0086               	movwf	6
 11443  0CD5  3001               	movlw	1	; select bank2/3
 11444  0CD6  0087               	movwf	7
 11445  0CD7  3F40               	moviw [0]fsr1
 11446  0CD8  00A5               	movwf	??_Button_State_Initializing
 11447  0CD9  3F41               	moviw [1]fsr1
 11448  0CDA  00A6               	movwf	??_Button_State_Initializing+1
 11449  0CDB  3000               	movlw	0
 11450  0CDC  0226               	subwf	??_Button_State_Initializing+1,w
 11451  0CDD  3010               	movlw	16
 11452  0CDE  1903               	skipnz
 11453  0CDF  0225               	subwf	??_Button_State_Initializing,w
 11454  0CE0  1C03               	skipc
 11455  0CE1  0008               	return
 11456                           
 11457                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 11458  0CE2  0824               	movf	Button_State_Initializing@button,w
 11459  0CE3  3E05               	addlw	5
 11460  0CE4  0086               	movwf	6
 11461  0CE5  3001               	movlw	1	; select bank2/3
 11462  0CE6  0087               	movwf	7
 11463  0CE7  3F40               	moviw [0]fsr1
 11464  0CE8  00A5               	movwf	??_Button_State_Initializing
 11465  0CE9  3F41               	moviw [1]fsr1
 11466  0CEA  00A6               	movwf	??_Button_State_Initializing+1
 11467  0CEB  3F42               	moviw [2]fsr1
 11468  0CEC  00A7               	movwf	??_Button_State_Initializing+2
 11469  0CED  3F43               	moviw [3]fsr1
 11470  0CEE  00A8               	movwf	??_Button_State_Initializing+3
 11471  0CEF  3004               	movlw	4
 11472  0CF0                     u4935:	
 11473  0CF0  36A8               	lsrf	??_Button_State_Initializing+3,f
 11474  0CF1  0CA7               	rrf	??_Button_State_Initializing+2,f
 11475  0CF2  0CA6               	rrf	??_Button_State_Initializing+1,f
 11476  0CF3  0CA5               	rrf	??_Button_State_Initializing,f
 11477  0CF4  0B89               	decfsz	9,f
 11478  0CF5  2CF0               	goto	u4935
 11479  0CF6  0824               	movf	Button_State_Initializing@button,w
 11480  0CF7  3E03               	addlw	3
 11481  0CF8  0086               	movwf	6
 11482  0CF9  3001               	movlw	1	; select bank2/3
 11483  0CFA  0087               	movwf	7
 11484  0CFB  0825               	movf	??_Button_State_Initializing,w
 11485  0CFC  3FC0               	movwi [0]fsr1
 11486  0CFD  0826               	movf	??_Button_State_Initializing+1,w
 11487  0CFE  3FC1               	movwi [1]fsr1
 11488                           
 11489                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 11490  0CFF  0824               	movf	Button_State_Initializing@button,w
 11491  0D00  3E02               	addlw	2
 11492  0D01  0086               	movwf	6
 11493  0D02  3001               	movlw	1	; select bank2/3
 11494  0D03  0087               	movwf	7
 11495  0D04  0181               	clrf	1
 11496  0D05  0A81               	incf	1,f
 11497                           
 11498                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11499  0D06  0824               	movf	Button_State_Initializing@button,w
 11500  0D07  3E0A               	addlw	10
 11501  0D08  0086               	movwf	6
 11502  0D09  3001               	movlw	1	; select bank2/3
 11503  0D0A  0087               	movwf	7
 11504  0D0B  3000               	movlw	0
 11505  0D0C  3FC0               	movwi [0]fsr1
 11506  0D0D  3FC1               	movwi [1]fsr1
 11507  0D0E  0008               	return
 11508  0D0F                     __end_of_Button_State_Initializing:	
 11509                           
 11510                           	psect	text69
 11511  0D0F                     __ptext69:	
 11512 ;; *************** function _Button_State_Pressed *****************
 11513 ;; Defined at:
 11514 ;;		line 273 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;  button          1    4[BANK0 ] PTR struct .
 11517 ;;		 -> mtouch_button(48), 
 11518 ;; Auto vars:     Size  Location     Type
 11519 ;;		None
 11520 ;; Return value:  Size  Location     Type
 11521 ;;                  1    wreg      void 
 11522 ;; Registers used:
 11523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11524 ;; Tracked objects:
 11525 ;;		On entry : 0/0
 11526 ;;		On exit  : 0/0
 11527 ;;		Unchanged: 0/0
 11528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11529 ;;      Params:         0       1       0       0       0       0       0       0
 11530 ;;      Locals:         0       0       0       0       0       0       0       0
 11531 ;;      Temps:          0       2       0       0       0       0       0       0
 11532 ;;      Totals:         0       3       0       0       0       0       0       0
 11533 ;;Total ram usage:        3 bytes
 11534 ;; Hardware stack levels used:    1
 11535 ;; Hardware stack levels required when called:    7
 11536 ;; This function calls:
 11537 ;;		_Button_DefaultCallback
 11538 ;;		_MTOUCH_Button_Initialize
 11539 ;;		_myButtonReleasedCallback
 11540 ;; This function is called by:
 11541 ;;		_Button_Service
 11542 ;; This function uses a non-reentrant model
 11543 ;;
 11544                           
 11545                           
 11546                           ;psect for function _Button_State_Pressed
 11547  0D0F                     _Button_State_Pressed:	
 11548                           
 11549                           ;mcc_generated_files/mtouch/mtouch_button.c: 273: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 274: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 276:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 11550                           
 11551                           ;incstack = 0
 11552                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11553  0D0F  0020               	movlb	0	; select bank0
 11554  0D10  0824               	movf	Button_State_Pressed@button,w
 11555  0D11  3E0A               	addlw	10
 11556  0D12  0086               	movwf	6
 11557  0D13  3001               	movlw	1	; select bank2/3
 11558  0D14  0087               	movwf	7
 11559  0D15  3F40               	moviw [0]fsr1
 11560  0D16  00A5               	movwf	??_Button_State_Pressed
 11561  0D17  3F41               	moviw [1]fsr1
 11562  0D18  00A6               	movwf	??_Button_State_Pressed+1
 11563  0D19  3007               	movlw	7
 11564  0D1A  0226               	subwf	??_Button_State_Pressed+1,w
 11565  0D1B  30D0               	movlw	208
 11566  0D1C  1903               	skipnz
 11567  0D1D  0225               	subwf	??_Button_State_Pressed,w
 11568  0D1E  1C03               	skipc
 11569  0D1F  2D37               	goto	l6077
 11570                           
 11571                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         MTOUCH_Button_Initialize(button->name);
 11572  0D20  0824               	movf	Button_State_Pressed@button,w
 11573  0D21  0086               	movwf	6
 11574  0D22  3001               	movlw	1	; select bank2/3
 11575  0D23  0087               	movwf	7
 11576  0D24  0801               	movf	1,w
 11577  0D25  318A  2209  318D   	fcall	_MTOUCH_Button_Initialize
 11578                           
 11579                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         callback_notPressed(button->na
      +                          me);
 11580  0D28  0020               	movlb	0	; select bank0
 11581  0D29  0824               	movf	Button_State_Pressed@button,w
 11582  0D2A  0086               	movwf	6
 11583  0D2B  3001               	movlw	1	; select bank2/3
 11584  0D2C  0087               	movwf	7
 11585  0D2D  0801               	movf	1,w
 11586  0D2E  00A5               	movwf	??_Button_State_Pressed
 11587  0D2F  0825               	movf	??_Button_State_Pressed,w
 11588  0D30  00F4               	movwf	myButtonReleasedCallback@button
 11589  0D31  086D               	movf	_callback_notPressed+1,w
 11590  0D32  008A               	movwf	10
 11591  0D33  086C               	movf	_callback_notPressed,w
 11592  0D34  000A               	callw
 11593  0D35  318D               	pagesel	$
 11594                           
 11595                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:     }
 11596  0D36  0008               	return
 11597  0D37                     l6077:	
 11598  0D37  0824               	movf	Button_State_Pressed@button,w
 11599  0D38  3E09               	addlw	9
 11600  0D39  0086               	movwf	6
 11601  0D3A  3001               	movlw	1	; select bank2/3
 11602  0D3B  0087               	movwf	7
 11603  0D3C  0801               	movf	1,w
 11604  0D3D  3A80               	xorlw	128
 11605  0D3E  00A5               	movwf	??_Button_State_Pressed
 11606  0D3F  0824               	movf	Button_State_Pressed@button,w
 11607  0D40  3E0E               	addlw	14
 11608  0D41  0086               	movwf	6
 11609  0D42  3001               	movlw	1	; select bank2/3
 11610  0D43  0087               	movwf	7
 11611  0D44  0824               	movf	Button_State_Pressed@button,w
 11612  0D45  3E0E               	addlw	14
 11613  0D46  0084               	movwf	4
 11614  0D47  3001               	movlw	1	; select bank2/3
 11615  0D48  0085               	movwf	5
 11616  0D49  3600               	lsrf	0,w
 11617  0D4A  0201               	subwf	1,w
 11618  0D4B  3A80               	xorlw	128
 11619  0D4C  02A5               	subwf	??_Button_State_Pressed,f
 11620  0D4D  1803               	skipnc
 11621  0D4E  0008               	return
 11622                           
 11623                           ;mcc_generated_files/mtouch/mtouch_button.c: 284:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 11624  0D4F  0824               	movf	Button_State_Pressed@button,w
 11625  0D50  3E02               	addlw	2
 11626  0D51  0086               	movwf	6
 11627  0D52  3001               	movlw	1	; select bank2/3
 11628  0D53  0087               	movwf	7
 11629  0D54  0181               	clrf	1
 11630  0D55  0A81               	incf	1,f
 11631                           
 11632                           ;mcc_generated_files/mtouch/mtouch_button.c: 286:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11633  0D56  0824               	movf	Button_State_Pressed@button,w
 11634  0D57  3E0A               	addlw	10
 11635  0D58  0086               	movwf	6
 11636  0D59  3001               	movlw	1	; select bank2/3
 11637  0D5A  0087               	movwf	7
 11638  0D5B  3000               	movlw	0
 11639  0D5C  3FC0               	movwi [0]fsr1
 11640  0D5D  3FC1               	movwi [1]fsr1
 11641                           
 11642                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 11643  0D5E  0824               	movf	Button_State_Pressed@button,w
 11644  0D5F  3E0C               	addlw	12
 11645  0D60  0086               	movwf	6
 11646  0D61  3001               	movlw	1	; select bank2/3
 11647  0D62  0087               	movwf	7
 11648  0D63  30FF               	movlw	255
 11649  0D64  3FC0               	movwi [0]fsr1
 11650  0D65  30FB               	movlw	251
 11651  0D66  3FC1               	movwi [1]fsr1
 11652                           
 11653                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:         callback_notPressed(button->na
      +                          me);
 11654  0D67  0824               	movf	Button_State_Pressed@button,w
 11655  0D68  0086               	movwf	6
 11656  0D69  3001               	movlw	1	; select bank2/3
 11657  0D6A  0087               	movwf	7
 11658  0D6B  0801               	movf	1,w
 11659  0D6C  00A5               	movwf	??_Button_State_Pressed
 11660  0D6D  0825               	movf	??_Button_State_Pressed,w
 11661  0D6E  00F4               	movwf	myButtonReleasedCallback@button
 11662  0D6F  086D               	movf	_callback_notPressed+1,w
 11663  0D70  008A               	movwf	10
 11664  0D71  086C               	movf	_callback_notPressed,w
 11665  0D72  000A               	callw
 11666  0D73  318D               	pagesel	$
 11667  0D74  0008               	return
 11668  0D75                     __end_of_Button_State_Pressed:	
 11669                           
 11670                           	psect	text70
 11671  17B4                     __ptext70:	
 11672 ;; *************** function _myButtonPressedCallback *****************
 11673 ;; Defined at:
 11674 ;;		line 187 in file "main.c"
 11675 ;; Parameters:    Size  Location     Type
 11676 ;;  button          1    4[COMMON] enum E2913
 11677 ;; Auto vars:     Size  Location     Type
 11678 ;;		None
 11679 ;; Return value:  Size  Location     Type
 11680 ;;                  1    wreg      void 
 11681 ;; Registers used:
 11682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11683 ;; Tracked objects:
 11684 ;;		On entry : 0/0
 11685 ;;		On exit  : 0/0
 11686 ;;		Unchanged: 0/0
 11687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11688 ;;      Params:         1       0       0       0       0       0       0       0
 11689 ;;      Locals:         0       0       0       0       0       0       0       0
 11690 ;;      Temps:          0       0       0       0       0       0       0       0
 11691 ;;      Totals:         1       0       0       0       0       0       0       0
 11692 ;;Total ram usage:        1 bytes
 11693 ;; Hardware stack levels used:    1
 11694 ;; Hardware stack levels required when called:    6
 11695 ;; This function calls:
 11696 ;;		_LED_PROCESS
 11697 ;;		_RELAY_PROCESS
 11698 ;; This function is called by:
 11699 ;;		_main
 11700 ;;		_Button_State_NotPressed
 11701 ;; This function uses a non-reentrant model
 11702 ;;
 11703                           
 11704                           
 11705                           ;psect for function _myButtonPressedCallback
 11706  17B4                     _myButtonPressedCallback:	
 11707                           
 11708                           ;main.c: 187: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 188:
      +                           {;main.c: 189:     count_conf = 0;
 11709                           
 11710                           ;incstack = 0
 11711                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11712  17B4  0021               	movlb	1	; select bank1
 11713  17B5  01C2               	clrf	_count_conf^(0+128)
 11714  17B6  01C3               	clrf	(_count_conf+1)^(0+128)
 11715                           
 11716                           ;main.c: 190:     if(config_status == 0)
 11717  17B7  0020               	movlb	0	; select bank0
 11718  17B8  0861               	movf	_config_status,w
 11719  17B9  1D03               	btfss	3,2
 11720  17BA  0008               	return
 11721                           
 11722                           ;main.c: 191:     {;main.c: 192:         if(button == 0) last_touch_status.full_status ^
      +                          = 0b00000001;
 11723  17BB  0874               	movf	myButtonPressedCallback@button,w
 11724  17BC  1D03               	btfss	3,2
 11725  17BD  2FC2               	goto	l4339
 11726  17BE  3001               	movlw	1
 11727  17BF  06D9               	xorwf	_last_touch_status,f
 11728  17C0  3000               	movlw	0
 11729  17C1  06DA               	xorwf	_last_touch_status+1,f
 11730  17C2                     l4339:	
 11731                           
 11732                           ;main.c: 193:         if(button == 1) last_touch_status.full_status ^= 0b00000010;
 11733  17C2  0374               	decf	myButtonPressedCallback@button,w
 11734  17C3  1D03               	btfss	3,2
 11735  17C4  2FC9               	goto	l4343
 11736  17C5  3002               	movlw	2
 11737  17C6  06D9               	xorwf	_last_touch_status,f
 11738  17C7  3000               	movlw	0
 11739  17C8  06DA               	xorwf	_last_touch_status+1,f
 11740  17C9                     l4343:	
 11741                           
 11742                           ;main.c: 194:         if(button == 2) last_touch_status.full_status ^= 0b00000100;
 11743  17C9  3002               	movlw	2
 11744  17CA  0674               	xorwf	myButtonPressedCallback@button,w
 11745  17CB  1D03               	btfss	3,2
 11746  17CC  2FD1               	goto	l4347
 11747  17CD  3004               	movlw	4
 11748  17CE  06D9               	xorwf	_last_touch_status,f
 11749  17CF  3000               	movlw	0
 11750  17D0  06DA               	xorwf	_last_touch_status+1,f
 11751  17D1                     l4347:	
 11752                           
 11753                           ;main.c: 196:         LED_PROCESS(last_touch_status.full_status);
 11754  17D1  0859               	movf	_last_touch_status,w
 11755  17D2  318D  2575  3197   	fcall	_LED_PROCESS
 11756                           
 11757                           ;main.c: 197:         RELAY_PROCESS(last_touch_status.full_status);
 11758  17D5  0020               	movlb	0	; select bank0
 11759  17D6  0859               	movf	_last_touch_status,w
 11760  17D7  318A  22B8         	fcall	_RELAY_PROCESS
 11761  17D9  0008               	return
 11762  17DA                     __end_of_myButtonPressedCallback:	
 11763                           
 11764                           	psect	text71
 11765  1471                     __ptext71:	
 11766 ;; *************** function _Button_DefaultCallback *****************
 11767 ;; Defined at:
 11768 ;;		line 527 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11769 ;; Parameters:    Size  Location     Type
 11770 ;;  button          1    4[COMMON] enum E3069
 11771 ;; Auto vars:     Size  Location     Type
 11772 ;;		None
 11773 ;; Return value:  Size  Location     Type
 11774 ;;                  1    wreg      void 
 11775 ;; Registers used:
 11776 ;;		None
 11777 ;; Tracked objects:
 11778 ;;		On entry : 0/0
 11779 ;;		On exit  : 0/0
 11780 ;;		Unchanged: 0/0
 11781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11782 ;;      Params:         1       0       0       0       0       0       0       0
 11783 ;;      Locals:         0       0       0       0       0       0       0       0
 11784 ;;      Temps:          0       0       0       0       0       0       0       0
 11785 ;;      Totals:         1       0       0       0       0       0       0       0
 11786 ;;Total ram usage:        1 bytes
 11787 ;; Hardware stack levels used:    1
 11788 ;; Hardware stack levels required when called:    4
 11789 ;; This function calls:
 11790 ;;		Nothing
 11791 ;; This function is called by:
 11792 ;;		_Button_State_NotPressed
 11793 ;;		_Button_State_Pressed
 11794 ;; This function uses a non-reentrant model
 11795 ;;
 11796                           
 11797                           
 11798                           ;psect for function _Button_DefaultCallback
 11799  1471                     _Button_DefaultCallback:	
 11800                           
 11801                           ;incstack = 0
 11802                           ; Regs used in _Button_DefaultCallback: []
 11803  1471  0008               	return
 11804  1472                     __end_of_Button_DefaultCallback:	
 11805                           
 11806                           	psect	text72
 11807  176F                     __ptext72:	
 11808 ;; *************** function _myButtonReleasedCallback *****************
 11809 ;; Defined at:
 11810 ;;		line 200 in file "main.c"
 11811 ;; Parameters:    Size  Location     Type
 11812 ;;  button          1    4[COMMON] enum E2913
 11813 ;; Auto vars:     Size  Location     Type
 11814 ;;		None
 11815 ;; Return value:  Size  Location     Type
 11816 ;;                  1    wreg      void 
 11817 ;; Registers used:
 11818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11819 ;; Tracked objects:
 11820 ;;		On entry : 0/0
 11821 ;;		On exit  : 0/0
 11822 ;;		Unchanged: 0/0
 11823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11824 ;;      Params:         1       0       0       0       0       0       0       0
 11825 ;;      Locals:         0       0       0       0       0       0       0       0
 11826 ;;      Temps:          0       0       0       0       0       0       0       0
 11827 ;;      Totals:         1       0       0       0       0       0       0       0
 11828 ;;Total ram usage:        1 bytes
 11829 ;; Hardware stack levels used:    1
 11830 ;; Hardware stack levels required when called:    5
 11831 ;; This function calls:
 11832 ;;		_MTOUCH_Button_isPressed
 11833 ;; This function is called by:
 11834 ;;		_main
 11835 ;;		_Button_State_Pressed
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           
 11840                           ;psect for function _myButtonReleasedCallback
 11841  176F                     _myButtonReleasedCallback:	
 11842                           
 11843                           ;main.c: 200: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 201
      +                          : {;main.c: 202:     count_conf = 0;
 11844                           
 11845                           ;incstack = 0
 11846                           ; Regs used in _myButtonReleasedCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11847  176F  0021               	movlb	1	; select bank1
 11848  1770  01C2               	clrf	_count_conf^(0+128)
 11849  1771  01C3               	clrf	(_count_conf+1)^(0+128)
 11850                           
 11851                           ;main.c: 203:     if(config_status == 0)
 11852  1772  0020               	movlb	0	; select bank0
 11853  1773  0861               	movf	_config_status,w
 11854  1774  1D03               	btfss	3,2
 11855  1775  0008               	return
 11856                           
 11857                           ;main.c: 204:     {;main.c: 206:         if(MTOUCH_Button_isPressed(0)==0&&MTOUCH_Button
      +                          _isPressed(1)==0&&MTOUCH_Button_isPressed(2)==0)
 11858  1776  3000               	movlw	0
 11859  1777  3196  26E2  3197   	fcall	_MTOUCH_Button_isPressed
 11860  177A  3A00               	xorlw	0
 11861  177B  1D03               	skipz
 11862  177C  0008               	return
 11863  177D  3001               	movlw	1
 11864  177E  3196  26E2  3197   	fcall	_MTOUCH_Button_isPressed
 11865  1781  3A00               	xorlw	0
 11866  1782  1D03               	skipz
 11867  1783  0008               	return
 11868  1784  3002               	movlw	2
 11869  1785  3196  26E2  3197   	fcall	_MTOUCH_Button_isPressed
 11870  1788  3A00               	xorlw	0
 11871  1789  1D03               	skipz
 11872  178A  0008               	return
 11873                           
 11874                           ;main.c: 207:         {;main.c: 208:             update_state_flag = 1;
 11875  178B  0020               	movlb	0	; select bank0
 11876  178C  01DD               	clrf	_update_state_flag
 11877  178D  0ADD               	incf	_update_state_flag,f
 11878  178E  0008               	return
 11879  178F                     __end_of_myButtonReleasedCallback:	
 11880                           
 11881                           	psect	text73
 11882  16E2                     __ptext73:	
 11883 ;; *************** function _MTOUCH_Button_isPressed *****************
 11884 ;; Defined at:
 11885 ;;		line 374 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11886 ;; Parameters:    Size  Location     Type
 11887 ;;  name            1    wreg     enum E3069
 11888 ;; Auto vars:     Size  Location     Type
 11889 ;;  name            1    2[COMMON] enum E3069
 11890 ;; Return value:  Size  Location     Type
 11891 ;;                  1    wreg      _Bool 
 11892 ;; Registers used:
 11893 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11894 ;; Tracked objects:
 11895 ;;		On entry : 0/0
 11896 ;;		On exit  : 0/0
 11897 ;;		Unchanged: 0/0
 11898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11899 ;;      Params:         0       0       0       0       0       0       0       0
 11900 ;;      Locals:         1       0       0       0       0       0       0       0
 11901 ;;      Temps:          1       0       0       0       0       0       0       0
 11902 ;;      Totals:         2       0       0       0       0       0       0       0
 11903 ;;Total ram usage:        2 bytes
 11904 ;; Hardware stack levels used:    1
 11905 ;; Hardware stack levels required when called:    4
 11906 ;; This function calls:
 11907 ;;		Nothing
 11908 ;; This function is called by:
 11909 ;;		_main
 11910 ;;		_myButtonReleasedCallback
 11911 ;;		_touch_example
 11912 ;;		_MTOUCH_Button_Buttonmask_Get
 11913 ;; This function uses a non-reentrant model
 11914 ;;
 11915                           
 11916                           
 11917                           ;psect for function _MTOUCH_Button_isPressed
 11918  16E2                     _MTOUCH_Button_isPressed:	
 11919                           
 11920                           ;incstack = 0
 11921                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 11922                           ;MTOUCH_Button_isPressed@name stored from wreg
 11923  16E2  00F2               	movwf	MTOUCH_Button_isPressed@name
 11924                           
 11925                           ;mcc_generated_files/mtouch/mtouch_button.c: 374: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 375: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 376:     if(name < 3u)
 11926  16E3  3003               	movlw	3
 11927  16E4  0272               	subwf	MTOUCH_Button_isPressed@name,w
 11928  16E5  1803               	skipnc
 11929  16E6  2EFB               	goto	l3951
 11930                           
 11931                           ;mcc_generated_files/mtouch/mtouch_button.c: 377:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 11932  16E7  0872               	movf	MTOUCH_Button_isPressed@name,w
 11933  16E8  00F1               	movwf	??_MTOUCH_Button_isPressed
 11934  16E9  3003               	movlw	3
 11935  16EA                     u2425:	
 11936  16EA  35F1               	lslf	??_MTOUCH_Button_isPressed,f
 11937  16EB  3EFF               	addlw	-1
 11938  16EC  1D03               	skipz
 11939  16ED  2EEA               	goto	u2425
 11940  16EE  3571               	lslf	??_MTOUCH_Button_isPressed,w
 11941  16EF  3E22               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 11942  16F0  0086               	movwf	6
 11943  16F1  3001               	movlw	1	; select bank2/3
 11944  16F2  0087               	movwf	7
 11945  16F3  3002               	movlw	2
 11946  16F4  0601               	xorwf	1,w
 11947  16F5  1D03               	btfss	3,2
 11948  16F6  2EF9               	goto	u2430
 11949  16F7  3001               	movlw	1
 11950  16F8  0008               	return
 11951  16F9                     u2430:	
 11952  16F9  3000               	movlw	0
 11953  16FA  0008               	return
 11954  16FB                     l3951:	
 11955                           
 11956                           ;mcc_generated_files/mtouch/mtouch_button.c: 379:         return 0;
 11957  16FB  3000               	movlw	0
 11958  16FC  0008               	return
 11959  16FD                     __end_of_MTOUCH_Button_isPressed:	
 11960                           
 11961                           	psect	text74
 11962  0A09                     __ptext74:	
 11963 ;; *************** function _MTOUCH_Button_Initialize *****************
 11964 ;; Defined at:
 11965 ;;		line 159 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11966 ;; Parameters:    Size  Location     Type
 11967 ;;  name            1    wreg     enum E3069
 11968 ;; Auto vars:     Size  Location     Type
 11969 ;;  name            1    9[COMMON] enum E3069
 11970 ;;  button          1   10[COMMON] PTR struct .
 11971 ;;		 -> mtouch_button(48), 
 11972 ;; Return value:  Size  Location     Type
 11973 ;;                  1    wreg      void 
 11974 ;; Registers used:
 11975 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11976 ;; Tracked objects:
 11977 ;;		On entry : 0/0
 11978 ;;		On exit  : 0/0
 11979 ;;		Unchanged: 0/0
 11980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11981 ;;      Params:         0       0       0       0       0       0       0       0
 11982 ;;      Locals:         2       0       0       0       0       0       0       0
 11983 ;;      Temps:          2       0       0       0       0       0       0       0
 11984 ;;      Totals:         4       0       0       0       0       0       0       0
 11985 ;;Total ram usage:        4 bytes
 11986 ;; Hardware stack levels used:    1
 11987 ;; Hardware stack levels required when called:    6
 11988 ;; This function calls:
 11989 ;;		_MTOUCH_Sensor_Calibrate
 11990 ;; This function is called by:
 11991 ;;		_MTOUCH_Button_InitializeAll
 11992 ;;		_Button_Service
 11993 ;;		_Button_State_NotPressed
 11994 ;;		_Button_State_Pressed
 11995 ;; This function uses a non-reentrant model
 11996 ;;
 11997                           
 11998                           
 11999                           ;psect for function _MTOUCH_Button_Initialize
 12000  0A09                     _MTOUCH_Button_Initialize:	
 12001                           
 12002                           ;incstack = 0
 12003                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 12004                           ;MTOUCH_Button_Initialize@name stored from wreg
 12005  0A09  00F9               	movwf	MTOUCH_Button_Initialize@name
 12006                           
 12007                           ;mcc_generated_files/mtouch/mtouch_button.c: 159: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 160: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 161:     mtouch_button_t* button = &mtouch_button[name];
 12008  0A0A  0879               	movf	MTOUCH_Button_Initialize@name,w
 12009  0A0B  00F7               	movwf	??_MTOUCH_Button_Initialize
 12010  0A0C  3003               	movlw	3
 12011  0A0D                     u4745:	
 12012  0A0D  35F7               	lslf	??_MTOUCH_Button_Initialize,f
 12013  0A0E  3EFF               	addlw	-1
 12014  0A0F  1D03               	skipz
 12015  0A10  2A0D               	goto	u4745
 12016  0A11  3577               	lslf	??_MTOUCH_Button_Initialize,w
 12017  0A12  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 12018  0A13  00F8               	movwf	??_MTOUCH_Button_Initialize+1
 12019  0A14  0878               	movf	??_MTOUCH_Button_Initialize+1,w
 12020  0A15  00FA               	movwf	MTOUCH_Button_Initialize@button
 12021                           
 12022                           ;mcc_generated_files/mtouch/mtouch_button.c: 163:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 12023  0A16  087A               	movf	MTOUCH_Button_Initialize@button,w
 12024  0A17  3E02               	addlw	2
 12025  0A18  0086               	movwf	6
 12026  0A19  3001               	movlw	1	; select bank2/3
 12027  0A1A  0087               	movwf	7
 12028  0A1B  0181               	clrf	1
 12029                           
 12030                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 12031  0A1C  087A               	movf	MTOUCH_Button_Initialize@button,w
 12032  0A1D  3E05               	addlw	5
 12033  0A1E  0086               	movwf	6
 12034  0A1F  3001               	movlw	1	; select bank2/3
 12035  0A20  0087               	movwf	7
 12036  0A21  3000               	movlw	0
 12037  0A22  3FC0               	movwi [0]fsr1
 12038  0A23  3000               	movlw	0
 12039  0A24  3FC1               	movwi [1]fsr1
 12040  0A25  3FC2               	movwi [2]fsr1
 12041  0A26  3FC3               	movwi [3]fsr1
 12042                           
 12043                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 12044  0A27  087A               	movf	MTOUCH_Button_Initialize@button,w
 12045  0A28  3E0A               	addlw	10
 12046  0A29  0086               	movwf	6
 12047  0A2A  3001               	movlw	1	; select bank2/3
 12048  0A2B  0087               	movwf	7
 12049  0A2C  3000               	movlw	0
 12050  0A2D  3FC0               	movwi [0]fsr1
 12051  0A2E  3FC1               	movwi [1]fsr1
 12052                           
 12053                           ;mcc_generated_files/mtouch/mtouch_button.c: 166:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 12054  0A2F  087A               	movf	MTOUCH_Button_Initialize@button,w
 12055  0A30  3E0C               	addlw	12
 12056  0A31  0086               	movwf	6
 12057  0A32  3001               	movlw	1	; select bank2/3
 12058  0A33  0087               	movwf	7
 12059  0A34  3000               	movlw	0
 12060  0A35  3FC0               	movwi [0]fsr1
 12061  0A36  3FC1               	movwi [1]fsr1
 12062                           
 12063                           ;mcc_generated_files/mtouch/mtouch_button.c: 168:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 12064  0A37  0A7A               	incf	MTOUCH_Button_Initialize@button,w
 12065  0A38  0086               	movwf	6
 12066  0A39  3001               	movlw	1	; select bank2/3
 12067  0A3A  0087               	movwf	7
 12068  0A3B  0801               	movf	1,w
 12069  0A3C  3195  25E4         	fcall	_MTOUCH_Sensor_Calibrate
 12070  0A3E  0008               	return
 12071  0A3F                     __end_of_MTOUCH_Button_Initialize:	
 12072                           
 12073                           	psect	text75
 12074  15E4                     __ptext75:	
 12075 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 12076 ;; Defined at:
 12077 ;;		line 904 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12078 ;; Parameters:    Size  Location     Type
 12079 ;;  sensor          1    wreg     enum E2854
 12080 ;; Auto vars:     Size  Location     Type
 12081 ;;  sensor          1    6[COMMON] enum E2854
 12082 ;; Return value:  Size  Location     Type
 12083 ;;                  1    wreg      void 
 12084 ;; Registers used:
 12085 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12086 ;; Tracked objects:
 12087 ;;		On entry : 0/0
 12088 ;;		On exit  : 0/0
 12089 ;;		Unchanged: 0/0
 12090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12091 ;;      Params:         0       0       0       0       0       0       0       0
 12092 ;;      Locals:         1       0       0       0       0       0       0       0
 12093 ;;      Temps:          1       0       0       0       0       0       0       0
 12094 ;;      Totals:         2       0       0       0       0       0       0       0
 12095 ;;Total ram usage:        2 bytes
 12096 ;; Hardware stack levels used:    1
 12097 ;; Hardware stack levels required when called:    5
 12098 ;; This function calls:
 12099 ;;		___bmul
 12100 ;; This function is called by:
 12101 ;;		_MTOUCH_Sensor_Initialize
 12102 ;;		_MTOUCH_Button_Initialize
 12103 ;; This function uses a non-reentrant model
 12104 ;;
 12105                           
 12106                           
 12107                           ;psect for function _MTOUCH_Sensor_Calibrate
 12108  15E4                     _MTOUCH_Sensor_Calibrate:	
 12109                           
 12110                           ;incstack = 0
 12111                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12112                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 12113  15E4  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
 12114                           
 12115                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 904: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 905: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 906:     if(sensor < 3u)
 12116  15E5  3003               	movlw	3
 12117  15E6  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 12118  15E7  1803               	skipnc
 12119  15E8  0008               	return
 12120                           
 12121                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 908:         mtouch_sensor[sensor].calibrated = 0;
 12122  15E9  3009               	movlw	9
 12123  15EA  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
 12124  15EB  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
 12125  15EC  00F1               	movwf	___bmul@multiplicand
 12126  15ED  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 12127  15EE  3195  25B1         	fcall	___bmul
 12128  15F0  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 12129  15F1  0086               	movwf	6
 12130  15F2  3001               	movlw	1	; select bank2/3
 12131  15F3  0087               	movwf	7
 12132  15F4  1101               	bcf	1,2
 12133  15F5  0008               	return
 12134  15F6                     __end_of_MTOUCH_Sensor_Calibrate:	
 12135                           
 12136                           	psect	text76
 12137  0EDF                     __ptext76:	
 12138 ;; *************** function _Button_Baseline_Update *****************
 12139 ;; Defined at:
 12140 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12141 ;; Parameters:    Size  Location     Type
 12142 ;;  button          1    wreg     PTR struct .
 12143 ;;		 -> mtouch_button(48), 
 12144 ;; Auto vars:     Size  Location     Type
 12145 ;;  button          1    7[COMMON] PTR struct .
 12146 ;;		 -> mtouch_button(48), 
 12147 ;; Return value:  Size  Location     Type
 12148 ;;                  1    wreg      void 
 12149 ;; Registers used:
 12150 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12151 ;; Tracked objects:
 12152 ;;		On entry : 0/0
 12153 ;;		On exit  : 0/0
 12154 ;;		Unchanged: 0/0
 12155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12156 ;;      Params:         0       0       0       0       0       0       0       0
 12157 ;;      Locals:         1       0       0       0       0       0       0       0
 12158 ;;      Temps:          6       0       0       0       0       0       0       0
 12159 ;;      Totals:         7       0       0       0       0       0       0       0
 12160 ;;Total ram usage:        7 bytes
 12161 ;; Hardware stack levels used:    1
 12162 ;; Hardware stack levels required when called:    4
 12163 ;; This function calls:
 12164 ;;		Nothing
 12165 ;; This function is called by:
 12166 ;;		_Button_State_Initializing
 12167 ;;		_Button_State_NotPressed
 12168 ;; This function uses a non-reentrant model
 12169 ;;
 12170                           
 12171                           
 12172                           ;psect for function _Button_Baseline_Update
 12173  0EDF                     _Button_Baseline_Update:	
 12174                           
 12175                           ;incstack = 0
 12176                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12177                           ;Button_Baseline_Update@button stored from wreg
 12178  0EDF  00F7               	movwf	Button_Baseline_Update@button
 12179                           
 12180                           ;mcc_generated_files/mtouch/mtouch_button.c: 481: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 482: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 483:     if (GIE == (uint8_t)1)
 12181  0EE0  1F8B               	btfss	11,7	;volatile
 12182  0EE1  2F29               	goto	l4321
 12183                           
 12184                           ;mcc_generated_files/mtouch/mtouch_button.c: 484:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 485:         GIE = (uint8_t)0;
 12185  0EE2  138B               	bcf	11,7	;volatile
 12186                           
 12187                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 12188  0EE3  0877               	movf	Button_Baseline_Update@button,w
 12189  0EE4  3E05               	addlw	5
 12190  0EE5  0086               	movwf	6
 12191  0EE6  3001               	movlw	1	; select bank2/3
 12192  0EE7  0087               	movwf	7
 12193  0EE8  3F40               	moviw [0]fsr1
 12194  0EE9  00F1               	movwf	??_Button_Baseline_Update
 12195  0EEA  3F41               	moviw [1]fsr1
 12196  0EEB  00F2               	movwf	??_Button_Baseline_Update+1
 12197  0EEC  3F42               	moviw [2]fsr1
 12198  0EED  00F3               	movwf	??_Button_Baseline_Update+2
 12199  0EEE  3F43               	moviw [3]fsr1
 12200  0EEF  00F4               	movwf	??_Button_Baseline_Update+3
 12201  0EF0  3004               	movlw	4
 12202  0EF1                     u2975:	
 12203  0EF1  36F4               	lsrf	??_Button_Baseline_Update+3,f
 12204  0EF2  0CF3               	rrf	??_Button_Baseline_Update+2,f
 12205  0EF3  0CF2               	rrf	??_Button_Baseline_Update+1,f
 12206  0EF4  0CF1               	rrf	??_Button_Baseline_Update,f
 12207  0EF5  0B89               	decfsz	9,f
 12208  0EF6  2EF1               	goto	u2975
 12209  0EF7  0877               	movf	Button_Baseline_Update@button,w
 12210  0EF8  3E05               	addlw	5
 12211  0EF9  0086               	movwf	6
 12212  0EFA  3001               	movlw	1	; select bank2/3
 12213  0EFB  0087               	movwf	7
 12214  0EFC  0871               	movf	??_Button_Baseline_Update,w
 12215  0EFD  0281               	subwf	1,f
 12216  0EFE  3141               	addfsr 1,1
 12217  0EFF  0872               	movf	??_Button_Baseline_Update+1,w
 12218  0F00  3B81               	subwfb	1,f
 12219  0F01  3141               	addfsr 1,1
 12220  0F02  0873               	movf	??_Button_Baseline_Update+2,w
 12221  0F03  3B81               	subwfb	1,f
 12222  0F04  3141               	addfsr 1,1
 12223  0F05  0874               	movf	??_Button_Baseline_Update+3,w
 12224  0F06  3B81               	subwfb	1,f
 12225  0F07  317D               	addfsr 1,-3
 12226                           
 12227                           ;mcc_generated_files/mtouch/mtouch_button.c: 487:         button->baseline += button->re
      +                          ading;
 12228  0F08  0877               	movf	Button_Baseline_Update@button,w
 12229  0F09  3E03               	addlw	3
 12230  0F0A  0086               	movwf	6
 12231  0F0B  3001               	movlw	1	; select bank2/3
 12232  0F0C  0087               	movwf	7
 12233  0F0D  3F40               	moviw [0]fsr1
 12234  0F0E  00F1               	movwf	??_Button_Baseline_Update
 12235  0F0F  3F41               	moviw [1]fsr1
 12236  0F10  00F2               	movwf	??_Button_Baseline_Update+1
 12237  0F11  0871               	movf	??_Button_Baseline_Update,w
 12238  0F12  00F3               	movwf	??_Button_Baseline_Update+2
 12239  0F13  0872               	movf	??_Button_Baseline_Update+1,w
 12240  0F14  00F4               	movwf	??_Button_Baseline_Update+3
 12241  0F15  01F5               	clrf	??_Button_Baseline_Update+4
 12242  0F16  01F6               	clrf	??_Button_Baseline_Update+5
 12243  0F17  0877               	movf	Button_Baseline_Update@button,w
 12244  0F18  3E05               	addlw	5
 12245  0F19  0086               	movwf	6
 12246  0F1A  3001               	movlw	1	; select bank2/3
 12247  0F1B  0087               	movwf	7
 12248  0F1C  0873               	movf	??_Button_Baseline_Update+2,w
 12249  0F1D  0781               	addwf	1,f
 12250  0F1E  3141               	addfsr 1,1
 12251  0F1F  0874               	movf	??_Button_Baseline_Update+3,w
 12252  0F20  3D81               	addwfc	1,f
 12253  0F21  3141               	addfsr 1,1
 12254  0F22  0875               	movf	??_Button_Baseline_Update+4,w
 12255  0F23  3D81               	addwfc	1,f
 12256  0F24  3141               	addfsr 1,1
 12257  0F25  0876               	movf	??_Button_Baseline_Update+5,w
 12258  0F26  3D81               	addwfc	1,f
 12259                           
 12260                           ;mcc_generated_files/mtouch/mtouch_button.c: 488:         GIE = (uint8_t)1;
 12261  0F27  178B               	bsf	11,7	;volatile
 12262                           
 12263                           ;mcc_generated_files/mtouch/mtouch_button.c: 489:     }
 12264  0F28  0008               	return
 12265  0F29                     l4321:	
 12266                           
 12267                           ;mcc_generated_files/mtouch/mtouch_button.c: 491:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 492:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 12268  0F29  0877               	movf	Button_Baseline_Update@button,w
 12269  0F2A  3E05               	addlw	5
 12270  0F2B  0086               	movwf	6
 12271  0F2C  3001               	movlw	1	; select bank2/3
 12272  0F2D  0087               	movwf	7
 12273  0F2E  3F40               	moviw [0]fsr1
 12274  0F2F  00F1               	movwf	??_Button_Baseline_Update
 12275  0F30  3F41               	moviw [1]fsr1
 12276  0F31  00F2               	movwf	??_Button_Baseline_Update+1
 12277  0F32  3F42               	moviw [2]fsr1
 12278  0F33  00F3               	movwf	??_Button_Baseline_Update+2
 12279  0F34  3F43               	moviw [3]fsr1
 12280  0F35  00F4               	movwf	??_Button_Baseline_Update+3
 12281  0F36  3004               	movlw	4
 12282  0F37                     u2985:	
 12283  0F37  36F4               	lsrf	??_Button_Baseline_Update+3,f
 12284  0F38  0CF3               	rrf	??_Button_Baseline_Update+2,f
 12285  0F39  0CF2               	rrf	??_Button_Baseline_Update+1,f
 12286  0F3A  0CF1               	rrf	??_Button_Baseline_Update,f
 12287  0F3B  0B89               	decfsz	9,f
 12288  0F3C  2F37               	goto	u2985
 12289  0F3D  0877               	movf	Button_Baseline_Update@button,w
 12290  0F3E  3E05               	addlw	5
 12291  0F3F  0086               	movwf	6
 12292  0F40  3001               	movlw	1	; select bank2/3
 12293  0F41  0087               	movwf	7
 12294  0F42  0871               	movf	??_Button_Baseline_Update,w
 12295  0F43  0281               	subwf	1,f
 12296  0F44  3141               	addfsr 1,1
 12297  0F45  0872               	movf	??_Button_Baseline_Update+1,w
 12298  0F46  3B81               	subwfb	1,f
 12299  0F47  3141               	addfsr 1,1
 12300  0F48  0873               	movf	??_Button_Baseline_Update+2,w
 12301  0F49  3B81               	subwfb	1,f
 12302  0F4A  3141               	addfsr 1,1
 12303  0F4B  0874               	movf	??_Button_Baseline_Update+3,w
 12304  0F4C  3B81               	subwfb	1,f
 12305  0F4D  317D               	addfsr 1,-3
 12306                           
 12307                           ;mcc_generated_files/mtouch/mtouch_button.c: 493:         button->baseline += button->re
      +                          ading;
 12308  0F4E  0877               	movf	Button_Baseline_Update@button,w
 12309  0F4F  3E03               	addlw	3
 12310  0F50  0086               	movwf	6
 12311  0F51  3001               	movlw	1	; select bank2/3
 12312  0F52  0087               	movwf	7
 12313  0F53  3F40               	moviw [0]fsr1
 12314  0F54  00F1               	movwf	??_Button_Baseline_Update
 12315  0F55  3F41               	moviw [1]fsr1
 12316  0F56  00F2               	movwf	??_Button_Baseline_Update+1
 12317  0F57  0871               	movf	??_Button_Baseline_Update,w
 12318  0F58  00F3               	movwf	??_Button_Baseline_Update+2
 12319  0F59  0872               	movf	??_Button_Baseline_Update+1,w
 12320  0F5A  00F4               	movwf	??_Button_Baseline_Update+3
 12321  0F5B  01F5               	clrf	??_Button_Baseline_Update+4
 12322  0F5C  01F6               	clrf	??_Button_Baseline_Update+5
 12323  0F5D  0877               	movf	Button_Baseline_Update@button,w
 12324  0F5E  3E05               	addlw	5
 12325  0F5F  0086               	movwf	6
 12326  0F60  3001               	movlw	1	; select bank2/3
 12327  0F61  0087               	movwf	7
 12328  0F62  0873               	movf	??_Button_Baseline_Update+2,w
 12329  0F63  0781               	addwf	1,f
 12330  0F64  3141               	addfsr 1,1
 12331  0F65  0874               	movf	??_Button_Baseline_Update+3,w
 12332  0F66  3D81               	addwfc	1,f
 12333  0F67  3141               	addfsr 1,1
 12334  0F68  0875               	movf	??_Button_Baseline_Update+4,w
 12335  0F69  3D81               	addwfc	1,f
 12336  0F6A  3141               	addfsr 1,1
 12337  0F6B  0876               	movf	??_Button_Baseline_Update+5,w
 12338  0F6C  3D81               	addwfc	1,f
 12339  0F6D  0008               	return
 12340  0F6E                     __end_of_Button_Baseline_Update:	
 12341                           
 12342                           	psect	text77
 12343  0913                     __ptext77:	
 12344 ;; *************** function _Button_Baseline_Initialize *****************
 12345 ;; Defined at:
 12346 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12347 ;; Parameters:    Size  Location     Type
 12348 ;;  button          1    wreg     PTR struct .
 12349 ;;		 -> mtouch_button(48), 
 12350 ;; Auto vars:     Size  Location     Type
 12351 ;;  button          1    9[COMMON] PTR struct .
 12352 ;;		 -> mtouch_button(48), 
 12353 ;; Return value:  Size  Location     Type
 12354 ;;                  1    wreg      void 
 12355 ;; Registers used:
 12356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12357 ;; Tracked objects:
 12358 ;;		On entry : 0/0
 12359 ;;		On exit  : 0/0
 12360 ;;		Unchanged: 0/0
 12361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12362 ;;      Params:         0       0       0       0       0       0       0       0
 12363 ;;      Locals:         1       0       0       0       0       0       0       0
 12364 ;;      Temps:          0       4       0       0       0       0       0       0
 12365 ;;      Totals:         1       4       0       0       0       0       0       0
 12366 ;;Total ram usage:        5 bytes
 12367 ;; Hardware stack levels used:    1
 12368 ;; Hardware stack levels required when called:    6
 12369 ;; This function calls:
 12370 ;;		_MTOUCH_Sensor_RawSample_Get
 12371 ;; This function is called by:
 12372 ;;		_Button_State_Initializing
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           
 12377                           ;psect for function _Button_Baseline_Initialize
 12378  0913                     _Button_Baseline_Initialize:	
 12379                           
 12380                           ;incstack = 0
 12381                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12382                           ;Button_Baseline_Initialize@button stored from wreg
 12383  0913  00F9               	movwf	Button_Baseline_Initialize@button
 12384                           
 12385                           ;mcc_generated_files/mtouch/mtouch_button.c: 475: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 476: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 477:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 12386  0914  0A79               	incf	Button_Baseline_Initialize@button,w
 12387  0915  0086               	movwf	6
 12388  0916  3001               	movlw	1	; select bank2/3
 12389  0917  0087               	movwf	7
 12390  0918  0801               	movf	1,w
 12391  0919  3196  26B2  3189   	fcall	_MTOUCH_Sensor_RawSample_Get
 12392  091C  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12393  091D  0020               	movlb	0	; select bank0
 12394  091E  00A0               	movwf	??_Button_Baseline_Initialize
 12395  091F  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12396  0920  00A1               	movwf	??_Button_Baseline_Initialize+1
 12397  0921  01A2               	clrf	??_Button_Baseline_Initialize+2
 12398  0922  01A3               	clrf	??_Button_Baseline_Initialize+3
 12399  0923  0879               	movf	Button_Baseline_Initialize@button,w
 12400  0924  3E05               	addlw	5
 12401  0925  0086               	movwf	6
 12402  0926  3001               	movlw	1	; select bank2/3
 12403  0927  0087               	movwf	7
 12404  0928  0820               	movf	??_Button_Baseline_Initialize,w
 12405  0929  3FC0               	movwi [0]fsr1
 12406  092A  0821               	movf	??_Button_Baseline_Initialize+1,w
 12407  092B  3FC1               	movwi [1]fsr1
 12408  092C  0822               	movf	??_Button_Baseline_Initialize+2,w
 12409  092D  3FC2               	movwi [2]fsr1
 12410  092E  0823               	movf	??_Button_Baseline_Initialize+3,w
 12411  092F  3FC3               	movwi [3]fsr1
 12412                           
 12413                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 12414  0930  0879               	movf	Button_Baseline_Initialize@button,w
 12415  0931  3E05               	addlw	5
 12416  0932  0086               	movwf	6
 12417  0933  3001               	movlw	1	; select bank2/3
 12418  0934  0087               	movwf	7
 12419  0935  3004               	movlw	4
 12420  0936                     u4755:	
 12421  0936  3581               	lslf	1,f
 12422  0937  3141               	addfsr 1,1
 12423  0938  0D81               	rlf	1,f
 12424  0939  3141               	addfsr 1,1
 12425  093A  0D81               	rlf	1,f
 12426  093B  3141               	addfsr 1,1
 12427  093C  0D81               	rlf	1,f
 12428  093D  317D               	addfsr 1,-3
 12429  093E  0B89               	decfsz	9,f
 12430  093F  2936               	goto	u4755
 12431  0940  0008               	return
 12432  0941                     __end_of_Button_Baseline_Initialize:	
 12433                           
 12434                           	psect	text78
 12435  153B                     __ptext78:	
 12436 ;; *************** function _Button_Reading_Update *****************
 12437 ;; Defined at:
 12438 ;;		line 448 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12439 ;; Parameters:    Size  Location     Type
 12440 ;;  button          1    wreg     PTR struct .
 12441 ;;		 -> mtouch_button(48), 
 12442 ;; Auto vars:     Size  Location     Type
 12443 ;;  button          1    0[BANK0 ] PTR struct .
 12444 ;;		 -> mtouch_button(48), 
 12445 ;; Return value:  Size  Location     Type
 12446 ;;                  1    wreg      void 
 12447 ;; Registers used:
 12448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12449 ;; Tracked objects:
 12450 ;;		On entry : 0/0
 12451 ;;		On exit  : 0/0
 12452 ;;		Unchanged: 0/0
 12453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12454 ;;      Params:         0       0       0       0       0       0       0       0
 12455 ;;      Locals:         0       1       0       0       0       0       0       0
 12456 ;;      Temps:          0       0       0       0       0       0       0       0
 12457 ;;      Totals:         0       1       0       0       0       0       0       0
 12458 ;;Total ram usage:        1 bytes
 12459 ;; Hardware stack levels used:    1
 12460 ;; Hardware stack levels required when called:    7
 12461 ;; This function calls:
 12462 ;;		_Button_Reading_Update_Helper
 12463 ;; This function is called by:
 12464 ;;		_Button_Service
 12465 ;; This function uses a non-reentrant model
 12466 ;;
 12467                           
 12468                           
 12469                           ;psect for function _Button_Reading_Update
 12470  153B                     _Button_Reading_Update:	
 12471                           
 12472                           ;incstack = 0
 12473                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12474                           ;Button_Reading_Update@button stored from wreg
 12475  153B  0020               	movlb	0	; select bank0
 12476  153C  00A0               	movwf	Button_Reading_Update@button
 12477                           
 12478                           ;mcc_generated_files/mtouch/mtouch_button.c: 448: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 449: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 450:     if (GIE == (uint8_t) 1)
 12479  153D  1F8B               	btfss	11,7	;volatile
 12480  153E  2D45               	goto	l6039
 12481                           
 12482                           ;mcc_generated_files/mtouch/mtouch_button.c: 451:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 452:         GIE = (uint8_t) 0;
 12483  153F  138B               	bcf	11,7	;volatile
 12484                           
 12485                           ;mcc_generated_files/mtouch/mtouch_button.c: 453:         Button_Reading_Update_Helper(b
      +                          utton);
 12486  1540  0820               	movf	Button_Reading_Update@button,w
 12487  1541  318B  2305         	fcall	_Button_Reading_Update_Helper
 12488                           
 12489                           ;mcc_generated_files/mtouch/mtouch_button.c: 454:         GIE = (uint8_t) 1;
 12490  1543  178B               	bsf	11,7	;volatile
 12491                           
 12492                           ;mcc_generated_files/mtouch/mtouch_button.c: 455:     }
 12493  1544  0008               	return
 12494  1545                     l6039:	
 12495                           
 12496                           ;mcc_generated_files/mtouch/mtouch_button.c: 457:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 458:         Button_Reading_Update_Helper(button);
 12497  1545  0820               	movf	Button_Reading_Update@button,w
 12498  1546  318B  2305         	fcall	_Button_Reading_Update_Helper
 12499  1548  0008               	return
 12500  1549                     __end_of_Button_Reading_Update:	
 12501                           
 12502                           	psect	text79
 12503  0B05                     __ptext79:	
 12504 ;; *************** function _Button_Reading_Update_Helper *****************
 12505 ;; Defined at:
 12506 ;;		line 462 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12507 ;; Parameters:    Size  Location     Type
 12508 ;;  button          1    wreg     PTR struct .
 12509 ;;		 -> mtouch_button(48), 
 12510 ;; Auto vars:     Size  Location     Type
 12511 ;;  button          1   11[COMMON] PTR struct .
 12512 ;;		 -> mtouch_button(48), 
 12513 ;; Return value:  Size  Location     Type
 12514 ;;                  1    wreg      void 
 12515 ;; Registers used:
 12516 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12517 ;; Tracked objects:
 12518 ;;		On entry : 0/0
 12519 ;;		On exit  : 0/0
 12520 ;;		Unchanged: 0/0
 12521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12522 ;;      Params:         0       0       0       0       0       0       0       0
 12523 ;;      Locals:         1       0       0       0       0       0       0       0
 12524 ;;      Temps:          2       0       0       0       0       0       0       0
 12525 ;;      Totals:         3       0       0       0       0       0       0       0
 12526 ;;Total ram usage:        3 bytes
 12527 ;; Hardware stack levels used:    1
 12528 ;; Hardware stack levels required when called:    6
 12529 ;; This function calls:
 12530 ;;		_MTOUCH_Sensor_RawSample_Get
 12531 ;; This function is called by:
 12532 ;;		_Button_Reading_Update
 12533 ;; This function uses a non-reentrant model
 12534 ;;
 12535                           
 12536                           
 12537                           ;psect for function _Button_Reading_Update_Helper
 12538  0B05                     _Button_Reading_Update_Helper:	
 12539                           
 12540                           ;incstack = 0
 12541                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12542                           ;Button_Reading_Update_Helper@button stored from wreg
 12543  0B05  00FB               	movwf	Button_Reading_Update_Helper@button
 12544                           
 12545                           ;mcc_generated_files/mtouch/mtouch_button.c: 462: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 463: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 464:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 12546  0B06  087B               	movf	Button_Reading_Update_Helper@button,w
 12547  0B07  3E02               	addlw	2
 12548  0B08  0086               	movwf	6
 12549  0B09  3001               	movlw	1	; select bank2/3
 12550  0B0A  0087               	movwf	7
 12551  0B0B  0801               	movf	1,w
 12552  0B0C  1903               	btfsc	3,2
 12553  0B0D  2B41               	goto	l5941
 12554                           
 12555                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         button->reading -= button->reading>>((uint8_t)2u);
 12556  0B0E  087B               	movf	Button_Reading_Update_Helper@button,w
 12557  0B0F  3E03               	addlw	3
 12558  0B10  0086               	movwf	6
 12559  0B11  3001               	movlw	1	; select bank2/3
 12560  0B12  0087               	movwf	7
 12561  0B13  3F40               	moviw [0]fsr1
 12562  0B14  00F9               	movwf	??_Button_Reading_Update_Helper
 12563  0B15  3F41               	moviw [1]fsr1
 12564  0B16  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12565  0B17  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12566  0B18  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12567  0B19  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12568  0B1A  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12569  0B1B  087B               	movf	Button_Reading_Update_Helper@button,w
 12570  0B1C  3E03               	addlw	3
 12571  0B1D  0086               	movwf	6
 12572  0B1E  3001               	movlw	1	; select bank2/3
 12573  0B1F  0087               	movwf	7
 12574  0B20  0879               	movf	??_Button_Reading_Update_Helper,w
 12575  0B21  0281               	subwf	1,f
 12576  0B22  3141               	addfsr 1,1
 12577  0B23  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12578  0B24  3B81               	subwfb	1,f
 12579  0B25  317F               	addfsr 1,-1
 12580                           
 12581                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 12582  0B26  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12583  0B27  0086               	movwf	6
 12584  0B28  3001               	movlw	1	; select bank2/3
 12585  0B29  0087               	movwf	7
 12586  0B2A  0801               	movf	1,w
 12587  0B2B  3196  26B2         	fcall	_MTOUCH_Sensor_RawSample_Get
 12588  0B2D  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12589  0B2E  00F9               	movwf	??_Button_Reading_Update_Helper
 12590  0B2F  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12591  0B30  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12592  0B31  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12593  0B32  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12594  0B33  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12595  0B34  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12596  0B35  087B               	movf	Button_Reading_Update_Helper@button,w
 12597  0B36  3E03               	addlw	3
 12598  0B37  0086               	movwf	6
 12599  0B38  3001               	movlw	1	; select bank2/3
 12600  0B39  0087               	movwf	7
 12601  0B3A  0879               	movf	??_Button_Reading_Update_Helper,w
 12602  0B3B  0781               	addwf	1,f
 12603  0B3C  3141               	addfsr 1,1
 12604  0B3D  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12605  0B3E  3D81               	addwfc	1,f
 12606  0B3F  317F               	addfsr 1,-1
 12607                           
 12608                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     }
 12609  0B40  0008               	return
 12610  0B41                     l5941:	
 12611                           
 12612                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 471:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 12613  0B41  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12614  0B42  0086               	movwf	6
 12615  0B43  3001               	movlw	1	; select bank2/3
 12616  0B44  0087               	movwf	7
 12617  0B45  0801               	movf	1,w
 12618  0B46  3196  26B2         	fcall	_MTOUCH_Sensor_RawSample_Get
 12619  0B48  087B               	movf	Button_Reading_Update_Helper@button,w
 12620  0B49  3E03               	addlw	3
 12621  0B4A  0086               	movwf	6
 12622  0B4B  3001               	movlw	1	; select bank2/3
 12623  0B4C  0087               	movwf	7
 12624  0B4D  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12625  0B4E  3FC0               	movwi [0]fsr1
 12626  0B4F  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12627  0B50  3FC1               	movwi [1]fsr1
 12628  0B51  0008               	return
 12629  0B52                     __end_of_Button_Reading_Update_Helper:	
 12630                           
 12631                           	psect	text80
 12632  16B2                     __ptext80:	
 12633 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 12634 ;; Defined at:
 12635 ;;		line 792 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12636 ;; Parameters:    Size  Location     Type
 12637 ;;  name            1    wreg     enum E2854
 12638 ;; Auto vars:     Size  Location     Type
 12639 ;;  name            1    8[COMMON] enum E2854
 12640 ;; Return value:  Size  Location     Type
 12641 ;;                  2    5[COMMON] unsigned short 
 12642 ;; Registers used:
 12643 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12644 ;; Tracked objects:
 12645 ;;		On entry : 0/0
 12646 ;;		On exit  : 0/0
 12647 ;;		Unchanged: 0/0
 12648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12649 ;;      Params:         2       0       0       0       0       0       0       0
 12650 ;;      Locals:         1       0       0       0       0       0       0       0
 12651 ;;      Temps:          1       0       0       0       0       0       0       0
 12652 ;;      Totals:         4       0       0       0       0       0       0       0
 12653 ;;Total ram usage:        4 bytes
 12654 ;; Hardware stack levels used:    1
 12655 ;; Hardware stack levels required when called:    5
 12656 ;; This function calls:
 12657 ;;		___bmul
 12658 ;; This function is called by:
 12659 ;;		_Button_Reading_Update_Helper
 12660 ;;		_Button_Baseline_Initialize
 12661 ;; This function uses a non-reentrant model
 12662 ;;
 12663                           
 12664                           
 12665                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 12666  16B2                     _MTOUCH_Sensor_RawSample_Get:	
 12667                           
 12668                           ;incstack = 0
 12669                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12670                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 12671  16B2  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 12672                           
 12673                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          793: {;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     if (name < 3u)
 12674  16B3  3003               	movlw	3
 12675  16B4  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 12676  16B5  1803               	skipnc
 12677  16B6  2EC7               	goto	l5847
 12678                           
 12679                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 795:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 796:         return mtouch_sensor[name].rawSample;
 12680  16B7  3009               	movlw	9
 12681  16B8  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 12682  16B9  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 12683  16BA  00F1               	movwf	___bmul@multiplicand
 12684  16BB  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 12685  16BC  3195  25B1         	fcall	___bmul
 12686  16BE  3E56               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 12687  16BF  0086               	movwf	6
 12688  16C0  3001               	movlw	1	; select bank2/3
 12689  16C1  0087               	movwf	7
 12690  16C2  3F40               	moviw [0]fsr1
 12691  16C3  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 12692  16C4  3F41               	moviw [1]fsr1
 12693  16C5  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 12694  16C6  0008               	return
 12695  16C7                     l5847:	
 12696                           
 12697                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 799:         return (mtouch_sensor_sample_t
      +                          )0;
 12698  16C7  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 12699  16C8  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 12700  16C9  0008               	return
 12701  16CA                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 12702                           
 12703                           	psect	text81
 12704  15B1                     __ptext81:	
 12705 ;; *************** function ___bmul *****************
 12706 ;; Defined at:
 12707 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 12708 ;; Parameters:    Size  Location     Type
 12709 ;;  multiplier      1    wreg     unsigned char 
 12710 ;;  multiplicand    1    1[COMMON] unsigned char 
 12711 ;; Auto vars:     Size  Location     Type
 12712 ;;  multiplier      1    4[COMMON] unsigned char 
 12713 ;;  product         1    3[COMMON] unsigned char 
 12714 ;; Return value:  Size  Location     Type
 12715 ;;                  1    wreg      unsigned char 
 12716 ;; Registers used:
 12717 ;;		wreg, status,2, status,0
 12718 ;; Tracked objects:
 12719 ;;		On entry : 0/0
 12720 ;;		On exit  : 0/0
 12721 ;;		Unchanged: 0/0
 12722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12723 ;;      Params:         1       0       0       0       0       0       0       0
 12724 ;;      Locals:         2       0       0       0       0       0       0       0
 12725 ;;      Temps:          1       0       0       0       0       0       0       0
 12726 ;;      Totals:         4       0       0       0       0       0       0       0
 12727 ;;Total ram usage:        4 bytes
 12728 ;; Hardware stack levels used:    1
 12729 ;; Hardware stack levels required when called:    4
 12730 ;; This function calls:
 12731 ;;		Nothing
 12732 ;; This function is called by:
 12733 ;;		_MTOUCH_Sensor_Initialize
 12734 ;;		_MTOUCH_Sensor_RawSample_Get
 12735 ;;		_MTOUCH_Sensor_Enable
 12736 ;;		_MTOUCH_Sensor_Calibrate
 12737 ;;		_MTOUCH_Sensor_isCalibrated
 12738 ;;		_MTOUCH_Sensor_wasSampled
 12739 ;;		_MTOUCH_Sensor_isAnySensorActive
 12740 ;;		_MTOUCH_Sensor_Disable
 12741 ;;		_MTOUCH_Sensor_isEnabled
 12742 ;;		_MTOUCH_Sensor_isActive
 12743 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 12744 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 12745 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 12746 ;;		_MTOUCH_Sensor_Oversampling_Get
 12747 ;;		_MTOUCH_Sensor_Oversampling_Set
 12748 ;; This function uses a non-reentrant model
 12749 ;;
 12750                           
 12751                           
 12752                           ;psect for function ___bmul
 12753  15B1                     ___bmul:	
 12754                           
 12755                           ;incstack = 0
 12756                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12757                           ;___bmul@multiplier stored from wreg
 12758  15B1  00F4               	movwf	___bmul@multiplier
 12759  15B2  01F3               	clrf	___bmul@product
 12760  15B3                     l5621:	
 12761  15B3  1C74               	btfss	___bmul@multiplier,0
 12762  15B4  2DB9               	goto	l5625
 12763  15B5  0871               	movf	___bmul@multiplicand,w
 12764  15B6  00F2               	movwf	??___bmul
 12765  15B7  0872               	movf	??___bmul,w
 12766  15B8  07F3               	addwf	___bmul@product,f
 12767  15B9                     l5625:	
 12768  15B9  1003               	clrc
 12769  15BA  0DF1               	rlf	___bmul@multiplicand,f
 12770  15BB  1003               	clrc
 12771  15BC  0CF4               	rrf	___bmul@multiplier,f
 12772  15BD  0874               	movf	___bmul@multiplier,w
 12773  15BE  1D03               	btfss	3,2
 12774  15BF  2DB3               	goto	l5621
 12775  15C0  0873               	movf	___bmul@product,w
 12776  15C1  0008               	return
 12777  15C2                     __end_of___bmul:	
 12778                           
 12779                           	psect	text82
 12780  0E58                     __ptext82:	
 12781 ;; *************** function _Button_Deviation_Update *****************
 12782 ;; Defined at:
 12783 ;;		line 399 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;  button          1    wreg     PTR struct .
 12786 ;;		 -> mtouch_button(48), 
 12787 ;; Auto vars:     Size  Location     Type
 12788 ;;  button          1    0[BANK0 ] PTR struct .
 12789 ;;		 -> mtouch_button(48), 
 12790 ;;  deviation       4    1[BANK0 ] long 
 12791 ;; Return value:  Size  Location     Type
 12792 ;;                  1    wreg      void 
 12793 ;; Registers used:
 12794 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12795 ;; Tracked objects:
 12796 ;;		On entry : 0/0
 12797 ;;		On exit  : 0/0
 12798 ;;		Unchanged: 0/0
 12799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12800 ;;      Params:         0       0       0       0       0       0       0       0
 12801 ;;      Locals:         0       5       0       0       0       0       0       0
 12802 ;;      Temps:         10       0       0       0       0       0       0       0
 12803 ;;      Totals:        10       5       0       0       0       0       0       0
 12804 ;;Total ram usage:       15 bytes
 12805 ;; Hardware stack levels used:    1
 12806 ;; Hardware stack levels required when called:    4
 12807 ;; This function calls:
 12808 ;;		Nothing
 12809 ;; This function is called by:
 12810 ;;		_Button_Service
 12811 ;; This function uses a non-reentrant model
 12812 ;;
 12813                           
 12814                           
 12815                           ;psect for function _Button_Deviation_Update
 12816  0E58                     _Button_Deviation_Update:	
 12817                           
 12818                           ;incstack = 0
 12819                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12820                           ;Button_Deviation_Update@button stored from wreg
 12821  0E58  0020               	movlb	0	; select bank0
 12822  0E59  00A0               	movwf	Button_Deviation_Update@button
 12823                           
 12824                           ;mcc_generated_files/mtouch/mtouch_button.c: 399: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 400: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 401:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 403:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 12825  0E5A  0820               	movf	Button_Deviation_Update@button,w
 12826  0E5B  3E05               	addlw	5
 12827  0E5C  0086               	movwf	6
 12828  0E5D  3001               	movlw	1	; select bank2/3
 12829  0E5E  0087               	movwf	7
 12830  0E5F  3F40               	moviw [0]fsr1
 12831  0E60  00F1               	movwf	??_Button_Deviation_Update
 12832  0E61  3F41               	moviw [1]fsr1
 12833  0E62  00F2               	movwf	??_Button_Deviation_Update+1
 12834  0E63  3F42               	moviw [2]fsr1
 12835  0E64  00F3               	movwf	??_Button_Deviation_Update+2
 12836  0E65  3F43               	moviw [3]fsr1
 12837  0E66  00F4               	movwf	??_Button_Deviation_Update+3
 12838  0E67  3004               	movlw	4
 12839  0E68                     u3235:	
 12840  0E68  36F4               	lsrf	??_Button_Deviation_Update+3,f
 12841  0E69  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12842  0E6A  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12843  0E6B  0CF1               	rrf	??_Button_Deviation_Update,f
 12844  0E6C  0B89               	decfsz	9,f
 12845  0E6D  2E68               	goto	u3235
 12846  0E6E  0820               	movf	Button_Deviation_Update@button,w
 12847  0E6F  3E03               	addlw	3
 12848  0E70  0086               	movwf	6
 12849  0E71  3001               	movlw	1	; select bank2/3
 12850  0E72  0087               	movwf	7
 12851  0E73  3F40               	moviw [0]fsr1
 12852  0E74  00F5               	movwf	??_Button_Deviation_Update+4
 12853  0E75  3F41               	moviw [1]fsr1
 12854  0E76  00F6               	movwf	??_Button_Deviation_Update+5
 12855  0E77  0875               	movf	??_Button_Deviation_Update+4,w
 12856  0E78  00F7               	movwf	??_Button_Deviation_Update+6
 12857  0E79  0876               	movf	??_Button_Deviation_Update+5,w
 12858  0E7A  00F8               	movwf	??_Button_Deviation_Update+7
 12859  0E7B  01F9               	clrf	??_Button_Deviation_Update+8
 12860  0E7C  01FA               	clrf	??_Button_Deviation_Update+9
 12861  0E7D  0871               	movf	??_Button_Deviation_Update,w
 12862  0E7E  02F7               	subwf	??_Button_Deviation_Update+6,f
 12863  0E7F  0872               	movf	??_Button_Deviation_Update+1,w
 12864  0E80  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 12865  0E81  0873               	movf	??_Button_Deviation_Update+2,w
 12866  0E82  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 12867  0E83  0874               	movf	??_Button_Deviation_Update+3,w
 12868  0E84  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 12869  0E85  087A               	movf	??_Button_Deviation_Update+9,w
 12870  0E86  00A4               	movwf	Button_Deviation_Update@deviation+3
 12871  0E87  0879               	movf	??_Button_Deviation_Update+8,w
 12872  0E88  00A3               	movwf	Button_Deviation_Update@deviation+2
 12873  0E89  0878               	movf	??_Button_Deviation_Update+7,w
 12874  0E8A  00A2               	movwf	Button_Deviation_Update@deviation+1
 12875  0E8B  0877               	movf	??_Button_Deviation_Update+6,w
 12876  0E8C  00A1               	movwf	Button_Deviation_Update@deviation
 12877                           
 12878                           ;mcc_generated_files/mtouch/mtouch_button.c: 406:     deviation = deviation >> (button->
      +                          scaling);
 12879  0E8D  0821               	movf	Button_Deviation_Update@deviation,w
 12880  0E8E  00F1               	movwf	??_Button_Deviation_Update
 12881  0E8F  0822               	movf	Button_Deviation_Update@deviation+1,w
 12882  0E90  00F2               	movwf	??_Button_Deviation_Update+1
 12883  0E91  0823               	movf	Button_Deviation_Update@deviation+2,w
 12884  0E92  00F3               	movwf	??_Button_Deviation_Update+2
 12885  0E93  0824               	movf	Button_Deviation_Update@deviation+3,w
 12886  0E94  00F4               	movwf	??_Button_Deviation_Update+3
 12887  0E95  0820               	movf	Button_Deviation_Update@button,w
 12888  0E96  3E0F               	addlw	15
 12889  0E97  0086               	movwf	6
 12890  0E98  3001               	movlw	1	; select bank2/3
 12891  0E99  0087               	movwf	7
 12892  0E9A  0A01               	incf	1,w
 12893  0E9B  2EA0               	goto	u3240
 12894  0E9C                     u3245:	
 12895  0E9C  37F4               	asrf	??_Button_Deviation_Update+3,f
 12896  0E9D  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12897  0E9E  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12898  0E9F  0CF1               	rrf	??_Button_Deviation_Update,f
 12899  0EA0                     u3240:	
 12900  0EA0  0B89               	decfsz	9,f
 12901  0EA1  2E9C               	goto	u3245
 12902  0EA2  0874               	movf	??_Button_Deviation_Update+3,w
 12903  0EA3  00A4               	movwf	Button_Deviation_Update@deviation+3
 12904  0EA4  0873               	movf	??_Button_Deviation_Update+2,w
 12905  0EA5  00A3               	movwf	Button_Deviation_Update@deviation+2
 12906  0EA6  0872               	movf	??_Button_Deviation_Update+1,w
 12907  0EA7  00A2               	movwf	Button_Deviation_Update@deviation+1
 12908  0EA8  0871               	movf	??_Button_Deviation_Update,w
 12909  0EA9  00A1               	movwf	Button_Deviation_Update@deviation
 12910                           
 12911                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:     if (deviation > ((0x7f)))
 12912  0EAA  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 12913  0EAB  2EC1               	goto	l4481
 12914  0EAC  0824               	movf	Button_Deviation_Update@deviation+3,w
 12915  0EAD  1D03               	btfss	3,2
 12916  0EAE  2EB9               	goto	l4479
 12917  0EAF  0823               	movf	Button_Deviation_Update@deviation+2,w
 12918  0EB0  1D03               	btfss	3,2
 12919  0EB1  2EB9               	goto	l4479
 12920  0EB2  0822               	movf	Button_Deviation_Update@deviation+1,w
 12921  0EB3  1D03               	btfss	3,2
 12922  0EB4  2EB9               	goto	l4479
 12923  0EB5  3080               	movlw	128
 12924  0EB6  0221               	subwf	Button_Deviation_Update@deviation,w
 12925  0EB7  1C03               	btfss	3,0
 12926  0EB8  2EC1               	goto	l4481
 12927  0EB9                     l4479:	
 12928                           
 12929                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 411:         deviation = ((0x7f));
 12930  0EB9  3000               	movlw	0
 12931  0EBA  00A4               	movwf	Button_Deviation_Update@deviation+3
 12932  0EBB  3000               	movlw	0
 12933  0EBC  00A3               	movwf	Button_Deviation_Update@deviation+2
 12934  0EBD  3000               	movlw	0
 12935  0EBE  00A2               	movwf	Button_Deviation_Update@deviation+1
 12936  0EBF  307F               	movlw	127
 12937  0EC0  00A1               	movwf	Button_Deviation_Update@deviation
 12938  0EC1                     l4481:	
 12939                           
 12940                           ;mcc_generated_files/mtouch/mtouch_button.c: 413:     if (deviation < ((-1-0x7f)))
 12941  0EC1  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 12942  0EC2  2ED5               	goto	l4485
 12943  0EC3  3080               	movlw	128
 12944  0EC4  0221               	subwf	Button_Deviation_Update@deviation,w
 12945  0EC5  30FF               	movlw	255
 12946  0EC6  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 12947  0EC7  30FF               	movlw	255
 12948  0EC8  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 12949  0EC9  30FF               	movlw	255
 12950  0ECA  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 12951  0ECB  1803               	btfsc	3,0
 12952  0ECC  2ED5               	goto	l4485
 12953                           
 12954                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 415:         deviation = ((-1-0x7f));
 12955  0ECD  30FF               	movlw	255
 12956  0ECE  00A4               	movwf	Button_Deviation_Update@deviation+3
 12957  0ECF  30FF               	movlw	255
 12958  0ED0  00A3               	movwf	Button_Deviation_Update@deviation+2
 12959  0ED1  30FF               	movlw	255
 12960  0ED2  00A2               	movwf	Button_Deviation_Update@deviation+1
 12961  0ED3  3080               	movlw	128
 12962  0ED4  00A1               	movwf	Button_Deviation_Update@deviation
 12963  0ED5                     l4485:	
 12964                           
 12965                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 12966  0ED5  0821               	movf	Button_Deviation_Update@deviation,w
 12967  0ED6  00F1               	movwf	??_Button_Deviation_Update
 12968  0ED7  0820               	movf	Button_Deviation_Update@button,w
 12969  0ED8  3E09               	addlw	9
 12970  0ED9  0086               	movwf	6
 12971  0EDA  3001               	movlw	1	; select bank2/3
 12972  0EDB  0087               	movwf	7
 12973  0EDC  0871               	movf	??_Button_Deviation_Update,w
 12974  0EDD  0081               	movwf	1
 12975  0EDE  0008               	return
 12976  0EDF                     __end_of_Button_Deviation_Update:	
 12977                           
 12978                           	psect	text83
 12979  14B4                     __ptext83:	
 12980 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 12981 ;; Defined at:
 12982 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12983 ;; Parameters:    Size  Location     Type
 12984 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 12985 ;;		 -> myButtonPressedCallback(1), 
 12986 ;; Auto vars:     Size  Location     Type
 12987 ;;		None
 12988 ;; Return value:  Size  Location     Type
 12989 ;;                  1    wreg      void 
 12990 ;; Registers used:
 12991 ;;		wreg
 12992 ;; Tracked objects:
 12993 ;;		On entry : 0/0
 12994 ;;		On exit  : 0/0
 12995 ;;		Unchanged: 0/0
 12996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12997 ;;      Params:         2       0       0       0       0       0       0       0
 12998 ;;      Locals:         0       0       0       0       0       0       0       0
 12999 ;;      Temps:          0       0       0       0       0       0       0       0
 13000 ;;      Totals:         2       0       0       0       0       0       0       0
 13001 ;;Total ram usage:        2 bytes
 13002 ;; Hardware stack levels used:    1
 13003 ;; Hardware stack levels required when called:    4
 13004 ;; This function calls:
 13005 ;;		Nothing
 13006 ;; This function is called by:
 13007 ;;		_main
 13008 ;; This function uses a non-reentrant model
 13009 ;;
 13010                           
 13011                           
 13012                           ;psect for function _MTOUCH_Button_SetPressedCallback
 13013  14B4                     _MTOUCH_Button_SetPressedCallback:	
 13014                           
 13015                           ;mcc_generated_files/mtouch/mtouch_button.c: 528: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          529: {;mcc_generated_files/mtouch/mtouch_button.c: 530:     callback_pressed = callback;
 13016                           
 13017                           ;incstack = 0
 13018                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 13019  14B4  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 13020  14B5  0021               	movlb	1	; select bank1
 13021  14B6  00D6               	movwf	(_callback_pressed+1)^(0+128)
 13022  14B7  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 13023  14B8  00D5               	movwf	_callback_pressed^(0+128)
 13024  14B9  0008               	return
 13025  14BA                     __end_of_MTOUCH_Button_SetPressedCallback:	
 13026                           
 13027                           	psect	text84
 13028  14AE                     __ptext84:	
 13029 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 13030 ;; Defined at:
 13031 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13032 ;; Parameters:    Size  Location     Type
 13033 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 13034 ;;		 -> myButtonReleasedCallback(1), 
 13035 ;; Auto vars:     Size  Location     Type
 13036 ;;		None
 13037 ;; Return value:  Size  Location     Type
 13038 ;;                  1    wreg      void 
 13039 ;; Registers used:
 13040 ;;		wreg
 13041 ;; Tracked objects:
 13042 ;;		On entry : 0/0
 13043 ;;		On exit  : 0/0
 13044 ;;		Unchanged: 0/0
 13045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13046 ;;      Params:         2       0       0       0       0       0       0       0
 13047 ;;      Locals:         0       0       0       0       0       0       0       0
 13048 ;;      Temps:          0       0       0       0       0       0       0       0
 13049 ;;      Totals:         2       0       0       0       0       0       0       0
 13050 ;;Total ram usage:        2 bytes
 13051 ;; Hardware stack levels used:    1
 13052 ;; Hardware stack levels required when called:    4
 13053 ;; This function calls:
 13054 ;;		Nothing
 13055 ;; This function is called by:
 13056 ;;		_main
 13057 ;; This function uses a non-reentrant model
 13058 ;;
 13059                           
 13060                           
 13061                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 13062  14AE                     _MTOUCH_Button_SetNotPressedCallback:	
 13063                           
 13064                           ;mcc_generated_files/mtouch/mtouch_button.c: 532: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 533: {;mcc_generated_files/mtouch/mtouch_button.c: 534:     callback_notPressed = cal
      +                          lback;
 13065                           
 13066                           ;incstack = 0
 13067                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 13068  14AE  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 13069  14AF  0020               	movlb	0	; select bank0
 13070  14B0  00ED               	movwf	_callback_notPressed+1
 13071  14B1  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 13072  14B2  00EC               	movwf	_callback_notPressed
 13073  14B3  0008               	return
 13074  14B4                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 13075                           
 13076                           	psect	text85
 13077  1475                     __ptext85:	
 13078 ;; *************** function _EUSART_is_rx_ready *****************
 13079 ;; Defined at:
 13080 ;;		line 134 in file "mcc_generated_files/eusart.c"
 13081 ;; Parameters:    Size  Location     Type
 13082 ;;		None
 13083 ;; Auto vars:     Size  Location     Type
 13084 ;;		None
 13085 ;; Return value:  Size  Location     Type
 13086 ;;                  1    wreg      unsigned char 
 13087 ;; Registers used:
 13088 ;;		wreg
 13089 ;; Tracked objects:
 13090 ;;		On entry : 0/0
 13091 ;;		On exit  : 0/0
 13092 ;;		Unchanged: 0/0
 13093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13094 ;;      Params:         0       0       0       0       0       0       0       0
 13095 ;;      Locals:         0       0       0       0       0       0       0       0
 13096 ;;      Temps:          0       0       0       0       0       0       0       0
 13097 ;;      Totals:         0       0       0       0       0       0       0       0
 13098 ;;Total ram usage:        0 bytes
 13099 ;; Hardware stack levels used:    1
 13100 ;; Hardware stack levels required when called:    4
 13101 ;; This function calls:
 13102 ;;		Nothing
 13103 ;; This function is called by:
 13104 ;;		_main
 13105 ;; This function uses a non-reentrant model
 13106 ;;
 13107                           
 13108                           
 13109                           ;psect for function _EUSART_is_rx_ready
 13110  1475                     _EUSART_is_rx_ready:	
 13111                           
 13112                           ;mcc_generated_files/eusart.c: 136:     return eusartRxCount;
 13113                           
 13114                           ;incstack = 0
 13115                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 13116  1475  0020               	movlb	0	; select bank0
 13117  1476  0865               	movf	_eusartRxCount,w	;volatile
 13118  1477  0008               	return
 13119  1478                     __end_of_EUSART_is_rx_ready:	
 13120                           
 13121                           	psect	text86
 13122  178F                     __ptext86:	
 13123 ;; *************** function _EUSART_Read *****************
 13124 ;; Defined at:
 13125 ;;		line 148 in file "mcc_generated_files/eusart.c"
 13126 ;; Parameters:    Size  Location     Type
 13127 ;;		None
 13128 ;; Auto vars:     Size  Location     Type
 13129 ;;  readValue       1    2[COMMON] unsigned char 
 13130 ;; Return value:  Size  Location     Type
 13131 ;;                  1    wreg      unsigned char 
 13132 ;; Registers used:
 13133 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13134 ;; Tracked objects:
 13135 ;;		On entry : 0/0
 13136 ;;		On exit  : 0/0
 13137 ;;		Unchanged: 0/0
 13138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13139 ;;      Params:         0       0       0       0       0       0       0       0
 13140 ;;      Locals:         1       0       0       0       0       0       0       0
 13141 ;;      Temps:          1       0       0       0       0       0       0       0
 13142 ;;      Totals:         2       0       0       0       0       0       0       0
 13143 ;;Total ram usage:        2 bytes
 13144 ;; Hardware stack levels used:    1
 13145 ;; Hardware stack levels required when called:    4
 13146 ;; This function calls:
 13147 ;;		Nothing
 13148 ;; This function is called by:
 13149 ;;		_main
 13150 ;;		_getch
 13151 ;; This function uses a non-reentrant model
 13152 ;;
 13153                           
 13154                           
 13155                           ;psect for function _EUSART_Read
 13156  178F                     _EUSART_Read:	
 13157  178F                     l4879:	
 13158                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 13159                           
 13160                           ;incstack = 0
 13161                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 13162                           
 13163                           
 13164                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 13165  178F  0020               	movlb	0	; select bank0
 13166  1790  0865               	movf	_eusartRxCount,w	;volatile
 13167  1791  1903               	btfsc	3,2
 13168  1792  2F8F               	goto	l4879
 13169                           
 13170                           ;mcc_generated_files/eusart.c: 156:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 13171  1793  0866               	movf	_eusartRxTail,w	;volatile
 13172  1794  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13173  1795  0086               	movwf	6
 13174  1796  0187               	clrf	7
 13175  1797  0801               	movf	1,w
 13176  1798  00F1               	movwf	??_EUSART_Read
 13177  1799  0871               	movf	??_EUSART_Read,w
 13178  179A  00E4               	movwf	_eusartRxLastError	;volatile
 13179                           
 13180                           ;mcc_generated_files/eusart.c: 158:     readValue = eusartRxBuffer[eusartRxTail++];
 13181  179B  0866               	movf	_eusartRxTail,w
 13182  179C  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 13183  179D  0086               	movwf	6
 13184  179E  0187               	clrf	7
 13185  179F  0801               	movf	1,w
 13186  17A0  00F1               	movwf	??_EUSART_Read
 13187  17A1  0871               	movf	??_EUSART_Read,w
 13188  17A2  00F2               	movwf	EUSART_Read@readValue
 13189  17A3  3001               	movlw	1
 13190  17A4  00F1               	movwf	??_EUSART_Read
 13191  17A5  0871               	movf	??_EUSART_Read,w
 13192  17A6  07E6               	addwf	_eusartRxTail,f	;volatile
 13193                           
 13194                           ;mcc_generated_files/eusart.c: 159:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 13195  17A7  3008               	movlw	8
 13196  17A8  0266               	subwf	_eusartRxTail,w	;volatile
 13197  17A9  1803               	btfsc	3,0
 13198                           
 13199                           ;mcc_generated_files/eusart.c: 160:     {;mcc_generated_files/eusart.c: 161:         eus
      +                          artRxTail = 0;
 13200  17AA  01E6               	clrf	_eusartRxTail	;volatile
 13201                           
 13202                           ;mcc_generated_files/eusart.c: 163:     PIE1bits.RCIE = 0;
 13203  17AB  0021               	movlb	1	; select bank1
 13204  17AC  1291               	bcf	17,5	;volatile
 13205                           
 13206                           ;mcc_generated_files/eusart.c: 164:     eusartRxCount--;
 13207  17AD  3001               	movlw	1
 13208  17AE  0020               	movlb	0	; select bank0
 13209  17AF  02E5               	subwf	_eusartRxCount,f	;volatile
 13210                           
 13211                           ;mcc_generated_files/eusart.c: 165:     PIE1bits.RCIE = 1;
 13212  17B0  0021               	movlb	1	; select bank1
 13213  17B1  1691               	bsf	17,5	;volatile
 13214                           
 13215                           ;mcc_generated_files/eusart.c: 167:     return readValue;
 13216  17B2  0872               	movf	EUSART_Read@readValue,w
 13217  17B3  0008               	return
 13218  17B4                     __end_of_EUSART_Read:	
 13219                           
 13220                           	psect	text87
 13221  05FC                     __ptext87:	
 13222 ;; *************** function _DATA_PROCESS *****************
 13223 ;; Defined at:
 13224 ;;		line 226 in file "main.c"
 13225 ;; Parameters:    Size  Location     Type
 13226 ;;  x               1    wreg     unsigned char 
 13227 ;; Auto vars:     Size  Location     Type
 13228 ;;  x               1    6[COMMON] unsigned char 
 13229 ;; Return value:  Size  Location     Type
 13230 ;;                  1    wreg      void 
 13231 ;; Registers used:
 13232 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13233 ;; Tracked objects:
 13234 ;;		On entry : 0/0
 13235 ;;		On exit  : 0/0
 13236 ;;		Unchanged: 0/0
 13237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13238 ;;      Params:         0       0       0       0       0       0       0       0
 13239 ;;      Locals:         1       0       0       0       0       0       0       0
 13240 ;;      Temps:          2       0       0       0       0       0       0       0
 13241 ;;      Totals:         3       0       0       0       0       0       0       0
 13242 ;;Total ram usage:        3 bytes
 13243 ;; Hardware stack levels used:    1
 13244 ;; Hardware stack levels required when called:    6
 13245 ;; This function calls:
 13246 ;;		_LED_PROCESS
 13247 ;;		_RELAY_PROCESS
 13248 ;; This function is called by:
 13249 ;;		_main
 13250 ;; This function uses a non-reentrant model
 13251 ;;
 13252                           
 13253                           
 13254                           ;psect for function _DATA_PROCESS
 13255  05FC                     _DATA_PROCESS:	
 13256                           
 13257                           ;incstack = 0
 13258                           ; Regs used in _DATA_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13259                           ;DATA_PROCESS@x stored from wreg
 13260  05FC  00F6               	movwf	DATA_PROCESS@x
 13261                           
 13262                           ;main.c: 226: void DATA_PROCESS(char x);main.c: 227: {;main.c: 228:     timeout_count = 
      +                          0;
 13263  05FD  3000               	movlw	0
 13264  05FE  0021               	movlb	1	; select bank1
 13265  05FF  00BB               	movwf	(_timeout_count+3)^(0+128)
 13266  0600  3000               	movlw	0
 13267  0601  00BA               	movwf	(_timeout_count+2)^(0+128)
 13268  0602  3000               	movlw	0
 13269  0603  00B9               	movwf	(_timeout_count+1)^(0+128)
 13270  0604  3000               	movlw	0
 13271  0605  00B8               	movwf	_timeout_count^(0+128)
 13272                           
 13273                           ;main.c: 229:     switch(x)
 13274  0606  2E7D               	goto	l5097
 13275  0607                     l5041:	
 13276                           
 13277                           ;main.c: 232:         {;main.c: 233:             LED_PROCESS(0);
 13278  0607  3000               	movlw	0
 13279  0608  318D  2575  3185   	fcall	_LED_PROCESS
 13280                           
 13281                           ;main.c: 234:             RELAY_PROCESS(0);
 13282  060B  3000               	movlw	0
 13283  060C  318A  22B8         	fcall	_RELAY_PROCESS
 13284                           
 13285                           ;main.c: 235:             check_request = 0;
 13286  060E  0020               	movlb	0	; select bank0
 13287  060F  01E0               	clrf	_check_request
 13288                           
 13289                           ;main.c: 236:             last_touch_status.full_status = 0;
 13290  0610  01D9               	clrf	_last_touch_status
 13291  0611  01DA               	clrf	_last_touch_status+1
 13292                           
 13293                           ;main.c: 237:             break;
 13294  0612  0008               	return
 13295  0613                     l5047:	
 13296                           
 13297                           ;main.c: 240:         {;main.c: 241:             LED_PROCESS(1);
 13298  0613  3001               	movlw	1
 13299  0614  318D  2575  3185   	fcall	_LED_PROCESS
 13300                           
 13301                           ;main.c: 242:             RELAY_PROCESS(1);
 13302  0617  3001               	movlw	1
 13303  0618  318A  22B8         	fcall	_RELAY_PROCESS
 13304                           
 13305                           ;main.c: 243:             check_request = 0;
 13306  061A  0020               	movlb	0	; select bank0
 13307  061B  01E0               	clrf	_check_request
 13308                           
 13309                           ;main.c: 244:             last_touch_status.full_status = 1;
 13310  061C  3001               	movlw	1
 13311  061D  00D9               	movwf	_last_touch_status
 13312  061E  3000               	movlw	0
 13313  061F  00DA               	movwf	_last_touch_status+1
 13314                           
 13315                           ;main.c: 245:             break;
 13316  0620  0008               	return
 13317  0621                     l5053:	
 13318                           
 13319                           ;main.c: 248:         {;main.c: 249:             LED_PROCESS(2);
 13320  0621  3002               	movlw	2
 13321  0622  318D  2575  3185   	fcall	_LED_PROCESS
 13322                           
 13323                           ;main.c: 250:             RELAY_PROCESS(2);
 13324  0625  3002               	movlw	2
 13325  0626  318A  22B8         	fcall	_RELAY_PROCESS
 13326                           
 13327                           ;main.c: 251:             check_request = 0;
 13328  0628  0020               	movlb	0	; select bank0
 13329  0629  01E0               	clrf	_check_request
 13330                           
 13331                           ;main.c: 252:             last_touch_status.full_status = 2;
 13332  062A  3002               	movlw	2
 13333  062B  00D9               	movwf	_last_touch_status
 13334  062C  3000               	movlw	0
 13335  062D  00DA               	movwf	_last_touch_status+1
 13336                           
 13337                           ;main.c: 253:             break;
 13338  062E  0008               	return
 13339  062F                     l5059:	
 13340                           
 13341                           ;main.c: 256:         {;main.c: 257:             LED_PROCESS(3);
 13342  062F  3003               	movlw	3
 13343  0630  318D  2575  3185   	fcall	_LED_PROCESS
 13344                           
 13345                           ;main.c: 258:             RELAY_PROCESS(3);
 13346  0633  3003               	movlw	3
 13347  0634  318A  22B8         	fcall	_RELAY_PROCESS
 13348                           
 13349                           ;main.c: 259:             check_request = 0;
 13350  0636  0020               	movlb	0	; select bank0
 13351  0637  01E0               	clrf	_check_request
 13352                           
 13353                           ;main.c: 260:             last_touch_status.full_status = 3;
 13354  0638  3003               	movlw	3
 13355  0639  00D9               	movwf	_last_touch_status
 13356  063A  3000               	movlw	0
 13357  063B  00DA               	movwf	_last_touch_status+1
 13358                           
 13359                           ;main.c: 261:             break;
 13360  063C  0008               	return
 13361  063D                     l5065:	
 13362                           
 13363                           ;main.c: 264:         {;main.c: 265:             LED_PROCESS(4);
 13364  063D  3004               	movlw	4
 13365  063E  318D  2575  3185   	fcall	_LED_PROCESS
 13366                           
 13367                           ;main.c: 266:             RELAY_PROCESS(4);
 13368  0641  3004               	movlw	4
 13369  0642  318A  22B8         	fcall	_RELAY_PROCESS
 13370                           
 13371                           ;main.c: 267:             check_request = 0;
 13372  0644  0020               	movlb	0	; select bank0
 13373  0645  01E0               	clrf	_check_request
 13374                           
 13375                           ;main.c: 268:             last_touch_status.full_status = 4;
 13376  0646  3004               	movlw	4
 13377  0647  00D9               	movwf	_last_touch_status
 13378  0648  3000               	movlw	0
 13379  0649  00DA               	movwf	_last_touch_status+1
 13380                           
 13381                           ;main.c: 269:             break;
 13382  064A  0008               	return
 13383  064B                     l5071:	
 13384                           
 13385                           ;main.c: 272:         {;main.c: 273:             LED_PROCESS(5);
 13386  064B  3005               	movlw	5
 13387  064C  318D  2575  3185   	fcall	_LED_PROCESS
 13388                           
 13389                           ;main.c: 274:             RELAY_PROCESS(5);
 13390  064F  3005               	movlw	5
 13391  0650  318A  22B8         	fcall	_RELAY_PROCESS
 13392                           
 13393                           ;main.c: 275:             check_request = 0;
 13394  0652  0020               	movlb	0	; select bank0
 13395  0653  01E0               	clrf	_check_request
 13396                           
 13397                           ;main.c: 276:             last_touch_status.full_status = 5;
 13398  0654  3005               	movlw	5
 13399  0655  00D9               	movwf	_last_touch_status
 13400  0656  3000               	movlw	0
 13401  0657  00DA               	movwf	_last_touch_status+1
 13402                           
 13403                           ;main.c: 277:             break;
 13404  0658  0008               	return
 13405  0659                     l5077:	
 13406                           
 13407                           ;main.c: 280:         {;main.c: 281:             LED_PROCESS(6);
 13408  0659  3006               	movlw	6
 13409  065A  318D  2575  3185   	fcall	_LED_PROCESS
 13410                           
 13411                           ;main.c: 282:             RELAY_PROCESS(6);
 13412  065D  3006               	movlw	6
 13413  065E  318A  22B8         	fcall	_RELAY_PROCESS
 13414                           
 13415                           ;main.c: 283:             check_request = 0;
 13416  0660  0020               	movlb	0	; select bank0
 13417  0661  01E0               	clrf	_check_request
 13418                           
 13419                           ;main.c: 284:             last_touch_status.full_status = 6;
 13420  0662  3006               	movlw	6
 13421  0663  00D9               	movwf	_last_touch_status
 13422  0664  3000               	movlw	0
 13423  0665  00DA               	movwf	_last_touch_status+1
 13424                           
 13425                           ;main.c: 285:             break;
 13426  0666  0008               	return
 13427  0667                     l5083:	
 13428                           
 13429                           ;main.c: 288:         {;main.c: 289:             LED_PROCESS(7);
 13430  0667  3007               	movlw	7
 13431  0668  318D  2575  3185   	fcall	_LED_PROCESS
 13432                           
 13433                           ;main.c: 290:             RELAY_PROCESS(7);
 13434  066B  3007               	movlw	7
 13435  066C  318A  22B8         	fcall	_RELAY_PROCESS
 13436                           
 13437                           ;main.c: 291:             check_request = 0;
 13438  066E  0020               	movlb	0	; select bank0
 13439  066F  01E0               	clrf	_check_request
 13440                           
 13441                           ;main.c: 292:             last_touch_status.full_status = 7;
 13442  0670  3007               	movlw	7
 13443  0671  00D9               	movwf	_last_touch_status
 13444  0672  3000               	movlw	0
 13445  0673  00DA               	movwf	_last_touch_status+1
 13446                           
 13447                           ;main.c: 293:             break;
 13448  0674  0008               	return
 13449  0675                     l5089:	
 13450                           
 13451                           ;main.c: 296:         {;main.c: 297:             check_request = 0;
 13452  0675  0020               	movlb	0	; select bank0
 13453  0676  01E0               	clrf	_check_request
 13454                           
 13455                           ;main.c: 298:             update_state_flag = 1;
 13456  0677  01DD               	clrf	_update_state_flag
 13457  0678  0ADD               	incf	_update_state_flag,f
 13458                           
 13459                           ;main.c: 299:             break;
 13460  0679  0008               	return
 13461  067A                     l5093:	
 13462                           
 13463                           ;main.c: 302:         {;main.c: 303:             check_request = 0;
 13464  067A  0020               	movlb	0	; select bank0
 13465  067B  01E0               	clrf	_check_request
 13466                           
 13467                           ;main.c: 304:             break;
 13468  067C  0008               	return
 13469  067D                     l5097:	
 13470  067D  0876               	movf	DATA_PROCESS@x,w
 13471  067E  00F4               	movwf	??_DATA_PROCESS
 13472  067F  01F5               	clrf	??_DATA_PROCESS+1
 13473                           
 13474                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13475                           ; Switch size 1, requested type "simple"
 13476                           ; Number of cases is 1, Range of values is 0 to 0
 13477                           ; switch strategies available:
 13478                           ; Name         Instructions Cycles
 13479                           ; simple_byte            4     3 (average)
 13480                           ; direct_byte            8     6 (fixed)
 13481                           ; jumptable            260     6 (fixed)
 13482                           ;	Chosen strategy is simple_byte
 13483  0680  0875               	movf	??_DATA_PROCESS+1,w
 13484  0681  3A00               	xorlw	0	; case 0
 13485  0682  1903               	skipnz
 13486  0683  2E85               	goto	l6811
 13487  0684  2E7A               	goto	l5093
 13488  0685                     l6811:	
 13489                           
 13490                           ; Switch size 1, requested type "simple"
 13491                           ; Number of cases is 9, Range of values is 48 to 85
 13492                           ; switch strategies available:
 13493                           ; Name         Instructions Cycles
 13494                           ; simple_byte           28    15 (average)
 13495                           ; direct_byte           85     9 (fixed)
 13496                           ; jumptable            263     9 (fixed)
 13497                           ;	Chosen strategy is simple_byte
 13498  0685  0874               	movf	??_DATA_PROCESS,w
 13499  0686  3A30               	xorlw	48	; case 48
 13500  0687  1903               	skipnz
 13501  0688  2E07               	goto	l5041
 13502  0689  3A01               	xorlw	1	; case 49
 13503  068A  1903               	skipnz
 13504  068B  2E13               	goto	l5047
 13505  068C  3A03               	xorlw	3	; case 50
 13506  068D  1903               	skipnz
 13507  068E  2E21               	goto	l5053
 13508  068F  3A01               	xorlw	1	; case 51
 13509  0690  1903               	skipnz
 13510  0691  2E2F               	goto	l5059
 13511  0692  3A07               	xorlw	7	; case 52
 13512  0693  1903               	skipnz
 13513  0694  2E3D               	goto	l5065
 13514  0695  3A01               	xorlw	1	; case 53
 13515  0696  1903               	skipnz
 13516  0697  2E4B               	goto	l5071
 13517  0698  3A03               	xorlw	3	; case 54
 13518  0699  1903               	skipnz
 13519  069A  2E59               	goto	l5077
 13520  069B  3A01               	xorlw	1	; case 55
 13521  069C  1903               	skipnz
 13522  069D  2E67               	goto	l5083
 13523  069E  3A62               	xorlw	98	; case 85
 13524  069F  1903               	skipnz
 13525  06A0  2E75               	goto	l5089
 13526  06A1  2E7A               	goto	l5093
 13527  06A2  0008               	return
 13528  06A3                     __end_of_DATA_PROCESS:	
 13529                           
 13530                           	psect	text88
 13531  0AB8                     __ptext88:	
 13532 ;; *************** function _RELAY_PROCESS *****************
 13533 ;; Defined at:
 13534 ;;		line 5 in file "relay.c"
 13535 ;; Parameters:    Size  Location     Type
 13536 ;;  x               1    wreg     unsigned char 
 13537 ;; Auto vars:     Size  Location     Type
 13538 ;;  x               1    3[COMMON] unsigned char 
 13539 ;; Return value:  Size  Location     Type
 13540 ;;                  1    wreg      void 
 13541 ;; Registers used:
 13542 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13543 ;; Tracked objects:
 13544 ;;		On entry : 0/0
 13545 ;;		On exit  : 0/0
 13546 ;;		Unchanged: 0/0
 13547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13548 ;;      Params:         0       0       0       0       0       0       0       0
 13549 ;;      Locals:         1       0       0       0       0       0       0       0
 13550 ;;      Temps:          2       0       0       0       0       0       0       0
 13551 ;;      Totals:         3       0       0       0       0       0       0       0
 13552 ;;Total ram usage:        3 bytes
 13553 ;; Hardware stack levels used:    1
 13554 ;; Hardware stack levels required when called:    4
 13555 ;; This function calls:
 13556 ;;		Nothing
 13557 ;; This function is called by:
 13558 ;;		_main
 13559 ;;		_myButtonPressedCallback
 13560 ;;		_DATA_PROCESS
 13561 ;; This function uses a non-reentrant model
 13562 ;;
 13563                           
 13564                           
 13565                           ;psect for function _RELAY_PROCESS
 13566  0AB8                     _RELAY_PROCESS:	
 13567                           
 13568                           ;incstack = 0
 13569                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
 13570                           ;RELAY_PROCESS@x stored from wreg
 13571  0AB8  00F3               	movwf	RELAY_PROCESS@x
 13572                           
 13573                           ;relay.c: 5: void RELAY_PROCESS(uint8_t x);relay.c: 6: {;relay.c: 7:     switch(x)
 13574  0AB9  2AE2               	goto	l4207
 13575  0ABA                     l1160:	
 13576                           ;relay.c: 10:         {;relay.c: 11:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13577                           
 13578  0ABA  0022               	movlb	2	; select bank2
 13579  0ABB  170D               	bsf	13,6	;volatile
 13580  0ABC  168C               	bsf	12,5	;volatile
 13581  0ABD  160C               	bsf	12,4	;volatile
 13582  0ABE  0008               	return
 13583  0ABF                     l1168:	
 13584                           ;relay.c: 15:         {;relay.c: 16:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13585                           
 13586  0ABF  0022               	movlb	2	; select bank2
 13587  0AC0  170D               	bsf	13,6	;volatile
 13588  0AC1  168C               	bsf	12,5	;volatile
 13589  0AC2  120C               	bcf	12,4	;volatile
 13590  0AC3  0008               	return
 13591  0AC4                     l1175:	
 13592                           ;relay.c: 20:         {;relay.c: 21:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13593                           
 13594  0AC4  0022               	movlb	2	; select bank2
 13595  0AC5  170D               	bsf	13,6	;volatile
 13596  0AC6  128C               	bcf	12,5	;volatile
 13597  0AC7  160C               	bsf	12,4	;volatile
 13598  0AC8  0008               	return
 13599  0AC9                     l1182:	
 13600                           ;relay.c: 25:         {;relay.c: 26:             do { LATBbits.LATB6 = 1; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13601                           
 13602  0AC9  0022               	movlb	2	; select bank2
 13603  0ACA  170D               	bsf	13,6	;volatile
 13604  0ACB  128C               	bcf	12,5	;volatile
 13605  0ACC  120C               	bcf	12,4	;volatile
 13606  0ACD  0008               	return
 13607  0ACE                     l1189:	
 13608                           ;relay.c: 30:         {;relay.c: 31:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13609                           
 13610  0ACE  0022               	movlb	2	; select bank2
 13611  0ACF  130D               	bcf	13,6	;volatile
 13612  0AD0  168C               	bsf	12,5	;volatile
 13613  0AD1  160C               	bsf	12,4	;volatile
 13614  0AD2  0008               	return
 13615  0AD3                     l1196:	
 13616                           ;relay.c: 35:         {;relay.c: 36:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 1; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13617                           
 13618  0AD3  0022               	movlb	2	; select bank2
 13619  0AD4  130D               	bcf	13,6	;volatile
 13620  0AD5  168C               	bsf	12,5	;volatile
 13621  0AD6  120C               	bcf	12,4	;volatile
 13622  0AD7  0008               	return
 13623  0AD8                     l1203:	
 13624                           ;relay.c: 40:         {;relay.c: 41:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 1; } while(0);
 13625                           
 13626  0AD8  0022               	movlb	2	; select bank2
 13627  0AD9  130D               	bcf	13,6	;volatile
 13628  0ADA  128C               	bcf	12,5	;volatile
 13629  0ADB  160C               	bsf	12,4	;volatile
 13630  0ADC  0008               	return
 13631  0ADD                     l1210:	
 13632                           ;relay.c: 45:         {;relay.c: 46:             do { LATBbits.LATB6 = 0; } while(0);do 
      +                          { LATAbits.LATA5 = 0; } while(0);do { LATAbits.LATA4 = 0; } while(0);
 13633                           
 13634  0ADD  0022               	movlb	2	; select bank2
 13635  0ADE  130D               	bcf	13,6	;volatile
 13636  0ADF  128C               	bcf	12,5	;volatile
 13637  0AE0  120C               	bcf	12,4	;volatile
 13638  0AE1  0008               	return
 13639  0AE2                     l4207:	
 13640  0AE2  0873               	movf	RELAY_PROCESS@x,w
 13641  0AE3  00F1               	movwf	??_RELAY_PROCESS
 13642  0AE4  01F2               	clrf	??_RELAY_PROCESS+1
 13643                           
 13644                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13645                           ; Switch size 1, requested type "simple"
 13646                           ; Number of cases is 1, Range of values is 0 to 0
 13647                           ; switch strategies available:
 13648                           ; Name         Instructions Cycles
 13649                           ; simple_byte            4     3 (average)
 13650                           ; direct_byte            8     6 (fixed)
 13651                           ; jumptable            260     6 (fixed)
 13652                           ;	Chosen strategy is simple_byte
 13653  0AE5  0872               	movf	??_RELAY_PROCESS+1,w
 13654  0AE6  3A00               	xorlw	0	; case 0
 13655  0AE7  1903               	skipnz
 13656  0AE8  2AEA               	goto	l6813
 13657  0AE9  2B04               	goto	l1216
 13658  0AEA                     l6813:	
 13659                           
 13660                           ; Switch size 1, requested type "simple"
 13661                           ; Number of cases is 8, Range of values is 0 to 7
 13662                           ; switch strategies available:
 13663                           ; Name         Instructions Cycles
 13664                           ; direct_byte           22     6 (fixed)
 13665                           ; simple_byte           25    13 (average)
 13666                           ; jumptable            260     6 (fixed)
 13667                           ;	Chosen strategy is simple_byte
 13668  0AEA  0871               	movf	??_RELAY_PROCESS,w
 13669  0AEB  3A00               	xorlw	0	; case 0
 13670  0AEC  1903               	skipnz
 13671  0AED  2ABA               	goto	l1160
 13672  0AEE  3A01               	xorlw	1	; case 1
 13673  0AEF  1903               	skipnz
 13674  0AF0  2ABF               	goto	l1168
 13675  0AF1  3A03               	xorlw	3	; case 2
 13676  0AF2  1903               	skipnz
 13677  0AF3  2AC4               	goto	l1175
 13678  0AF4  3A01               	xorlw	1	; case 3
 13679  0AF5  1903               	skipnz
 13680  0AF6  2AC9               	goto	l1182
 13681  0AF7  3A07               	xorlw	7	; case 4
 13682  0AF8  1903               	skipnz
 13683  0AF9  2ACE               	goto	l1189
 13684  0AFA  3A01               	xorlw	1	; case 5
 13685  0AFB  1903               	skipnz
 13686  0AFC  2AD3               	goto	l1196
 13687  0AFD  3A03               	xorlw	3	; case 6
 13688  0AFE  1903               	skipnz
 13689  0AFF  2AD8               	goto	l1203
 13690  0B00  3A01               	xorlw	1	; case 7
 13691  0B01  1903               	skipnz
 13692  0B02  2ADD               	goto	l1210
 13693  0B03  2B04               	goto	l1216
 13694  0B04                     l1216:	
 13695  0B04  0008               	return
 13696  0B05                     __end_of_RELAY_PROCESS:	
 13697                           
 13698                           	psect	text89
 13699  0D75                     __ptext89:	
 13700 ;; *************** function _LED_PROCESS *****************
 13701 ;; Defined at:
 13702 ;;		line 45 in file "led.c"
 13703 ;; Parameters:    Size  Location     Type
 13704 ;;  x               1    wreg     unsigned char 
 13705 ;; Auto vars:     Size  Location     Type
 13706 ;;  x               1    3[COMMON] unsigned char 
 13707 ;; Return value:  Size  Location     Type
 13708 ;;                  1    wreg      void 
 13709 ;; Registers used:
 13710 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13711 ;; Tracked objects:
 13712 ;;		On entry : 0/0
 13713 ;;		On exit  : 0/0
 13714 ;;		Unchanged: 0/0
 13715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13716 ;;      Params:         0       0       0       0       0       0       0       0
 13717 ;;      Locals:         1       0       0       0       0       0       0       0
 13718 ;;      Temps:          2       0       0       0       0       0       0       0
 13719 ;;      Totals:         3       0       0       0       0       0       0       0
 13720 ;;Total ram usage:        3 bytes
 13721 ;; Hardware stack levels used:    1
 13722 ;; Hardware stack levels required when called:    5
 13723 ;; This function calls:
 13724 ;;		_LED_0_SetHigh
 13725 ;;		_LED_0_SetLow
 13726 ;;		_LED_1_SetHigh
 13727 ;;		_LED_1_SetLow
 13728 ;;		_LED_2_SetHigh
 13729 ;;		_LED_2_SetLow
 13730 ;; This function is called by:
 13731 ;;		_main
 13732 ;;		_myButtonPressedCallback
 13733 ;;		_DATA_PROCESS
 13734 ;; This function uses a non-reentrant model
 13735 ;;
 13736                           
 13737                           
 13738                           ;psect for function _LED_PROCESS
 13739  0D75                     _LED_PROCESS:	
 13740                           
 13741                           ;incstack = 0
 13742                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13743                           ;LED_PROCESS@x stored from wreg
 13744  0D75  00F3               	movwf	LED_PROCESS@x
 13745                           
 13746                           ;led.c: 45: void LED_PROCESS(uint8_t x);led.c: 46: {;led.c: 47:     switch(x)
 13747  0D76  2DBF               	goto	l4197
 13748  0D77                     l4179:	
 13749                           
 13750                           ;led.c: 50:         {;led.c: 51:             LED_2_SetHigh();LED_1_SetHigh();LED_0_SetHi
      +                          gh();
 13751  0D77  3194  2498  318D   	fcall	_LED_2_SetHigh
 13752  0D7A  3194  2490  318D   	fcall	_LED_1_SetHigh
 13753  0D7D  3194  2488         	fcall	_LED_0_SetHigh
 13754                           
 13755                           ;led.c: 52:             break;
 13756  0D7F  0008               	return
 13757  0D80                     l4181:	
 13758                           
 13759                           ;led.c: 55:         {;led.c: 56:             LED_2_SetHigh();LED_1_SetHigh();LED_0_SetLo
      +                          w();
 13760  0D80  3194  2498  318D   	fcall	_LED_2_SetHigh
 13761  0D83  3194  2490  318D   	fcall	_LED_1_SetHigh
 13762  0D86  3194  248C         	fcall	_LED_0_SetLow
 13763                           
 13764                           ;led.c: 57:             break;
 13765  0D88  0008               	return
 13766  0D89                     l4183:	
 13767                           
 13768                           ;led.c: 60:         {;led.c: 61:             LED_2_SetHigh();LED_1_SetLow();LED_0_SetHig
      +                          h();
 13769  0D89  3194  2498  318D   	fcall	_LED_2_SetHigh
 13770  0D8C  3194  2494  318D   	fcall	_LED_1_SetLow
 13771  0D8F  3194  2488         	fcall	_LED_0_SetHigh
 13772                           
 13773                           ;led.c: 62:             break;
 13774  0D91  0008               	return
 13775  0D92                     l4185:	
 13776                           
 13777                           ;led.c: 65:         {;led.c: 66:             LED_2_SetHigh();LED_1_SetLow();LED_0_SetLow
      +                          ();
 13778  0D92  3194  2498  318D   	fcall	_LED_2_SetHigh
 13779  0D95  3194  2494  318D   	fcall	_LED_1_SetLow
 13780  0D98  3194  248C         	fcall	_LED_0_SetLow
 13781                           
 13782                           ;led.c: 67:             break;
 13783  0D9A  0008               	return
 13784  0D9B                     l4187:	
 13785                           
 13786                           ;led.c: 70:         {;led.c: 71:             LED_2_SetLow();LED_1_SetHigh();LED_0_SetHig
      +                          h();
 13787  0D9B  3194  249C  318D   	fcall	_LED_2_SetLow
 13788  0D9E  3194  2490  318D   	fcall	_LED_1_SetHigh
 13789  0DA1  3194  2488         	fcall	_LED_0_SetHigh
 13790                           
 13791                           ;led.c: 72:             break;
 13792  0DA3  0008               	return
 13793  0DA4                     l4189:	
 13794                           
 13795                           ;led.c: 75:         {;led.c: 76:             LED_2_SetLow();LED_1_SetHigh();LED_0_SetLow
      +                          ();
 13796  0DA4  3194  249C  318D   	fcall	_LED_2_SetLow
 13797  0DA7  3194  2490  318D   	fcall	_LED_1_SetHigh
 13798  0DAA  3194  248C         	fcall	_LED_0_SetLow
 13799                           
 13800                           ;led.c: 77:             break;
 13801  0DAC  0008               	return
 13802  0DAD                     l4191:	
 13803                           
 13804                           ;led.c: 80:         {;led.c: 81:             LED_2_SetLow();LED_1_SetLow();LED_0_SetHigh
      +                          ();
 13805  0DAD  3194  249C  318D   	fcall	_LED_2_SetLow
 13806  0DB0  3194  2494  318D   	fcall	_LED_1_SetLow
 13807  0DB3  3194  2488         	fcall	_LED_0_SetHigh
 13808                           
 13809                           ;led.c: 82:             break;
 13810  0DB5  0008               	return
 13811  0DB6                     l4193:	
 13812                           
 13813                           ;led.c: 85:         {;led.c: 86:             LED_2_SetLow();LED_1_SetLow();LED_0_SetLow(
      +                          );
 13814  0DB6  3194  249C  318D   	fcall	_LED_2_SetLow
 13815  0DB9  3194  2494  318D   	fcall	_LED_1_SetLow
 13816  0DBC  3194  248C         	fcall	_LED_0_SetLow
 13817                           
 13818                           ;led.c: 87:             break;
 13819  0DBE  0008               	return
 13820  0DBF                     l4197:	
 13821  0DBF  0873               	movf	LED_PROCESS@x,w
 13822  0DC0  00F1               	movwf	??_LED_PROCESS
 13823  0DC1  01F2               	clrf	??_LED_PROCESS+1
 13824                           
 13825                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13826                           ; Switch size 1, requested type "simple"
 13827                           ; Number of cases is 1, Range of values is 0 to 0
 13828                           ; switch strategies available:
 13829                           ; Name         Instructions Cycles
 13830                           ; simple_byte            4     3 (average)
 13831                           ; direct_byte            8     6 (fixed)
 13832                           ; jumptable            260     6 (fixed)
 13833                           ;	Chosen strategy is simple_byte
 13834  0DC2  0872               	movf	??_LED_PROCESS+1,w
 13835  0DC3  3A00               	xorlw	0	; case 0
 13836  0DC4  1903               	skipnz
 13837  0DC5  2DC7               	goto	l6815
 13838  0DC6  2DE1               	goto	l1151
 13839  0DC7                     l6815:	
 13840                           
 13841                           ; Switch size 1, requested type "simple"
 13842                           ; Number of cases is 8, Range of values is 0 to 7
 13843                           ; switch strategies available:
 13844                           ; Name         Instructions Cycles
 13845                           ; direct_byte           22     6 (fixed)
 13846                           ; simple_byte           25    13 (average)
 13847                           ; jumptable            260     6 (fixed)
 13848                           ;	Chosen strategy is simple_byte
 13849  0DC7  0871               	movf	??_LED_PROCESS,w
 13850  0DC8  3A00               	xorlw	0	; case 0
 13851  0DC9  1903               	skipnz
 13852  0DCA  2D77               	goto	l4179
 13853  0DCB  3A01               	xorlw	1	; case 1
 13854  0DCC  1903               	skipnz
 13855  0DCD  2D80               	goto	l4181
 13856  0DCE  3A03               	xorlw	3	; case 2
 13857  0DCF  1903               	skipnz
 13858  0DD0  2D89               	goto	l4183
 13859  0DD1  3A01               	xorlw	1	; case 3
 13860  0DD2  1903               	skipnz
 13861  0DD3  2D92               	goto	l4185
 13862  0DD4  3A07               	xorlw	7	; case 4
 13863  0DD5  1903               	skipnz
 13864  0DD6  2D9B               	goto	l4187
 13865  0DD7  3A01               	xorlw	1	; case 5
 13866  0DD8  1903               	skipnz
 13867  0DD9  2DA4               	goto	l4189
 13868  0DDA  3A03               	xorlw	3	; case 6
 13869  0DDB  1903               	skipnz
 13870  0DDC  2DAD               	goto	l4191
 13871  0DDD  3A01               	xorlw	1	; case 7
 13872  0DDE  1903               	skipnz
 13873  0DDF  2DB6               	goto	l4193
 13874  0DE0  2DE1               	goto	l1151
 13875  0DE1                     l1151:	
 13876  0DE1  0008               	return
 13877  0DE2                     __end_of_LED_PROCESS:	
 13878                           
 13879                           	psect	text90
 13880  149C                     __ptext90:	
 13881 ;; *************** function _LED_2_SetLow *****************
 13882 ;; Defined at:
 13883 ;;		line 17 in file "led.c"
 13884 ;; Parameters:    Size  Location     Type
 13885 ;;		None
 13886 ;; Auto vars:     Size  Location     Type
 13887 ;;		None
 13888 ;; Return value:  Size  Location     Type
 13889 ;;                  1    wreg      void 
 13890 ;; Registers used:
 13891 ;;		None
 13892 ;; Tracked objects:
 13893 ;;		On entry : 0/0
 13894 ;;		On exit  : 0/0
 13895 ;;		Unchanged: 0/0
 13896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13897 ;;      Params:         0       0       0       0       0       0       0       0
 13898 ;;      Locals:         0       0       0       0       0       0       0       0
 13899 ;;      Temps:          0       0       0       0       0       0       0       0
 13900 ;;      Totals:         0       0       0       0       0       0       0       0
 13901 ;;Total ram usage:        0 bytes
 13902 ;; Hardware stack levels used:    1
 13903 ;; Hardware stack levels required when called:    4
 13904 ;; This function calls:
 13905 ;;		Nothing
 13906 ;; This function is called by:
 13907 ;;		_LED_PROCESS
 13908 ;; This function uses a non-reentrant model
 13909 ;;
 13910                           
 13911                           
 13912                           ;psect for function _LED_2_SetLow
 13913  149C                     _LED_2_SetLow:	
 13914                           
 13915                           ;incstack = 0
 13916                           ; Regs used in _LED_2_SetLow: []
 13917                           ;led.c: 19:     do { LATCbits.LATC3 = 1; } while(0);
 13918  149C  0022               	movlb	2	; select bank2
 13919  149D  158E               	bsf	14,3	;volatile
 13920                           
 13921                           ;led.c: 20:     do { LATCbits.LATC2 = 0; } while(0);
 13922  149E  110E               	bcf	14,2	;volatile
 13923  149F  0008               	return
 13924  14A0                     __end_of_LED_2_SetLow:	
 13925                           
 13926                           	psect	text91
 13927  1498                     __ptext91:	
 13928 ;; *************** function _LED_2_SetHigh *****************
 13929 ;; Defined at:
 13930 ;;		line 12 in file "led.c"
 13931 ;; Parameters:    Size  Location     Type
 13932 ;;		None
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;		None
 13935 ;; Return value:  Size  Location     Type
 13936 ;;                  1    wreg      void 
 13937 ;; Registers used:
 13938 ;;		None
 13939 ;; Tracked objects:
 13940 ;;		On entry : 0/0
 13941 ;;		On exit  : 0/0
 13942 ;;		Unchanged: 0/0
 13943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13944 ;;      Params:         0       0       0       0       0       0       0       0
 13945 ;;      Locals:         0       0       0       0       0       0       0       0
 13946 ;;      Temps:          0       0       0       0       0       0       0       0
 13947 ;;      Totals:         0       0       0       0       0       0       0       0
 13948 ;;Total ram usage:        0 bytes
 13949 ;; Hardware stack levels used:    1
 13950 ;; Hardware stack levels required when called:    4
 13951 ;; This function calls:
 13952 ;;		Nothing
 13953 ;; This function is called by:
 13954 ;;		_LED_PROCESS
 13955 ;; This function uses a non-reentrant model
 13956 ;;
 13957                           
 13958                           
 13959                           ;psect for function _LED_2_SetHigh
 13960  1498                     _LED_2_SetHigh:	
 13961                           
 13962                           ;incstack = 0
 13963                           ; Regs used in _LED_2_SetHigh: []
 13964                           ;led.c: 14:     do { LATCbits.LATC2 = 1; } while(0);
 13965  1498  0022               	movlb	2	; select bank2
 13966  1499  150E               	bsf	14,2	;volatile
 13967                           
 13968                           ;led.c: 15:     do { LATCbits.LATC3 = 0; } while(0);
 13969  149A  118E               	bcf	14,3	;volatile
 13970  149B  0008               	return
 13971  149C                     __end_of_LED_2_SetHigh:	
 13972                           
 13973                           	psect	text92
 13974  1494                     __ptext92:	
 13975 ;; *************** function _LED_1_SetLow *****************
 13976 ;; Defined at:
 13977 ;;		line 28 in file "led.c"
 13978 ;; Parameters:    Size  Location     Type
 13979 ;;		None
 13980 ;; Auto vars:     Size  Location     Type
 13981 ;;		None
 13982 ;; Return value:  Size  Location     Type
 13983 ;;                  1    wreg      void 
 13984 ;; Registers used:
 13985 ;;		None
 13986 ;; Tracked objects:
 13987 ;;		On entry : 0/0
 13988 ;;		On exit  : 0/0
 13989 ;;		Unchanged: 0/0
 13990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13991 ;;      Params:         0       0       0       0       0       0       0       0
 13992 ;;      Locals:         0       0       0       0       0       0       0       0
 13993 ;;      Temps:          0       0       0       0       0       0       0       0
 13994 ;;      Totals:         0       0       0       0       0       0       0       0
 13995 ;;Total ram usage:        0 bytes
 13996 ;; Hardware stack levels used:    1
 13997 ;; Hardware stack levels required when called:    4
 13998 ;; This function calls:
 13999 ;;		Nothing
 14000 ;; This function is called by:
 14001 ;;		_LED_PROCESS
 14002 ;; This function uses a non-reentrant model
 14003 ;;
 14004                           
 14005                           
 14006                           ;psect for function _LED_1_SetLow
 14007  1494                     _LED_1_SetLow:	
 14008                           
 14009                           ;incstack = 0
 14010                           ; Regs used in _LED_1_SetLow: []
 14011                           ;led.c: 30:     do { LATCbits.LATC7 = 1; } while(0);
 14012  1494  0022               	movlb	2	; select bank2
 14013  1495  178E               	bsf	14,7	;volatile
 14014                           
 14015                           ;led.c: 31:     do { LATCbits.LATC5 = 0; } while(0);
 14016  1496  128E               	bcf	14,5	;volatile
 14017  1497  0008               	return
 14018  1498                     __end_of_LED_1_SetLow:	
 14019                           
 14020                           	psect	text93
 14021  1490                     __ptext93:	
 14022 ;; *************** function _LED_1_SetHigh *****************
 14023 ;; Defined at:
 14024 ;;		line 23 in file "led.c"
 14025 ;; Parameters:    Size  Location     Type
 14026 ;;		None
 14027 ;; Auto vars:     Size  Location     Type
 14028 ;;		None
 14029 ;; Return value:  Size  Location     Type
 14030 ;;                  1    wreg      void 
 14031 ;; Registers used:
 14032 ;;		None
 14033 ;; Tracked objects:
 14034 ;;		On entry : 0/0
 14035 ;;		On exit  : 0/0
 14036 ;;		Unchanged: 0/0
 14037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14038 ;;      Params:         0       0       0       0       0       0       0       0
 14039 ;;      Locals:         0       0       0       0       0       0       0       0
 14040 ;;      Temps:          0       0       0       0       0       0       0       0
 14041 ;;      Totals:         0       0       0       0       0       0       0       0
 14042 ;;Total ram usage:        0 bytes
 14043 ;; Hardware stack levels used:    1
 14044 ;; Hardware stack levels required when called:    4
 14045 ;; This function calls:
 14046 ;;		Nothing
 14047 ;; This function is called by:
 14048 ;;		_LED_PROCESS
 14049 ;; This function uses a non-reentrant model
 14050 ;;
 14051                           
 14052                           
 14053                           ;psect for function _LED_1_SetHigh
 14054  1490                     _LED_1_SetHigh:	
 14055                           
 14056                           ;incstack = 0
 14057                           ; Regs used in _LED_1_SetHigh: []
 14058                           ;led.c: 25:     do { LATCbits.LATC5 = 1; } while(0);
 14059  1490  0022               	movlb	2	; select bank2
 14060  1491  168E               	bsf	14,5	;volatile
 14061                           
 14062                           ;led.c: 26:     do { LATCbits.LATC7 = 0; } while(0);
 14063  1492  138E               	bcf	14,7	;volatile
 14064  1493  0008               	return
 14065  1494                     __end_of_LED_1_SetHigh:	
 14066                           
 14067                           	psect	text94
 14068  148C                     __ptext94:	
 14069 ;; *************** function _LED_0_SetLow *****************
 14070 ;; Defined at:
 14071 ;;		line 39 in file "led.c"
 14072 ;; Parameters:    Size  Location     Type
 14073 ;;		None
 14074 ;; Auto vars:     Size  Location     Type
 14075 ;;		None
 14076 ;; Return value:  Size  Location     Type
 14077 ;;                  1    wreg      void 
 14078 ;; Registers used:
 14079 ;;		None
 14080 ;; Tracked objects:
 14081 ;;		On entry : 0/0
 14082 ;;		On exit  : 0/0
 14083 ;;		Unchanged: 0/0
 14084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14085 ;;      Params:         0       0       0       0       0       0       0       0
 14086 ;;      Locals:         0       0       0       0       0       0       0       0
 14087 ;;      Temps:          0       0       0       0       0       0       0       0
 14088 ;;      Totals:         0       0       0       0       0       0       0       0
 14089 ;;Total ram usage:        0 bytes
 14090 ;; Hardware stack levels used:    1
 14091 ;; Hardware stack levels required when called:    4
 14092 ;; This function calls:
 14093 ;;		Nothing
 14094 ;; This function is called by:
 14095 ;;		_LED_PROCESS
 14096 ;; This function uses a non-reentrant model
 14097 ;;
 14098                           
 14099                           
 14100                           ;psect for function _LED_0_SetLow
 14101  148C                     _LED_0_SetLow:	
 14102                           
 14103                           ;incstack = 0
 14104                           ; Regs used in _LED_0_SetLow: []
 14105                           ;led.c: 41:     do { LATAbits.LATA1 = 1; } while(0);
 14106  148C  0022               	movlb	2	; select bank2
 14107  148D  148C               	bsf	12,1	;volatile
 14108                           
 14109                           ;led.c: 42:     do { LATAbits.LATA0 = 0; } while(0);
 14110  148E  100C               	bcf	12,0	;volatile
 14111  148F  0008               	return
 14112  1490                     __end_of_LED_0_SetLow:	
 14113                           
 14114                           	psect	text95
 14115  1488                     __ptext95:	
 14116 ;; *************** function _LED_0_SetHigh *****************
 14117 ;; Defined at:
 14118 ;;		line 34 in file "led.c"
 14119 ;; Parameters:    Size  Location     Type
 14120 ;;		None
 14121 ;; Auto vars:     Size  Location     Type
 14122 ;;		None
 14123 ;; Return value:  Size  Location     Type
 14124 ;;                  1    wreg      void 
 14125 ;; Registers used:
 14126 ;;		None
 14127 ;; Tracked objects:
 14128 ;;		On entry : 0/0
 14129 ;;		On exit  : 0/0
 14130 ;;		Unchanged: 0/0
 14131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14132 ;;      Params:         0       0       0       0       0       0       0       0
 14133 ;;      Locals:         0       0       0       0       0       0       0       0
 14134 ;;      Temps:          0       0       0       0       0       0       0       0
 14135 ;;      Totals:         0       0       0       0       0       0       0       0
 14136 ;;Total ram usage:        0 bytes
 14137 ;; Hardware stack levels used:    1
 14138 ;; Hardware stack levels required when called:    4
 14139 ;; This function calls:
 14140 ;;		Nothing
 14141 ;; This function is called by:
 14142 ;;		_LED_PROCESS
 14143 ;; This function uses a non-reentrant model
 14144 ;;
 14145                           
 14146                           
 14147                           ;psect for function _LED_0_SetHigh
 14148  1488                     _LED_0_SetHigh:	
 14149                           
 14150                           ;incstack = 0
 14151                           ; Regs used in _LED_0_SetHigh: []
 14152                           ;led.c: 36:     do { LATAbits.LATA0 = 1; } while(0);
 14153  1488  0022               	movlb	2	; select bank2
 14154  1489  140C               	bsf	12,0	;volatile
 14155                           
 14156                           ;led.c: 37:     do { LATAbits.LATA1 = 0; } while(0);
 14157  148A  108C               	bcf	12,1	;volatile
 14158  148B  0008               	return
 14159  148C                     __end_of_LED_0_SetHigh:	
 14160                           
 14161                           	psect	intentry
 14162  0004                     __pintentry:	
 14163 ;; *************** function _INTERRUPT_InterruptManager *****************
 14164 ;; Defined at:
 14165 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14166 ;; Parameters:    Size  Location     Type
 14167 ;;		None
 14168 ;; Auto vars:     Size  Location     Type
 14169 ;;		None
 14170 ;; Return value:  Size  Location     Type
 14171 ;;                  1    wreg      void 
 14172 ;; Registers used:
 14173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14174 ;; Tracked objects:
 14175 ;;		On entry : 0/0
 14176 ;;		On exit  : 0/0
 14177 ;;		Unchanged: 0/0
 14178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14179 ;;      Params:         0       0       0       0       0       0       0       0
 14180 ;;      Locals:         0       0       0       0       0       0       0       0
 14181 ;;      Temps:          0       0       0       0       0       0       0       0
 14182 ;;      Totals:         0       0       0       0       0       0       0       0
 14183 ;;Total ram usage:        0 bytes
 14184 ;; Hardware stack levels used:    1
 14185 ;; Hardware stack levels required when called:    3
 14186 ;; This function calls:
 14187 ;;		Absolute function
 14188 ;;		_EUSART_Receive_ISR
 14189 ;;		_EUSART_Transmit_ISR
 14190 ;; This function is called by:
 14191 ;;		Interrupt level 1
 14192 ;; This function uses a non-reentrant model
 14193 ;;
 14194                           
 14195  0004                     _INTERRUPT_InterruptManager:	
 14196                           
 14197                           ;incstack = 0
 14198  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14199                           
 14200                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14201  0005  3180               	pagesel	$
 14202                           
 14203                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 14204  0006  1F0B               	btfss	11,6	;volatile
 14205  0007  2821               	goto	i1l845
 14206                           
 14207                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 14208  0008  0021               	movlb	1	; select bank1
 14209  0009  1E11               	btfss	17,4	;volatile
 14210  000A  2815               	goto	i1l840
 14211  000B  0020               	movlb	0	; select bank0
 14212  000C  1E11               	btfss	17,4	;volatile
 14213  000D  2815               	goto	i1l840
 14214                           
 14215                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
 14216  000E  0021               	movlb	1	; select bank1
 14217  000F  084D               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 14218  0010  008A               	movwf	10
 14219  0011  084C               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 14220  0012  000A               	callw
 14221  0013  3180               	pagesel	$
 14222                           
 14223                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 14224  0014  2821               	goto	i1l845
 14225  0015                     i1l840:	
 14226                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 14227                           
 14228  0015  0021               	movlb	1	; select bank1
 14229  0016  1E91               	btfss	17,5	;volatile
 14230  0017  2821               	goto	i1l845
 14231  0018  0020               	movlb	0	; select bank0
 14232  0019  1E91               	btfss	17,5	;volatile
 14233  001A  2821               	goto	i1l845
 14234                           
 14235                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
 14236  001B  0021               	movlb	1	; select bank1
 14237  001C  084B               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 14238  001D  008A               	movwf	10
 14239  001E  084A               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 14240  001F  000A               	callw
 14241  0020  3180               	pagesel	$
 14242  0021                     i1l845:	
 14243                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 14244                           
 14245                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 14246                           
 14247  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14248  0022  0009               	retfie
 14249  0023                     __end_of_INTERRUPT_InterruptManager:	
 14250                           
 14251                           	psect	text97
 14252  1751                     __ptext97:	
 14253 ;; *************** function _EUSART_Transmit_ISR *****************
 14254 ;; Defined at:
 14255 ;;		line 203 in file "mcc_generated_files/eusart.c"
 14256 ;; Parameters:    Size  Location     Type
 14257 ;;		None
 14258 ;; Auto vars:     Size  Location     Type
 14259 ;;		None
 14260 ;; Return value:  Size  Location     Type
 14261 ;;                  1    wreg      void 
 14262 ;; Registers used:
 14263 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14264 ;; Tracked objects:
 14265 ;;		On entry : 0/0
 14266 ;;		On exit  : 0/0
 14267 ;;		Unchanged: 0/0
 14268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14269 ;;      Params:         0       0       0       0       0       0       0       0
 14270 ;;      Locals:         0       0       0       0       0       0       0       0
 14271 ;;      Temps:          1       0       0       0       0       0       0       0
 14272 ;;      Totals:         1       0       0       0       0       0       0       0
 14273 ;;Total ram usage:        1 bytes
 14274 ;; Hardware stack levels used:    1
 14275 ;; This function calls:
 14276 ;;		Nothing
 14277 ;; This function is called by:
 14278 ;;		_EUSART_Initialize
 14279 ;;		_INTERRUPT_InterruptManager
 14280 ;; This function uses a non-reentrant model
 14281 ;;
 14282                           
 14283                           
 14284                           ;psect for function _EUSART_Transmit_ISR
 14285  1751                     _EUSART_Transmit_ISR:	
 14286                           
 14287                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 14288                           
 14289                           ;incstack = 0
 14290                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 14291  1751  3008               	movlw	8
 14292  1752  0021               	movlb	1	; select bank1
 14293  1753  024E               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 14294  1754  1803               	skipnc
 14295  1755  2F6D               	goto	i1l754
 14296                           
 14297                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 14298  1756  0020               	movlb	0	; select bank0
 14299  1757  0867               	movf	_eusartTxTail,w
 14300  1758  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 14301  1759  0086               	movwf	6
 14302  175A  0187               	clrf	7
 14303  175B  0801               	movf	1,w
 14304  175C  0023               	movlb	3	; select bank3
 14305  175D  009A               	movwf	26	;volatile
 14306  175E  3001               	movlw	1
 14307  175F  00F0               	movwf	??_EUSART_Transmit_ISR
 14308  1760  0870               	movf	??_EUSART_Transmit_ISR,w
 14309  1761  0020               	movlb	0	; select bank0
 14310  1762  07E7               	addwf	_eusartTxTail,f	;volatile
 14311                           
 14312                           ;mcc_generated_files/eusart.c: 210:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 14313  1763  3008               	movlw	8
 14314  1764  0267               	subwf	_eusartTxTail,w	;volatile
 14315  1765  1803               	btfsc	3,0
 14316                           
 14317                           ;mcc_generated_files/eusart.c: 211:         {;mcc_generated_files/eusart.c: 212:        
      +                               eusartTxTail = 0;
 14318  1766  01E7               	clrf	_eusartTxTail	;volatile
 14319                           
 14320                           ;mcc_generated_files/eusart.c: 214:         eusartTxBufferRemaining++;
 14321  1767  3001               	movlw	1
 14322  1768  00F0               	movwf	??_EUSART_Transmit_ISR
 14323  1769  0870               	movf	??_EUSART_Transmit_ISR,w
 14324  176A  0021               	movlb	1	; select bank1
 14325  176B  07CE               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 14326                           
 14327                           ;mcc_generated_files/eusart.c: 215:     }
 14328  176C  0008               	return
 14329  176D                     i1l754:	
 14330                           ;mcc_generated_files/eusart.c: 216:     else
 14331                           
 14332                           
 14333                           ;mcc_generated_files/eusart.c: 217:     {;mcc_generated_files/eusart.c: 218:         PIE
      +                          1bits.TXIE = 0;
 14334  176D  1211               	bcf	17,4	;volatile
 14335  176E  0008               	return
 14336  176F                     __end_of_EUSART_Transmit_ISR:	
 14337                           
 14338                           	psect	text98
 14339  0970                     __ptext98:	
 14340 ;; *************** function _EUSART_Receive_ISR *****************
 14341 ;; Defined at:
 14342 ;;		line 222 in file "mcc_generated_files/eusart.c"
 14343 ;; Parameters:    Size  Location     Type
 14344 ;;		None
 14345 ;; Auto vars:     Size  Location     Type
 14346 ;;		None
 14347 ;; Return value:  Size  Location     Type
 14348 ;;                  1    wreg      void 
 14349 ;; Registers used:
 14350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14351 ;; Tracked objects:
 14352 ;;		On entry : 0/0
 14353 ;;		On exit  : 0/0
 14354 ;;		Unchanged: 0/0
 14355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14356 ;;      Params:         0       0       0       0       0       0       0       0
 14357 ;;      Locals:         0       0       0       0       0       0       0       0
 14358 ;;      Temps:          0       0       0       0       0       0       0       0
 14359 ;;      Totals:         0       0       0       0       0       0       0       0
 14360 ;;Total ram usage:        0 bytes
 14361 ;; Hardware stack levels used:    1
 14362 ;; Hardware stack levels required when called:    2
 14363 ;; This function calls:
 14364 ;;		Absolute function
 14365 ;;		_EUSART_DefaultErrorHandler
 14366 ;;		_EUSART_DefaultFramingErrorHandler
 14367 ;;		_EUSART_DefaultOverrunErrorHandler
 14368 ;;		_EUSART_RxDataHandler
 14369 ;; This function is called by:
 14370 ;;		_EUSART_Initialize
 14371 ;;		_INTERRUPT_InterruptManager
 14372 ;; This function uses a non-reentrant model
 14373 ;;
 14374                           
 14375                           
 14376                           ;psect for function _EUSART_Receive_ISR
 14377  0970                     _EUSART_Receive_ISR:	
 14378                           
 14379                           ;mcc_generated_files/eusart.c: 225:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 14380                           
 14381                           ;incstack = 0
 14382                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14383  0970  087C               	movf	_eusartRxHead,w	;volatile
 14384  0971  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14385  0972  0086               	movwf	6
 14386  0973  0187               	clrf	7
 14387  0974  0181               	clrf	1
 14388                           
 14389                           ;mcc_generated_files/eusart.c: 227:     if(RCSTAbits.FERR){
 14390  0975  0023               	movlb	3	; select bank3
 14391  0976  1D1D               	btfss	29,2	;volatile
 14392  0977  2983               	goto	i1l4919
 14393                           
 14394                           ;mcc_generated_files/eusart.c: 228:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 14395  0978  087C               	movf	_eusartRxHead,w	;volatile
 14396  0979  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14397  097A  0086               	movwf	6
 14398  097B  0187               	clrf	7
 14399  097C  1481               	bsf	1,1
 14400                           
 14401                           ;mcc_generated_files/eusart.c: 229:         EUSART_FramingErrorHandler();
 14402  097D  0021               	movlb	1	; select bank1
 14403  097E  0849               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 14404  097F  008A               	movwf	10
 14405  0980  0848               	movf	_EUSART_FramingErrorHandler^(0+128),w
 14406  0981  000A               	callw
 14407  0982  3189               	pagesel	$
 14408  0983                     i1l4919:	
 14409                           
 14410                           ;mcc_generated_files/eusart.c: 232:     if(RCSTAbits.OERR){
 14411  0983  0023               	movlb	3	; select bank3
 14412  0984  1C9D               	btfss	29,1	;volatile
 14413  0985  2991               	goto	i1l4925
 14414                           
 14415                           ;mcc_generated_files/eusart.c: 233:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 14416  0986  087C               	movf	_eusartRxHead,w	;volatile
 14417  0987  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14418  0988  0086               	movwf	6
 14419  0989  0187               	clrf	7
 14420  098A  1501               	bsf	1,2
 14421                           
 14422                           ;mcc_generated_files/eusart.c: 234:         EUSART_OverrunErrorHandler();
 14423  098B  0021               	movlb	1	; select bank1
 14424  098C  0847               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 14425  098D  008A               	movwf	10
 14426  098E  0846               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 14427  098F  000A               	callw
 14428  0990  3189               	pagesel	$
 14429  0991                     i1l4925:	
 14430                           
 14431                           ;mcc_generated_files/eusart.c: 237:     if(eusartRxStatusBuffer[eusartRxHead].status){
 14432  0991  087C               	movf	_eusartRxHead,w	;volatile
 14433  0992  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14434  0993  0086               	movwf	6
 14435  0994  0187               	clrf	7
 14436  0995  0801               	movf	1,w
 14437  0996  1903               	btfsc	3,2
 14438  0997  299F               	goto	i1l4929
 14439                           
 14440                           ;mcc_generated_files/eusart.c: 238:         EUSART_ErrorHandler();
 14441  0998  0021               	movlb	1	; select bank1
 14442  0999  0845               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 14443  099A  008A               	movwf	10
 14444  099B  0844               	movf	_EUSART_ErrorHandler^(0+128),w
 14445  099C  000A               	callw
 14446  099D  3189               	pagesel	$
 14447                           
 14448                           ;mcc_generated_files/eusart.c: 239:     } else {
 14449  099E  0008               	return
 14450  099F                     i1l4929:	
 14451                           
 14452                           ;mcc_generated_files/eusart.c: 240:         EUSART_RxDataHandler();
 14453  099F  3196  2684         	fcall	_EUSART_RxDataHandler
 14454  09A1  0008               	return
 14455  09A2                     __end_of_EUSART_Receive_ISR:	
 14456                           
 14457                           	psect	text99
 14458  1484                     __ptext99:	
 14459 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 14460 ;; Defined at:
 14461 ;;		line 258 in file "mcc_generated_files/eusart.c"
 14462 ;; Parameters:    Size  Location     Type
 14463 ;;		None
 14464 ;; Auto vars:     Size  Location     Type
 14465 ;;		None
 14466 ;; Return value:  Size  Location     Type
 14467 ;;                  1    wreg      void 
 14468 ;; Registers used:
 14469 ;;		None
 14470 ;; Tracked objects:
 14471 ;;		On entry : 0/0
 14472 ;;		On exit  : 0/0
 14473 ;;		Unchanged: 0/0
 14474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14475 ;;      Params:         0       0       0       0       0       0       0       0
 14476 ;;      Locals:         0       0       0       0       0       0       0       0
 14477 ;;      Temps:          0       0       0       0       0       0       0       0
 14478 ;;      Totals:         0       0       0       0       0       0       0       0
 14479 ;;Total ram usage:        0 bytes
 14480 ;; Hardware stack levels used:    1
 14481 ;; This function calls:
 14482 ;;		Nothing
 14483 ;; This function is called by:
 14484 ;;		_EUSART_Initialize
 14485 ;;		_EUSART_Receive_ISR
 14486 ;; This function uses a non-reentrant model
 14487 ;;
 14488                           
 14489                           
 14490                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 14491  1484                     _EUSART_DefaultOverrunErrorHandler:	
 14492                           
 14493                           ;mcc_generated_files/eusart.c: 261:     RCSTAbits.CREN = 0;
 14494                           
 14495                           ;incstack = 0
 14496                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 14497  1484  0023               	movlb	3	; select bank3
 14498  1485  121D               	bcf	29,4	;volatile
 14499                           
 14500                           ;mcc_generated_files/eusart.c: 262:     RCSTAbits.CREN = 1;
 14501  1486  161D               	bsf	29,4	;volatile
 14502  1487  0008               	return
 14503  1488                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 14504                           
 14505                           	psect	text100
 14506  1470                     __ptext100:	
 14507 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 14508 ;; Defined at:
 14509 ;;		line 256 in file "mcc_generated_files/eusart.c"
 14510 ;; Parameters:    Size  Location     Type
 14511 ;;		None
 14512 ;; Auto vars:     Size  Location     Type
 14513 ;;		None
 14514 ;; Return value:  Size  Location     Type
 14515 ;;                  1    wreg      void 
 14516 ;; Registers used:
 14517 ;;		None
 14518 ;; Tracked objects:
 14519 ;;		On entry : 0/0
 14520 ;;		On exit  : 0/0
 14521 ;;		Unchanged: 0/0
 14522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14523 ;;      Params:         0       0       0       0       0       0       0       0
 14524 ;;      Locals:         0       0       0       0       0       0       0       0
 14525 ;;      Temps:          0       0       0       0       0       0       0       0
 14526 ;;      Totals:         0       0       0       0       0       0       0       0
 14527 ;;Total ram usage:        0 bytes
 14528 ;; Hardware stack levels used:    1
 14529 ;; This function calls:
 14530 ;;		Nothing
 14531 ;; This function is called by:
 14532 ;;		_EUSART_Initialize
 14533 ;;		_EUSART_Receive_ISR
 14534 ;; This function uses a non-reentrant model
 14535 ;;
 14536                           
 14537                           
 14538                           ;psect for function _EUSART_DefaultFramingErrorHandler
 14539  1470                     _EUSART_DefaultFramingErrorHandler:	
 14540                           
 14541                           ;incstack = 0
 14542                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 14543  1470  0008               	return
 14544  1471                     __end_of_EUSART_DefaultFramingErrorHandler:	
 14545                           
 14546                           	psect	text101
 14547  1472                     __ptext101:	
 14548 ;; *************** function _EUSART_DefaultErrorHandler *****************
 14549 ;; Defined at:
 14550 ;;		line 266 in file "mcc_generated_files/eusart.c"
 14551 ;; Parameters:    Size  Location     Type
 14552 ;;		None
 14553 ;; Auto vars:     Size  Location     Type
 14554 ;;		None
 14555 ;; Return value:  Size  Location     Type
 14556 ;;                  1    wreg      void 
 14557 ;; Registers used:
 14558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14559 ;; Tracked objects:
 14560 ;;		On entry : 0/0
 14561 ;;		On exit  : 0/0
 14562 ;;		Unchanged: 0/0
 14563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14564 ;;      Params:         0       0       0       0       0       0       0       0
 14565 ;;      Locals:         0       0       0       0       0       0       0       0
 14566 ;;      Temps:          0       0       0       0       0       0       0       0
 14567 ;;      Totals:         0       0       0       0       0       0       0       0
 14568 ;;Total ram usage:        0 bytes
 14569 ;; Hardware stack levels used:    1
 14570 ;; Hardware stack levels required when called:    1
 14571 ;; This function calls:
 14572 ;;		_EUSART_RxDataHandler
 14573 ;; This function is called by:
 14574 ;;		_EUSART_Initialize
 14575 ;;		_EUSART_Receive_ISR
 14576 ;; This function uses a non-reentrant model
 14577 ;;
 14578                           
 14579                           
 14580                           ;psect for function _EUSART_DefaultErrorHandler
 14581  1472                     _EUSART_DefaultErrorHandler:	
 14582                           
 14583                           ;mcc_generated_files/eusart.c: 267:     EUSART_RxDataHandler();
 14584                           
 14585                           ;incstack = 0
 14586                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14587  1472  3196  2684         	fcall	_EUSART_RxDataHandler
 14588  1474  0008               	return
 14589  1475                     __end_of_EUSART_DefaultErrorHandler:	
 14590                           
 14591                           	psect	text102
 14592  1684                     __ptext102:	
 14593 ;; *************** function _EUSART_RxDataHandler *****************
 14594 ;; Defined at:
 14595 ;;		line 246 in file "mcc_generated_files/eusart.c"
 14596 ;; Parameters:    Size  Location     Type
 14597 ;;		None
 14598 ;; Auto vars:     Size  Location     Type
 14599 ;;		None
 14600 ;; Return value:  Size  Location     Type
 14601 ;;                  1    wreg      void 
 14602 ;; Registers used:
 14603 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14604 ;; Tracked objects:
 14605 ;;		On entry : 0/0
 14606 ;;		On exit  : 0/0
 14607 ;;		Unchanged: 0/0
 14608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14609 ;;      Params:         0       0       0       0       0       0       0       0
 14610 ;;      Locals:         0       0       0       0       0       0       0       0
 14611 ;;      Temps:          1       0       0       0       0       0       0       0
 14612 ;;      Totals:         1       0       0       0       0       0       0       0
 14613 ;;Total ram usage:        1 bytes
 14614 ;; Hardware stack levels used:    1
 14615 ;; This function calls:
 14616 ;;		Nothing
 14617 ;; This function is called by:
 14618 ;;		_EUSART_Receive_ISR
 14619 ;;		_EUSART_DefaultErrorHandler
 14620 ;; This function uses a non-reentrant model
 14621 ;;
 14622                           
 14623                           
 14624                           ;psect for function _EUSART_RxDataHandler
 14625  1684                     _EUSART_RxDataHandler:	
 14626                           
 14627                           ;mcc_generated_files/eusart.c: 248:     eusartRxBuffer[eusartRxHead++] = RCREG;
 14628                           
 14629                           ;incstack = 0
 14630                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 14631  1684  0023               	movlb	3	; select bank3
 14632  1685  0819               	movf	25,w	;volatile
 14633  1686  00F0               	movwf	??_EUSART_RxDataHandler
 14634  1687  087C               	movf	_eusartRxHead,w
 14635  1688  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14636  1689  0086               	movwf	6
 14637  168A  0187               	clrf	7
 14638  168B  0870               	movf	??_EUSART_RxDataHandler,w
 14639  168C  0081               	movwf	1
 14640  168D  3001               	movlw	1
 14641  168E  00F0               	movwf	??_EUSART_RxDataHandler
 14642  168F  0870               	movf	??_EUSART_RxDataHandler,w
 14643  1690  07FC               	addwf	_eusartRxHead,f	;volatile
 14644                           
 14645                           ;mcc_generated_files/eusart.c: 249:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14646  1691  3008               	movlw	8
 14647  1692  027C               	subwf	_eusartRxHead,w	;volatile
 14648  1693  1803               	btfsc	3,0
 14649                           
 14650                           ;mcc_generated_files/eusart.c: 250:     {;mcc_generated_files/eusart.c: 251:         eus
      +                          artRxHead = 0;
 14651  1694  01FC               	clrf	_eusartRxHead	;volatile
 14652                           
 14653                           ;mcc_generated_files/eusart.c: 253:     eusartRxCount++;
 14654  1695  3001               	movlw	1
 14655  1696  00F0               	movwf	??_EUSART_RxDataHandler
 14656  1697  0870               	movf	??_EUSART_RxDataHandler,w
 14657  1698  0020               	movlb	0	; select bank0
 14658  1699  07E5               	addwf	_eusartRxCount,f	;volatile
 14659  169A  0008               	return
 14660  169B                     __end_of_EUSART_RxDataHandler:	
 14661  007E                     btemp	set	126	;btemp
 14662  007E                     int$flags	set	126
 14663  007E                     wtemp0	set	126


Data Sizes:
    Strings     58
    Constant    57
    Data        40
    BSS         142
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     51      79
    BANK1            80      2      59
    BANK2            80      0      75
    BANK3            80      0      32
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2604$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service$2604	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2282_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@s1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    sp__memcpy	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    S113$sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    S113$sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _vfpfcnvrt->_fputc
    _pad->_fputc
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _Button_State_Pressed->_MTOUCH_Button_Initialize
    _Button_State_NotPressed->_MTOUCH_Button_Initialize
    _myButtonPressedCallback->_LED_PROCESS
    _myButtonPressedCallback->_RELAY_PROCESS
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _DATA_PROCESS->_LED_PROCESS
    _DATA_PROCESS->_RELAY_PROCESS

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_check_message
    _update_state->_printf
    _check_message->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   46601
                                              0 BANK1      2     2      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                      _RELAY_PROCESS
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         0     0      0    6027
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    6089
                                             48 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     4      4    6027
                                             40 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     5      3    4956
                                             32 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    38      2    4521
                                             23 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 8     6      2    3015
                                             17 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  9     6      3    2771
                                              8 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     123
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     7      1    1226
                                              0 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     834
                                              4 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      66
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4468
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              3 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23594
                                             40 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14526
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14427
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13171
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5745
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5202
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    8700
                                             13 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    8601
                                              9 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1437
                                              4 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     150
                                              4 COMMON     1     0      1
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1831
                                              4 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     163
                                              4 COMMON     1     0      1
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              4 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              4 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0      66
                                              4 COMMON     3     3      0
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (1) _RELAY_PROCESS                                        3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              1 COMMON     3     3      0
                      _LED_0_SetHigh
                       _LED_0_SetLow
                      _LED_1_SetHigh
                       _LED_1_SetLow
                      _LED_2_SetHigh
                       _LED_2_SetLow
 ---------------------------------------------------------------------------------
 (7) _LED_2_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_2_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_0_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_0_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
       _LED_0_SetHigh
       _LED_0_SetLow
       _LED_1_SetHigh
       _LED_1_SetLow
       _LED_2_SetHigh
       _LED_2_SetLow
     _RELAY_PROCESS
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_PROCESS
     _LED_0_SetHigh
     _LED_0_SetLow
     _LED_1_SetHigh
     _LED_1_SetLow
     _LED_2_SetHigh
     _LED_2_SetLow
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
               _LED_0_SetHigh
               _LED_0_SetLow
               _LED_1_SetHigh
               _LED_1_SetLow
               _LED_2_SetHigh
               _LED_2_SetLow
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _MTOUCH_Button_isPressed
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _RELAY_PROCESS
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write
   _update_state
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     102       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     33      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      2      3B       8       73.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      20      12       40.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     102      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Aug 29 09:59:48 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                          _update_state 0BF7  
                                      ___bmul@product 0073                                          ?_LED_PROCESS 0070  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 14FA                             _Sensor_setCalibratAcqTime 1582  
                                         __CFG_LVP$ON 0000                                                   l303 0444  
                                                 l305 045B                                                   l257 04B2  
                                                 l522 0724                                                   l293 03A4  
                                                 l286 03A1                                                   l288 039D  
                                                 l742 07E7                                                   _GIE 005F  
                                                 _PR2 001B                                                   _abs 169B  
                              ??_EUSART_RxDataHandler 0070                                                   _pad 0B52  
                      ?_EUSART_SetFramingErrorHandler 0071                               ?_Sensor_loadADCSettings 0072  
                                     _TMR2_Initialize 150A                                          __CFG_BORV$LO 0000  
                                       DATA_PROCESS@x 0076                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0072                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0016                        Sensor_getScanGroupIndex@sensor 0073  
                   __size_of_MTOUCH_Sensor_Initialize 0015                             ?_MTOUCH_Sensor_Initialize 0070  
                                        ?_EUSART_Read 0070                                                  l1032 0C50  
                                                l1210 0ADD                                                  l1203 0AD8  
                                                ?_abs 0071                                                  l1151 0DE1  
                                                l1216 0B04                                                  l1160 0ABA  
                                                l1305 0B6A                                                  l1308 0B8A  
                                                l1309 0B96                                                  l1182 0AC9  
                                                l1175 0AC4                                                  l1168 0ABF  
                                                l1196 0AD3                                                  l1189 0ACE  
                                                l5013 09A8                                                  l4207 0AE2  
                                                l5007 09A6                                                  l5041 0607  
                                                l4321 0F29                                                  l6011 1656  
                                                l4251 0A73                                                  l4181 0D80  
                                                l5053 0621                                                  l4245 0A66  
                                                l6101 05A7                                                  l4191 0DAD  
                                                l4183 0D89                                                  l5071 064B  
                                                l5047 0613                                                  l4343 17C9  
                                                l4247 0A68                                                  l6111 05CE  
                                                l4193 0DB6                                                  l4185 0D92  
                                                l5065 063D                                                  l4433 0884  
                                                l4187 0D9B                                                  l4179 0D77  
                                                l5083 0667                                                  l5059 062F  
                                                l4347 17D1                                                  l4339 17C2  
                                                l6203 0BE3                                                  l6131 1566  
                                                l6107 05C8                                                  l6211 094A  
                                                l4189 0DA4                                                  l4197 0DBF  
                                                l5093 067A                                                  l5077 0659  
                                                l6045 0CC3                                                  l6061 06E2  
                                                l6029 08C4                                                  l3813 0A00  
                                                l6117 05D9                                                  l6213 0967  
                                                ?_pad 0028                                                  l6039 1545  
                                                l6047 0CC7                                                  l6231 165A  
                                                l3743 07DD                                                  l5089 0675  
                                                l5097 067D                                                  l4481 0EC1  
                                                l3905 0FE1                                                  l6161 0783  
                                                l6145 080E                                                  l3809 09DD  
                                                l6321 0C14                                                  l6313 0BF8  
                                                l6067 071B                                                  l6251 1593  
                                                l6171 07A4                                                  l6155 0774  
                                                l4619 166F                                                  l3923 16CF  
                                                l6323 0C1B                                                  l6315 0BFF  
                                                l6331 0C30                                                  l4485 0ED5  
                                                l5621 15B3                                                  l6077 0D37  
                                                l3773 08F9                                                  l3837 15D1  
                                                l6165 0794                                                  l6237 1663  
                                                l3757 07FC                                                  l3925 16DB  
                                                l6325 0C22                                                  l6317 0C06  
                                                l4479 0EB9                                                  l3951 16FB  
                                                l3767 08E8                                                  l3847 155D  
                                                l6343 0848                                                  l6327 0C29  
                                                l6319 0C0D                                                  l5625 15B9  
                                                l3769 08F7                                                  l3873 050C  
                                                l5713 036B                                                  l6177 07B6  
                                                l6273 1723                                                  l5617 17DE  
                                                l6521 0199                                                  l3779 090A  
                                                l3859 04AE                                                  l5811 0471  
                                                l5803 045F                                                  l5723 037E  
                                                l5651 0300                                                  l6179 07D9  
                                                l6339 0846                                                  l3877 051F  
                                                l5661 031E                                                  l6349 0859  
                                                l6605 02B9                                                  l6525 01A1  
                                                l6453 0098                                                  l3879 0532  
                                                l5823 0497                                                  l5807 0468  
                                                l5663 0333                                                  l5911 0E42  
                                                l6615 02CE                                                  l6543 01CD  
                                                l6471 00C4                                                  l3897 0FAB  
                                                l5817 0485                                                  l5681 0326  
                                                l5905 0E16                                                  l6801 0C36  
                                                l6529 01A6                                                  l6811 0685  
                                                l3899 0FAF                                                  l5771 0421  
                                                l5763 0407                                                  l5747 03A7  
                                                l5739 0398                                                  l5659 0317  
                                                l5907 0E29                                                  l4963 09A4  
                                                l6803 0861                                                  l6459 00A0  
                                                l6813 0AEA                                                  l5941 0B41  
                                                l5693 0335                                                  l5669 0320  
                                                l6805 09B0                                                  l6815 0DC7  
                                                l4879 178F                                                  l5847 16C7  
                                                l5775 043B                                                  l5759 03EC  
                                                l6807 07C3                                                  l5855 0B60  
                                                l5697 033F                                                  l6809 07C8  
                                                l5865 0B6C                                                  l6593 0298  
                                                l6585 027C                                                  l6497 012F  
                                                l5971 0C5F                                                  l5859 0B68  
                                                l5947 089D                                                  l6587 0280  
                                                l5949 08A3                                                  l6597 02A7  
                                                l5991 0C92                                                  l5983 0C7A  
                                                l5897 0E12                                                  l5889 0DFF  
                                                l5977 0C67                                                  l5995 0CA2  
                                                l5987 0C82                                                  l5999 0CAB  
                                                STR_1 1800                                                  STR_2 1809  
                                                STR_3 1814                                                  STR_4 1819  
                                                STR_5 181E                                                  STR_6 1823  
                                                STR_7 1828                                                  STR_8 182D  
                                                STR_9 1832                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u2305 0547  
                                                u2235 09FE                                                  u2325 0F8E  
                                                u2430 16F9                                                  u2335 0F98  
                                                u3240 0EA0                                                  u2425 16EA  
                                                u3235 0E68                                                  u2195 16A4  
                                                u2355 0FD2                                                  u3245 0E9C  
                                                u3455 1672                                                  u5095 0BA7  
                                                u4725 0E30                                                  u2975 0EF1  
                                                u5607 0109                                                  u2985 0F37  
                                                u4745 0A0D                                                  u4665 0B76  
                                                u5617 0116                                                  u4755 0936  
                                                u5707 0218                                                  u5627 013E  
                                                u5717 0225                                                  u5637 014B  
                                                u4935 0CF0                                                  u5727 0232  
                                                u5647 0158                                                  u5567 00D5  
                                                u5737 023F                                                  u5657 0165  
                                                u5577 00E2                                                  u5747 024C  
                                                u5667 0172                                                  u5587 00EF  
                                      ??_LED_0_SetLow 0071                                                  u4965 06F8  
                                                u5757 0259                                                  u5677 017F  
                                                u5597 00FC                                                  u5687 01FE  
                                                u5697 020B                            Button_State_Pressed@button 0024  
                                                _TMR2 001A                                 __end_of_check_message 086A  
                                                _WPUA 020C                                                  _WPUB 020D  
                   __size_of_Sensor_Acq_ExecutePacket 01CA                                        ??_LED_1_SetLow 0071  
                            _Sensor_getScanGroupIndex 08E6                             ?_Sensor_Acq_ExecutePacket 007B  
                                        __CFG_WRT$OFF 0000                                        ??_LED_2_SetLow 0071  
                                  _MTOUCH_needReburst 0002                                                  abs@a 0071  
                                                _dbuf 01A0                                                  _ctoa 0892  
                                                _main 006D                  __size_of_MTOUCH_Button_InitializeAll 001C  
                                                _prec 00BE                                                  _nout 00BC  
                                                pad@i 002C                                                  pad@p 0029  
                                                fsr0h 0005                                                  fsr1h 0007  
                                                indf0 0000                                                  fsr0l 0004  
                                                indf1 0001                                                  fsr1l 0006  
                                                pad@w 002E                  __size_of_MTOUCH_Sensor_InitializeAll 000E  
                                                btemp 007E                                                  start 0023  
                                   ___bmul@multiplier 0074                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                        __end_of_Sensor_autoCalibration 1000  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1814          Sensor_Scanfrequency_Evaluation@frequency_hop 180F  
                                       __CFG_LPBOR$ON 0000                              _myButtonReleasedCallback 176F  
                            ?_MTOUCH_Service_Mainloop 0070                      __size_of_MTOUCH_Button_isPressed 001B  
                       __size_of_Button_State_Pressed 0066                                                 ??_abs 0073  
                                               ??_pad 002B                           ?_Button_Baseline_Initialize 0070  
               Sensor_postAcquisitionProcess@adcIndex 0078                         ??_MTOUCH_Sensor_RawSample_Get 0077  
                       Sensor_RawSample_Update@sensor 0077                         myButtonPressedCallback@button 0074  
                           __size_of_Sensor_isEnabled 0011                                         ?_EUSART_Write 0070  
                      __size_of_OSCILLATOR_Initialize 0006                         __end_of_OSCILLATOR_Initialize 14DE  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 0036                   __end_of_Sensor_isCalibratingAcqTime 151B  
                         _Sensor_isCalibratingAcqTime 1512                                                 ?_ctoa 0031  
                                               ?_main 0070                                                 STR_10 1837  
                                               STR_11 1840                                         __CFG_WDTE$OFF 0000  
                      __end_of_Sensor_loadADCSettings 0554                                                 _T2CON 001C  
                             __size_of_Button_Service 0055                                       ??_LED_0_SetHigh 0071  
                                               i1l840 0015                                                 i1l754 176D  
                                               i1l845 0021                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 0037  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                       ??_LED_1_SetHigh 0071  
                                               _TXREG 019A                                                 _TXSTA 019E  
                     __size_of_Button_DefaultCallback 0001                                       ??_LED_2_SetHigh 0071  
                                ??_MTOUCH_needReburst 0071                       __size_of_Sensor_DefaultCallback 0001  
                                               _blink 005F                                                 _flags 00C0  
                             __size_of_Sensor_Service 0095                 __end_of_MTOUCH_Sensor_Scan_Initialize 15B1  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0010                         _MTOUCH_Sensor_Scan_Initialize 15A1  
                                      _WDT_Initialize 14A0                               Sensor_setSampled@sensor 0071  
                                               _fputc 09D4                                                 _fputs 17DA  
                                        LED_PROCESS@x 0073                                                 pad@fp 0030  
                                               _width 0057                                                 ctoa@c 0031  
                                               _putch 14A9                                                 ctoa@w 0034  
                    __size_of_Button_State_NotPressed 00A4                                                 pclath 000A  
                                _Sensor_Sampled_Reset 1502                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 1478  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0008  
                              Sensor_isEnabled@sensor 0072                                       __initialization 0025  
                                        __end_of_ctoa 08BB                                          __end_of_main 02DA  
                                _Sensor_setCalibrated 1549                                 __size_of_DATA_PROCESS 00A7  
                                      ??_EUSART_Write 0071                               __end_of_TMR2_Initialize 1512  
                         ?_INTERRUPT_InterruptManager 0070                        ??_EUSART_SetRxInterruptHandler 0073  
                    __end_of_MTOUCH_Button_Initialize 0A3F                                                ??_ctoa 0033  
                                              ??_main 00D9                               _MTOUCH_Sensor_Calibrate 15E4  
                           Sensor_Service@sensor_adc1 0044                             Sensor_Service@sensor_adc2 0045  
                             ??_Button_Reading_Update 007C                  MTOUCH_Sensor_Sampled_ResetAll@sensor 0073  
                            ?_Button_Deviation_Update 0070                                __end_of_WDT_Initialize 14A4  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 0077  
           __end_of_EUSART_DefaultFramingErrorHandler 1471            __size_of_EUSART_DefaultFramingErrorHandler 0001  
                 ??_EUSART_DefaultFramingErrorHandler 0070                    ?_EUSART_DefaultFramingErrorHandler 0070  
                   _EUSART_DefaultFramingErrorHandler 1470                            _EUSART_OverrunErrorHandler 00C6  
                __size_of_MTOUCH_Sensor_RawSample_Get 0018                                                ?_fputc 0074  
                                              ?_fputs 0020                                                _APFCON 011D  
                                              _ANSELA 018C                                                ?_putch 0070  
                                              _ANSELB 018D                                                _ANSELC 018E  
                          __end_of_EUSART_is_rx_ready 1478                                                _BORCON 0116  
                                              i1l4925 0991                                                i1l4919 0983  
                                              i1l4929 099F                                 ?_Sensor_Sampled_Reset 0070  
                                              _OSCCON 0099                                                _SPBRGH 019C  
                                              _SPBRGL 019B                                                _WDTCON 0097  
                   MTOUCH_Button_InitializeAll@button 0020                                          _DATA_PROCESS 05FC  
                      ??_Button_Reading_Update_Helper 0079                                _Button_DefaultCallback 1471  
                     __end_of_MTOUCH_Service_Mainloop 1734                                        __CFG_PWRTE$OFF 0000  
                                 _Sensor_isCalibrated 151B                                _Sensor_DefaultCallback 07FF  
                                        vfprintf@cfmt 0046                                         _packet_sample 0053  
                                              ___bmul 15B1                                 ?_Sensor_setCalibrated 0070  
                        Sensor_DefaultCallback@sensor 0071                                        __CFG_STVREN$ON 0000  
                    __size_of_myButtonPressedCallback 0026                                   _EUSART_Transmit_ISR 1751  
                                              _memcpy 08BB                                                _rxData 0063  
                                __end_of_LED_0_SetLow 1490                      __end_of_MTOUCH_Button_ServiceAll 15A1  
                                __end_of_LED_1_SetLow 1498                                                _printf 15D3  
                                              pad@buf 0028                                  __size_of_LED_PROCESS 006D  
                                              ctoa@fp 0036                          Sensor_autoCalibration@sensor 007A  
                                __end_of_LED_2_SetLow 14A0                                                _strlen 16CA  
                                              fputc@c 0074                                                fputs@c 0024  
                                              fputs@i 0025                                                fputs@s 0027  
                             _MTOUCH_Sensor_SampleAll 1658                          Button_DefaultCallback@button 0074  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 0CAD  
                              __size_of_RELAY_PROCESS 004D                               ?_Button_Baseline_Update 0070  
                                    __end_of_vfprintf 0970                   Sensor_postAcquisitionProcess@sensor 0079  
                             __end_of_TMR2_StartTimer 147B                    __size_of_Sensor_setCalibratAcqTime 000F  
            __end_of_MTOUCH_Button_SetPressedCallback 14BA             __size_of_MTOUCH_Button_SetPressedCallback 0006  
                  ??_MTOUCH_Button_SetPressedCallback 0073                     ?_MTOUCH_Button_SetPressedCallback 0071  
                    _MTOUCH_Button_SetPressedCallback 14B4                              __size_of_Sensor_isActive 000E  
                                ?_EUSART_Transmit_ISR 0070                       MTOUCH_Sensor_RawSample_Get@name 0078  
                 Sensor_getScanGroupIndex@sensorGroup 0074                                  __size_of_EUSART_Read 0025  
                                   _SYSTEM_Initialize 1608                               __end_of__initialization 0069  
                 __size_of_Button_Baseline_Initialize 002E                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0075                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00CF                            __end_of_Button_Tick_helper 0843  
                                   _update_state_flag 005D                         MTOUCH_Sensor_Calibrate@sensor 0076  
                __end_of_EUSART_SetTxInterruptHandler 14D8                 __size_of_EUSART_SetTxInterruptHandler 0006  
                        _EUSART_SetTxInterruptHandler 14D2           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024  
                                 ___bmul@multiplicand 0071                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 16E2                                          __pidataBANK0 1481  
                                        __pidataBANK1 1525                                          __pidataBANK2 16FD  
         __end_of_MTOUCH_Button_SetNotPressedCallback 14B4          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0073                  ?_MTOUCH_Button_SetNotPressedCallback 0071  
                 _MTOUCH_Button_SetNotPressedCallback 14AE                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 1684                                         __end_of_fputc 0A09  
                                       __end_of_fputs 1800                      __end_of_MTOUCH_Sensor_Initialize 1642  
                                       __end_of_putch 14AE                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 15C2                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0EDF                              Sensor_setInactive@sensor 0071  
                                      _Button_Service 0BA2                      __end_of_Sensor_Acq_ExecutePacket 04A4  
                          ?_Button_State_Initializing 0024                                  Button_Service@button 002C  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 00A0  
                      __end_of_Button_Baseline_Update 0F6E                   Sensor_Acq_ExecutePacket@sensor_adc1 002D  
                 Sensor_Acq_ExecutePacket@sensor_adc2 007B                              _MTOUCH_Button_Initialize 0A09  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 0747  
                             _Button_State_NotPressed 06A3                         __size_of_MTOUCH_Sensor_Enable 0012  
                                  _Sensor_setInactive 14F2                                     _sensor_scan_group 183C  
                                             ??_fputc 0077                             __end_of_SYSTEM_Initialize 161A  
                                   _lowpowerActivated 006A                                               ??_fputs 0021  
                               ??_EUSART_Transmit_ISR 0070                      MTOUCH_Sensor_isCalibrated@sensor 0076  
                              ??_Sensor_Sampled_Reset 0071                                               ??_putch 0073  
                                          __pbssBANK0 0053                                            __pbssBANK1 00A0  
                                          __pbssBANK2 0120                                            __pbssBANK3 01A0  
                                          _check_data 09A2                                  __end_of_EUSART_Write 07FF  
                             _TMR2_LoadPeriodRegister 14A4                            ??_myButtonReleasedCallback 0075  
                        Sensor_loadADCSettings@sensor 0079                                   ?_Sensor_setInactive 0070  
                                    _Sensor_setActive 14EA                           __size_of_EUSART_Receive_ISR 0032  
                          __end_of_mtouch_button_init 1030                                     _last_touch_status 0059  
         Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025                                ??_Sensor_setCalibrated 0071  
                                          __pmaintext 006D                                         _RELAY_PROCESS 0AB8  
                                             ?___bmul 0071                         ?_EUSART_SetTxInterruptHandler 0071  
                    _EUSART_TxDefaultInterruptHandler 00CC                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                      MTOUCH_Sensor_wasSampled@sensor 0076                                            __pintentry 0004  
                              __end_of_Button_Service 0BF7                                               ?_memcpy 0071  
                                             _BAUDCON 019F                                             _AD1ACQCON 0717  
                 __end_of_MTOUCH_Button_InitializeAll 081C                           _MTOUCH_Button_InitializeAll 0800  
                                           _AD2ACQCON 0797                          ??_EUSART_DefaultErrorHandler 0071  
                 __end_of_MTOUCH_Sensor_InitializeAll 1573                           _MTOUCH_Sensor_InitializeAll 1565  
                           ??_MTOUCH_Sensor_SampleAll 0046                                               ?_printf 0048  
                     __end_of_Sensor_RawSample_Update 0892                                  ??_Sensor_setInactive 0071  
                                             ?_strlen 0071                     __size_of_MTOUCH_Sensor_wasSampled 000F  
                           ?_MTOUCH_Sensor_wasSampled 0070                                         _eusartRxCount 0065  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0071  
                                           _AD2PRECON 0796                     __end_of_Button_State_Initializing 0D0F  
                              __end_of_Sensor_Service 07DC                               Sensor_Service@scanGroup 0042  
                            _MTOUCH_Button_ServiceAll 1591                             __end_of_sensor_scan_group 1840  
                                  __size_of_vfpfcnvrt 00A8                         __size_of_EUSART_RxDataHandler 0017  
                    __size_of_MTOUCH_Service_Mainloop 001C                          __end_of_Button_State_Pressed 0D75  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0073  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 0079  
                     Sensor_setCalibratAcqTime@sensor 0071                                  __size_of_MTOUCH_Tick 0003  
                 Sensor_loadADCSettings@addressOffset 0078                  __size_of_Sensor_isCalibratingAcqTime 0009  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021                             ??_MTOUCH_Button_isPressed 0071  
                                          _count_conf 00C2                                     ??_Sensor_isActive 0071  
                 __size_of_EUSART_DefaultErrorHandler 0003                                        ?_RELAY_PROCESS 0070  
               __end_of_Sensor_postAcquisitionProcess 0A77                __size_of_Sensor_postAcquisitionProcess 0038  
                       _Sensor_postAcquisitionProcess 0A3F                                 __size_of_LED_0_SetLow 0004  
                               __size_of_LED_1_SetLow 0004                               _myButtonPressedCallback 17B4  
                             Sensor_Acquisition@retry 003D                                       __size_of___bmul 0011  
                                         _AD1CON0bits 0711                                 __size_of_LED_2_SetLow 0004  
                      MTOUCH_Button_Initialize@button 007A                                           _AD2CON0bits 0791  
                                           ?_vfprintf 0040                                       ?_Button_Service 0070  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 0031            Sensor_Scanfrequency_Evaluation@sensor_adc2 002E  
                                     __size_of_memcpy 002B                                               __ptext1 0BF7  
                                             __ptext2 0843                                               __ptext3 15D3  
                                             __ptext4 0941                                               __ptext5 0554  
                                             __ptext6 0892                                               __ptext7 0B52  
                                             __ptext8 16CA                                               __ptext9 17DA  
                              __size_of_check_message 0027                                       __size_of_printf 0011  
                         Button_Reading_Update@button 0020                                       __size_of_strlen 0018  
                            _MTOUCH_Sensor_Initialize 162D                                 _OSCILLATOR_Initialize 14D8  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 0025  
                                             _prcData 0062                                       ?_Sensor_Service 0070  
                               __end_of_LED_0_SetHigh 148C                              ??_PIN_MANAGER_Initialize 0071  
                      __size_of_Button_Reading_Update 000E                           __size_of_MTOUCH_needReburst 0002  
                               __end_of_LED_1_SetHigh 1494                         __end_of_Button_Reading_Update 1549  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 02DA  
                                    _callback_sampled 00D7                                 __end_of_LED_2_SetHigh 149C  
                           ??_TMR2_LoadPeriodRegister 0071                       Sensor_RawSample_Update@adcIndex 0076  
                          __size_of_SYSTEM_Initialize 0012                                               clrloop0 14DF  
                                    _callback_pressed 00D5                        MTOUCH_Sensor_Initialize@sensor 0078  
                                end_of_initialization 0069                                           ?_check_data 0070  
                             ?_Button_DefaultCallback 0074                 __end_of_EUSART_SetOverrunErrorHandler 14CC  
              __size_of_EUSART_SetOverrunErrorHandler 0006                         _EUSART_SetOverrunErrorHandler 14C6  
                                             memcpy@d 007A                                               memcpy@n 0073  
                                             memcpy@s 0077                                               fputc@fp 0076  
                                        _LED_0_SetLow 148C                                               init_ram 14E4  
                                             fputs@fp 0020                                          _LED_1_SetLow 1494  
                                             initloop 14E5                                          _LED_2_SetLow 149C  
                             ?_Sensor_DefaultCallback 0071                         Sensor_Acquisition@sensor_adc1 003E  
                       Sensor_Acquisition@sensor_adc2 003B                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 0A77                          ??_MTOUCH_Sensor_isCalibrated 0075  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 05FC  
                 __end_of_MTOUCH_Sensor_RawSample_Get 16CA                           _MTOUCH_Sensor_RawSample_Get 16B2  
                                           _RCSTAbits 019D                                    _EUSART_is_rx_ready 1475  
                                          ??_vfprintf 0043                                               strlen@a 0074  
                                             strlen@s 0075                                   ??_EUSART_Initialize 0073  
                                    ??_WDT_Initialize 0071                        ??_EUSART_SetTxInterruptHandler 0073  
                                 ?_EUSART_is_rx_ready 0070                                Sensor_setActive@sensor 0071  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 0034  
                       Button_Deviation_Update@button 0020                  Sensor_Acq_ExecutePacket@AD1CON2_temp 0022  
                               __size_of_EUSART_Write 0023              MTOUCH_Button_SetPressedCallback@callback 0071  
                          MTOUCH_Sensor_Enable@sensor 0076                  Sensor_Acq_ExecutePacket@AD2CON2_temp 0023  
                                 _callback_notPressed 006C                   __size_of_MTOUCH_Sensor_isCalibrated 0016  
                      __end_of_Button_DefaultCallback 1472                       __size_of_EUSART_SetErrorHandler 0006  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 0032                                    _sensor_globalFlags 0069  
                            __end_of_Sensor_isEnabled 15D3                            Sensor_setCalibrated@sensor 0071  
                      __end_of_Sensor_DefaultCallback 0800                      __end_of_myButtonReleasedCallback 178F  
                           __end_of_EUSART_Initialize 0AB8                                  ??_EUSART_is_rx_ready 0071  
                                       _check_message 0843                            _Sensor_loadADCSettings$562 0076  
                            ??_Sensor_autoCalibration 0075                                             _TXSTAbits 019E  
                                       _check_request 0060                                       ??_RELAY_PROCESS 0071  
                           ??_myButtonPressedCallback 0075                      __size_of_Sensor_RawSample_Update 0028  
                                  _Sensor_Acquisition 0C51                              ??_Sensor_loadADCSettings 0073  
                                       ?_update_state 0070                                         ??_LED_PROCESS 0071  
                                _Button_State_Pressed 0D0F                                        __end_of___bmul 15C2  
                  __end_of_EUSART_DefaultErrorHandler 1475                            _EUSART_DefaultErrorHandler 1472  
                                 ?_Sensor_Acquisition 003B                                           vfpfcnvrt@ap 0038  
                                         vfpfcnvrt@fp 003F                            ??_MTOUCH_Button_Initialize 0077  
         MTOUCH_Button_SetNotPressedCallback@callback 0071                       ??_MTOUCH_Sensor_Scan_Initialize 0071  
                      ?_Sensor_postAcquisitionProcess 0070                                          _EUSART_Write 07DC  
                                 __size_of_check_data 0032                                    _Button_Tick_helper 081C  
                                      __end_of_memcpy 08E6                                ?_OSCILLATOR_Initialize 0070  
                                 MTOUCH_Button_Tick@i 0075                              __end_of_Sensor_setActive 14F2  
                    TMR2_LoadPeriodRegister@periodVal 0071                                        __end_of_printf 15E4  
                         ??_Button_State_Initializing 0025                                        __end_of_strlen 16E2  
                                 start_initialization 0025                               _MTOUCH_Service_Mainloop 1718  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 166E  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 16B2  
                                         __end_of_pad 0BA2                                        _TMR2_StopTimer 147B  
                                       ??_EUSART_Read 0071          EUSART_SetRxInterruptHandler@interruptHandler 0071  
        EUSART_SetTxInterruptHandler@interruptHandler 0071                                           putch@txData 0073  
                                ??_Sensor_Acquisition 003C                                        ?_check_message 0070  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 0024  
                      Sensor_autoCalibration@adcIndex 0079                        ?_EUSART_SetOverrunErrorHandler 0071  
                    __end_of_MTOUCH_Sensor_wasSampled 1582                                  ??_Button_Tick_helper 0071  
                        __end_of_MTOUCH_Sensor_Enable 1608                                           vfprintf@fmt 0040  
                                        _packet_noise 005B                                        ??_update_state 007C  
                          _EUSART_FramingErrorHandler 00C8                                              ??___bmul 0072  
                               ?_Button_State_Pressed 0024                                _EUSART_SetErrorHandler 14BA  
                          ??_MTOUCH_Button_ServiceAll 002D                                           __pdataBANK0 006C  
                                         __pdataBANK1 00CF                                           __pdataBANK2 0150  
                                      check_message@x 0052                                              ??_memcpy 0075  
                         __end_of_Sensor_isCalibrated 1525                          ??_Button_Baseline_Initialize 0020  
                                       _sample_period 006E                                  ??_MTOUCH_Button_Tick 0074  
                                  _mtouch_button_init 1000                            Sensor_Sampled_Reset@sensor 0071  
                                            ??_printf 004C                                              ??_strlen 0073  
                        ?_Sensor_isCalibratingAcqTime 0070                       __end_of_myButtonPressedCallback 17DA  
                                 __end_of_LED_PROCESS 0DE2                           __end_of_EUSART_Transmit_ISR 176F  
                              __end_of_TMR2_StopTimer 147E                                           __pbssCOMMON 007C  
                                           ___latbits 0002                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00D9                              __size_of_TMR2_Initialize 0008  
                                     _Sensor_isActive 1557                        MTOUCH_Button_ServiceAll@button 002E  
                                 Sensor_Service@error 0043                            __end_of_EUSART_Receive_ISR 09A2  
                       __size_of_Sensor_Sampled_Reset 0008                            __size_of_EUSART_Initialize 0041  
                             _Button_Deviation_Update 0E58                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 00CA                                   __end_of_EUSART_Read 17B4  
                           _Button_State_Initializing 0CAD                    __end_of_MTOUCH_Sensor_isCalibrated 1658  
                          _MTOUCH_Sensor_isCalibrated 1642                                             __pnvBANK1 00C4  
                     __size_of_Sensor_autoCalibration 0092                     __size_of_Sensor_getScanGroupIndex 002D  
                                   _Sensor_setSampled 14FA                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 169B                                _PIN_MANAGER_Initialize 1734  
                                    ??_Button_Service 0029                              ?_MTOUCH_Sensor_Calibrate 0070  
                                EUSART_Read@readValue 0072                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 007B                            ??_MTOUCH_Sensor_Initialize 0077  
                       __size_of_Sensor_setCalibrated 000E                                             __ptext100 1470  
                                           __ptext101 1472                                             __ptext102 1684  
                     __size_of_Sensor_loadADCSettings 00B0                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 007C  
                                            _AAD2RES0 079A                                          _eusartTxHead 0068  
                                        _eusartRxTail 0066                                          _eusartTxTail 0067  
                                    ??_Sensor_Service 003F                            ??_Sensor_Acq_ExecutePacket 0020  
                        ??_INTERRUPT_InterruptManager 0071                                   ??_Sensor_setSampled 0071  
                   __size_of_myButtonReleasedCallback 0020                                           _blink_count 005E  
                           ?_myButtonReleasedCallback 0074                             ??_MTOUCH_Service_Mainloop 0048  
                                   __size_of_vfprintf 002F                                              _ADCOMCON 0712  
                             _eusartTxBufferRemaining 00CE                           __size_of_Sensor_setInactive 0008  
                      Sensor_Acq_ExecutePacket@last_a 0028                        Sensor_Acq_ExecutePacket@last_b 002A  
                                     ?_TMR2_StopTimer 0070                         ??_Sensor_isCalibratingAcqTime 0071  
                                       ??_MTOUCH_Tick 0076                                       ??_check_message 0050  
                                      __size_of_fputc 0035                                        __size_of_fputs 0026  
                                      __size_of_putch 0005                                          ??_check_data 0071  
                                      _eusartRxBuffer 00A8                                        _eusartTxBuffer 00B0  
                           __end_of_Sensor_setSampled 1502                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0071                                              _LATBbits 010D  
                                            _LATCbits 010E                                         ?_DATA_PROCESS 0070  
                             _Sensor_RawSample_Update 086A                     __end_of_Sensor_setCalibratAcqTime 1591  
                                           clear_ram0 14DE                                              _PIE1bits 0091  
                                   _eusartRxLastError 0064                              __size_of_TMR2_StartTimer 0003  
                 __size_of_INTERRUPT_InterruptManager 001F                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0073                Sensor_Acq_ExecutePacket@packet_counter 002C  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0025  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 162D               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013  
                      _MTOUCH_Sensor_Sampled_ResetAll 161A                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 1488            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 1484                    Sensor_Acq_ExecutePacket@ADxIF_flag 0026  
                                         _LED_PROCESS 0D75                              _MTOUCH_Sensor_wasSampled 1573  
                                  _mtouch_time_toScan 006B                                             _vfpfcnvrt 0554  
                            ??_Button_Baseline_Update 0071                                    __end_of_check_data 09D4  
                             __end_of_Sensor_isActive 1565                                _Sensor_autoCalibration 0F6E  
                          __end_of_MTOUCH_needReburst 0004                        myButtonReleasedCallback@button 0074  
                              _Sensor_loadADCSettings 04A4                                  _MTOUCH_Sensor_Enable 15F6  
                                         _EUSART_Read 178F                                  __end_of_update_state 0C51  
                                          vfpfcnvrt@c 003E                              Button_Tick_helper@button 0073  
                           ??_Button_Deviation_Update 0071                                 _Button_Reading_Update 153B  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                      ??_DATA_PROCESS 0074                                     ??_TMR2_Initialize 0071  
                                 __end_of_MTOUCH_Tick 1481                                     _MTOUCH_Initialize 152F  
                     __end_of_MTOUCH_Sensor_Calibrate 15F6                                    ??_Sensor_isEnabled 0071  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0076  
                                           memcpy@tmp 0076                                            vfprintf@ap 0042  
                                          vfprintf@fp 0045                                __size_of_LED_0_SetHigh 0004  
                                          _APFCONbits 011D                                __size_of_LED_1_SetHigh 0004  
                             ??_OSCILLATOR_Initialize 0071                    __end_of_Button_Baseline_Initialize 0941  
                          _Button_Baseline_Initialize 0913                                   _EUSART_ErrorHandler 00C4  
                              __size_of_LED_2_SetHigh 0004                                   ??_MTOUCH_Initialize 007C  
                         ?_EUSART_DefaultErrorHandler 0070                                            ?_vfpfcnvrt 0037  
                            ?_Button_State_NotPressed 0024                                           check_data@x 0073  
                                  Button_Service@name 002B                                     ?_Sensor_setActive 0070  
                            ?_TMR2_LoadPeriodRegister 0070                                 Sensor_isActive@sensor 0071  
                Sensor_Scanfrequency_Evaluation@retry 0035                                    ??_Sensor_setActive 0071  
                                _EUSART_RxDataHandler 1684                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 09D4                                              __ptext11 14A9  
                                            __ptext20 1565                                              __ptext12 07DC  
                                            __ptext21 162D                                              __ptext13 09A2  
                                            __ptext30 14BA                                              __ptext22 15F6  
                                            __ptext14 1608                                              __ptext31 1718  
                                            __ptext23 0800                                              __ptext15 14A0  
                                            __ptext40 14FA                                              __ptext32 0002  
                                            __ptext24 08BB                                              __ptext16 150A  
                                            __ptext41 086A                                              __ptext33 147E  
                                            __ptext25 0A77                                              __ptext17 1734  
                                            __ptext50 1478                                              __ptext42 07FF  
                                            __ptext34 166E                                              __ptext26 14D2  
                                            __ptext18 14D8                                              __ptext51 14A4  
                                            __ptext43 0C51                                              __ptext35 081C  
                                            __ptext27 14CC                                              __ptext19 152F  
                                            __ptext60 1512                                              __ptext52 04A4  
                                            __ptext44 0A3F                                              __ptext36 161A  
                                            __ptext28 14C6                                              __ptext61 08E6  
                                            __ptext53 151B                                              __ptext45 14F2  
                                            __ptext37 1502                                              __ptext29 14C0  
                                            __ptext70 17B4                                              __ptext62 15A1  
                                            __ptext54 15C2                                              __ptext46 14EA  
                                            __ptext38 1658                                              __ptext71 1471  
                                            __ptext63 1591                                              __ptext55 1557  
                                            __ptext47 0DE2                                              __ptext39 0747  
                                            __ptext80 16B2                                              __ptext72 176F  
                                            __ptext64 0BA2                                              __ptext56 0F6E  
                                            __ptext48 02DA                                              __ptext81 15B1  
                                            __ptext73 16E2                                              __ptext65 1573  
                                            __ptext57 169B                                              __ptext49 147B  
                                            __ptext90 149C                                              __ptext82 0E58  
                                            __ptext74 0A09                                              __ptext66 1642  
                                            __ptext58 1549                                              __ptext91 1498  
                                            __ptext83 14B4                                              __ptext75 15E4  
                                            __ptext67 06A3                                              __ptext59 1582  
                                            __ptext92 1494                                              __ptext84 14AE  
                                            __ptext76 0EDF                                              __ptext68 0CAD  
                                            __ptext93 1490                                              __ptext85 1475  
                                            __ptext77 0913                                              __ptext69 0D0F  
                                            __ptext94 148C                                              __ptext86 178F  
                                            __ptext78 153B                                              __ptext95 1488  
                                            __ptext87 05FC                                              __ptext79 0B05  
                                            __ptext88 0AB8                                              __ptext97 1751  
                                            __ptext89 0D75                                              __ptext98 0970  
                                            __ptext99 1484                             __end_of_MTOUCH_Initialize 153B  
                           ??_Sensor_RawSample_Update 0075                            __size_of_Sensor_setSampled 0008  
                         __size_of_EUSART_is_rx_ready 0003                                         __size_of_ctoa 0029  
                                       __size_of_main 026D                       __end_of_MTOUCH_Sensor_SampleAll 166E  
                    Sensor_Scanfrequency_Evaluation@i 003A                               ?_EUSART_SetErrorHandler 0071  
                               __end_of_RELAY_PROCESS 0B05         EUSART_SetOverrunErrorHandler@interruptHandler 0071  
                                            int$flags 007E                                              _vfprintf 0941  
                  __size_of_Button_State_Initializing 0062                                     ??_TMR2_StartTimer 0071  
                  __end_of_INTERRUPT_InterruptManager 0023                            _INTERRUPT_InterruptManager 0004  
                                           printf@fmt 0048                 __end_of_EUSART_SetFramingErrorHandler 14C6  
              __size_of_EUSART_SetFramingErrorHandler 0006                         _EUSART_SetFramingErrorHandler 14C0  
                                      RELAY_PROCESS@x 0073                       __size_of_Button_Baseline_Update 008F  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 0047  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ?_Sensor_isActive 0070  
                                       _mtouch_button 0120                                            _INTCONbits 000B  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 0150  
                                            memcpy@d1 0079                                              memcpy@s1 0071  
                     __end_of_MTOUCH_Button_isPressed 16FD                                         _LED_0_SetHigh 1488  
                    __end_of_Sensor_getScanGroupIndex 0913                                     __CFG_BOREN$NSLEEP 0000  
                                      __pstringtext10 1828                                        __pstringtext11 182D  
                                      __pstringtext12 1832                                        __pstringtext13 1837  
                                      __pstringtext14 1840                                        __pstringtext15 0000  
                                         _MTOUCH_Tick 147E                                ?_Button_Reading_Update 0070  
                                       _LED_1_SetHigh 1490                      Button_Deviation_Update@deviation 0021  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0079  
                                       _LED_2_SetHigh 1498                     __size_of_MTOUCH_Button_Initialize 0036  
                                            intlevel1 0000                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 005C                              ?_myButtonPressedCallback 0074  
             __end_of_Sensor_Scanfrequency_Evaluation 0E58              __size_of_Sensor_Scanfrequency_Evaluation 0076  
                   ??_Sensor_Scanfrequency_Evaluation 002F                      ?_Sensor_Scanfrequency_Evaluation 002E  
                     _Sensor_Scanfrequency_Evaluation 0DE2                               ?_PIN_MANAGER_Initialize 0070  
                                       _timeout_count 00B8                           ??_Sensor_setCalibratAcqTime 0071  
                      __end_of_EUSART_SetErrorHandler 14C0                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                  __end_of_EUSART_SetRxInterruptHandler 14D2  
               __size_of_EUSART_SetRxInterruptHandler 0006                          _EUSART_SetRxInterruptHandler 14CC  
                                       _config_status 0061                           __size_of_Button_Tick_helper 0027  
                     __end_of_Button_State_NotPressed 0747                                              printf@ap 004F  
                                  _EUSART_Receive_ISR 0970         EUSART_SetFramingErrorHandler@interruptHandler 0071  
                        __end_of_Sensor_Sampled_Reset 150A                                           ??_vfpfcnvrt 0039  
                                    ??_TMR2_StopTimer 0071                       __end_of_TMR2_LoadPeriodRegister 14A9  
                         __size_of_MTOUCH_Button_Tick 0016                                         __pstringtext1 180F  
                                       __pstringtext2 183C                                         __pstringtext3 1000  
                                       __pstringtext4 1800                                         __pstringtext5 1809  
                                       __pstringtext6 1814                                         __pstringtext7 1819  
                                       __pstringtext8 181E                                         __pstringtext9 1823  
                                __end_of_DATA_PROCESS 06A3                                   ?_EUSART_Receive_ISR 0070  
                               __size_of_update_state 005A                         ??_MTOUCH_Button_InitializeAll 007B  
                            ??_Button_DefaultCallback 0075                         ??_MTOUCH_Sensor_InitializeAll 0079  
                Sensor_Acq_ExecutePacket@activeSensor 0027                      __size_of_MTOUCH_Sensor_Calibrate 0012  
                              ??_MTOUCH_Sensor_Enable 0075                                        ?_LED_0_SetHigh 0070  
                   Sensor_isCalibratingAcqTime@sensor 0071                          __size_of_Sensor_isCalibrated 000A  
                            ??_Sensor_DefaultCallback 0072                          __end_of_Sensor_setCalibrated 1557  
                                      ?_LED_1_SetHigh 0070                  __end_of_Button_Reading_Update_Helper 0B52  
               __size_of_Button_Reading_Update_Helper 004D                          _Button_Reading_Update_Helper 0B05  
                                      ?_LED_2_SetHigh 0070                     __size_of_MTOUCH_Button_ServiceAll 0010  
                           ?_MTOUCH_Button_ServiceAll 0070                         Button_State_NotPressed@button 0024  
                                  EUSART_Write@txData 0072                          __size_of_EUSART_Transmit_ISR 001E  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 1751  
                              _Button_Baseline_Update 0EDF                                         ?_LED_0_SetLow 0070  
                                       ?_LED_1_SetLow 0070                                         ?_LED_2_SetLow 0070  
                         MTOUCH_Button_isPressed@name 0072                                  ??_EUSART_Receive_ISR 0071  
                          ??_MTOUCH_Sensor_wasSampled 0075  
